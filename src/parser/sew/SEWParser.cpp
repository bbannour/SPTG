
/*******************************************************************************
 * Copyright (c) 2016 CEA LIST.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *  Arnault Lapitre (CEA LIST) arnault.lapitre@cea.fr
 *   - Initial API and Implementation
 *******************************************************************************/
	
/* parser/listener/visitor header section */


// Generated from SEWParser.g4 by ANTLR 4.13.2

/* parser precinclude section */

	#include <map>
	#include <string>
	
	#include <common/BF.h>
	#include <common/Element.h>
	#include <common/NamedElement.h>
		
	#include <fml/common/LocationElement.h>
	
	#include <fml/expression/AvmCode.h>
	#include <fml/expression/BuiltinArray.h>
	#include <fml/expression/ExpressionConstructor.h>
	#include <fml/expression/StatementConstructor.h>
	
	#include <fml/operator/Operator.h>
	#include <fml/operator/OperatorManager.h>
	
	#include <fml/workflow/Query.h>
	#include <fml/workflow/UniFormIdentifier.h>
	
	#include <fml/workflow/WObject.h>

	#include <parser/ParserUtil.h>




#include "SEWParser.h"


/* parser postinclude section */
#ifndef _WIN32
#pragma GCC diagnostic ignored "-Wunused-parameter"
#endif


using namespace antlrcpp;
using namespace sep;

using namespace antlr4;

namespace {

struct SEWParserStaticData final {
  SEWParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SEWParserStaticData(const SEWParserStaticData&) = delete;
  SEWParserStaticData(SEWParserStaticData&&) = delete;
  SEWParserStaticData& operator=(const SEWParserStaticData&) = delete;
  SEWParserStaticData& operator=(SEWParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag sewparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<SEWParserStaticData> sewparserParserStaticData = nullptr;

void sewparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (sewparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(sewparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<SEWParserStaticData>(
    std::vector<std::string>{
      "qualifiedNameID", "ufiString", "kw_public", "kw_static", "kw_final", 
      "kw_reference", "kw_buffered", "kw_volatile", "kw_form", "kw_endform", 
      "kw_prototype", "kw_endprototype", "kw_as", "kw_is", "favmProlog", 
      "form_grammar", "aWorkflow", "aWorkflowObject", "formHEADER", "formBODY", 
      "formDECL", "aNormalForm", "aWObject", "aForm", "aPrototype", "aComponent", 
      "aSequenceComponent", "aWSequence", "aWProperty", "anAssignOp", "aWPropertyValue", 
      "aReference", "tagProgram", "avmProgram", "anOperator", "aSymbolOperator", 
      "anAtom", "anArray", "aList", "expression_invoke", "expression", "conditionalExpression", 
      "conditionalOrExpression", "conditionalAndExpression", "bitwiseOrExpression", 
      "bitwiseXorExpression", "bitwiseAndExpression", "equalityExpression", 
      "equalOp", "relationalExpression", "relationalOp", "shiftExpression", 
      "shiftOp", "additiveExpression", "additiveOp", "multiplicativeExpression", 
      "multiplicativeOp", "unaryExpression", "literal"
    },
    std::vector<std::string>{
      "", "", "'version:'", "'public'", "'final'", "'static'", "'volatile'", 
      "'buffered'", "'reference'", "'meta'", "'form'", "'endform'", "'prototype'", 
      "'endprototype'", "'section'", "'endsection'", "'provided'", "'activity'", 
      "'from'", "'as'", "'is'", "'to'", "'true'", "'false'", "'@'", "'+'", 
      "'-'", "'%'", "'*'", "'/'", "'**'", "':='", "'<=<'", "'^=<'", "'^=>'", 
      "'>=>'", "'='", "'&='", "'|='", "'^='", "'~='", "'+='", "'-='", "'*='", 
      "'/='", "'%='", "'=='", "'!='", "'==='", "'=/='", "'>'", "'>='", "'<'", 
      "'<='", "'&'", "'|'", "'^'", "'~'", "'<<'", "'>>'", "'&&'", "'||'", 
      "'!'", "'('", "')'", "'(:'", "'['", "']'", "'{'", "'}'", "'${'", "'<%'", 
      "'%>'", "','", "';'", "':'", "'::'", "'.'", "'\\u003F'", "'>:'", "'->'", 
      "'|i|'", "'|~|'", "'|a|'", "'|and|'", "'|or|'", "'|,|'", "'|x|'", 
      "'|xor|'", "'|/\\|'", "'|>|'", "'|<|'", "'|;|'", "'|/;|'", "'|;;|'", 
      "'@public'", "'@static'", "'@final'", "'@volatile'", "'@reference'", 
      "'@ufi'", "'@name'", "'@type'", "'@design'", "'@diversity'", "'@favm'", 
      "'@sew'"
    },
    std::vector<std::string>{
      "", "DUMMY", "Version", "Public", "Final", "Static", "Volatile", "Buffered", 
      "Reference", "Meta", "Form", "Endform", "Prototype", "Endprototype", 
      "Section", "Endsection", "Provided", "Activity", "From", "As", "Is", 
      "To", "True", "False", "AT", "PLUS", "MINUS", "MOD", "MULT", "DIV", 
      "POW", "ASSIGN", "PUSH", "ASSIGN_TOP", "TOP", "POP", "EQ", "BANDEQ", 
      "BOREQ", "BXOREQ", "BNOTEQ", "PLUSEQ", "MINUSEQ", "MULTEQ", "DIVEQ", 
      "MODEQ", "EQEQ", "NEQ", "SEQ", "NSEQ", "GT", "GTE", "LT_", "LTE", 
      "BAND", "BOR", "BXOR", "BNOT", "LSHIFT", "RSHIFT", "LAND", "LOR", 
      "LNOT", "LPAREN", "RPAREN", "LPAREN_INVOKE", "LBRACK", "RBRACK", "LCURLY", 
      "RCURLY", "LPROG", "LGENERIC", "RGENERIC", "COMMA", "SEMI", "COLON", 
      "COLON2", "DOT", "QUESTION", "GT_COLON", "ARROW", "INTERLEAVING", 
      "PARTIAL_ORDER", "ASYNC", "STRONG_SYNC", "WEAK_SYNC", "PARALLEL", 
      "PRODUCT", "EXCLUSIVE", "NONDETERMINISM", "PRIOR_GT", "PRIOR_LT", 
      "SEQUENCE", "SEQUENCE_SIDE", "SEQUENCE_WEAK", "Attr_PUBLIC", "Attr_STATIC", 
      "Attr_FINAL", "Attr_VOLATILE", "Attr_REFERENCE", "Attr_UFI", "Attr_NAME", 
      "Attr_TYPE", "Attr_DESIGN", "Attr_DIVERSITY", "Attr_FAVM", "Attr_SEW", 
      "AtLeftValueIdentifier", "FloatingPointNumber", "IntegerNumber", "CharacterLiteral", 
      "DoubleQuotedString", "SingleQuotedString", "Identifier", "COMMENT_SINGLE_LINE", 
      "COMMENT_MULTI_LINE", "COMMENT_MULTI_LINE_2", "WHITESPACE"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,117,1084,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
  	3,0,130,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,142,8,0,1,0,5,
  	0,145,8,0,10,0,12,0,148,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  	1,3,1,161,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,186,8,1,1,1,1,1,1,1,1,1,1,1,5,
  	1,193,8,1,10,1,12,1,196,9,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,
  	6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
  	1,14,1,14,1,14,1,14,1,14,3,14,229,8,14,1,14,1,14,1,14,1,14,3,14,235,8,
  	14,5,14,237,8,14,10,14,12,14,240,9,14,1,14,1,14,1,15,3,15,245,8,15,1,
  	15,1,15,1,15,1,15,1,15,1,15,3,15,253,8,15,1,15,1,15,1,16,1,16,1,17,1,
  	17,1,17,3,17,262,8,17,1,17,1,17,1,17,1,17,1,17,3,17,269,8,17,1,17,1,17,
  	1,17,1,17,5,17,275,8,17,10,17,12,17,278,9,17,1,17,1,17,1,17,1,18,1,18,
  	1,18,1,18,1,18,1,18,3,18,289,8,18,1,18,1,18,3,18,293,8,18,1,18,1,18,1,
  	18,1,19,1,19,1,19,1,19,5,19,302,8,19,10,19,12,19,305,9,19,1,20,1,20,1,
  	20,3,20,310,8,20,1,20,1,20,1,21,1,21,1,21,3,21,317,8,21,1,22,1,22,1,22,
  	3,22,322,8,22,1,22,1,22,1,22,1,22,1,22,3,22,329,8,22,1,22,1,22,1,22,1,
  	22,5,22,335,8,22,10,22,12,22,338,9,22,1,22,1,22,1,22,1,23,1,23,1,23,1,
  	23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,25,3,25,365,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,
  	26,1,26,1,26,3,26,376,8,26,1,27,1,27,1,27,1,27,1,27,1,27,3,27,384,8,27,
  	1,27,1,27,1,27,1,27,5,27,390,8,27,10,27,12,27,393,9,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,5,27,403,8,27,10,27,12,27,406,9,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,5,27,415,8,27,10,27,12,27,418,9,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,5,27,427,8,27,10,27,12,27,430,9,27,1,27,1,27,
  	1,27,1,27,3,27,436,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	3,28,503,8,28,1,28,1,28,3,28,507,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,
  	29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
  	29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
  	29,1,29,1,29,1,29,3,29,547,8,29,1,30,1,30,1,30,1,30,1,30,1,30,5,30,555,
  	8,30,10,30,12,30,558,9,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,30,3,30,613,8,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,
  	1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,5,33,632,8,33,10,33,12,33,635,
  	9,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,3,33,651,8,33,1,34,1,34,1,34,1,34,1,34,1,34,3,34,659,8,34,1,35,1,
  	35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
  	35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
  	35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
  	35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
  	35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
  	35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
  	35,3,35,747,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
  	36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
  	36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
  	36,1,36,1,36,3,36,790,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,799,
  	8,37,10,37,12,37,802,9,37,3,37,804,8,37,1,37,1,37,1,37,1,38,1,38,1,38,
  	1,38,1,38,1,38,1,38,5,38,816,8,38,10,38,12,38,819,9,38,3,38,821,8,38,
  	1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,834,8,39,
  	1,39,1,39,1,39,5,39,839,8,39,10,39,12,39,842,9,39,1,39,1,39,1,39,1,39,
  	1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,860,
  	8,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
  	3,41,875,8,41,1,42,1,42,1,42,1,42,1,42,1,42,5,42,883,8,42,10,42,12,42,
  	886,9,42,1,43,1,43,1,43,1,43,1,43,1,43,5,43,894,8,43,10,43,12,43,897,
  	9,43,1,44,1,44,1,44,1,44,1,44,1,44,5,44,905,8,44,10,44,12,44,908,9,44,
  	1,45,1,45,1,45,1,45,1,45,1,45,5,45,916,8,45,10,45,12,45,919,9,45,1,46,
  	1,46,1,46,1,46,1,46,1,46,5,46,927,8,46,10,46,12,46,930,9,46,1,47,1,47,
  	1,47,1,47,1,47,1,47,3,47,938,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
  	1,48,1,48,1,48,3,48,950,8,48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,958,8,
  	49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,968,8,50,1,51,1,51,1,
  	51,1,51,1,51,1,51,5,51,976,8,51,10,51,12,51,979,9,51,1,52,1,52,1,52,1,
  	52,3,52,985,8,52,1,53,1,53,1,53,1,53,1,53,1,53,5,53,993,8,53,10,53,12,
  	53,996,9,53,1,54,1,54,1,54,1,54,3,54,1002,8,54,1,55,1,55,1,55,1,55,1,
  	55,1,55,5,55,1010,8,55,10,55,12,55,1013,9,55,1,56,1,56,1,56,1,56,1,56,
  	1,56,3,56,1021,8,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
  	1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,1042,8,57,1,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1082,8,58,1,58,0,0,59,0,
  	2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
  	52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
  	98,100,102,104,106,108,110,112,114,116,0,1,1,0,104,106,1245,0,129,1,0,
  	0,0,2,160,1,0,0,0,4,199,1,0,0,0,6,201,1,0,0,0,8,203,1,0,0,0,10,205,1,
  	0,0,0,12,207,1,0,0,0,14,209,1,0,0,0,16,211,1,0,0,0,18,213,1,0,0,0,20,
  	215,1,0,0,0,22,217,1,0,0,0,24,219,1,0,0,0,26,221,1,0,0,0,28,223,1,0,0,
  	0,30,244,1,0,0,0,32,256,1,0,0,0,34,258,1,0,0,0,36,282,1,0,0,0,38,297,
  	1,0,0,0,40,306,1,0,0,0,42,316,1,0,0,0,44,318,1,0,0,0,46,342,1,0,0,0,48,
  	347,1,0,0,0,50,364,1,0,0,0,52,375,1,0,0,0,54,435,1,0,0,0,56,502,1,0,0,
  	0,58,546,1,0,0,0,60,612,1,0,0,0,62,614,1,0,0,0,64,618,1,0,0,0,66,650,
  	1,0,0,0,68,658,1,0,0,0,70,746,1,0,0,0,72,789,1,0,0,0,74,791,1,0,0,0,76,
  	808,1,0,0,0,78,825,1,0,0,0,80,863,1,0,0,0,82,866,1,0,0,0,84,876,1,0,0,
  	0,86,887,1,0,0,0,88,898,1,0,0,0,90,909,1,0,0,0,92,920,1,0,0,0,94,931,
  	1,0,0,0,96,949,1,0,0,0,98,951,1,0,0,0,100,967,1,0,0,0,102,969,1,0,0,0,
  	104,984,1,0,0,0,106,986,1,0,0,0,108,1001,1,0,0,0,110,1003,1,0,0,0,112,
  	1020,1,0,0,0,114,1041,1,0,0,0,116,1081,1,0,0,0,118,119,5,10,0,0,119,120,
  	5,76,0,0,120,130,6,0,-1,0,121,122,5,9,0,0,122,123,5,76,0,0,123,130,6,
  	0,-1,0,124,125,5,113,0,0,125,126,5,76,0,0,126,130,6,0,-1,0,127,128,5,
  	76,0,0,128,130,6,0,-1,0,129,118,1,0,0,0,129,121,1,0,0,0,129,124,1,0,0,
  	0,129,127,1,0,0,0,129,130,1,0,0,0,130,131,1,0,0,0,131,132,5,113,0,0,132,
  	146,6,0,-1,0,133,141,5,77,0,0,134,142,5,113,0,0,135,142,3,4,2,0,136,142,
  	3,6,3,0,137,142,3,8,4,0,138,142,3,14,7,0,139,142,3,10,5,0,140,142,3,12,
  	6,0,141,134,1,0,0,0,141,135,1,0,0,0,141,136,1,0,0,0,141,137,1,0,0,0,141,
  	138,1,0,0,0,141,139,1,0,0,0,141,140,1,0,0,0,142,143,1,0,0,0,143,145,6,
  	0,-1,0,144,133,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,
  	0,147,1,1,0,0,0,148,146,1,0,0,0,149,150,5,10,0,0,150,151,5,76,0,0,151,
  	161,6,1,-1,0,152,153,5,9,0,0,153,154,5,76,0,0,154,161,6,1,-1,0,155,156,
  	5,113,0,0,156,157,5,76,0,0,157,161,6,1,-1,0,158,159,5,76,0,0,159,161,
  	6,1,-1,0,160,149,1,0,0,0,160,152,1,0,0,0,160,155,1,0,0,0,160,158,1,0,
  	0,0,160,161,1,0,0,0,161,162,1,0,0,0,162,163,5,113,0,0,163,194,6,1,-1,
  	0,164,185,5,77,0,0,165,166,5,113,0,0,166,186,6,1,-1,0,167,168,3,4,2,0,
  	168,169,6,1,-1,0,169,186,1,0,0,0,170,171,3,6,3,0,171,172,6,1,-1,0,172,
  	186,1,0,0,0,173,174,3,8,4,0,174,175,6,1,-1,0,175,186,1,0,0,0,176,177,
  	3,14,7,0,177,178,6,1,-1,0,178,186,1,0,0,0,179,180,3,10,5,0,180,181,6,
  	1,-1,0,181,186,1,0,0,0,182,183,3,12,6,0,183,184,6,1,-1,0,184,186,1,0,
  	0,0,185,165,1,0,0,0,185,167,1,0,0,0,185,170,1,0,0,0,185,173,1,0,0,0,185,
  	176,1,0,0,0,185,179,1,0,0,0,185,182,1,0,0,0,186,193,1,0,0,0,187,188,5,
  	66,0,0,188,189,3,66,33,0,189,190,5,67,0,0,190,191,6,1,-1,0,191,193,1,
  	0,0,0,192,164,1,0,0,0,192,187,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,
  	194,195,1,0,0,0,195,197,1,0,0,0,196,194,1,0,0,0,197,198,6,1,-1,0,198,
  	3,1,0,0,0,199,200,5,3,0,0,200,5,1,0,0,0,201,202,5,5,0,0,202,7,1,0,0,0,
  	203,204,5,4,0,0,204,9,1,0,0,0,205,206,5,8,0,0,206,11,1,0,0,0,207,208,
  	5,7,0,0,208,13,1,0,0,0,209,210,5,6,0,0,210,15,1,0,0,0,211,212,5,10,0,
  	0,212,17,1,0,0,0,213,214,5,11,0,0,214,19,1,0,0,0,215,216,5,12,0,0,216,
  	21,1,0,0,0,217,218,5,13,0,0,218,23,1,0,0,0,219,220,5,19,0,0,220,25,1,
  	0,0,0,221,222,5,20,0,0,222,27,1,0,0,0,223,224,7,0,0,0,224,225,5,52,0,
  	0,225,238,5,113,0,0,226,228,5,73,0,0,227,229,5,2,0,0,228,227,1,0,0,0,
  	228,229,1,0,0,0,229,234,1,0,0,0,230,235,5,108,0,0,231,235,3,0,0,0,232,
  	235,5,111,0,0,233,235,5,112,0,0,234,230,1,0,0,0,234,231,1,0,0,0,234,232,
  	1,0,0,0,234,233,1,0,0,0,235,237,1,0,0,0,236,226,1,0,0,0,237,240,1,0,0,
  	0,238,236,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,238,1,0,0,0,241,
  	242,5,79,0,0,242,29,1,0,0,0,243,245,3,28,14,0,244,243,1,0,0,0,244,245,
  	1,0,0,0,245,252,1,0,0,0,246,247,3,42,21,0,247,248,6,15,-1,0,248,253,1,
  	0,0,0,249,250,3,32,16,0,250,251,6,15,-1,0,251,253,1,0,0,0,252,246,1,0,
  	0,0,252,249,1,0,0,0,253,254,1,0,0,0,254,255,6,15,-1,0,255,31,1,0,0,0,
  	256,257,3,34,17,0,257,33,1,0,0,0,258,259,3,0,0,0,259,261,6,17,-1,0,260,
  	262,3,0,0,0,261,260,1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,263,268,6,
  	17,-1,0,264,265,5,111,0,0,265,269,6,17,-1,0,266,267,5,112,0,0,267,269,
  	6,17,-1,0,268,264,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,270,1,0,
  	0,0,270,276,5,68,0,0,271,272,3,50,25,0,272,273,6,17,-1,0,273,275,1,0,
  	0,0,274,271,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,
  	279,1,0,0,0,278,276,1,0,0,0,279,280,6,17,-1,0,280,281,5,69,0,0,281,35,
  	1,0,0,0,282,283,3,0,0,0,283,288,6,18,-1,0,284,285,5,111,0,0,285,289,6,
  	18,-1,0,286,287,5,112,0,0,287,289,6,18,-1,0,288,284,1,0,0,0,288,286,1,
  	0,0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,292,3,24,12,0,291,293,5,54,
  	0,0,292,291,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,295,3,0,0,0,295,
  	296,6,18,-1,0,296,37,1,0,0,0,297,303,3,26,13,0,298,299,3,50,25,0,299,
  	300,6,19,-1,0,300,302,1,0,0,0,301,298,1,0,0,0,302,305,1,0,0,0,303,301,
  	1,0,0,0,303,304,1,0,0,0,304,39,1,0,0,0,305,303,1,0,0,0,306,307,3,36,18,
  	0,307,309,6,20,-1,0,308,310,3,38,19,0,309,308,1,0,0,0,309,310,1,0,0,0,
  	310,311,1,0,0,0,311,312,6,20,-1,0,312,41,1,0,0,0,313,317,3,46,23,0,314,
  	317,3,48,24,0,315,317,3,44,22,0,316,313,1,0,0,0,316,314,1,0,0,0,316,315,
  	1,0,0,0,317,43,1,0,0,0,318,319,3,0,0,0,319,321,6,22,-1,0,320,322,3,0,
  	0,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,328,6,22,-1,0,
  	324,325,5,111,0,0,325,329,6,22,-1,0,326,327,5,112,0,0,327,329,6,22,-1,
  	0,328,324,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,0,330,
  	336,5,68,0,0,331,332,3,50,25,0,332,333,6,22,-1,0,333,335,1,0,0,0,334,
  	331,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,339,1,
  	0,0,0,338,336,1,0,0,0,339,340,6,22,-1,0,340,341,5,69,0,0,341,45,1,0,0,
  	0,342,343,3,16,8,0,343,344,3,40,20,0,344,345,6,23,-1,0,345,346,3,18,9,
  	0,346,47,1,0,0,0,347,348,3,20,10,0,348,349,3,40,20,0,349,350,6,24,-1,
  	0,350,351,3,22,11,0,351,49,1,0,0,0,352,353,3,56,28,0,353,354,6,25,-1,
  	0,354,365,1,0,0,0,355,356,3,54,27,0,356,357,6,25,-1,0,357,365,1,0,0,0,
  	358,359,3,42,21,0,359,360,6,25,-1,0,360,365,1,0,0,0,361,362,3,64,32,0,
  	362,363,6,25,-1,0,363,365,1,0,0,0,364,352,1,0,0,0,364,355,1,0,0,0,364,
  	358,1,0,0,0,364,361,1,0,0,0,365,51,1,0,0,0,366,367,3,56,28,0,367,368,
  	6,26,-1,0,368,376,1,0,0,0,369,370,3,42,21,0,370,371,6,26,-1,0,371,376,
  	1,0,0,0,372,373,3,64,32,0,373,374,6,26,-1,0,374,376,1,0,0,0,375,366,1,
  	0,0,0,375,369,1,0,0,0,375,372,1,0,0,0,376,53,1,0,0,0,377,378,5,113,0,
  	0,378,383,6,27,-1,0,379,380,5,111,0,0,380,384,6,27,-1,0,381,382,5,112,
  	0,0,382,384,6,27,-1,0,383,379,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,
  	384,385,1,0,0,0,385,391,5,66,0,0,386,387,3,52,26,0,387,388,6,27,-1,0,
  	388,390,1,0,0,0,389,386,1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,0,391,392,
  	1,0,0,0,392,394,1,0,0,0,393,391,1,0,0,0,394,395,6,27,-1,0,395,436,5,67,
  	0,0,396,397,5,113,0,0,397,398,5,75,0,0,398,404,6,27,-1,0,399,400,3,52,
  	26,0,400,401,6,27,-1,0,401,403,1,0,0,0,402,399,1,0,0,0,403,406,1,0,0,
  	0,404,402,1,0,0,0,404,405,1,0,0,0,405,407,1,0,0,0,406,404,1,0,0,0,407,
  	436,6,27,-1,0,408,409,5,107,0,0,409,410,5,75,0,0,410,416,6,27,-1,0,411,
  	412,3,52,26,0,412,413,6,27,-1,0,413,415,1,0,0,0,414,411,1,0,0,0,415,418,
  	1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,0,418,416,1,0,0,
  	0,419,436,6,27,-1,0,420,421,5,14,0,0,421,422,5,113,0,0,422,428,6,27,-1,
  	0,423,424,3,50,25,0,424,425,6,27,-1,0,425,427,1,0,0,0,426,423,1,0,0,0,
  	427,430,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,428,
  	1,0,0,0,431,432,6,27,-1,0,432,433,5,15,0,0,433,434,4,27,0,1,434,436,5,
  	113,0,0,435,377,1,0,0,0,435,396,1,0,0,0,435,408,1,0,0,0,435,420,1,0,0,
  	0,436,55,1,0,0,0,437,438,5,100,0,0,438,439,5,36,0,0,439,440,3,60,30,0,
  	440,441,6,28,-1,0,441,503,1,0,0,0,442,443,5,101,0,0,443,444,5,36,0,0,
  	444,445,3,60,30,0,445,446,6,28,-1,0,446,503,1,0,0,0,447,448,5,102,0,0,
  	448,449,5,36,0,0,449,450,3,60,30,0,450,451,6,28,-1,0,451,503,1,0,0,0,
  	452,453,5,103,0,0,453,454,5,36,0,0,454,455,3,60,30,0,455,456,6,28,-1,
  	0,456,503,1,0,0,0,457,458,5,95,0,0,458,459,5,36,0,0,459,460,3,60,30,0,
  	460,461,6,28,-1,0,461,503,1,0,0,0,462,463,5,96,0,0,463,464,5,36,0,0,464,
  	465,3,60,30,0,465,466,6,28,-1,0,466,503,1,0,0,0,467,468,5,97,0,0,468,
  	469,5,36,0,0,469,470,3,60,30,0,470,471,6,28,-1,0,471,503,1,0,0,0,472,
  	473,5,98,0,0,473,474,5,36,0,0,474,475,3,60,30,0,475,476,6,28,-1,0,476,
  	503,1,0,0,0,477,478,5,99,0,0,478,479,5,36,0,0,479,480,3,60,30,0,480,481,
  	6,28,-1,0,481,503,1,0,0,0,482,483,5,10,0,0,483,484,3,58,29,0,484,485,
  	3,60,30,0,485,486,6,28,-1,0,486,503,1,0,0,0,487,488,5,9,0,0,488,489,3,
  	58,29,0,489,490,3,60,30,0,490,491,6,28,-1,0,491,503,1,0,0,0,492,493,5,
  	107,0,0,493,494,3,58,29,0,494,495,3,60,30,0,495,496,6,28,-1,0,496,503,
  	1,0,0,0,497,498,5,113,0,0,498,499,3,58,29,0,499,500,3,60,30,0,500,501,
  	6,28,-1,0,501,503,1,0,0,0,502,437,1,0,0,0,502,442,1,0,0,0,502,447,1,0,
  	0,0,502,452,1,0,0,0,502,457,1,0,0,0,502,462,1,0,0,0,502,467,1,0,0,0,502,
  	472,1,0,0,0,502,477,1,0,0,0,502,482,1,0,0,0,502,487,1,0,0,0,502,492,1,
  	0,0,0,502,497,1,0,0,0,503,504,1,0,0,0,504,506,6,28,-1,0,505,507,5,74,
  	0,0,506,505,1,0,0,0,506,507,1,0,0,0,507,57,1,0,0,0,508,509,5,31,0,0,509,
  	547,6,29,-1,0,510,511,5,36,0,0,511,547,6,29,-1,0,512,513,5,46,0,0,513,
  	547,6,29,-1,0,514,515,5,47,0,0,515,547,6,29,-1,0,516,517,5,48,0,0,517,
  	547,6,29,-1,0,518,519,5,49,0,0,519,547,6,29,-1,0,520,521,5,37,0,0,521,
  	547,6,29,-1,0,522,523,5,38,0,0,523,547,6,29,-1,0,524,525,5,39,0,0,525,
  	547,6,29,-1,0,526,527,5,40,0,0,527,547,6,29,-1,0,528,529,5,41,0,0,529,
  	547,6,29,-1,0,530,531,5,42,0,0,531,547,6,29,-1,0,532,533,5,43,0,0,533,
  	547,6,29,-1,0,534,535,5,44,0,0,535,547,6,29,-1,0,536,537,5,45,0,0,537,
  	547,6,29,-1,0,538,539,5,50,0,0,539,547,6,29,-1,0,540,541,5,51,0,0,541,
  	547,6,29,-1,0,542,543,5,52,0,0,543,547,6,29,-1,0,544,545,5,53,0,0,545,
  	547,6,29,-1,0,546,508,1,0,0,0,546,510,1,0,0,0,546,512,1,0,0,0,546,514,
  	1,0,0,0,546,516,1,0,0,0,546,518,1,0,0,0,546,520,1,0,0,0,546,522,1,0,0,
  	0,546,524,1,0,0,0,546,526,1,0,0,0,546,528,1,0,0,0,546,530,1,0,0,0,546,
  	532,1,0,0,0,546,534,1,0,0,0,546,536,1,0,0,0,546,538,1,0,0,0,546,540,1,
  	0,0,0,546,542,1,0,0,0,546,544,1,0,0,0,547,59,1,0,0,0,548,549,5,70,0,0,
  	549,550,3,68,34,0,550,556,6,30,-1,0,551,552,3,66,33,0,552,553,6,30,-1,
  	0,553,555,1,0,0,0,554,551,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,
  	557,1,0,0,0,557,559,1,0,0,0,558,556,1,0,0,0,559,560,5,69,0,0,560,561,
  	6,30,-1,0,561,613,1,0,0,0,562,563,5,63,0,0,563,564,3,80,40,0,564,565,
  	5,64,0,0,565,566,6,30,-1,0,566,613,1,0,0,0,567,568,3,78,39,0,568,569,
  	6,30,-1,0,569,613,1,0,0,0,570,571,5,22,0,0,571,613,6,30,-1,0,572,573,
  	5,23,0,0,573,613,6,30,-1,0,574,575,5,26,0,0,575,576,5,109,0,0,576,613,
  	6,30,-1,0,577,578,5,25,0,0,578,579,5,109,0,0,579,613,6,30,-1,0,580,581,
  	5,109,0,0,581,613,6,30,-1,0,582,583,5,26,0,0,583,584,5,108,0,0,584,613,
  	6,30,-1,0,585,586,5,25,0,0,586,587,5,108,0,0,587,613,6,30,-1,0,588,589,
  	5,108,0,0,589,613,6,30,-1,0,590,591,5,110,0,0,591,613,6,30,-1,0,592,593,
  	5,111,0,0,593,613,6,30,-1,0,594,595,5,112,0,0,595,613,6,30,-1,0,596,597,
  	3,2,1,0,597,598,6,30,-1,0,598,613,1,0,0,0,599,600,5,54,0,0,600,601,3,
  	2,1,0,601,602,6,30,-1,0,602,613,1,0,0,0,603,604,3,70,35,0,604,605,6,30,
  	-1,0,605,613,1,0,0,0,606,607,3,74,37,0,607,608,6,30,-1,0,608,613,1,0,
  	0,0,609,610,3,76,38,0,610,611,6,30,-1,0,611,613,1,0,0,0,612,548,1,0,0,
  	0,612,562,1,0,0,0,612,567,1,0,0,0,612,570,1,0,0,0,612,572,1,0,0,0,612,
  	574,1,0,0,0,612,577,1,0,0,0,612,580,1,0,0,0,612,582,1,0,0,0,612,585,1,
  	0,0,0,612,588,1,0,0,0,612,590,1,0,0,0,612,592,1,0,0,0,612,594,1,0,0,0,
  	612,596,1,0,0,0,612,599,1,0,0,0,612,603,1,0,0,0,612,606,1,0,0,0,612,609,
  	1,0,0,0,613,61,1,0,0,0,614,615,5,54,0,0,615,616,3,2,1,0,616,617,6,31,
  	-1,0,617,63,1,0,0,0,618,619,5,107,0,0,619,620,5,68,0,0,620,621,3,66,33,
  	0,621,622,6,32,-1,0,622,623,6,32,-1,0,623,624,5,69,0,0,624,65,1,0,0,0,
  	625,626,5,70,0,0,626,627,3,68,34,0,627,633,6,33,-1,0,628,629,3,66,33,
  	0,629,630,6,33,-1,0,630,632,1,0,0,0,631,628,1,0,0,0,632,635,1,0,0,0,633,
  	631,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,0,635,633,1,0,0,0,636,637,5,
  	69,0,0,637,638,6,33,-1,0,638,651,1,0,0,0,639,640,5,63,0,0,640,641,3,80,
  	40,0,641,642,5,64,0,0,642,643,6,33,-1,0,643,651,1,0,0,0,644,645,3,78,
  	39,0,645,646,6,33,-1,0,646,651,1,0,0,0,647,648,3,72,36,0,648,649,6,33,
  	-1,0,649,651,1,0,0,0,650,625,1,0,0,0,650,639,1,0,0,0,650,644,1,0,0,0,
  	650,647,1,0,0,0,651,67,1,0,0,0,652,653,3,70,35,0,653,654,6,34,-1,0,654,
  	659,1,0,0,0,655,656,4,34,1,0,656,657,5,113,0,0,657,659,6,34,-1,0,658,
  	652,1,0,0,0,658,655,1,0,0,0,659,69,1,0,0,0,660,661,5,25,0,0,661,747,6,
  	35,-1,0,662,663,5,26,0,0,663,747,6,35,-1,0,664,665,5,28,0,0,665,747,6,
  	35,-1,0,666,667,5,29,0,0,667,747,6,35,-1,0,668,669,5,27,0,0,669,747,6,
  	35,-1,0,670,671,5,30,0,0,671,747,6,35,-1,0,672,673,5,36,0,0,673,747,6,
  	35,-1,0,674,675,5,46,0,0,675,747,6,35,-1,0,676,677,5,47,0,0,677,747,6,
  	35,-1,0,678,679,5,48,0,0,679,747,6,35,-1,0,680,681,5,49,0,0,681,747,6,
  	35,-1,0,682,683,5,50,0,0,683,747,6,35,-1,0,684,685,5,51,0,0,685,747,6,
  	35,-1,0,686,687,5,52,0,0,687,747,6,35,-1,0,688,689,5,53,0,0,689,747,6,
  	35,-1,0,690,691,5,57,0,0,691,747,6,35,-1,0,692,693,5,54,0,0,693,747,6,
  	35,-1,0,694,695,5,55,0,0,695,747,6,35,-1,0,696,697,5,56,0,0,697,747,6,
  	35,-1,0,698,699,5,58,0,0,699,747,6,35,-1,0,700,701,5,59,0,0,701,747,6,
  	35,-1,0,702,703,5,62,0,0,703,747,6,35,-1,0,704,705,5,60,0,0,705,747,6,
  	35,-1,0,706,707,5,61,0,0,707,747,6,35,-1,0,708,709,5,31,0,0,709,747,6,
  	35,-1,0,710,711,5,32,0,0,711,747,6,35,-1,0,712,713,5,35,0,0,713,747,6,
  	35,-1,0,714,715,5,34,0,0,715,747,6,35,-1,0,716,717,5,33,0,0,717,747,6,
  	35,-1,0,718,719,5,92,0,0,719,747,6,35,-1,0,720,721,5,93,0,0,721,747,6,
  	35,-1,0,722,723,5,94,0,0,723,747,6,35,-1,0,724,725,5,81,0,0,725,747,6,
  	35,-1,0,726,727,5,82,0,0,727,747,6,35,-1,0,728,729,5,88,0,0,729,747,6,
  	35,-1,0,730,731,5,89,0,0,731,747,6,35,-1,0,732,733,5,90,0,0,733,747,6,
  	35,-1,0,734,735,5,91,0,0,735,747,6,35,-1,0,736,737,5,86,0,0,737,747,6,
  	35,-1,0,738,739,5,87,0,0,739,747,6,35,-1,0,740,741,5,83,0,0,741,747,6,
  	35,-1,0,742,743,5,84,0,0,743,747,6,35,-1,0,744,745,5,85,0,0,745,747,6,
  	35,-1,0,746,660,1,0,0,0,746,662,1,0,0,0,746,664,1,0,0,0,746,666,1,0,0,
  	0,746,668,1,0,0,0,746,670,1,0,0,0,746,672,1,0,0,0,746,674,1,0,0,0,746,
  	676,1,0,0,0,746,678,1,0,0,0,746,680,1,0,0,0,746,682,1,0,0,0,746,684,1,
  	0,0,0,746,686,1,0,0,0,746,688,1,0,0,0,746,690,1,0,0,0,746,692,1,0,0,0,
  	746,694,1,0,0,0,746,696,1,0,0,0,746,698,1,0,0,0,746,700,1,0,0,0,746,702,
  	1,0,0,0,746,704,1,0,0,0,746,706,1,0,0,0,746,708,1,0,0,0,746,710,1,0,0,
  	0,746,712,1,0,0,0,746,714,1,0,0,0,746,716,1,0,0,0,746,718,1,0,0,0,746,
  	720,1,0,0,0,746,722,1,0,0,0,746,724,1,0,0,0,746,726,1,0,0,0,746,728,1,
  	0,0,0,746,730,1,0,0,0,746,732,1,0,0,0,746,734,1,0,0,0,746,736,1,0,0,0,
  	746,738,1,0,0,0,746,740,1,0,0,0,746,742,1,0,0,0,746,744,1,0,0,0,747,71,
  	1,0,0,0,748,749,5,22,0,0,749,790,6,36,-1,0,750,751,5,23,0,0,751,790,6,
  	36,-1,0,752,753,5,26,0,0,753,754,5,109,0,0,754,790,6,36,-1,0,755,756,
  	5,25,0,0,756,757,5,109,0,0,757,790,6,36,-1,0,758,759,5,109,0,0,759,790,
  	6,36,-1,0,760,761,5,26,0,0,761,762,5,108,0,0,762,790,6,36,-1,0,763,764,
  	5,25,0,0,764,765,5,108,0,0,765,790,6,36,-1,0,766,767,5,108,0,0,767,790,
  	6,36,-1,0,768,769,5,110,0,0,769,790,6,36,-1,0,770,771,5,111,0,0,771,790,
  	6,36,-1,0,772,773,5,112,0,0,773,790,6,36,-1,0,774,775,3,2,1,0,775,776,
  	6,36,-1,0,776,790,1,0,0,0,777,778,3,62,31,0,778,779,6,36,-1,0,779,790,
  	1,0,0,0,780,781,3,70,35,0,781,782,6,36,-1,0,782,790,1,0,0,0,783,784,3,
  	74,37,0,784,785,6,36,-1,0,785,790,1,0,0,0,786,787,3,76,38,0,787,788,6,
  	36,-1,0,788,790,1,0,0,0,789,748,1,0,0,0,789,750,1,0,0,0,789,752,1,0,0,
  	0,789,755,1,0,0,0,789,758,1,0,0,0,789,760,1,0,0,0,789,763,1,0,0,0,789,
  	766,1,0,0,0,789,768,1,0,0,0,789,770,1,0,0,0,789,772,1,0,0,0,789,774,1,
  	0,0,0,789,777,1,0,0,0,789,780,1,0,0,0,789,783,1,0,0,0,789,786,1,0,0,0,
  	790,73,1,0,0,0,791,803,5,66,0,0,792,793,3,66,33,0,793,800,6,37,-1,0,794,
  	795,5,73,0,0,795,796,3,66,33,0,796,797,6,37,-1,0,797,799,1,0,0,0,798,
  	794,1,0,0,0,799,802,1,0,0,0,800,798,1,0,0,0,800,801,1,0,0,0,801,804,1,
  	0,0,0,802,800,1,0,0,0,803,792,1,0,0,0,803,804,1,0,0,0,804,805,1,0,0,0,
  	805,806,5,67,0,0,806,807,6,37,-1,0,807,75,1,0,0,0,808,820,5,68,0,0,809,
  	810,3,66,33,0,810,817,6,38,-1,0,811,812,5,73,0,0,812,813,3,66,33,0,813,
  	814,6,38,-1,0,814,816,1,0,0,0,815,811,1,0,0,0,816,819,1,0,0,0,817,815,
  	1,0,0,0,817,818,1,0,0,0,818,821,1,0,0,0,819,817,1,0,0,0,820,809,1,0,0,
  	0,820,821,1,0,0,0,821,822,1,0,0,0,822,823,5,69,0,0,823,824,6,38,-1,0,
  	824,77,1,0,0,0,825,826,5,65,0,0,826,827,3,114,57,0,827,833,6,39,-1,0,
  	828,829,5,113,0,0,829,834,6,39,-1,0,830,831,3,70,35,0,831,832,6,39,-1,
  	0,832,834,1,0,0,0,833,828,1,0,0,0,833,830,1,0,0,0,834,840,1,0,0,0,835,
  	836,3,80,40,0,836,837,6,39,-1,0,837,839,1,0,0,0,838,835,1,0,0,0,839,842,
  	1,0,0,0,840,838,1,0,0,0,840,841,1,0,0,0,841,859,1,0,0,0,842,840,1,0,0,
  	0,843,844,5,16,0,0,844,845,3,80,40,0,845,846,6,39,-1,0,846,860,1,0,0,
  	0,847,848,5,18,0,0,848,849,3,114,57,0,849,850,6,39,-1,0,850,860,1,0,0,
  	0,851,852,5,21,0,0,852,853,3,114,57,0,853,854,6,39,-1,0,854,860,1,0,0,
  	0,855,856,5,17,0,0,856,857,3,68,34,0,857,858,6,39,-1,0,858,860,1,0,0,
  	0,859,843,1,0,0,0,859,847,1,0,0,0,859,851,1,0,0,0,859,855,1,0,0,0,859,
  	860,1,0,0,0,860,861,1,0,0,0,861,862,5,64,0,0,862,79,1,0,0,0,863,864,3,
  	82,41,0,864,865,6,40,-1,0,865,81,1,0,0,0,866,867,3,84,42,0,867,874,6,
  	41,-1,0,868,869,5,78,0,0,869,870,3,80,40,0,870,871,5,75,0,0,871,872,3,
  	80,40,0,872,873,6,41,-1,0,873,875,1,0,0,0,874,868,1,0,0,0,874,875,1,0,
  	0,0,875,83,1,0,0,0,876,877,3,86,43,0,877,884,6,42,-1,0,878,879,5,61,0,
  	0,879,880,3,86,43,0,880,881,6,42,-1,0,881,883,1,0,0,0,882,878,1,0,0,0,
  	883,886,1,0,0,0,884,882,1,0,0,0,884,885,1,0,0,0,885,85,1,0,0,0,886,884,
  	1,0,0,0,887,888,3,88,44,0,888,895,6,43,-1,0,889,890,5,60,0,0,890,891,
  	3,88,44,0,891,892,6,43,-1,0,892,894,1,0,0,0,893,889,1,0,0,0,894,897,1,
  	0,0,0,895,893,1,0,0,0,895,896,1,0,0,0,896,87,1,0,0,0,897,895,1,0,0,0,
  	898,899,3,90,45,0,899,906,6,44,-1,0,900,901,5,55,0,0,901,902,3,90,45,
  	0,902,903,6,44,-1,0,903,905,1,0,0,0,904,900,1,0,0,0,905,908,1,0,0,0,906,
  	904,1,0,0,0,906,907,1,0,0,0,907,89,1,0,0,0,908,906,1,0,0,0,909,910,3,
  	92,46,0,910,917,6,45,-1,0,911,912,5,56,0,0,912,913,3,92,46,0,913,914,
  	6,45,-1,0,914,916,1,0,0,0,915,911,1,0,0,0,916,919,1,0,0,0,917,915,1,0,
  	0,0,917,918,1,0,0,0,918,91,1,0,0,0,919,917,1,0,0,0,920,921,3,94,47,0,
  	921,928,6,46,-1,0,922,923,5,54,0,0,923,924,3,94,47,0,924,925,6,46,-1,
  	0,925,927,1,0,0,0,926,922,1,0,0,0,927,930,1,0,0,0,928,926,1,0,0,0,928,
  	929,1,0,0,0,929,93,1,0,0,0,930,928,1,0,0,0,931,932,3,98,49,0,932,937,
  	6,47,-1,0,933,934,3,96,48,0,934,935,3,98,49,0,935,936,6,47,-1,0,936,938,
  	1,0,0,0,937,933,1,0,0,0,937,938,1,0,0,0,938,95,1,0,0,0,939,940,5,36,0,
  	0,940,950,6,48,-1,0,941,942,5,46,0,0,942,950,6,48,-1,0,943,944,5,47,0,
  	0,944,950,6,48,-1,0,945,946,5,48,0,0,946,950,6,48,-1,0,947,948,5,49,0,
  	0,948,950,6,48,-1,0,949,939,1,0,0,0,949,941,1,0,0,0,949,943,1,0,0,0,949,
  	945,1,0,0,0,949,947,1,0,0,0,950,97,1,0,0,0,951,952,3,102,51,0,952,957,
  	6,49,-1,0,953,954,3,100,50,0,954,955,3,102,51,0,955,956,6,49,-1,0,956,
  	958,1,0,0,0,957,953,1,0,0,0,957,958,1,0,0,0,958,99,1,0,0,0,959,960,5,
  	53,0,0,960,968,6,50,-1,0,961,962,5,51,0,0,962,968,6,50,-1,0,963,964,5,
  	52,0,0,964,968,6,50,-1,0,965,966,5,50,0,0,966,968,6,50,-1,0,967,959,1,
  	0,0,0,967,961,1,0,0,0,967,963,1,0,0,0,967,965,1,0,0,0,968,101,1,0,0,0,
  	969,970,3,106,53,0,970,977,6,51,-1,0,971,972,3,104,52,0,972,973,3,106,
  	53,0,973,974,6,51,-1,0,974,976,1,0,0,0,975,971,1,0,0,0,976,979,1,0,0,
  	0,977,975,1,0,0,0,977,978,1,0,0,0,978,103,1,0,0,0,979,977,1,0,0,0,980,
  	981,5,58,0,0,981,985,6,52,-1,0,982,983,5,59,0,0,983,985,6,52,-1,0,984,
  	980,1,0,0,0,984,982,1,0,0,0,985,105,1,0,0,0,986,987,3,110,55,0,987,994,
  	6,53,-1,0,988,989,3,108,54,0,989,990,3,110,55,0,990,991,6,53,-1,0,991,
  	993,1,0,0,0,992,988,1,0,0,0,993,996,1,0,0,0,994,992,1,0,0,0,994,995,1,
  	0,0,0,995,107,1,0,0,0,996,994,1,0,0,0,997,998,5,25,0,0,998,1002,6,54,
  	-1,0,999,1000,5,26,0,0,1000,1002,6,54,-1,0,1001,997,1,0,0,0,1001,999,
  	1,0,0,0,1002,109,1,0,0,0,1003,1004,3,114,57,0,1004,1011,6,55,-1,0,1005,
  	1006,3,112,56,0,1006,1007,3,114,57,0,1007,1008,6,55,-1,0,1008,1010,1,
  	0,0,0,1009,1005,1,0,0,0,1010,1013,1,0,0,0,1011,1009,1,0,0,0,1011,1012,
  	1,0,0,0,1012,111,1,0,0,0,1013,1011,1,0,0,0,1014,1015,5,28,0,0,1015,1021,
  	6,56,-1,0,1016,1017,5,29,0,0,1017,1021,6,56,-1,0,1018,1019,5,27,0,0,1019,
  	1021,6,56,-1,0,1020,1014,1,0,0,0,1020,1016,1,0,0,0,1020,1018,1,0,0,0,
  	1021,113,1,0,0,0,1022,1023,3,116,58,0,1023,1024,6,57,-1,0,1024,1042,1,
  	0,0,0,1025,1026,5,62,0,0,1026,1027,3,114,57,0,1027,1028,6,57,-1,0,1028,
  	1042,1,0,0,0,1029,1030,5,57,0,0,1030,1031,3,114,57,0,1031,1032,6,57,-1,
  	0,1032,1042,1,0,0,0,1033,1034,3,78,39,0,1034,1035,6,57,-1,0,1035,1042,
  	1,0,0,0,1036,1037,5,63,0,0,1037,1038,3,80,40,0,1038,1039,5,64,0,0,1039,
  	1040,6,57,-1,0,1040,1042,1,0,0,0,1041,1022,1,0,0,0,1041,1025,1,0,0,0,
  	1041,1029,1,0,0,0,1041,1033,1,0,0,0,1041,1036,1,0,0,0,1042,115,1,0,0,
  	0,1043,1044,5,22,0,0,1044,1082,6,58,-1,0,1045,1046,5,23,0,0,1046,1082,
  	6,58,-1,0,1047,1048,5,26,0,0,1048,1049,5,109,0,0,1049,1082,6,58,-1,0,
  	1050,1051,5,25,0,0,1051,1052,5,109,0,0,1052,1082,6,58,-1,0,1053,1054,
  	5,109,0,0,1054,1082,6,58,-1,0,1055,1056,5,26,0,0,1056,1057,5,108,0,0,
  	1057,1082,6,58,-1,0,1058,1059,5,25,0,0,1059,1060,5,108,0,0,1060,1082,
  	6,58,-1,0,1061,1062,5,108,0,0,1062,1082,6,58,-1,0,1063,1064,5,110,0,0,
  	1064,1082,6,58,-1,0,1065,1066,5,111,0,0,1066,1082,6,58,-1,0,1067,1068,
  	5,112,0,0,1068,1082,6,58,-1,0,1069,1070,3,2,1,0,1070,1071,6,58,-1,0,1071,
  	1082,1,0,0,0,1072,1073,3,62,31,0,1073,1074,6,58,-1,0,1074,1082,1,0,0,
  	0,1075,1076,3,74,37,0,1076,1077,6,58,-1,0,1077,1082,1,0,0,0,1078,1079,
  	3,76,38,0,1079,1080,6,58,-1,0,1080,1082,1,0,0,0,1081,1043,1,0,0,0,1081,
  	1045,1,0,0,0,1081,1047,1,0,0,0,1081,1050,1,0,0,0,1081,1053,1,0,0,0,1081,
  	1055,1,0,0,0,1081,1058,1,0,0,0,1081,1061,1,0,0,0,1081,1063,1,0,0,0,1081,
  	1065,1,0,0,0,1081,1067,1,0,0,0,1081,1069,1,0,0,0,1081,1072,1,0,0,0,1081,
  	1075,1,0,0,0,1081,1078,1,0,0,0,1082,117,1,0,0,0,66,129,141,146,160,185,
  	192,194,228,234,238,244,252,261,268,276,288,292,303,309,316,321,328,336,
  	364,375,383,391,404,416,428,435,502,506,546,556,612,633,650,658,746,789,
  	800,803,817,820,833,840,859,874,884,895,906,917,928,937,949,957,967,977,
  	984,994,1001,1011,1020,1041,1081
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  sewparserParserStaticData = std::move(staticData);
}

}

SEWParser::SEWParser(TokenStream *input) : SEWParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

SEWParser::SEWParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  SEWParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *sewparserParserStaticData->atn, sewparserParserStaticData->decisionToDFA, sewparserParserStaticData->sharedContextCache, options);
}

SEWParser::~SEWParser() {
  delete _interpreter;
}

const atn::ATN& SEWParser::getATN() const {
  return *sewparserParserStaticData->atn;
}

std::string SEWParser::getGrammarFileName() const {
  return "SEWParser.g4";
}

const std::vector<std::string>& SEWParser::getRuleNames() const {
  return sewparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& SEWParser::getVocabulary() const {
  return sewparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SEWParser::getSerializedATN() const {
  return sewparserParserStaticData->serializedATN;
}

/* parser definitions section */

//----------------- QualifiedNameIDContext ------------------------------------------------------------------

SEWParser::QualifiedNameIDContext::QualifiedNameIDContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> SEWParser::QualifiedNameIDContext::Identifier() {
  return getTokens(SEWParser::Identifier);
}

tree::TerminalNode* SEWParser::QualifiedNameIDContext::Identifier(size_t i) {
  return getToken(SEWParser::Identifier, i);
}

tree::TerminalNode* SEWParser::QualifiedNameIDContext::COLON2() {
  return getToken(SEWParser::COLON2, 0);
}

std::vector<tree::TerminalNode *> SEWParser::QualifiedNameIDContext::DOT() {
  return getTokens(SEWParser::DOT);
}

tree::TerminalNode* SEWParser::QualifiedNameIDContext::DOT(size_t i) {
  return getToken(SEWParser::DOT, i);
}

tree::TerminalNode* SEWParser::QualifiedNameIDContext::Form() {
  return getToken(SEWParser::Form, 0);
}

tree::TerminalNode* SEWParser::QualifiedNameIDContext::Meta() {
  return getToken(SEWParser::Meta, 0);
}

std::vector<SEWParser::Kw_publicContext *> SEWParser::QualifiedNameIDContext::kw_public() {
  return getRuleContexts<SEWParser::Kw_publicContext>();
}

SEWParser::Kw_publicContext* SEWParser::QualifiedNameIDContext::kw_public(size_t i) {
  return getRuleContext<SEWParser::Kw_publicContext>(i);
}

std::vector<SEWParser::Kw_staticContext *> SEWParser::QualifiedNameIDContext::kw_static() {
  return getRuleContexts<SEWParser::Kw_staticContext>();
}

SEWParser::Kw_staticContext* SEWParser::QualifiedNameIDContext::kw_static(size_t i) {
  return getRuleContext<SEWParser::Kw_staticContext>(i);
}

std::vector<SEWParser::Kw_finalContext *> SEWParser::QualifiedNameIDContext::kw_final() {
  return getRuleContexts<SEWParser::Kw_finalContext>();
}

SEWParser::Kw_finalContext* SEWParser::QualifiedNameIDContext::kw_final(size_t i) {
  return getRuleContext<SEWParser::Kw_finalContext>(i);
}

std::vector<SEWParser::Kw_volatileContext *> SEWParser::QualifiedNameIDContext::kw_volatile() {
  return getRuleContexts<SEWParser::Kw_volatileContext>();
}

SEWParser::Kw_volatileContext* SEWParser::QualifiedNameIDContext::kw_volatile(size_t i) {
  return getRuleContext<SEWParser::Kw_volatileContext>(i);
}

std::vector<SEWParser::Kw_referenceContext *> SEWParser::QualifiedNameIDContext::kw_reference() {
  return getRuleContexts<SEWParser::Kw_referenceContext>();
}

SEWParser::Kw_referenceContext* SEWParser::QualifiedNameIDContext::kw_reference(size_t i) {
  return getRuleContext<SEWParser::Kw_referenceContext>(i);
}

std::vector<SEWParser::Kw_bufferedContext *> SEWParser::QualifiedNameIDContext::kw_buffered() {
  return getRuleContexts<SEWParser::Kw_bufferedContext>();
}

SEWParser::Kw_bufferedContext* SEWParser::QualifiedNameIDContext::kw_buffered(size_t i) {
  return getRuleContext<SEWParser::Kw_bufferedContext>(i);
}


size_t SEWParser::QualifiedNameIDContext::getRuleIndex() const {
  return SEWParser::RuleQualifiedNameID;
}


SEWParser::QualifiedNameIDContext* SEWParser::qualifiedNameID() {
  QualifiedNameIDContext *_localctx = _tracker.createInstance<QualifiedNameIDContext>(_ctx, getState());
  enterRule(_localctx, 0, SEWParser::RuleQualifiedNameID);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(129);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
    case 1: {
      setState(118);
      match(SEWParser::Form);
      setState(119);
      match(SEWParser::COLON2);
       antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->qNameID =  "form::"; 
      break;
    }

    case 2: {
      setState(121);
      match(SEWParser::Meta);
      setState(122);
      match(SEWParser::COLON2);
       antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->qNameID =  "meta::"; 
      break;
    }

    case 3: {
      setState(124);
      antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->identifierToken = match(SEWParser::Identifier);
      setState(125);
      match(SEWParser::COLON2);
       antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->qNameID =  antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->identifierToken->getText() + "::"; 
      break;
    }

    case 4: {
      setState(127);
      match(SEWParser::COLON2);
       antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->qNameID =  "::"; 
      break;
    }

    default:
      break;
    }
    setState(131);
    antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->identifierToken = match(SEWParser::Identifier);
     antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->qNameID =  _localctx->qNameID + antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->identifierToken->getText(); 
    setState(146);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SEWParser::DOT) {
      setState(133);
      match(SEWParser::DOT);
      setState(141);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SEWParser::Identifier: {
          setState(134);
          antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->identifierToken = match(SEWParser::Identifier);
          break;
        }

        case SEWParser::Public: {
          setState(135);
          kw_public();
          break;
        }

        case SEWParser::Static: {
          setState(136);
          kw_static();
          break;
        }

        case SEWParser::Final: {
          setState(137);
          kw_final();
          break;
        }

        case SEWParser::Volatile: {
          setState(138);
          kw_volatile();
          break;
        }

        case SEWParser::Reference: {
          setState(139);
          kw_reference();
          break;
        }

        case SEWParser::Buffered: {
          setState(140);
          kw_buffered();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
       antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->qNameID =  _localctx->qNameID + "." + antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->identifierToken->getText(); 
      setState(148);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UfiStringContext ------------------------------------------------------------------

SEWParser::UfiStringContext::UfiStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> SEWParser::UfiStringContext::Identifier() {
  return getTokens(SEWParser::Identifier);
}

tree::TerminalNode* SEWParser::UfiStringContext::Identifier(size_t i) {
  return getToken(SEWParser::Identifier, i);
}

tree::TerminalNode* SEWParser::UfiStringContext::COLON2() {
  return getToken(SEWParser::COLON2, 0);
}

std::vector<tree::TerminalNode *> SEWParser::UfiStringContext::DOT() {
  return getTokens(SEWParser::DOT);
}

tree::TerminalNode* SEWParser::UfiStringContext::DOT(size_t i) {
  return getToken(SEWParser::DOT, i);
}

std::vector<tree::TerminalNode *> SEWParser::UfiStringContext::LBRACK() {
  return getTokens(SEWParser::LBRACK);
}

tree::TerminalNode* SEWParser::UfiStringContext::LBRACK(size_t i) {
  return getToken(SEWParser::LBRACK, i);
}

std::vector<tree::TerminalNode *> SEWParser::UfiStringContext::RBRACK() {
  return getTokens(SEWParser::RBRACK);
}

tree::TerminalNode* SEWParser::UfiStringContext::RBRACK(size_t i) {
  return getToken(SEWParser::RBRACK, i);
}

std::vector<SEWParser::AvmProgramContext *> SEWParser::UfiStringContext::avmProgram() {
  return getRuleContexts<SEWParser::AvmProgramContext>();
}

SEWParser::AvmProgramContext* SEWParser::UfiStringContext::avmProgram(size_t i) {
  return getRuleContext<SEWParser::AvmProgramContext>(i);
}

tree::TerminalNode* SEWParser::UfiStringContext::Form() {
  return getToken(SEWParser::Form, 0);
}

tree::TerminalNode* SEWParser::UfiStringContext::Meta() {
  return getToken(SEWParser::Meta, 0);
}

std::vector<SEWParser::Kw_publicContext *> SEWParser::UfiStringContext::kw_public() {
  return getRuleContexts<SEWParser::Kw_publicContext>();
}

SEWParser::Kw_publicContext* SEWParser::UfiStringContext::kw_public(size_t i) {
  return getRuleContext<SEWParser::Kw_publicContext>(i);
}

std::vector<SEWParser::Kw_staticContext *> SEWParser::UfiStringContext::kw_static() {
  return getRuleContexts<SEWParser::Kw_staticContext>();
}

SEWParser::Kw_staticContext* SEWParser::UfiStringContext::kw_static(size_t i) {
  return getRuleContext<SEWParser::Kw_staticContext>(i);
}

std::vector<SEWParser::Kw_finalContext *> SEWParser::UfiStringContext::kw_final() {
  return getRuleContexts<SEWParser::Kw_finalContext>();
}

SEWParser::Kw_finalContext* SEWParser::UfiStringContext::kw_final(size_t i) {
  return getRuleContext<SEWParser::Kw_finalContext>(i);
}

std::vector<SEWParser::Kw_volatileContext *> SEWParser::UfiStringContext::kw_volatile() {
  return getRuleContexts<SEWParser::Kw_volatileContext>();
}

SEWParser::Kw_volatileContext* SEWParser::UfiStringContext::kw_volatile(size_t i) {
  return getRuleContext<SEWParser::Kw_volatileContext>(i);
}

std::vector<SEWParser::Kw_referenceContext *> SEWParser::UfiStringContext::kw_reference() {
  return getRuleContexts<SEWParser::Kw_referenceContext>();
}

SEWParser::Kw_referenceContext* SEWParser::UfiStringContext::kw_reference(size_t i) {
  return getRuleContext<SEWParser::Kw_referenceContext>(i);
}

std::vector<SEWParser::Kw_bufferedContext *> SEWParser::UfiStringContext::kw_buffered() {
  return getRuleContexts<SEWParser::Kw_bufferedContext>();
}

SEWParser::Kw_bufferedContext* SEWParser::UfiStringContext::kw_buffered(size_t i) {
  return getRuleContext<SEWParser::Kw_bufferedContext>(i);
}


size_t SEWParser::UfiStringContext::getRuleIndex() const {
  return SEWParser::RuleUfiString;
}


SEWParser::UfiStringContext* SEWParser::ufiString() {
  UfiStringContext *_localctx = _tracker.createInstance<UfiStringContext>(_ctx, getState());
  enterRule(_localctx, 2, SEWParser::RuleUfiString);

    UniFormIdentifier * UFI = new UniFormIdentifier(false);
    antlrcpp::downCast<UfiStringContext *>(_localctx)->bfUFI =  UFI; // for automatic destruction of << UFI >> if need

    int bLine = getNextTokenLine();
    int bOffset = getNextTokenStartIndex();


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(160);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      setState(149);
      match(SEWParser::Form);
      setState(150);
      match(SEWParser::COLON2);
       UFI->setLocator( "form" ); UFI->setAbsolute(); 
      break;
    }

    case 2: {
      setState(152);
      match(SEWParser::Meta);
      setState(153);
      match(SEWParser::COLON2);
       UFI->setLocator( "meta" ); UFI->setAbsolute(); 
      break;
    }

    case 3: {
      setState(155);
      antlrcpp::downCast<UfiStringContext *>(_localctx)->identifierToken = match(SEWParser::Identifier);
      setState(156);
      match(SEWParser::COLON2);
       UFI->setLocator( antlrcpp::downCast<UfiStringContext *>(_localctx)->identifierToken->getText() ); UFI->setAbsolute(); 
      break;
    }

    case 4: {
      setState(158);
      match(SEWParser::COLON2);
       UFI->setAbsolute(); 
      break;
    }

    default:
      break;
    }
    setState(162);
    antlrcpp::downCast<UfiStringContext *>(_localctx)->identifierToken = match(SEWParser::Identifier);
     UFI->appendField( antlrcpp::downCast<UfiStringContext *>(_localctx)->identifierToken->getText() ); 
    setState(194);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(192);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case SEWParser::DOT: {
            setState(164);
            match(SEWParser::DOT);
            setState(185);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case SEWParser::Identifier: {
                setState(165);
                antlrcpp::downCast<UfiStringContext *>(_localctx)->id3 = match(SEWParser::Identifier);
                 UFI->appendField( antlrcpp::downCast<UfiStringContext *>(_localctx)->id3->getText() ); 
                break;
              }

              case SEWParser::Public: {
                setState(167);
                kw_public();
                 UFI->appendField( "public" ); 
                break;
              }

              case SEWParser::Static: {
                setState(170);
                kw_static();
                 UFI->appendField( "static" ); 
                break;
              }

              case SEWParser::Final: {
                setState(173);
                kw_final();
                 UFI->appendField( "final" ); 
                break;
              }

              case SEWParser::Volatile: {
                setState(176);
                kw_volatile();
                 UFI->appendField( "volatile" ); 
                break;
              }

              case SEWParser::Reference: {
                setState(179);
                kw_reference();
                 UFI->appendField( "reference" ); 
                break;
              }

              case SEWParser::Buffered: {
                setState(182);
                kw_buffered();
                 UFI->appendField( "buffered" ); 
                break;
              }

            default:
              throw NoViableAltException(this);
            }
            break;
          }

          case SEWParser::LBRACK: {
            setState(187);
            match(SEWParser::LBRACK);
            setState(188);
            antlrcpp::downCast<UfiStringContext *>(_localctx)->ap = avmProgram(NULL);
            setState(189);
            match(SEWParser::RBRACK);
             UFI->appendIndex( antlrcpp::downCast<UfiStringContext *>(_localctx)->ap->code ); 
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(196);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
    }

    		if( UFI->isPureIdentifier() )
    		{
    			antlrcpp::downCast<UfiStringContext *>(_localctx)->bfUFI =  UFI->popIdentifier();
    		}
    		else
    		{
    			setLocation(UFI, bLine, bLine, bOffset, getNextTokenStopIndex());
    		}
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kw_publicContext ------------------------------------------------------------------

SEWParser::Kw_publicContext::Kw_publicContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::Kw_publicContext::Public() {
  return getToken(SEWParser::Public, 0);
}


size_t SEWParser::Kw_publicContext::getRuleIndex() const {
  return SEWParser::RuleKw_public;
}


SEWParser::Kw_publicContext* SEWParser::kw_public() {
  Kw_publicContext *_localctx = _tracker.createInstance<Kw_publicContext>(_ctx, getState());
  enterRule(_localctx, 4, SEWParser::RuleKw_public);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(199);
    match(SEWParser::Public);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kw_staticContext ------------------------------------------------------------------

SEWParser::Kw_staticContext::Kw_staticContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::Kw_staticContext::Static() {
  return getToken(SEWParser::Static, 0);
}


size_t SEWParser::Kw_staticContext::getRuleIndex() const {
  return SEWParser::RuleKw_static;
}


SEWParser::Kw_staticContext* SEWParser::kw_static() {
  Kw_staticContext *_localctx = _tracker.createInstance<Kw_staticContext>(_ctx, getState());
  enterRule(_localctx, 6, SEWParser::RuleKw_static);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(201);
    match(SEWParser::Static);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kw_finalContext ------------------------------------------------------------------

SEWParser::Kw_finalContext::Kw_finalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::Kw_finalContext::Final() {
  return getToken(SEWParser::Final, 0);
}


size_t SEWParser::Kw_finalContext::getRuleIndex() const {
  return SEWParser::RuleKw_final;
}


SEWParser::Kw_finalContext* SEWParser::kw_final() {
  Kw_finalContext *_localctx = _tracker.createInstance<Kw_finalContext>(_ctx, getState());
  enterRule(_localctx, 8, SEWParser::RuleKw_final);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(203);
    match(SEWParser::Final);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kw_referenceContext ------------------------------------------------------------------

SEWParser::Kw_referenceContext::Kw_referenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::Kw_referenceContext::Reference() {
  return getToken(SEWParser::Reference, 0);
}


size_t SEWParser::Kw_referenceContext::getRuleIndex() const {
  return SEWParser::RuleKw_reference;
}


SEWParser::Kw_referenceContext* SEWParser::kw_reference() {
  Kw_referenceContext *_localctx = _tracker.createInstance<Kw_referenceContext>(_ctx, getState());
  enterRule(_localctx, 10, SEWParser::RuleKw_reference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(205);
    match(SEWParser::Reference);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kw_bufferedContext ------------------------------------------------------------------

SEWParser::Kw_bufferedContext::Kw_bufferedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::Kw_bufferedContext::Buffered() {
  return getToken(SEWParser::Buffered, 0);
}


size_t SEWParser::Kw_bufferedContext::getRuleIndex() const {
  return SEWParser::RuleKw_buffered;
}


SEWParser::Kw_bufferedContext* SEWParser::kw_buffered() {
  Kw_bufferedContext *_localctx = _tracker.createInstance<Kw_bufferedContext>(_ctx, getState());
  enterRule(_localctx, 12, SEWParser::RuleKw_buffered);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(207);
    match(SEWParser::Buffered);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kw_volatileContext ------------------------------------------------------------------

SEWParser::Kw_volatileContext::Kw_volatileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::Kw_volatileContext::Volatile() {
  return getToken(SEWParser::Volatile, 0);
}


size_t SEWParser::Kw_volatileContext::getRuleIndex() const {
  return SEWParser::RuleKw_volatile;
}


SEWParser::Kw_volatileContext* SEWParser::kw_volatile() {
  Kw_volatileContext *_localctx = _tracker.createInstance<Kw_volatileContext>(_ctx, getState());
  enterRule(_localctx, 14, SEWParser::RuleKw_volatile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(209);
    match(SEWParser::Volatile);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kw_formContext ------------------------------------------------------------------

SEWParser::Kw_formContext::Kw_formContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::Kw_formContext::Form() {
  return getToken(SEWParser::Form, 0);
}


size_t SEWParser::Kw_formContext::getRuleIndex() const {
  return SEWParser::RuleKw_form;
}


SEWParser::Kw_formContext* SEWParser::kw_form() {
  Kw_formContext *_localctx = _tracker.createInstance<Kw_formContext>(_ctx, getState());
  enterRule(_localctx, 16, SEWParser::RuleKw_form);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(211);
    match(SEWParser::Form);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kw_endformContext ------------------------------------------------------------------

SEWParser::Kw_endformContext::Kw_endformContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::Kw_endformContext::Endform() {
  return getToken(SEWParser::Endform, 0);
}


size_t SEWParser::Kw_endformContext::getRuleIndex() const {
  return SEWParser::RuleKw_endform;
}


SEWParser::Kw_endformContext* SEWParser::kw_endform() {
  Kw_endformContext *_localctx = _tracker.createInstance<Kw_endformContext>(_ctx, getState());
  enterRule(_localctx, 18, SEWParser::RuleKw_endform);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(213);
    match(SEWParser::Endform);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kw_prototypeContext ------------------------------------------------------------------

SEWParser::Kw_prototypeContext::Kw_prototypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::Kw_prototypeContext::Prototype() {
  return getToken(SEWParser::Prototype, 0);
}


size_t SEWParser::Kw_prototypeContext::getRuleIndex() const {
  return SEWParser::RuleKw_prototype;
}


SEWParser::Kw_prototypeContext* SEWParser::kw_prototype() {
  Kw_prototypeContext *_localctx = _tracker.createInstance<Kw_prototypeContext>(_ctx, getState());
  enterRule(_localctx, 20, SEWParser::RuleKw_prototype);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(215);
    match(SEWParser::Prototype);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kw_endprototypeContext ------------------------------------------------------------------

SEWParser::Kw_endprototypeContext::Kw_endprototypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::Kw_endprototypeContext::Endprototype() {
  return getToken(SEWParser::Endprototype, 0);
}


size_t SEWParser::Kw_endprototypeContext::getRuleIndex() const {
  return SEWParser::RuleKw_endprototype;
}


SEWParser::Kw_endprototypeContext* SEWParser::kw_endprototype() {
  Kw_endprototypeContext *_localctx = _tracker.createInstance<Kw_endprototypeContext>(_ctx, getState());
  enterRule(_localctx, 22, SEWParser::RuleKw_endprototype);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(217);
    match(SEWParser::Endprototype);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kw_asContext ------------------------------------------------------------------

SEWParser::Kw_asContext::Kw_asContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::Kw_asContext::As() {
  return getToken(SEWParser::As, 0);
}


size_t SEWParser::Kw_asContext::getRuleIndex() const {
  return SEWParser::RuleKw_as;
}


SEWParser::Kw_asContext* SEWParser::kw_as() {
  Kw_asContext *_localctx = _tracker.createInstance<Kw_asContext>(_ctx, getState());
  enterRule(_localctx, 24, SEWParser::RuleKw_as);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(219);
    match(SEWParser::As);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kw_isContext ------------------------------------------------------------------

SEWParser::Kw_isContext::Kw_isContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::Kw_isContext::Is() {
  return getToken(SEWParser::Is, 0);
}


size_t SEWParser::Kw_isContext::getRuleIndex() const {
  return SEWParser::RuleKw_is;
}


SEWParser::Kw_isContext* SEWParser::kw_is() {
  Kw_isContext *_localctx = _tracker.createInstance<Kw_isContext>(_ctx, getState());
  enterRule(_localctx, 26, SEWParser::RuleKw_is);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(221);
    match(SEWParser::Is);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FavmPrologContext ------------------------------------------------------------------

SEWParser::FavmPrologContext::FavmPrologContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::FavmPrologContext::LT_() {
  return getToken(SEWParser::LT_, 0);
}

tree::TerminalNode* SEWParser::FavmPrologContext::Identifier() {
  return getToken(SEWParser::Identifier, 0);
}

tree::TerminalNode* SEWParser::FavmPrologContext::GT_COLON() {
  return getToken(SEWParser::GT_COLON, 0);
}

tree::TerminalNode* SEWParser::FavmPrologContext::Attr_DIVERSITY() {
  return getToken(SEWParser::Attr_DIVERSITY, 0);
}

tree::TerminalNode* SEWParser::FavmPrologContext::Attr_SEW() {
  return getToken(SEWParser::Attr_SEW, 0);
}

tree::TerminalNode* SEWParser::FavmPrologContext::Attr_FAVM() {
  return getToken(SEWParser::Attr_FAVM, 0);
}

std::vector<tree::TerminalNode *> SEWParser::FavmPrologContext::COMMA() {
  return getTokens(SEWParser::COMMA);
}

tree::TerminalNode* SEWParser::FavmPrologContext::COMMA(size_t i) {
  return getToken(SEWParser::COMMA, i);
}

std::vector<tree::TerminalNode *> SEWParser::FavmPrologContext::FloatingPointNumber() {
  return getTokens(SEWParser::FloatingPointNumber);
}

tree::TerminalNode* SEWParser::FavmPrologContext::FloatingPointNumber(size_t i) {
  return getToken(SEWParser::FloatingPointNumber, i);
}

std::vector<SEWParser::QualifiedNameIDContext *> SEWParser::FavmPrologContext::qualifiedNameID() {
  return getRuleContexts<SEWParser::QualifiedNameIDContext>();
}

SEWParser::QualifiedNameIDContext* SEWParser::FavmPrologContext::qualifiedNameID(size_t i) {
  return getRuleContext<SEWParser::QualifiedNameIDContext>(i);
}

std::vector<tree::TerminalNode *> SEWParser::FavmPrologContext::DoubleQuotedString() {
  return getTokens(SEWParser::DoubleQuotedString);
}

tree::TerminalNode* SEWParser::FavmPrologContext::DoubleQuotedString(size_t i) {
  return getToken(SEWParser::DoubleQuotedString, i);
}

std::vector<tree::TerminalNode *> SEWParser::FavmPrologContext::SingleQuotedString() {
  return getTokens(SEWParser::SingleQuotedString);
}

tree::TerminalNode* SEWParser::FavmPrologContext::SingleQuotedString(size_t i) {
  return getToken(SEWParser::SingleQuotedString, i);
}

std::vector<tree::TerminalNode *> SEWParser::FavmPrologContext::Version() {
  return getTokens(SEWParser::Version);
}

tree::TerminalNode* SEWParser::FavmPrologContext::Version(size_t i) {
  return getToken(SEWParser::Version, i);
}


size_t SEWParser::FavmPrologContext::getRuleIndex() const {
  return SEWParser::RuleFavmProlog;
}


SEWParser::FavmPrologContext* SEWParser::favmProlog() {
  FavmPrologContext *_localctx = _tracker.createInstance<FavmPrologContext>(_ctx, getState());
  enterRule(_localctx, 28, SEWParser::RuleFavmProlog);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(223);
    _la = _input->LA(1);
    if (!(((((_la - 104) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 104)) & 7) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(224);
    match(SEWParser::LT_);
    setState(225);
    match(SEWParser::Identifier);
    setState(238);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SEWParser::COMMA) {
      setState(226);
      match(SEWParser::COMMA);
      setState(228);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == SEWParser::Version) {
        setState(227);
        match(SEWParser::Version);
      }
      setState(234);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SEWParser::FloatingPointNumber: {
          setState(230);
          match(SEWParser::FloatingPointNumber);
          break;
        }

        case SEWParser::Meta:
        case SEWParser::Form:
        case SEWParser::COLON2:
        case SEWParser::Identifier: {
          setState(231);
          qualifiedNameID();
          break;
        }

        case SEWParser::DoubleQuotedString: {
          setState(232);
          match(SEWParser::DoubleQuotedString);
          break;
        }

        case SEWParser::SingleQuotedString: {
          setState(233);
          match(SEWParser::SingleQuotedString);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(240);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(241);
    match(SEWParser::GT_COLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Form_grammarContext ------------------------------------------------------------------

SEWParser::Form_grammarContext::Form_grammarContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::Form_grammarContext::Form_grammarContext(ParserRuleContext *parent, size_t invokingState, WObjectManager * aWObjectManager)
  : ParserRuleContext(parent, invokingState) {
  this->aWObjectManager = aWObjectManager;
}

SEWParser::FavmPrologContext* SEWParser::Form_grammarContext::favmProlog() {
  return getRuleContext<SEWParser::FavmPrologContext>(0);
}

SEWParser::ANormalFormContext* SEWParser::Form_grammarContext::aNormalForm() {
  return getRuleContext<SEWParser::ANormalFormContext>(0);
}

SEWParser::AWorkflowContext* SEWParser::Form_grammarContext::aWorkflow() {
  return getRuleContext<SEWParser::AWorkflowContext>(0);
}


size_t SEWParser::Form_grammarContext::getRuleIndex() const {
  return SEWParser::RuleForm_grammar;
}


SEWParser::Form_grammarContext* SEWParser::form_grammar(WObjectManager * aWObjectManager) {
  Form_grammarContext *_localctx = _tracker.createInstance<Form_grammarContext>(_ctx, getState(), aWObjectManager);
  enterRule(_localctx, 30, SEWParser::RuleForm_grammar);

  //	mWObjectManager = (& _localctx->aWObjectManager);
  	mWObjectManager = _localctx->aWObjectManager;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(244);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 104) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 104)) & 7) != 0)) {
      setState(243);
      favmProlog();
    }
    setState(252);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(246);
      antlrcpp::downCast<Form_grammarContext *>(_localctx)->nf = aNormalForm( &( mWObjectManager->ROOT_WOBJECT ) );
       antlrcpp::downCast<Form_grammarContext *>(_localctx)->wfObject =  antlrcpp::downCast<Form_grammarContext *>(_localctx)->nf->wfObject; 
      break;
    }

    case 2: {
      setState(249);
      antlrcpp::downCast<Form_grammarContext *>(_localctx)->wf = aWorkflow( &( mWObjectManager->ROOT_WOBJECT ) );
       antlrcpp::downCast<Form_grammarContext *>(_localctx)->wfObject =  antlrcpp::downCast<Form_grammarContext *>(_localctx)->wf->wfObject; 
      break;
    }

    default:
      break;
    }

    		_localctx->wfObject->setContainer(WObject::_NULL_);

    		if( hasError() )
    		{
    			AVM_OS_CERR << std::endl;
    		}
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AWorkflowContext ------------------------------------------------------------------

SEWParser::AWorkflowContext::AWorkflowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::AWorkflowContext::AWorkflowContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
}

SEWParser::AWorkflowObjectContext* SEWParser::AWorkflowContext::aWorkflowObject() {
  return getRuleContext<SEWParser::AWorkflowObjectContext>(0);
}


size_t SEWParser::AWorkflowContext::getRuleIndex() const {
  return SEWParser::RuleAWorkflow;
}


SEWParser::AWorkflowContext* SEWParser::aWorkflow(WObject * wfContainer) {
  AWorkflowContext *_localctx = _tracker.createInstance<AWorkflowContext>(_ctx, getState(), wfContainer);
  enterRule(_localctx, 32, SEWParser::RuleAWorkflow);

  	antlrcpp::downCast<AWorkflowContext *>(_localctx)->wfObject =  mWObjectManager->newWObject(_localctx->wfContainer, "", "");

  	int bLine = getNextTokenLine();
  	int bOffset = getNextTokenStartIndex();


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(256);
    aWorkflowObject(_localctx->wfContainer, _localctx->wfObject, bLine, bOffset);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AWorkflowObjectContext ------------------------------------------------------------------

SEWParser::AWorkflowObjectContext::AWorkflowObjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::AWorkflowObjectContext::AWorkflowObjectContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer, WObject * wfObject, int bLine, int bOffset)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
  this->wfObject = wfObject;
  this->bLine = bLine;
  this->bOffset = bOffset;
}

tree::TerminalNode* SEWParser::AWorkflowObjectContext::LCURLY() {
  return getToken(SEWParser::LCURLY, 0);
}

tree::TerminalNode* SEWParser::AWorkflowObjectContext::RCURLY() {
  return getToken(SEWParser::RCURLY, 0);
}

std::vector<SEWParser::QualifiedNameIDContext *> SEWParser::AWorkflowObjectContext::qualifiedNameID() {
  return getRuleContexts<SEWParser::QualifiedNameIDContext>();
}

SEWParser::QualifiedNameIDContext* SEWParser::AWorkflowObjectContext::qualifiedNameID(size_t i) {
  return getRuleContext<SEWParser::QualifiedNameIDContext>(i);
}

tree::TerminalNode* SEWParser::AWorkflowObjectContext::DoubleQuotedString() {
  return getToken(SEWParser::DoubleQuotedString, 0);
}

tree::TerminalNode* SEWParser::AWorkflowObjectContext::SingleQuotedString() {
  return getToken(SEWParser::SingleQuotedString, 0);
}

std::vector<SEWParser::AComponentContext *> SEWParser::AWorkflowObjectContext::aComponent() {
  return getRuleContexts<SEWParser::AComponentContext>();
}

SEWParser::AComponentContext* SEWParser::AWorkflowObjectContext::aComponent(size_t i) {
  return getRuleContext<SEWParser::AComponentContext>(i);
}


size_t SEWParser::AWorkflowObjectContext::getRuleIndex() const {
  return SEWParser::RuleAWorkflowObject;
}


SEWParser::AWorkflowObjectContext* SEWParser::aWorkflowObject(WObject * wfContainer,WObject * wfObject,int bLine,int bOffset) {
  AWorkflowObjectContext *_localctx = _tracker.createInstance<AWorkflowObjectContext>(_ctx, getState(), wfContainer, wfObject, bLine, bOffset);
  enterRule(_localctx, 34, SEWParser::RuleAWorkflowObject);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(258);
    antlrcpp::downCast<AWorkflowObjectContext *>(_localctx)->qnid = qualifiedNameID();
     _localctx->wfObject->setQualifiedTypeNameID( antlrcpp::downCast<AWorkflowObjectContext *>(_localctx)->qnid->qNameID ); 
    setState(261);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SEWParser::Meta

    || _la == SEWParser::Form || _la == SEWParser::COLON2

    || _la == SEWParser::Identifier) {
      setState(260);
      antlrcpp::downCast<AWorkflowObjectContext *>(_localctx)->qnid = qualifiedNameID();
    }

    		if( NamedElement::isRelative(antlrcpp::downCast<AWorkflowObjectContext *>(_localctx)->qnid->qNameID) )
    		{
    			mWObjectManager->registerWObject(_localctx->wfObject, antlrcpp::downCast<AWorkflowObjectContext *>(_localctx)->qnid->qNameID);

    			antlrcpp::downCast<AWorkflowObjectContext *>(_localctx)->qnid->qNameID = mWObjectManager->makeFQN( _localctx->wfContainer, antlrcpp::downCast<AWorkflowObjectContext *>(_localctx)->qnid->qNameID );
    		}
    		_localctx->wfObject->setFullyQualifiedNameID(antlrcpp::downCast<AWorkflowObjectContext *>(_localctx)->qnid->qNameID);

    		mWObjectManager->registerWObject( _localctx->wfObject );
    	  
    setState(268);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::DoubleQuotedString: {
        setState(264);
        antlrcpp::downCast<AWorkflowObjectContext *>(_localctx)->dqs = match(SEWParser::DoubleQuotedString);
         _localctx->wfObject->setUnrestrictedName( antlrcpp::downCast<AWorkflowObjectContext *>(_localctx)->dqs->getText() ); 
        break;
      }

      case SEWParser::SingleQuotedString: {
        setState(266);
        antlrcpp::downCast<AWorkflowObjectContext *>(_localctx)->sqs = match(SEWParser::SingleQuotedString);
         _localctx->wfObject->setUnrestrictedName( antlrcpp::downCast<AWorkflowObjectContext *>(_localctx)->sqs->getText() ); 
        break;
      }

      case SEWParser::LCURLY: {
        break;
      }

    default:
      break;
    }
    setState(270);
    match(SEWParser::LCURLY);
    setState(276);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 22016) != 0) || ((((_la - 76) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 76)) & 139854348289) != 0)) {
      setState(271);
      antlrcpp::downCast<AWorkflowObjectContext *>(_localctx)->wComp = aComponent(_localctx->wfObject);
       addElement(_localctx->wfObject, antlrcpp::downCast<AWorkflowObjectContext *>(_localctx)->wComp->wfObject); 
      setState(278);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
     setLocation(_localctx->wfObject, _localctx->bLine, getNextTokenLine(), _localctx->bOffset, getNextTokenStopIndex()); 
    setState(280);
    match(SEWParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormHEADERContext ------------------------------------------------------------------

SEWParser::FormHEADERContext::FormHEADERContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::FormHEADERContext::FormHEADERContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer, WObject * wfObject)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
  this->wfObject = wfObject;
}

SEWParser::Kw_asContext* SEWParser::FormHEADERContext::kw_as() {
  return getRuleContext<SEWParser::Kw_asContext>(0);
}

std::vector<SEWParser::QualifiedNameIDContext *> SEWParser::FormHEADERContext::qualifiedNameID() {
  return getRuleContexts<SEWParser::QualifiedNameIDContext>();
}

SEWParser::QualifiedNameIDContext* SEWParser::FormHEADERContext::qualifiedNameID(size_t i) {
  return getRuleContext<SEWParser::QualifiedNameIDContext>(i);
}

tree::TerminalNode* SEWParser::FormHEADERContext::BAND() {
  return getToken(SEWParser::BAND, 0);
}

tree::TerminalNode* SEWParser::FormHEADERContext::DoubleQuotedString() {
  return getToken(SEWParser::DoubleQuotedString, 0);
}

tree::TerminalNode* SEWParser::FormHEADERContext::SingleQuotedString() {
  return getToken(SEWParser::SingleQuotedString, 0);
}


size_t SEWParser::FormHEADERContext::getRuleIndex() const {
  return SEWParser::RuleFormHEADER;
}


SEWParser::FormHEADERContext* SEWParser::formHEADER(WObject * wfContainer,WObject * wfObject) {
  FormHEADERContext *_localctx = _tracker.createInstance<FormHEADERContext>(_ctx, getState(), wfContainer, wfObject);
  enterRule(_localctx, 36, SEWParser::RuleFormHEADER);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(282);
    antlrcpp::downCast<FormHEADERContext *>(_localctx)->qnid = qualifiedNameID();

    		if( NamedElement::isRelative(antlrcpp::downCast<FormHEADERContext *>(_localctx)->qnid->qNameID) ) {
    			mWObjectManager->registerWObject(_localctx->wfObject, antlrcpp::downCast<FormHEADERContext *>(_localctx)->qnid->qNameID);

    			antlrcpp::downCast<FormHEADERContext *>(_localctx)->qnid->qNameID = mWObjectManager->makeFQN( _localctx->wfContainer, antlrcpp::downCast<FormHEADERContext *>(_localctx)->qnid->qNameID );
    		}
    		_localctx->wfObject->setFullyQualifiedNameID(antlrcpp::downCast<FormHEADERContext *>(_localctx)->qnid->qNameID);

    		mWObjectManager->registerWObject( _localctx->wfObject );
    	  
    setState(288);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::DoubleQuotedString: {
        setState(284);
        antlrcpp::downCast<FormHEADERContext *>(_localctx)->dqs = match(SEWParser::DoubleQuotedString);
         _localctx->wfObject->setUnrestrictedName( antlrcpp::downCast<FormHEADERContext *>(_localctx)->dqs->getText() ); 
        break;
      }

      case SEWParser::SingleQuotedString: {
        setState(286);
        antlrcpp::downCast<FormHEADERContext *>(_localctx)->sqs = match(SEWParser::SingleQuotedString);
         _localctx->wfObject->setUnrestrictedName( antlrcpp::downCast<FormHEADERContext *>(_localctx)->sqs->getText() ); 
        break;
      }

      case SEWParser::As: {
        break;
      }

    default:
      break;
    }
    setState(290);
    kw_as();
    setState(292);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SEWParser::BAND) {
      setState(291);
      match(SEWParser::BAND);
    }
    setState(294);
    antlrcpp::downCast<FormHEADERContext *>(_localctx)->qnid = qualifiedNameID();
     _localctx->wfObject->setQualifiedTypeNameID( antlrcpp::downCast<FormHEADERContext *>(_localctx)->qnid->qNameID ); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormBODYContext ------------------------------------------------------------------

SEWParser::FormBODYContext::FormBODYContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::FormBODYContext::FormBODYContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer, WObject * wfObject)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
  this->wfObject = wfObject;
}

SEWParser::Kw_isContext* SEWParser::FormBODYContext::kw_is() {
  return getRuleContext<SEWParser::Kw_isContext>(0);
}

std::vector<SEWParser::AComponentContext *> SEWParser::FormBODYContext::aComponent() {
  return getRuleContexts<SEWParser::AComponentContext>();
}

SEWParser::AComponentContext* SEWParser::FormBODYContext::aComponent(size_t i) {
  return getRuleContext<SEWParser::AComponentContext>(i);
}


size_t SEWParser::FormBODYContext::getRuleIndex() const {
  return SEWParser::RuleFormBODY;
}


SEWParser::FormBODYContext* SEWParser::formBODY(WObject * wfContainer,WObject * wfObject) {
  FormBODYContext *_localctx = _tracker.createInstance<FormBODYContext>(_ctx, getState(), wfContainer, wfObject);
  enterRule(_localctx, 38, SEWParser::RuleFormBODY);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(297);
    kw_is();
    setState(303);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 22016) != 0) || ((((_la - 76) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 76)) & 139854348289) != 0)) {
      setState(298);
      antlrcpp::downCast<FormBODYContext *>(_localctx)->wComp = aComponent(_localctx->wfObject);
       addElement(_localctx->wfObject, antlrcpp::downCast<FormBODYContext *>(_localctx)->wComp->wfObject); 
      setState(305);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FormDECLContext ------------------------------------------------------------------

SEWParser::FormDECLContext::FormDECLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::FormDECLContext::FormDECLContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer, WObject * wfObject)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
  this->wfObject = wfObject;
}

SEWParser::FormHEADERContext* SEWParser::FormDECLContext::formHEADER() {
  return getRuleContext<SEWParser::FormHEADERContext>(0);
}

SEWParser::FormBODYContext* SEWParser::FormDECLContext::formBODY() {
  return getRuleContext<SEWParser::FormBODYContext>(0);
}


size_t SEWParser::FormDECLContext::getRuleIndex() const {
  return SEWParser::RuleFormDECL;
}


SEWParser::FormDECLContext* SEWParser::formDECL(WObject * wfContainer,WObject * wfObject) {
  FormDECLContext *_localctx = _tracker.createInstance<FormDECLContext>(_ctx, getState(), wfContainer, wfObject);
  enterRule(_localctx, 40, SEWParser::RuleFormDECL);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(306);
    formHEADER(_localctx->wfContainer, _localctx->wfObject);

    AVM_IF_DEBUG_LEVEL_FLAG( HIGH , PARSING )
    	AVM_OS_TRACE << INCR_INDENT_TAB << "parsing wfObject :> "
    			<< str_header( _localctx->wfObject ) << std::endl;
    AVM_ENDIF_DEBUG_LEVEL_FLAG( HIGH , PARSING )
    	  
    setState(309);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SEWParser::Is) {
      setState(308);
      formBODY(_localctx->wfContainer, _localctx->wfObject);
    }

    AVM_IF_DEBUG_LEVEL_FLAG( HIGH , PARSING )
    	AVM_OS_TRACE << TAB_DECR_INDENT << "end" << std::endl;
    AVM_ENDIF_DEBUG_LEVEL_FLAG( HIGH , PARSING )
    	  
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ANormalFormContext ------------------------------------------------------------------

SEWParser::ANormalFormContext::ANormalFormContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::ANormalFormContext::ANormalFormContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
}

SEWParser::AFormContext* SEWParser::ANormalFormContext::aForm() {
  return getRuleContext<SEWParser::AFormContext>(0);
}

SEWParser::APrototypeContext* SEWParser::ANormalFormContext::aPrototype() {
  return getRuleContext<SEWParser::APrototypeContext>(0);
}

SEWParser::AWObjectContext* SEWParser::ANormalFormContext::aWObject() {
  return getRuleContext<SEWParser::AWObjectContext>(0);
}


size_t SEWParser::ANormalFormContext::getRuleIndex() const {
  return SEWParser::RuleANormalForm;
}


SEWParser::ANormalFormContext* SEWParser::aNormalForm(WObject * wfContainer) {
  ANormalFormContext *_localctx = _tracker.createInstance<ANormalFormContext>(_ctx, getState(), wfContainer);
  enterRule(_localctx, 42, SEWParser::RuleANormalForm);

  	antlrcpp::downCast<ANormalFormContext *>(_localctx)->wfObject =  mWObjectManager->newWObject(_localctx->wfContainer, "", "");

  	int bLine = getNextTokenLine();
  	int bOffset = getNextTokenStartIndex();


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(316);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(313);
      aForm(_localctx->wfContainer, _localctx->wfObject, bLine, bOffset);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(314);
      aPrototype(_localctx->wfContainer, _localctx->wfObject, bLine, bOffset);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(315);
      aWObject(_localctx->wfContainer, _localctx->wfObject, bLine, bOffset);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AWObjectContext ------------------------------------------------------------------

SEWParser::AWObjectContext::AWObjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::AWObjectContext::AWObjectContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer, WObject * wfObject, int bLine, int bOffset)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
  this->wfObject = wfObject;
  this->bLine = bLine;
  this->bOffset = bOffset;
}

tree::TerminalNode* SEWParser::AWObjectContext::LCURLY() {
  return getToken(SEWParser::LCURLY, 0);
}

tree::TerminalNode* SEWParser::AWObjectContext::RCURLY() {
  return getToken(SEWParser::RCURLY, 0);
}

std::vector<SEWParser::QualifiedNameIDContext *> SEWParser::AWObjectContext::qualifiedNameID() {
  return getRuleContexts<SEWParser::QualifiedNameIDContext>();
}

SEWParser::QualifiedNameIDContext* SEWParser::AWObjectContext::qualifiedNameID(size_t i) {
  return getRuleContext<SEWParser::QualifiedNameIDContext>(i);
}

tree::TerminalNode* SEWParser::AWObjectContext::DoubleQuotedString() {
  return getToken(SEWParser::DoubleQuotedString, 0);
}

tree::TerminalNode* SEWParser::AWObjectContext::SingleQuotedString() {
  return getToken(SEWParser::SingleQuotedString, 0);
}

std::vector<SEWParser::AComponentContext *> SEWParser::AWObjectContext::aComponent() {
  return getRuleContexts<SEWParser::AComponentContext>();
}

SEWParser::AComponentContext* SEWParser::AWObjectContext::aComponent(size_t i) {
  return getRuleContext<SEWParser::AComponentContext>(i);
}


size_t SEWParser::AWObjectContext::getRuleIndex() const {
  return SEWParser::RuleAWObject;
}


SEWParser::AWObjectContext* SEWParser::aWObject(WObject * wfContainer,WObject * wfObject,int bLine,int bOffset) {
  AWObjectContext *_localctx = _tracker.createInstance<AWObjectContext>(_ctx, getState(), wfContainer, wfObject, bLine, bOffset);
  enterRule(_localctx, 44, SEWParser::RuleAWObject);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(318);
    antlrcpp::downCast<AWObjectContext *>(_localctx)->qnid = qualifiedNameID();
     _localctx->wfObject->setQualifiedTypeNameID( antlrcpp::downCast<AWObjectContext *>(_localctx)->qnid->qNameID ); 
    setState(321);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SEWParser::Meta

    || _la == SEWParser::Form || _la == SEWParser::COLON2

    || _la == SEWParser::Identifier) {
      setState(320);
      antlrcpp::downCast<AWObjectContext *>(_localctx)->qnid = qualifiedNameID();
    }

    		if( NamedElement::isRelative(antlrcpp::downCast<AWObjectContext *>(_localctx)->qnid->qNameID) ) {
    			mWObjectManager->registerWObject(_localctx->wfObject, antlrcpp::downCast<AWObjectContext *>(_localctx)->qnid->qNameID);

    			antlrcpp::downCast<AWObjectContext *>(_localctx)->qnid->qNameID = mWObjectManager->makeFQN( _localctx->wfContainer, antlrcpp::downCast<AWObjectContext *>(_localctx)->qnid->qNameID );
    		}
    		_localctx->wfObject->setFullyQualifiedNameID(antlrcpp::downCast<AWObjectContext *>(_localctx)->qnid->qNameID);

    		mWObjectManager->registerWObject( _localctx->wfObject );
    	  
    setState(328);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::DoubleQuotedString: {
        setState(324);
        antlrcpp::downCast<AWObjectContext *>(_localctx)->dqs = match(SEWParser::DoubleQuotedString);
         _localctx->wfObject->setUnrestrictedName( antlrcpp::downCast<AWObjectContext *>(_localctx)->dqs->getText() ); 
        break;
      }

      case SEWParser::SingleQuotedString: {
        setState(326);
        antlrcpp::downCast<AWObjectContext *>(_localctx)->sqs = match(SEWParser::SingleQuotedString);
         _localctx->wfObject->setUnrestrictedName( antlrcpp::downCast<AWObjectContext *>(_localctx)->sqs->getText() ); 
        break;
      }

      case SEWParser::LCURLY: {
        break;
      }

    default:
      break;
    }
    setState(330);
    match(SEWParser::LCURLY);
    setState(336);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 22016) != 0) || ((((_la - 76) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 76)) & 139854348289) != 0)) {
      setState(331);
      antlrcpp::downCast<AWObjectContext *>(_localctx)->wComp = aComponent(_localctx->wfObject);
       addElement(_localctx->wfObject, antlrcpp::downCast<AWObjectContext *>(_localctx)->wComp->wfObject); 
      setState(338);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
     setLocation(_localctx->wfObject, _localctx->bLine, getNextTokenLine(), _localctx->bOffset, getNextTokenStopIndex()); 
    setState(340);
    match(SEWParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AFormContext ------------------------------------------------------------------

SEWParser::AFormContext::AFormContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::AFormContext::AFormContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer, WObject * wfObject, int bLine, int bOffset)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
  this->wfObject = wfObject;
  this->bLine = bLine;
  this->bOffset = bOffset;
}

SEWParser::Kw_formContext* SEWParser::AFormContext::kw_form() {
  return getRuleContext<SEWParser::Kw_formContext>(0);
}

SEWParser::FormDECLContext* SEWParser::AFormContext::formDECL() {
  return getRuleContext<SEWParser::FormDECLContext>(0);
}

SEWParser::Kw_endformContext* SEWParser::AFormContext::kw_endform() {
  return getRuleContext<SEWParser::Kw_endformContext>(0);
}


size_t SEWParser::AFormContext::getRuleIndex() const {
  return SEWParser::RuleAForm;
}


SEWParser::AFormContext* SEWParser::aForm(WObject * wfContainer,WObject * wfObject,int bLine,int bOffset) {
  AFormContext *_localctx = _tracker.createInstance<AFormContext>(_ctx, getState(), wfContainer, wfObject, bLine, bOffset);
  enterRule(_localctx, 46, SEWParser::RuleAForm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(342);
    kw_form();
    setState(343);
    formDECL(_localctx->wfContainer, _localctx->wfObject);
     setLocation(_localctx->wfObject, _localctx->bLine, getNextTokenLine(), _localctx->bOffset, getNextTokenStopIndex()); 
    setState(345);
    kw_endform();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- APrototypeContext ------------------------------------------------------------------

SEWParser::APrototypeContext::APrototypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::APrototypeContext::APrototypeContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer, WObject * wfObject, int bLine, int bOffset)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
  this->wfObject = wfObject;
  this->bLine = bLine;
  this->bOffset = bOffset;
}

SEWParser::Kw_prototypeContext* SEWParser::APrototypeContext::kw_prototype() {
  return getRuleContext<SEWParser::Kw_prototypeContext>(0);
}

SEWParser::FormDECLContext* SEWParser::APrototypeContext::formDECL() {
  return getRuleContext<SEWParser::FormDECLContext>(0);
}

SEWParser::Kw_endprototypeContext* SEWParser::APrototypeContext::kw_endprototype() {
  return getRuleContext<SEWParser::Kw_endprototypeContext>(0);
}


size_t SEWParser::APrototypeContext::getRuleIndex() const {
  return SEWParser::RuleAPrototype;
}


SEWParser::APrototypeContext* SEWParser::aPrototype(WObject * wfContainer,WObject * wfObject,int bLine,int bOffset) {
  APrototypeContext *_localctx = _tracker.createInstance<APrototypeContext>(_ctx, getState(), wfContainer, wfObject, bLine, bOffset);
  enterRule(_localctx, 48, SEWParser::RuleAPrototype);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(347);
    kw_prototype();
    setState(348);
    formDECL(_localctx->wfContainer, _localctx->wfObject);
     setLocation(_localctx->wfObject, _localctx->bLine, getNextTokenLine(), _localctx->bOffset, getNextTokenStopIndex()); 
    setState(350);
    kw_endprototype();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AComponentContext ------------------------------------------------------------------

SEWParser::AComponentContext::AComponentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::AComponentContext::AComponentContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
}

SEWParser::AWPropertyContext* SEWParser::AComponentContext::aWProperty() {
  return getRuleContext<SEWParser::AWPropertyContext>(0);
}

SEWParser::AWSequenceContext* SEWParser::AComponentContext::aWSequence() {
  return getRuleContext<SEWParser::AWSequenceContext>(0);
}

SEWParser::ANormalFormContext* SEWParser::AComponentContext::aNormalForm() {
  return getRuleContext<SEWParser::ANormalFormContext>(0);
}

SEWParser::TagProgramContext* SEWParser::AComponentContext::tagProgram() {
  return getRuleContext<SEWParser::TagProgramContext>(0);
}


size_t SEWParser::AComponentContext::getRuleIndex() const {
  return SEWParser::RuleAComponent;
}


SEWParser::AComponentContext* SEWParser::aComponent(WObject * wfContainer) {
  AComponentContext *_localctx = _tracker.createInstance<AComponentContext>(_ctx, getState(), wfContainer);
  enterRule(_localctx, 50, SEWParser::RuleAComponent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(364);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(352);
      antlrcpp::downCast<AComponentContext *>(_localctx)->wp = aWProperty(_localctx->wfContainer);
       antlrcpp::downCast<AComponentContext *>(_localctx)->wfObject =  antlrcpp::downCast<AComponentContext *>(_localctx)->wp->wfProperty; 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(355);
      antlrcpp::downCast<AComponentContext *>(_localctx)->ws = aWSequence(_localctx->wfContainer);
       antlrcpp::downCast<AComponentContext *>(_localctx)->wfObject =  antlrcpp::downCast<AComponentContext *>(_localctx)->ws->wfSequence; 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(358);
      antlrcpp::downCast<AComponentContext *>(_localctx)->nf = aNormalForm(_localctx->wfContainer);
       antlrcpp::downCast<AComponentContext *>(_localctx)->wfObject =  antlrcpp::downCast<AComponentContext *>(_localctx)->nf->wfObject;   
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(361);
      antlrcpp::downCast<AComponentContext *>(_localctx)->tp = tagProgram(_localctx->wfContainer);
       antlrcpp::downCast<AComponentContext *>(_localctx)->wfObject =  antlrcpp::downCast<AComponentContext *>(_localctx)->tp->wfObject;   
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ASequenceComponentContext ------------------------------------------------------------------

SEWParser::ASequenceComponentContext::ASequenceComponentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::ASequenceComponentContext::ASequenceComponentContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
}

SEWParser::AWPropertyContext* SEWParser::ASequenceComponentContext::aWProperty() {
  return getRuleContext<SEWParser::AWPropertyContext>(0);
}

SEWParser::ANormalFormContext* SEWParser::ASequenceComponentContext::aNormalForm() {
  return getRuleContext<SEWParser::ANormalFormContext>(0);
}

SEWParser::TagProgramContext* SEWParser::ASequenceComponentContext::tagProgram() {
  return getRuleContext<SEWParser::TagProgramContext>(0);
}


size_t SEWParser::ASequenceComponentContext::getRuleIndex() const {
  return SEWParser::RuleASequenceComponent;
}


SEWParser::ASequenceComponentContext* SEWParser::aSequenceComponent(WObject * wfContainer) {
  ASequenceComponentContext *_localctx = _tracker.createInstance<ASequenceComponentContext>(_ctx, getState(), wfContainer);
  enterRule(_localctx, 52, SEWParser::RuleASequenceComponent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(375);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(366);
      antlrcpp::downCast<ASequenceComponentContext *>(_localctx)->wp = aWProperty(_localctx->wfContainer);
       antlrcpp::downCast<ASequenceComponentContext *>(_localctx)->wfObject =  antlrcpp::downCast<ASequenceComponentContext *>(_localctx)->wp->wfProperty; 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(369);
      antlrcpp::downCast<ASequenceComponentContext *>(_localctx)->nf = aNormalForm(_localctx->wfContainer);
       antlrcpp::downCast<ASequenceComponentContext *>(_localctx)->wfObject =  antlrcpp::downCast<ASequenceComponentContext *>(_localctx)->nf->wfObject; 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(372);
      antlrcpp::downCast<ASequenceComponentContext *>(_localctx)->tp = tagProgram(_localctx->wfContainer);
       antlrcpp::downCast<ASequenceComponentContext *>(_localctx)->wfObject =  antlrcpp::downCast<ASequenceComponentContext *>(_localctx)->tp->wfObject; 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AWSequenceContext ------------------------------------------------------------------

SEWParser::AWSequenceContext::AWSequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::AWSequenceContext::AWSequenceContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
}

std::vector<tree::TerminalNode *> SEWParser::AWSequenceContext::Identifier() {
  return getTokens(SEWParser::Identifier);
}

tree::TerminalNode* SEWParser::AWSequenceContext::Identifier(size_t i) {
  return getToken(SEWParser::Identifier, i);
}

tree::TerminalNode* SEWParser::AWSequenceContext::LBRACK() {
  return getToken(SEWParser::LBRACK, 0);
}

tree::TerminalNode* SEWParser::AWSequenceContext::RBRACK() {
  return getToken(SEWParser::RBRACK, 0);
}

tree::TerminalNode* SEWParser::AWSequenceContext::DoubleQuotedString() {
  return getToken(SEWParser::DoubleQuotedString, 0);
}

tree::TerminalNode* SEWParser::AWSequenceContext::SingleQuotedString() {
  return getToken(SEWParser::SingleQuotedString, 0);
}

std::vector<SEWParser::ASequenceComponentContext *> SEWParser::AWSequenceContext::aSequenceComponent() {
  return getRuleContexts<SEWParser::ASequenceComponentContext>();
}

SEWParser::ASequenceComponentContext* SEWParser::AWSequenceContext::aSequenceComponent(size_t i) {
  return getRuleContext<SEWParser::ASequenceComponentContext>(i);
}

tree::TerminalNode* SEWParser::AWSequenceContext::COLON() {
  return getToken(SEWParser::COLON, 0);
}

tree::TerminalNode* SEWParser::AWSequenceContext::AtLeftValueIdentifier() {
  return getToken(SEWParser::AtLeftValueIdentifier, 0);
}

tree::TerminalNode* SEWParser::AWSequenceContext::Section() {
  return getToken(SEWParser::Section, 0);
}

tree::TerminalNode* SEWParser::AWSequenceContext::Endsection() {
  return getToken(SEWParser::Endsection, 0);
}

std::vector<SEWParser::AComponentContext *> SEWParser::AWSequenceContext::aComponent() {
  return getRuleContexts<SEWParser::AComponentContext>();
}

SEWParser::AComponentContext* SEWParser::AWSequenceContext::aComponent(size_t i) {
  return getRuleContext<SEWParser::AComponentContext>(i);
}


size_t SEWParser::AWSequenceContext::getRuleIndex() const {
  return SEWParser::RuleAWSequence;
}


SEWParser::AWSequenceContext* SEWParser::aWSequence(WObject * wfContainer) {
  AWSequenceContext *_localctx = _tracker.createInstance<AWSequenceContext>(_ctx, getState(), wfContainer);
  enterRule(_localctx, 54, SEWParser::RuleAWSequence);

  	int bLine = getNextTokenLine();
  	int bOffset = getNextTokenStartIndex();

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(435);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(377);
      antlrcpp::downCast<AWSequenceContext *>(_localctx)->identifierToken = match(SEWParser::Identifier);

      	  	antlrcpp::downCast<AWSequenceContext *>(_localctx)->wfSequence =  mWObjectManager->newWSequence(_localctx->wfContainer, antlrcpp::downCast<AWSequenceContext *>(_localctx)->identifierToken->getText());
      AVM_IF_DEBUG_LEVEL_FLAG( HIGH , PARSING )
      	AVM_OS_TRACE << TAB << "->@section :> " << _localctx->wfSequence->getNameID() << std::endl;
      AVM_ENDIF_DEBUG_LEVEL_FLAG( HIGH , PARSING )
      	  
      setState(383);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case SEWParser::DoubleQuotedString: {
          setState(379);
          antlrcpp::downCast<AWSequenceContext *>(_localctx)->dqs = match(SEWParser::DoubleQuotedString);
           _localctx->wfSequence->setUnrestrictedName( antlrcpp::downCast<AWSequenceContext *>(_localctx)->dqs->getText() ); 
          break;
        }

        case SEWParser::SingleQuotedString: {
          setState(381);
          antlrcpp::downCast<AWSequenceContext *>(_localctx)->sqs = match(SEWParser::SingleQuotedString);
           _localctx->wfSequence->setUnrestrictedName( antlrcpp::downCast<AWSequenceContext *>(_localctx)->sqs->getText() ); 
          break;
        }

        case SEWParser::LBRACK: {
          break;
        }

      default:
        break;
      }
      setState(385);
      match(SEWParser::LBRACK);
      setState(391);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 5632) != 0) || ((((_la - 76) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 76)) & 139854348289) != 0)) {
        setState(386);
        antlrcpp::downCast<AWSequenceContext *>(_localctx)->wSeq = aSequenceComponent(_localctx->wfSequence);
         addElement(_localctx->wfSequence, antlrcpp::downCast<AWSequenceContext *>(_localctx)->wSeq->wfObject); 
        setState(393);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
       setLocation(_localctx->wfSequence, bLine, getNextTokenLine(), bOffset, getNextTokenStopIndex()); 
      setState(395);
      match(SEWParser::RBRACK);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(396);
      antlrcpp::downCast<AWSequenceContext *>(_localctx)->identifierToken = match(SEWParser::Identifier);
      setState(397);
      match(SEWParser::COLON);

      	  	antlrcpp::downCast<AWSequenceContext *>(_localctx)->wfSequence =  mWObjectManager->newWSequence(_localctx->wfContainer, antlrcpp::downCast<AWSequenceContext *>(_localctx)->identifierToken->getText());

      AVM_IF_DEBUG_LEVEL_FLAG( HIGH , PARSING )
      	AVM_OS_TRACE << TAB << "->@section :> " << _localctx->wfSequence->getNameID() << std::endl;
      AVM_ENDIF_DEBUG_LEVEL_FLAG( HIGH , PARSING )
      	  
      setState(404);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(399);
          antlrcpp::downCast<AWSequenceContext *>(_localctx)->wSeq = aSequenceComponent(_localctx->wfSequence);
           addElement(_localctx->wfSequence, antlrcpp::downCast<AWSequenceContext *>(_localctx)->wSeq->wfObject);  
        }
        setState(406);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx);
      }
       setLocation(_localctx->wfSequence, bLine, getNextTokenLine(), bOffset, getNextTokenStopIndex()); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(408);
      antlrcpp::downCast<AWSequenceContext *>(_localctx)->atleftvalueidentifierToken = match(SEWParser::AtLeftValueIdentifier);
      setState(409);
      match(SEWParser::COLON);

      	  	antlrcpp::downCast<AWSequenceContext *>(_localctx)->wfSequence =  mWObjectManager->newWSequence(_localctx->wfContainer, antlrcpp::downCast<AWSequenceContext *>(_localctx)->atleftvalueidentifierToken->getText());

      AVM_IF_DEBUG_LEVEL_FLAG( HIGH , PARSING )
      	AVM_OS_TRACE << TAB << "->@section :> " << _localctx->wfSequence->getNameID() << std::endl;
      AVM_ENDIF_DEBUG_LEVEL_FLAG( HIGH , PARSING )
      	  
      setState(416);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(411);
          antlrcpp::downCast<AWSequenceContext *>(_localctx)->wSeq = aSequenceComponent(_localctx->wfSequence);
           addElement(_localctx->wfSequence, antlrcpp::downCast<AWSequenceContext *>(_localctx)->wSeq->wfObject);  
        }
        setState(418);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx);
      }
       setLocation(_localctx->wfSequence, bLine, getNextTokenLine(), bOffset, getNextTokenStopIndex()); 
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(420);
      match(SEWParser::Section);
      setState(421);
      antlrcpp::downCast<AWSequenceContext *>(_localctx)->identifierToken = match(SEWParser::Identifier);

      	  	antlrcpp::downCast<AWSequenceContext *>(_localctx)->wfSequence =  mWObjectManager->newWSequence(_localctx->wfContainer, antlrcpp::downCast<AWSequenceContext *>(_localctx)->identifierToken->getText());

      AVM_IF_DEBUG_LEVEL_FLAG( HIGH , PARSING )
      	AVM_OS_TRACE << TAB << "->section :> " << _localctx->wfSequence->getNameID() << std::endl;
      AVM_ENDIF_DEBUG_LEVEL_FLAG( HIGH , PARSING )
      	  
      setState(428);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 22016) != 0) || ((((_la - 76) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 76)) & 139854348289) != 0)) {
        setState(423);
        antlrcpp::downCast<AWSequenceContext *>(_localctx)->wComp = aComponent(_localctx->wfSequence);
         addElement(_localctx->wfSequence, antlrcpp::downCast<AWSequenceContext *>(_localctx)->wComp->wfObject); 
        setState(430);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
       setLocation(_localctx->wfSequence, bLine, getNextTokenLine(), bOffset, getNextTokenStopIndex()); 
      setState(432);
      match(SEWParser::Endsection);
      setState(433);

      if (!( getCurrentToken()->getText() == antlrcpp::downCast<AWSequenceContext *>(_localctx)->identifierToken->getText() )) throw FailedPredicateException(this, " getCurrentToken()->getText() == $Identifier->getText() ");
      setState(434);
      antlrcpp::downCast<AWSequenceContext *>(_localctx)->eId = match(SEWParser::Identifier);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AWPropertyContext ------------------------------------------------------------------

SEWParser::AWPropertyContext::AWPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::AWPropertyContext::AWPropertyContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
}

tree::TerminalNode* SEWParser::AWPropertyContext::Attr_UFI() {
  return getToken(SEWParser::Attr_UFI, 0);
}

tree::TerminalNode* SEWParser::AWPropertyContext::EQ() {
  return getToken(SEWParser::EQ, 0);
}

tree::TerminalNode* SEWParser::AWPropertyContext::Attr_NAME() {
  return getToken(SEWParser::Attr_NAME, 0);
}

tree::TerminalNode* SEWParser::AWPropertyContext::Attr_TYPE() {
  return getToken(SEWParser::Attr_TYPE, 0);
}

tree::TerminalNode* SEWParser::AWPropertyContext::Attr_DESIGN() {
  return getToken(SEWParser::Attr_DESIGN, 0);
}

tree::TerminalNode* SEWParser::AWPropertyContext::Attr_PUBLIC() {
  return getToken(SEWParser::Attr_PUBLIC, 0);
}

tree::TerminalNode* SEWParser::AWPropertyContext::Attr_STATIC() {
  return getToken(SEWParser::Attr_STATIC, 0);
}

tree::TerminalNode* SEWParser::AWPropertyContext::Attr_FINAL() {
  return getToken(SEWParser::Attr_FINAL, 0);
}

tree::TerminalNode* SEWParser::AWPropertyContext::Attr_VOLATILE() {
  return getToken(SEWParser::Attr_VOLATILE, 0);
}

tree::TerminalNode* SEWParser::AWPropertyContext::Attr_REFERENCE() {
  return getToken(SEWParser::Attr_REFERENCE, 0);
}

tree::TerminalNode* SEWParser::AWPropertyContext::Form() {
  return getToken(SEWParser::Form, 0);
}

tree::TerminalNode* SEWParser::AWPropertyContext::Meta() {
  return getToken(SEWParser::Meta, 0);
}

SEWParser::AWPropertyValueContext* SEWParser::AWPropertyContext::aWPropertyValue() {
  return getRuleContext<SEWParser::AWPropertyValueContext>(0);
}

SEWParser::AnAssignOpContext* SEWParser::AWPropertyContext::anAssignOp() {
  return getRuleContext<SEWParser::AnAssignOpContext>(0);
}

tree::TerminalNode* SEWParser::AWPropertyContext::AtLeftValueIdentifier() {
  return getToken(SEWParser::AtLeftValueIdentifier, 0);
}

tree::TerminalNode* SEWParser::AWPropertyContext::Identifier() {
  return getToken(SEWParser::Identifier, 0);
}

tree::TerminalNode* SEWParser::AWPropertyContext::SEMI() {
  return getToken(SEWParser::SEMI, 0);
}


size_t SEWParser::AWPropertyContext::getRuleIndex() const {
  return SEWParser::RuleAWProperty;
}


SEWParser::AWPropertyContext* SEWParser::aWProperty(WObject * wfContainer) {
  AWPropertyContext *_localctx = _tracker.createInstance<AWPropertyContext>(_ctx, getState(), wfContainer);
  enterRule(_localctx, 56, SEWParser::RuleAWProperty);

  	int bLine = getNextTokenLine();
  	int bOffset = getNextTokenStartIndex();

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(502);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::Attr_UFI: {
        setState(437);
        match(SEWParser::Attr_UFI);
        setState(438);
        match(SEWParser::EQ);
        setState(439);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->wu = aWPropertyValue(_localctx->wfContainer, "ufi");
         antlrcpp::downCast<AWPropertyContext *>(_localctx)->wfProperty =  antlrcpp::downCast<AWPropertyContext *>(_localctx)->wu->wfProperty; 
        break;
      }

      case SEWParser::Attr_NAME: {
        setState(442);
        match(SEWParser::Attr_NAME);
        setState(443);
        match(SEWParser::EQ);
        setState(444);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->wn = aWPropertyValue(_localctx->wfContainer, "name");
         antlrcpp::downCast<AWPropertyContext *>(_localctx)->wfProperty =  antlrcpp::downCast<AWPropertyContext *>(_localctx)->wn->wfProperty; 
        break;
      }

      case SEWParser::Attr_TYPE: {
        setState(447);
        match(SEWParser::Attr_TYPE);
        setState(448);
        match(SEWParser::EQ);
        setState(449);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->wt = aWPropertyValue(_localctx->wfContainer, "type");
         antlrcpp::downCast<AWPropertyContext *>(_localctx)->wfProperty =  antlrcpp::downCast<AWPropertyContext *>(_localctx)->wt->wfProperty; 
        break;
      }

      case SEWParser::Attr_DESIGN: {
        setState(452);
        match(SEWParser::Attr_DESIGN);
        setState(453);
        match(SEWParser::EQ);
        setState(454);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->wd = aWPropertyValue(_localctx->wfContainer, "design");
         antlrcpp::downCast<AWPropertyContext *>(_localctx)->wfProperty =  antlrcpp::downCast<AWPropertyContext *>(_localctx)->wd->wfProperty; 
        break;
      }

      case SEWParser::Attr_PUBLIC: {
        setState(457);
        match(SEWParser::Attr_PUBLIC);
        setState(458);
        match(SEWParser::EQ);
        setState(459);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->wp = aWPropertyValue(_localctx->wfContainer, "public");
         antlrcpp::downCast<AWPropertyContext *>(_localctx)->wfProperty =  antlrcpp::downCast<AWPropertyContext *>(_localctx)->wp->wfProperty; 
        break;
      }

      case SEWParser::Attr_STATIC: {
        setState(462);
        match(SEWParser::Attr_STATIC);
        setState(463);
        match(SEWParser::EQ);
        setState(464);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->ws = aWPropertyValue(_localctx->wfContainer, "static");
         antlrcpp::downCast<AWPropertyContext *>(_localctx)->wfProperty =  antlrcpp::downCast<AWPropertyContext *>(_localctx)->ws->wfProperty; 
        break;
      }

      case SEWParser::Attr_FINAL: {
        setState(467);
        match(SEWParser::Attr_FINAL);
        setState(468);
        match(SEWParser::EQ);
        setState(469);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->wf = aWPropertyValue(_localctx->wfContainer, "final");
         antlrcpp::downCast<AWPropertyContext *>(_localctx)->wfProperty =  antlrcpp::downCast<AWPropertyContext *>(_localctx)->wf->wfProperty; 
        break;
      }

      case SEWParser::Attr_VOLATILE: {
        setState(472);
        match(SEWParser::Attr_VOLATILE);
        setState(473);
        match(SEWParser::EQ);
        setState(474);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->wv = aWPropertyValue(_localctx->wfContainer, "volatile");
         antlrcpp::downCast<AWPropertyContext *>(_localctx)->wfProperty =  antlrcpp::downCast<AWPropertyContext *>(_localctx)->wv->wfProperty; 
        break;
      }

      case SEWParser::Attr_REFERENCE: {
        setState(477);
        match(SEWParser::Attr_REFERENCE);
        setState(478);
        match(SEWParser::EQ);
        setState(479);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->wr = aWPropertyValue(_localctx->wfContainer, "reference");
         antlrcpp::downCast<AWPropertyContext *>(_localctx)->wfProperty =  antlrcpp::downCast<AWPropertyContext *>(_localctx)->wr->wfProperty; 
        break;
      }

      case SEWParser::Form: {
        setState(482);
        match(SEWParser::Form);
        setState(483);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->ao = anAssignOp();
        setState(484);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->wform = aWPropertyValue(_localctx->wfContainer, "form");
         antlrcpp::downCast<AWPropertyContext *>(_localctx)->wfProperty =  antlrcpp::downCast<AWPropertyContext *>(_localctx)->wform->wfProperty;  _localctx->wfProperty->setSpecifierOp( antlrcpp::downCast<AWPropertyContext *>(_localctx)->ao->operation ); 
        break;
      }

      case SEWParser::Meta: {
        setState(487);
        match(SEWParser::Meta);
        setState(488);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->ao = anAssignOp();
        setState(489);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->wm = aWPropertyValue(_localctx->wfContainer, "meta");
         antlrcpp::downCast<AWPropertyContext *>(_localctx)->wfProperty =  antlrcpp::downCast<AWPropertyContext *>(_localctx)->wm->wfProperty;  _localctx->wfProperty->setSpecifierOp( antlrcpp::downCast<AWPropertyContext *>(_localctx)->ao->operation ); 
        break;
      }

      case SEWParser::AtLeftValueIdentifier: {
        setState(492);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->at_lv = match(SEWParser::AtLeftValueIdentifier);
        setState(493);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->ao = anAssignOp();
        setState(494);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->wlva = aWPropertyValue(_localctx->wfContainer, antlrcpp::downCast<AWPropertyContext *>(_localctx)->at_lv->getText());
         antlrcpp::downCast<AWPropertyContext *>(_localctx)->wfProperty =  antlrcpp::downCast<AWPropertyContext *>(_localctx)->wlva->wfProperty;  _localctx->wfProperty->setSpecifierOp( antlrcpp::downCast<AWPropertyContext *>(_localctx)->ao->operation ); 
        break;
      }

      case SEWParser::Identifier: {
        setState(497);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->lv = match(SEWParser::Identifier);
        setState(498);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->ao = anAssignOp();
        setState(499);
        antlrcpp::downCast<AWPropertyContext *>(_localctx)->wida = aWPropertyValue(_localctx->wfContainer, antlrcpp::downCast<AWPropertyContext *>(_localctx)->lv->getText());
         antlrcpp::downCast<AWPropertyContext *>(_localctx)->wfProperty =  antlrcpp::downCast<AWPropertyContext *>(_localctx)->wida->wfProperty;  _localctx->wfProperty->setSpecifierOp( antlrcpp::downCast<AWPropertyContext *>(_localctx)->ao->operation ); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
     setLocation(_localctx->wfProperty, bLine, getNextTokenLine(), bOffset, getNextTokenStopIndex()); 
    setState(506);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SEWParser::SEMI) {
      setState(505);
      match(SEWParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnAssignOpContext ------------------------------------------------------------------

SEWParser::AnAssignOpContext::AnAssignOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::AnAssignOpContext::ASSIGN() {
  return getToken(SEWParser::ASSIGN, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::EQ() {
  return getToken(SEWParser::EQ, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::EQEQ() {
  return getToken(SEWParser::EQEQ, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::NEQ() {
  return getToken(SEWParser::NEQ, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::SEQ() {
  return getToken(SEWParser::SEQ, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::NSEQ() {
  return getToken(SEWParser::NSEQ, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::BANDEQ() {
  return getToken(SEWParser::BANDEQ, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::BOREQ() {
  return getToken(SEWParser::BOREQ, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::BXOREQ() {
  return getToken(SEWParser::BXOREQ, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::BNOTEQ() {
  return getToken(SEWParser::BNOTEQ, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::PLUSEQ() {
  return getToken(SEWParser::PLUSEQ, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::MINUSEQ() {
  return getToken(SEWParser::MINUSEQ, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::MULTEQ() {
  return getToken(SEWParser::MULTEQ, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::DIVEQ() {
  return getToken(SEWParser::DIVEQ, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::MODEQ() {
  return getToken(SEWParser::MODEQ, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::GT() {
  return getToken(SEWParser::GT, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::GTE() {
  return getToken(SEWParser::GTE, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::LT_() {
  return getToken(SEWParser::LT_, 0);
}

tree::TerminalNode* SEWParser::AnAssignOpContext::LTE() {
  return getToken(SEWParser::LTE, 0);
}


size_t SEWParser::AnAssignOpContext::getRuleIndex() const {
  return SEWParser::RuleAnAssignOp;
}


SEWParser::AnAssignOpContext* SEWParser::anAssignOp() {
  AnAssignOpContext *_localctx = _tracker.createInstance<AnAssignOpContext>(_ctx, getState());
  enterRule(_localctx, 58, SEWParser::RuleAnAssignOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(546);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::ASSIGN: {
        enterOuterAlt(_localctx, 1);
        setState(508);
        match(SEWParser::ASSIGN);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_ASSIGN; 
        break;
      }

      case SEWParser::EQ: {
        enterOuterAlt(_localctx, 2);
        setState(510);
        match(SEWParser::EQ);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_EQ;     
        break;
      }

      case SEWParser::EQEQ: {
        enterOuterAlt(_localctx, 3);
        setState(512);
        match(SEWParser::EQEQ);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_EQ;     
        break;
      }

      case SEWParser::NEQ: {
        enterOuterAlt(_localctx, 4);
        setState(514);
        match(SEWParser::NEQ);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_NEQ;    
        break;
      }

      case SEWParser::SEQ: {
        enterOuterAlt(_localctx, 5);
        setState(516);
        match(SEWParser::SEQ);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_SEQ;    
        break;
      }

      case SEWParser::NSEQ: {
        enterOuterAlt(_localctx, 6);
        setState(518);
        match(SEWParser::NSEQ);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_NSEQ;   
        break;
      }

      case SEWParser::BANDEQ: {
        enterOuterAlt(_localctx, 7);
        setState(520);
        match(SEWParser::BANDEQ);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_BAND;   
        break;
      }

      case SEWParser::BOREQ: {
        enterOuterAlt(_localctx, 8);
        setState(522);
        match(SEWParser::BOREQ);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_BOR;    
        break;
      }

      case SEWParser::BXOREQ: {
        enterOuterAlt(_localctx, 9);
        setState(524);
        match(SEWParser::BXOREQ);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_BXOR;   
        break;
      }

      case SEWParser::BNOTEQ: {
        enterOuterAlt(_localctx, 10);
        setState(526);
        match(SEWParser::BNOTEQ);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_BNOT;   
        break;
      }

      case SEWParser::PLUSEQ: {
        enterOuterAlt(_localctx, 11);
        setState(528);
        match(SEWParser::PLUSEQ);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_PLUS;   
        break;
      }

      case SEWParser::MINUSEQ: {
        enterOuterAlt(_localctx, 12);
        setState(530);
        match(SEWParser::MINUSEQ);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_MINUS;  
        break;
      }

      case SEWParser::MULTEQ: {
        enterOuterAlt(_localctx, 13);
        setState(532);
        match(SEWParser::MULTEQ);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_MULT;   
        break;
      }

      case SEWParser::DIVEQ: {
        enterOuterAlt(_localctx, 14);
        setState(534);
        match(SEWParser::DIVEQ);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_DIV;    
        break;
      }

      case SEWParser::MODEQ: {
        enterOuterAlt(_localctx, 15);
        setState(536);
        match(SEWParser::MODEQ);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_MOD;    
        break;
      }

      case SEWParser::GT: {
        enterOuterAlt(_localctx, 16);
        setState(538);
        match(SEWParser::GT);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_GT;     
        break;
      }

      case SEWParser::GTE: {
        enterOuterAlt(_localctx, 17);
        setState(540);
        match(SEWParser::GTE);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_GTE;    
        break;
      }

      case SEWParser::LT_: {
        enterOuterAlt(_localctx, 18);
        setState(542);
        match(SEWParser::LT_);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_LT;     
        break;
      }

      case SEWParser::LTE: {
        enterOuterAlt(_localctx, 19);
        setState(544);
        match(SEWParser::LTE);
         antlrcpp::downCast<AnAssignOpContext *>(_localctx)->operation =  AVM_OPCODE_LTE;    
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AWPropertyValueContext ------------------------------------------------------------------

SEWParser::AWPropertyValueContext::AWPropertyValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::AWPropertyValueContext::AWPropertyValueContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer, std::string aNameID)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
  this->aNameID = aNameID;
}

tree::TerminalNode* SEWParser::AWPropertyValueContext::LPROG() {
  return getToken(SEWParser::LPROG, 0);
}

tree::TerminalNode* SEWParser::AWPropertyValueContext::RCURLY() {
  return getToken(SEWParser::RCURLY, 0);
}

SEWParser::AnOperatorContext* SEWParser::AWPropertyValueContext::anOperator() {
  return getRuleContext<SEWParser::AnOperatorContext>(0);
}

std::vector<SEWParser::AvmProgramContext *> SEWParser::AWPropertyValueContext::avmProgram() {
  return getRuleContexts<SEWParser::AvmProgramContext>();
}

SEWParser::AvmProgramContext* SEWParser::AWPropertyValueContext::avmProgram(size_t i) {
  return getRuleContext<SEWParser::AvmProgramContext>(i);
}

tree::TerminalNode* SEWParser::AWPropertyValueContext::LPAREN() {
  return getToken(SEWParser::LPAREN, 0);
}

tree::TerminalNode* SEWParser::AWPropertyValueContext::RPAREN() {
  return getToken(SEWParser::RPAREN, 0);
}

SEWParser::ExpressionContext* SEWParser::AWPropertyValueContext::expression() {
  return getRuleContext<SEWParser::ExpressionContext>(0);
}

SEWParser::Expression_invokeContext* SEWParser::AWPropertyValueContext::expression_invoke() {
  return getRuleContext<SEWParser::Expression_invokeContext>(0);
}

tree::TerminalNode* SEWParser::AWPropertyValueContext::True() {
  return getToken(SEWParser::True, 0);
}

tree::TerminalNode* SEWParser::AWPropertyValueContext::False() {
  return getToken(SEWParser::False, 0);
}

tree::TerminalNode* SEWParser::AWPropertyValueContext::MINUS() {
  return getToken(SEWParser::MINUS, 0);
}

tree::TerminalNode* SEWParser::AWPropertyValueContext::IntegerNumber() {
  return getToken(SEWParser::IntegerNumber, 0);
}

tree::TerminalNode* SEWParser::AWPropertyValueContext::PLUS() {
  return getToken(SEWParser::PLUS, 0);
}

tree::TerminalNode* SEWParser::AWPropertyValueContext::FloatingPointNumber() {
  return getToken(SEWParser::FloatingPointNumber, 0);
}

tree::TerminalNode* SEWParser::AWPropertyValueContext::CharacterLiteral() {
  return getToken(SEWParser::CharacterLiteral, 0);
}

tree::TerminalNode* SEWParser::AWPropertyValueContext::DoubleQuotedString() {
  return getToken(SEWParser::DoubleQuotedString, 0);
}

tree::TerminalNode* SEWParser::AWPropertyValueContext::SingleQuotedString() {
  return getToken(SEWParser::SingleQuotedString, 0);
}

SEWParser::UfiStringContext* SEWParser::AWPropertyValueContext::ufiString() {
  return getRuleContext<SEWParser::UfiStringContext>(0);
}

tree::TerminalNode* SEWParser::AWPropertyValueContext::BAND() {
  return getToken(SEWParser::BAND, 0);
}

SEWParser::ASymbolOperatorContext* SEWParser::AWPropertyValueContext::aSymbolOperator() {
  return getRuleContext<SEWParser::ASymbolOperatorContext>(0);
}

SEWParser::AnArrayContext* SEWParser::AWPropertyValueContext::anArray() {
  return getRuleContext<SEWParser::AnArrayContext>(0);
}

SEWParser::AListContext* SEWParser::AWPropertyValueContext::aList() {
  return getRuleContext<SEWParser::AListContext>(0);
}


size_t SEWParser::AWPropertyValueContext::getRuleIndex() const {
  return SEWParser::RuleAWPropertyValue;
}


SEWParser::AWPropertyValueContext* SEWParser::aWPropertyValue(WObject * wfContainer,std::string aNameID) {
  AWPropertyValueContext *_localctx = _tracker.createInstance<AWPropertyValueContext>(_ctx, getState(), wfContainer, aNameID);
  enterRule(_localctx, 60, SEWParser::RuleAWPropertyValue);

  	BFCode prog;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(612);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(548);
      match(SEWParser::LPROG);
      setState(549);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->op = anOperator();
       prog = StatementConstructor::newCode(antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->op->operation); 
      setState(556);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -70231326194176) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & 554154934077483) != 0)) {
        setState(551);
        antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->ap = avmProgram(_localctx->wfContainer);
         prog->append(antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->ap->code); 
        setState(558);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(559);
      match(SEWParser::RCURLY);

      		if( prog.invalid() || (antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->op->operation == NULL) )
      		{
      			//!! PARSE ERROR !!
      		}
      		else if( antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->op->operation->isOpCode( AVM_OPCODE_MINUS ) && (prog->size() == 1) )
      		{
      			prog->setOperator( OperatorManager::OPERATOR_UMINUS );
      		}
      		else if( antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->op->operation->isOpCode( AVM_OPCODE_IF ) && (prog->size() == 3) )
      		{
      			prog->setOperator( OperatorManager::OPERATOR_IFE );
      		}
      		else if( antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->op->operation->isOpCode( AVM_OPCODE_IFE ) && (prog->size() == 2) )
      		{
      			prog->setOperator( OperatorManager::OPERATOR_IF );
      		}

      		antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager
      				->newWPropertyExpression(_localctx->wfContainer, aNameID, prog);
      	
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(562);
      match(SEWParser::LPAREN);
      setState(563);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->e = expression();
      setState(564);
      match(SEWParser::RPAREN);
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager
      				->newWPropertyExpression(_localctx->wfContainer, aNameID, antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->e->expr);
      	
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(567);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->ei = expression_invoke();
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager
      				->newWPropertyExpression(_localctx->wfContainer, aNameID, antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->ei->expr);
      	
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(570);
      match(SEWParser::True);
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager
      			->newWPropertyBoolean(_localctx->wfContainer, aNameID, true);
      	
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(572);
      match(SEWParser::False);
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager->newWPropertyBoolean(
      							_localctx->wfContainer, aNameID, false); 
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(574);
      match(SEWParser::MINUS);
      setState(575);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->integernumberToken = match(SEWParser::IntegerNumber);
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager->newWPropertyInteger(
      					_localctx->wfContainer, aNameID, "-" + antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->integernumberToken->getText() );
      	
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(577);
      match(SEWParser::PLUS);
      setState(578);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->integernumberToken = match(SEWParser::IntegerNumber);
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager->newWPropertyInteger(
      					_localctx->wfContainer, aNameID, antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->integernumberToken->getText() );
      	
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(580);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->integernumberToken = match(SEWParser::IntegerNumber);
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager->newWPropertyInteger(
      					_localctx->wfContainer, aNameID, antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->integernumberToken->getText() );
      	
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(582);
      match(SEWParser::MINUS);
      setState(583);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->floatingpointnumberToken = match(SEWParser::FloatingPointNumber);
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager->newWPropertyFloat(
      				_localctx->wfContainer, aNameID, "-" + antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->floatingpointnumberToken->getText() );
      	
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(585);
      match(SEWParser::PLUS);
      setState(586);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->floatingpointnumberToken = match(SEWParser::FloatingPointNumber);
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager->newWPropertyFloat(
      					_localctx->wfContainer, aNameID, antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->floatingpointnumberToken->getText() );
      	
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(588);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->floatingpointnumberToken = match(SEWParser::FloatingPointNumber);
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager->newWPropertyFloat(
      					_localctx->wfContainer, aNameID, antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->floatingpointnumberToken->getText() );
      	
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(590);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->cl = match(SEWParser::CharacterLiteral);
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager->newWPropertyCharacter(
      					_localctx->wfContainer, aNameID, antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->cl->getText().c_str()[0]);
      	
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(592);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->dqs = match(SEWParser::DoubleQuotedString);
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager->newWPropertyDoubleQuoteString(
      						_localctx->wfContainer, aNameID, antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->dqs->getText());
      	
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(594);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->sqs = match(SEWParser::SingleQuotedString);
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager->newWPropertySingleQuoteString(
      						_localctx->wfContainer, aNameID, antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->sqs->getText());
      	
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(596);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->ufi = ufiString();
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager
      			->newWPropertyParsedIdentifier(_localctx->wfContainer, aNameID, antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->ufi->bfUFI);
      	
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(599);
      match(SEWParser::BAND);
      setState(600);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->bufi = ufiString();
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager
      			->newWPropertyParsedIdentifier(_localctx->wfContainer, aNameID, antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->bufi->bfUFI);
      	
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(603);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->sop = aSymbolOperator();
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager
      			->newWPropertyOperator(_localctx->wfContainer, aNameID, antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->sop->operation);
      	
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(606);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->aa = anArray(WObject::_NULL_);
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager
      			->newWPropertyArray(_localctx->wfContainer, aNameID, antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->aa->array);
      	
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(609);
      antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->al = aList(WObject::_NULL_);
       antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->wfProperty =  mWObjectManager
      			->newWPropertyArray(_localctx->wfContainer, aNameID, antlrcpp::downCast<AWPropertyValueContext *>(_localctx)->al->plist);
      	
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AReferenceContext ------------------------------------------------------------------

SEWParser::AReferenceContext::AReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::AReferenceContext::BAND() {
  return getToken(SEWParser::BAND, 0);
}

SEWParser::UfiStringContext* SEWParser::AReferenceContext::ufiString() {
  return getRuleContext<SEWParser::UfiStringContext>(0);
}


size_t SEWParser::AReferenceContext::getRuleIndex() const {
  return SEWParser::RuleAReference;
}


SEWParser::AReferenceContext* SEWParser::aReference() {
  AReferenceContext *_localctx = _tracker.createInstance<AReferenceContext>(_ctx, getState());
  enterRule(_localctx, 62, SEWParser::RuleAReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(614);
    match(SEWParser::BAND);
    setState(615);
    antlrcpp::downCast<AReferenceContext *>(_localctx)->ufi = ufiString();

    		antlrcpp::downCast<AReferenceContext *>(_localctx)->form =  mWObjectManager->bfRegisteredWObject( antlrcpp::downCast<AReferenceContext *>(_localctx)->ufi->bfUFI.str() );
    		if( _localctx->form.invalid() )
    		{
    			antlrcpp::downCast<AReferenceContext *>(_localctx)->form =  antlrcpp::downCast<AReferenceContext *>(_localctx)->ufi->bfUFI;
    		}
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TagProgramContext ------------------------------------------------------------------

SEWParser::TagProgramContext::TagProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::TagProgramContext::TagProgramContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
}

tree::TerminalNode* SEWParser::TagProgramContext::LCURLY() {
  return getToken(SEWParser::LCURLY, 0);
}

tree::TerminalNode* SEWParser::TagProgramContext::RCURLY() {
  return getToken(SEWParser::RCURLY, 0);
}

tree::TerminalNode* SEWParser::TagProgramContext::AtLeftValueIdentifier() {
  return getToken(SEWParser::AtLeftValueIdentifier, 0);
}

SEWParser::AvmProgramContext* SEWParser::TagProgramContext::avmProgram() {
  return getRuleContext<SEWParser::AvmProgramContext>(0);
}


size_t SEWParser::TagProgramContext::getRuleIndex() const {
  return SEWParser::RuleTagProgram;
}


SEWParser::TagProgramContext* SEWParser::tagProgram(WObject * wfContainer) {
  TagProgramContext *_localctx = _tracker.createInstance<TagProgramContext>(_ctx, getState(), wfContainer);
  enterRule(_localctx, 64, SEWParser::RuleTagProgram);

  	int bLine = getNextTokenLine();
  	int bOffset = getNextTokenStartIndex();


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(618);
    antlrcpp::downCast<TagProgramContext *>(_localctx)->at_lv = match(SEWParser::AtLeftValueIdentifier);
    setState(619);
    match(SEWParser::LCURLY);
    setState(620);
    antlrcpp::downCast<TagProgramContext *>(_localctx)->ap = avmProgram(_localctx->wfContainer);
     antlrcpp::downCast<TagProgramContext *>(_localctx)->wfObject =  mWObjectManager->newWProperty(_localctx->wfContainer, antlrcpp::downCast<TagProgramContext *>(_localctx)->at_lv->getText(), antlrcpp::downCast<TagProgramContext *>(_localctx)->ap->code); 
     setLocation(_localctx->wfObject, bLine, getNextTokenLine(), bOffset, getNextTokenStopIndex()); 
    setState(623);
    match(SEWParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AvmProgramContext ------------------------------------------------------------------

SEWParser::AvmProgramContext::AvmProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::AvmProgramContext::AvmProgramContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
}

tree::TerminalNode* SEWParser::AvmProgramContext::LPROG() {
  return getToken(SEWParser::LPROG, 0);
}

tree::TerminalNode* SEWParser::AvmProgramContext::RCURLY() {
  return getToken(SEWParser::RCURLY, 0);
}

SEWParser::AnOperatorContext* SEWParser::AvmProgramContext::anOperator() {
  return getRuleContext<SEWParser::AnOperatorContext>(0);
}

std::vector<SEWParser::AvmProgramContext *> SEWParser::AvmProgramContext::avmProgram() {
  return getRuleContexts<SEWParser::AvmProgramContext>();
}

SEWParser::AvmProgramContext* SEWParser::AvmProgramContext::avmProgram(size_t i) {
  return getRuleContext<SEWParser::AvmProgramContext>(i);
}

tree::TerminalNode* SEWParser::AvmProgramContext::LPAREN() {
  return getToken(SEWParser::LPAREN, 0);
}

tree::TerminalNode* SEWParser::AvmProgramContext::RPAREN() {
  return getToken(SEWParser::RPAREN, 0);
}

SEWParser::ExpressionContext* SEWParser::AvmProgramContext::expression() {
  return getRuleContext<SEWParser::ExpressionContext>(0);
}

SEWParser::Expression_invokeContext* SEWParser::AvmProgramContext::expression_invoke() {
  return getRuleContext<SEWParser::Expression_invokeContext>(0);
}

SEWParser::AnAtomContext* SEWParser::AvmProgramContext::anAtom() {
  return getRuleContext<SEWParser::AnAtomContext>(0);
}


size_t SEWParser::AvmProgramContext::getRuleIndex() const {
  return SEWParser::RuleAvmProgram;
}


SEWParser::AvmProgramContext* SEWParser::avmProgram(WObject * wfContainer) {
  AvmProgramContext *_localctx = _tracker.createInstance<AvmProgramContext>(_ctx, getState(), wfContainer);
  enterRule(_localctx, 66, SEWParser::RuleAvmProgram);

  	BFCode prog;

  //	int bLine = getNextTokenLine();
  //	int bOffset = getNextTokenStartIndex();

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(650);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::LPROG: {
        enterOuterAlt(_localctx, 1);
        setState(625);
        match(SEWParser::LPROG);
        setState(626);
        antlrcpp::downCast<AvmProgramContext *>(_localctx)->op = anOperator();
         antlrcpp::downCast<AvmProgramContext *>(_localctx)->code =  prog = StatementConstructor::newCode(antlrcpp::downCast<AvmProgramContext *>(_localctx)->op->operation); 
        setState(633);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -70231326194176) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & 554154934077483) != 0)) {
          setState(628);
          antlrcpp::downCast<AvmProgramContext *>(_localctx)->ap = avmProgram(_localctx->wfContainer);
           prog->append(antlrcpp::downCast<AvmProgramContext *>(_localctx)->ap->code); 
          setState(635);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(636);
        match(SEWParser::RCURLY);

        		if( prog.invalid() || (antlrcpp::downCast<AvmProgramContext *>(_localctx)->op->operation == NULL) )
        		{
        			//!! PARSE ERROR !!
        		}
        		else if( antlrcpp::downCast<AvmProgramContext *>(_localctx)->op->operation->isOpCode( AVM_OPCODE_MINUS ) && (prog->size() == 1) )
        		{
        			prog->setOperator( OperatorManager::OPERATOR_UMINUS );
        		}
        		else if( antlrcpp::downCast<AvmProgramContext *>(_localctx)->op->operation->isOpCode( AVM_OPCODE_IF ) && (prog->size() == 3) )
        		{
        			prog->setOperator( OperatorManager::OPERATOR_IFE );
        		}
        		else if( antlrcpp::downCast<AvmProgramContext *>(_localctx)->op->operation->isOpCode( AVM_OPCODE_IFE ) && (prog->size() == 2) )
        		{
        			prog->setOperator( OperatorManager::OPERATOR_IF );
        		}
        	
        break;
      }

      case SEWParser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(639);
        match(SEWParser::LPAREN);
        setState(640);
        antlrcpp::downCast<AvmProgramContext *>(_localctx)->pe = expression();
        setState(641);
        match(SEWParser::RPAREN);
         antlrcpp::downCast<AvmProgramContext *>(_localctx)->code =  antlrcpp::downCast<AvmProgramContext *>(_localctx)->pe->expr;  
        break;
      }

      case SEWParser::LPAREN_INVOKE: {
        enterOuterAlt(_localctx, 3);
        setState(644);
        antlrcpp::downCast<AvmProgramContext *>(_localctx)->ie = expression_invoke();
         antlrcpp::downCast<AvmProgramContext *>(_localctx)->code =  antlrcpp::downCast<AvmProgramContext *>(_localctx)->ie->expr;  
        break;
      }

      case SEWParser::Meta:
      case SEWParser::Form:
      case SEWParser::True:
      case SEWParser::False:
      case SEWParser::PLUS:
      case SEWParser::MINUS:
      case SEWParser::MOD:
      case SEWParser::MULT:
      case SEWParser::DIV:
      case SEWParser::POW:
      case SEWParser::ASSIGN:
      case SEWParser::PUSH:
      case SEWParser::ASSIGN_TOP:
      case SEWParser::TOP:
      case SEWParser::POP:
      case SEWParser::EQ:
      case SEWParser::EQEQ:
      case SEWParser::NEQ:
      case SEWParser::SEQ:
      case SEWParser::NSEQ:
      case SEWParser::GT:
      case SEWParser::GTE:
      case SEWParser::LT_:
      case SEWParser::LTE:
      case SEWParser::BAND:
      case SEWParser::BOR:
      case SEWParser::BXOR:
      case SEWParser::BNOT:
      case SEWParser::LSHIFT:
      case SEWParser::RSHIFT:
      case SEWParser::LAND:
      case SEWParser::LOR:
      case SEWParser::LNOT:
      case SEWParser::LBRACK:
      case SEWParser::LCURLY:
      case SEWParser::COLON2:
      case SEWParser::INTERLEAVING:
      case SEWParser::PARTIAL_ORDER:
      case SEWParser::ASYNC:
      case SEWParser::STRONG_SYNC:
      case SEWParser::WEAK_SYNC:
      case SEWParser::PARALLEL:
      case SEWParser::PRODUCT:
      case SEWParser::EXCLUSIVE:
      case SEWParser::NONDETERMINISM:
      case SEWParser::PRIOR_GT:
      case SEWParser::PRIOR_LT:
      case SEWParser::SEQUENCE:
      case SEWParser::SEQUENCE_SIDE:
      case SEWParser::SEQUENCE_WEAK:
      case SEWParser::FloatingPointNumber:
      case SEWParser::IntegerNumber:
      case SEWParser::CharacterLiteral:
      case SEWParser::DoubleQuotedString:
      case SEWParser::SingleQuotedString:
      case SEWParser::Identifier: {
        enterOuterAlt(_localctx, 4);
        setState(647);
        antlrcpp::downCast<AvmProgramContext *>(_localctx)->atom = anAtom();
         antlrcpp::downCast<AvmProgramContext *>(_localctx)->code =  antlrcpp::downCast<AvmProgramContext *>(_localctx)->atom->form;   
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnOperatorContext ------------------------------------------------------------------

SEWParser::AnOperatorContext::AnOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::ASymbolOperatorContext* SEWParser::AnOperatorContext::aSymbolOperator() {
  return getRuleContext<SEWParser::ASymbolOperatorContext>(0);
}

tree::TerminalNode* SEWParser::AnOperatorContext::Identifier() {
  return getToken(SEWParser::Identifier, 0);
}


size_t SEWParser::AnOperatorContext::getRuleIndex() const {
  return SEWParser::RuleAnOperator;
}


SEWParser::AnOperatorContext* SEWParser::anOperator() {
  AnOperatorContext *_localctx = _tracker.createInstance<AnOperatorContext>(_ctx, getState());
  enterRule(_localctx, 68, SEWParser::RuleAnOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(658);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(652);
      antlrcpp::downCast<AnOperatorContext *>(_localctx)->s = aSymbolOperator();
       antlrcpp::downCast<AnOperatorContext *>(_localctx)->operation =  antlrcpp::downCast<AnOperatorContext *>(_localctx)->s->operation; 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(655);

      if (!( OperatorManager::getOp(getCurrentToken()->getText()) != NULL )) throw FailedPredicateException(this, " OperatorManager::getOp(getCurrentToken()->getText()) != NULL ");
      setState(656);
      antlrcpp::downCast<AnOperatorContext *>(_localctx)->identifierToken = match(SEWParser::Identifier);
       antlrcpp::downCast<AnOperatorContext *>(_localctx)->operation =  OperatorManager::getOp(antlrcpp::downCast<AnOperatorContext *>(_localctx)->identifierToken->getText()); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ASymbolOperatorContext ------------------------------------------------------------------

SEWParser::ASymbolOperatorContext::ASymbolOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::PLUS() {
  return getToken(SEWParser::PLUS, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::MINUS() {
  return getToken(SEWParser::MINUS, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::MULT() {
  return getToken(SEWParser::MULT, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::DIV() {
  return getToken(SEWParser::DIV, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::MOD() {
  return getToken(SEWParser::MOD, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::POW() {
  return getToken(SEWParser::POW, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::EQ() {
  return getToken(SEWParser::EQ, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::EQEQ() {
  return getToken(SEWParser::EQEQ, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::NEQ() {
  return getToken(SEWParser::NEQ, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::SEQ() {
  return getToken(SEWParser::SEQ, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::NSEQ() {
  return getToken(SEWParser::NSEQ, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::GT() {
  return getToken(SEWParser::GT, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::GTE() {
  return getToken(SEWParser::GTE, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::LT_() {
  return getToken(SEWParser::LT_, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::LTE() {
  return getToken(SEWParser::LTE, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::BNOT() {
  return getToken(SEWParser::BNOT, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::BAND() {
  return getToken(SEWParser::BAND, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::BOR() {
  return getToken(SEWParser::BOR, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::BXOR() {
  return getToken(SEWParser::BXOR, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::LSHIFT() {
  return getToken(SEWParser::LSHIFT, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::RSHIFT() {
  return getToken(SEWParser::RSHIFT, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::LNOT() {
  return getToken(SEWParser::LNOT, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::LAND() {
  return getToken(SEWParser::LAND, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::LOR() {
  return getToken(SEWParser::LOR, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::ASSIGN() {
  return getToken(SEWParser::ASSIGN, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::PUSH() {
  return getToken(SEWParser::PUSH, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::POP() {
  return getToken(SEWParser::POP, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::TOP() {
  return getToken(SEWParser::TOP, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::ASSIGN_TOP() {
  return getToken(SEWParser::ASSIGN_TOP, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::SEQUENCE() {
  return getToken(SEWParser::SEQUENCE, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::SEQUENCE_SIDE() {
  return getToken(SEWParser::SEQUENCE_SIDE, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::SEQUENCE_WEAK() {
  return getToken(SEWParser::SEQUENCE_WEAK, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::INTERLEAVING() {
  return getToken(SEWParser::INTERLEAVING, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::PARTIAL_ORDER() {
  return getToken(SEWParser::PARTIAL_ORDER, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::EXCLUSIVE() {
  return getToken(SEWParser::EXCLUSIVE, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::NONDETERMINISM() {
  return getToken(SEWParser::NONDETERMINISM, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::PRIOR_GT() {
  return getToken(SEWParser::PRIOR_GT, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::PRIOR_LT() {
  return getToken(SEWParser::PRIOR_LT, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::PARALLEL() {
  return getToken(SEWParser::PARALLEL, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::PRODUCT() {
  return getToken(SEWParser::PRODUCT, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::ASYNC() {
  return getToken(SEWParser::ASYNC, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::STRONG_SYNC() {
  return getToken(SEWParser::STRONG_SYNC, 0);
}

tree::TerminalNode* SEWParser::ASymbolOperatorContext::WEAK_SYNC() {
  return getToken(SEWParser::WEAK_SYNC, 0);
}


size_t SEWParser::ASymbolOperatorContext::getRuleIndex() const {
  return SEWParser::RuleASymbolOperator;
}


SEWParser::ASymbolOperatorContext* SEWParser::aSymbolOperator() {
  ASymbolOperatorContext *_localctx = _tracker.createInstance<ASymbolOperatorContext>(_ctx, getState());
  enterRule(_localctx, 70, SEWParser::RuleASymbolOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(746);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::PLUS: {
        enterOuterAlt(_localctx, 1);
        setState(660);
        match(SEWParser::PLUS);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_PLUS;   
        break;
      }

      case SEWParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(662);
        match(SEWParser::MINUS);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_MINUS;  
        break;
      }

      case SEWParser::MULT: {
        enterOuterAlt(_localctx, 3);
        setState(664);
        match(SEWParser::MULT);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_MULT;   
        break;
      }

      case SEWParser::DIV: {
        enterOuterAlt(_localctx, 4);
        setState(666);
        match(SEWParser::DIV);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_DIV;    
        break;
      }

      case SEWParser::MOD: {
        enterOuterAlt(_localctx, 5);
        setState(668);
        match(SEWParser::MOD);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_MOD;    
        break;
      }

      case SEWParser::POW: {
        enterOuterAlt(_localctx, 6);
        setState(670);
        match(SEWParser::POW);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_POW;    
        break;
      }

      case SEWParser::EQ: {
        enterOuterAlt(_localctx, 7);
        setState(672);
        match(SEWParser::EQ);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_EQ;     
        break;
      }

      case SEWParser::EQEQ: {
        enterOuterAlt(_localctx, 8);
        setState(674);
        match(SEWParser::EQEQ);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_EQ;     
        break;
      }

      case SEWParser::NEQ: {
        enterOuterAlt(_localctx, 9);
        setState(676);
        match(SEWParser::NEQ);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_NEQ;    
        break;
      }

      case SEWParser::SEQ: {
        enterOuterAlt(_localctx, 10);
        setState(678);
        match(SEWParser::SEQ);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_SEQ;    
        break;
      }

      case SEWParser::NSEQ: {
        enterOuterAlt(_localctx, 11);
        setState(680);
        match(SEWParser::NSEQ);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_NSEQ;   
        break;
      }

      case SEWParser::GT: {
        enterOuterAlt(_localctx, 12);
        setState(682);
        match(SEWParser::GT);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_GT;     
        break;
      }

      case SEWParser::GTE: {
        enterOuterAlt(_localctx, 13);
        setState(684);
        match(SEWParser::GTE);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_GTE;    
        break;
      }

      case SEWParser::LT_: {
        enterOuterAlt(_localctx, 14);
        setState(686);
        match(SEWParser::LT_);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_LT;     
        break;
      }

      case SEWParser::LTE: {
        enterOuterAlt(_localctx, 15);
        setState(688);
        match(SEWParser::LTE);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_LTE;    
        break;
      }

      case SEWParser::BNOT: {
        enterOuterAlt(_localctx, 16);
        setState(690);
        match(SEWParser::BNOT);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_BNOT;   
        break;
      }

      case SEWParser::BAND: {
        enterOuterAlt(_localctx, 17);
        setState(692);
        match(SEWParser::BAND);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_BAND;   
        break;
      }

      case SEWParser::BOR: {
        enterOuterAlt(_localctx, 18);
        setState(694);
        match(SEWParser::BOR);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_BOR;    
        break;
      }

      case SEWParser::BXOR: {
        enterOuterAlt(_localctx, 19);
        setState(696);
        match(SEWParser::BXOR);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_BXOR;   
        break;
      }

      case SEWParser::LSHIFT: {
        enterOuterAlt(_localctx, 20);
        setState(698);
        match(SEWParser::LSHIFT);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_LSHIFT; 
        break;
      }

      case SEWParser::RSHIFT: {
        enterOuterAlt(_localctx, 21);
        setState(700);
        match(SEWParser::RSHIFT);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_RSHIFT; 
        break;
      }

      case SEWParser::LNOT: {
        enterOuterAlt(_localctx, 22);
        setState(702);
        match(SEWParser::LNOT);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_NOT;    
        break;
      }

      case SEWParser::LAND: {
        enterOuterAlt(_localctx, 23);
        setState(704);
        match(SEWParser::LAND);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_AND;    
        break;
      }

      case SEWParser::LOR: {
        enterOuterAlt(_localctx, 24);
        setState(706);
        match(SEWParser::LOR);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_OR;     
        break;
      }

      case SEWParser::ASSIGN: {
        enterOuterAlt(_localctx, 25);
        setState(708);
        match(SEWParser::ASSIGN);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_ASSIGN; 
        break;
      }

      case SEWParser::PUSH: {
        enterOuterAlt(_localctx, 26);
        setState(710);
        match(SEWParser::PUSH);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_PUSH;   
        break;
      }

      case SEWParser::POP: {
        enterOuterAlt(_localctx, 27);
        setState(712);
        match(SEWParser::POP);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_POP;    
        break;
      }

      case SEWParser::TOP: {
        enterOuterAlt(_localctx, 28);
        setState(714);
        match(SEWParser::TOP);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_TOP;    
        break;
      }

      case SEWParser::ASSIGN_TOP: {
        enterOuterAlt(_localctx, 29);
        setState(716);
        match(SEWParser::ASSIGN_TOP);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_ASSIGN_TOP;     
        break;
      }

      case SEWParser::SEQUENCE: {
        enterOuterAlt(_localctx, 30);
        setState(718);
        match(SEWParser::SEQUENCE);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_SEQUENCE;       
        break;
      }

      case SEWParser::SEQUENCE_SIDE: {
        enterOuterAlt(_localctx, 31);
        setState(720);
        match(SEWParser::SEQUENCE_SIDE);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_SEQUENCE_SIDE;  
        break;
      }

      case SEWParser::SEQUENCE_WEAK: {
        enterOuterAlt(_localctx, 32);
        setState(722);
        match(SEWParser::SEQUENCE_WEAK);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_SEQUENCE_WEAK;  
        break;
      }

      case SEWParser::INTERLEAVING: {
        enterOuterAlt(_localctx, 33);
        setState(724);
        match(SEWParser::INTERLEAVING);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_INTERLEAVING;   
        break;
      }

      case SEWParser::PARTIAL_ORDER: {
        enterOuterAlt(_localctx, 34);
        setState(726);
        match(SEWParser::PARTIAL_ORDER);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_PARTIAL_ORDER;  
        break;
      }

      case SEWParser::EXCLUSIVE: {
        enterOuterAlt(_localctx, 35);
        setState(728);
        match(SEWParser::EXCLUSIVE);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_EXCLUSIVE;      
        break;
      }

      case SEWParser::NONDETERMINISM: {
        enterOuterAlt(_localctx, 36);
        setState(730);
        match(SEWParser::NONDETERMINISM);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_NONDETERMINISM; 
        break;
      }

      case SEWParser::PRIOR_GT: {
        enterOuterAlt(_localctx, 37);
        setState(732);
        match(SEWParser::PRIOR_GT);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_PRIOR_GT; 
        break;
      }

      case SEWParser::PRIOR_LT: {
        enterOuterAlt(_localctx, 38);
        setState(734);
        match(SEWParser::PRIOR_LT);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_PRIOR_LT; 
        break;
      }

      case SEWParser::PARALLEL: {
        enterOuterAlt(_localctx, 39);
        setState(736);
        match(SEWParser::PARALLEL);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_PARALLEL; 
        break;
      }

      case SEWParser::PRODUCT: {
        enterOuterAlt(_localctx, 40);
        setState(738);
        match(SEWParser::PRODUCT);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_PRODUCT;  
        break;
      }

      case SEWParser::ASYNC: {
        enterOuterAlt(_localctx, 41);
        setState(740);
        match(SEWParser::ASYNC);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_ASYNCHRONOUS;       
        break;
      }

      case SEWParser::STRONG_SYNC: {
        enterOuterAlt(_localctx, 42);
        setState(742);
        match(SEWParser::STRONG_SYNC);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_STRONG_SYNCHRONOUS; 
        break;
      }

      case SEWParser::WEAK_SYNC: {
        enterOuterAlt(_localctx, 43);
        setState(744);
        match(SEWParser::WEAK_SYNC);
         antlrcpp::downCast<ASymbolOperatorContext *>(_localctx)->operation =  OperatorManager::OPERATOR_WEAK_SYNCHRONOUS;   
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnAtomContext ------------------------------------------------------------------

SEWParser::AnAtomContext::AnAtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::AnAtomContext::True() {
  return getToken(SEWParser::True, 0);
}

tree::TerminalNode* SEWParser::AnAtomContext::False() {
  return getToken(SEWParser::False, 0);
}

tree::TerminalNode* SEWParser::AnAtomContext::MINUS() {
  return getToken(SEWParser::MINUS, 0);
}

tree::TerminalNode* SEWParser::AnAtomContext::IntegerNumber() {
  return getToken(SEWParser::IntegerNumber, 0);
}

tree::TerminalNode* SEWParser::AnAtomContext::PLUS() {
  return getToken(SEWParser::PLUS, 0);
}

tree::TerminalNode* SEWParser::AnAtomContext::FloatingPointNumber() {
  return getToken(SEWParser::FloatingPointNumber, 0);
}

tree::TerminalNode* SEWParser::AnAtomContext::CharacterLiteral() {
  return getToken(SEWParser::CharacterLiteral, 0);
}

tree::TerminalNode* SEWParser::AnAtomContext::DoubleQuotedString() {
  return getToken(SEWParser::DoubleQuotedString, 0);
}

tree::TerminalNode* SEWParser::AnAtomContext::SingleQuotedString() {
  return getToken(SEWParser::SingleQuotedString, 0);
}

SEWParser::UfiStringContext* SEWParser::AnAtomContext::ufiString() {
  return getRuleContext<SEWParser::UfiStringContext>(0);
}

SEWParser::AReferenceContext* SEWParser::AnAtomContext::aReference() {
  return getRuleContext<SEWParser::AReferenceContext>(0);
}

SEWParser::ASymbolOperatorContext* SEWParser::AnAtomContext::aSymbolOperator() {
  return getRuleContext<SEWParser::ASymbolOperatorContext>(0);
}

SEWParser::AnArrayContext* SEWParser::AnAtomContext::anArray() {
  return getRuleContext<SEWParser::AnArrayContext>(0);
}

SEWParser::AListContext* SEWParser::AnAtomContext::aList() {
  return getRuleContext<SEWParser::AListContext>(0);
}


size_t SEWParser::AnAtomContext::getRuleIndex() const {
  return SEWParser::RuleAnAtom;
}


SEWParser::AnAtomContext* SEWParser::anAtom() {
  AnAtomContext *_localctx = _tracker.createInstance<AnAtomContext>(_ctx, getState());
  enterRule(_localctx, 72, SEWParser::RuleAnAtom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(789);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(748);
      match(SEWParser::True);
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  ExpressionConstructor::newBoolean(true); 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(750);
      match(SEWParser::False);
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  ExpressionConstructor::newBoolean(false); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(752);
      match(SEWParser::MINUS);
      setState(753);
      antlrcpp::downCast<AnAtomContext *>(_localctx)->mn = match(SEWParser::IntegerNumber);
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  ExpressionConstructor::newInteger( "-" + antlrcpp::downCast<AnAtomContext *>(_localctx)->mn->getText() ); 
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(755);
      match(SEWParser::PLUS);
      setState(756);
      antlrcpp::downCast<AnAtomContext *>(_localctx)->pn = match(SEWParser::IntegerNumber);
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  ExpressionConstructor::newInteger( antlrcpp::downCast<AnAtomContext *>(_localctx)->pn->getText() ); 
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(758);
      antlrcpp::downCast<AnAtomContext *>(_localctx)->n = match(SEWParser::IntegerNumber);
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  ExpressionConstructor::newInteger( antlrcpp::downCast<AnAtomContext *>(_localctx)->n->getText() ); 
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(760);
      match(SEWParser::MINUS);
      setState(761);
      antlrcpp::downCast<AnAtomContext *>(_localctx)->mf = match(SEWParser::FloatingPointNumber);
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  ExpressionConstructor::newFloat( "-" + antlrcpp::downCast<AnAtomContext *>(_localctx)->mf->getText() ); 
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(763);
      match(SEWParser::PLUS);
      setState(764);
      antlrcpp::downCast<AnAtomContext *>(_localctx)->pf = match(SEWParser::FloatingPointNumber);
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  ExpressionConstructor::newFloat( antlrcpp::downCast<AnAtomContext *>(_localctx)->pf->getText() ); 
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(766);
      antlrcpp::downCast<AnAtomContext *>(_localctx)->f = match(SEWParser::FloatingPointNumber);
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  ExpressionConstructor::newFloat( antlrcpp::downCast<AnAtomContext *>(_localctx)->f->getText() ); 
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(768);
      antlrcpp::downCast<AnAtomContext *>(_localctx)->cl = match(SEWParser::CharacterLiteral);
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  ExpressionConstructor::newChar( antlrcpp::downCast<AnAtomContext *>(_localctx)->cl->getText().c_str()[0] ); 
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(770);
      antlrcpp::downCast<AnAtomContext *>(_localctx)->dqs = match(SEWParser::DoubleQuotedString);
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  ExpressionConstructor::newString(
      				antlrcpp::downCast<AnAtomContext *>(_localctx)->dqs->getText() , String::DOUBLE_QUOTE_DELIMITER ); 
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(772);
      antlrcpp::downCast<AnAtomContext *>(_localctx)->sqs = match(SEWParser::SingleQuotedString);
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  ExpressionConstructor::newString(
      				antlrcpp::downCast<AnAtomContext *>(_localctx)->sqs->getText() , String::SINGLE_QUOTE_DELIMITER ); 
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(774);
      antlrcpp::downCast<AnAtomContext *>(_localctx)->us = ufiString();
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  antlrcpp::downCast<AnAtomContext *>(_localctx)->us->bfUFI;  
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(777);
      antlrcpp::downCast<AnAtomContext *>(_localctx)->ref = aReference();
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  antlrcpp::downCast<AnAtomContext *>(_localctx)->ref->form;  
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(780);
      antlrcpp::downCast<AnAtomContext *>(_localctx)->so = aSymbolOperator();
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  CONST_BF_OP( antlrcpp::downCast<AnAtomContext *>(_localctx)->so->operation ); 
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(783);
      antlrcpp::downCast<AnAtomContext *>(_localctx)->aa = anArray(WObject::_NULL_);
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  antlrcpp::downCast<AnAtomContext *>(_localctx)->aa->array; 
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(786);
      antlrcpp::downCast<AnAtomContext *>(_localctx)->al = aList(WObject::_NULL_);
       antlrcpp::downCast<AnAtomContext *>(_localctx)->form =  antlrcpp::downCast<AnAtomContext *>(_localctx)->al->plist; 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnArrayContext ------------------------------------------------------------------

SEWParser::AnArrayContext::AnArrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::AnArrayContext::AnArrayContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
}

tree::TerminalNode* SEWParser::AnArrayContext::LBRACK() {
  return getToken(SEWParser::LBRACK, 0);
}

tree::TerminalNode* SEWParser::AnArrayContext::RBRACK() {
  return getToken(SEWParser::RBRACK, 0);
}

std::vector<SEWParser::AvmProgramContext *> SEWParser::AnArrayContext::avmProgram() {
  return getRuleContexts<SEWParser::AvmProgramContext>();
}

SEWParser::AvmProgramContext* SEWParser::AnArrayContext::avmProgram(size_t i) {
  return getRuleContext<SEWParser::AvmProgramContext>(i);
}

std::vector<tree::TerminalNode *> SEWParser::AnArrayContext::COMMA() {
  return getTokens(SEWParser::COMMA);
}

tree::TerminalNode* SEWParser::AnArrayContext::COMMA(size_t i) {
  return getToken(SEWParser::COMMA, i);
}


size_t SEWParser::AnArrayContext::getRuleIndex() const {
  return SEWParser::RuleAnArray;
}


SEWParser::AnArrayContext* SEWParser::anArray(WObject * wfContainer) {
  AnArrayContext *_localctx = _tracker.createInstance<AnArrayContext>(_ctx, getState(), wfContainer);
  enterRule(_localctx, 74, SEWParser::RuleAnArray);

  	BFVector array;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(791);
    match(SEWParser::LBRACK);
    setState(803);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -70231326194176) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 554154934077483) != 0)) {
      setState(792);
      antlrcpp::downCast<AnArrayContext *>(_localctx)->ap = avmProgram(_localctx->wfContainer);
       array.append(antlrcpp::downCast<AnArrayContext *>(_localctx)->ap->code); 
      setState(800);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == SEWParser::COMMA) {
        setState(794);
        match(SEWParser::COMMA);
        setState(795);
        antlrcpp::downCast<AnArrayContext *>(_localctx)->ap = avmProgram(_localctx->wfContainer);
         array.append(antlrcpp::downCast<AnArrayContext *>(_localctx)->ap->code); 
        setState(802);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(805);
    match(SEWParser::RBRACK);

    		antlrcpp::downCast<AnArrayContext *>(_localctx)->array =  BuiltinArray::create(array);
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AListContext ------------------------------------------------------------------

SEWParser::AListContext::AListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::AListContext::AListContext(ParserRuleContext *parent, size_t invokingState, WObject * wfContainer)
  : ParserRuleContext(parent, invokingState) {
  this->wfContainer = wfContainer;
}

tree::TerminalNode* SEWParser::AListContext::LCURLY() {
  return getToken(SEWParser::LCURLY, 0);
}

tree::TerminalNode* SEWParser::AListContext::RCURLY() {
  return getToken(SEWParser::RCURLY, 0);
}

std::vector<SEWParser::AvmProgramContext *> SEWParser::AListContext::avmProgram() {
  return getRuleContexts<SEWParser::AvmProgramContext>();
}

SEWParser::AvmProgramContext* SEWParser::AListContext::avmProgram(size_t i) {
  return getRuleContext<SEWParser::AvmProgramContext>(i);
}

std::vector<tree::TerminalNode *> SEWParser::AListContext::COMMA() {
  return getTokens(SEWParser::COMMA);
}

tree::TerminalNode* SEWParser::AListContext::COMMA(size_t i) {
  return getToken(SEWParser::COMMA, i);
}


size_t SEWParser::AListContext::getRuleIndex() const {
  return SEWParser::RuleAList;
}


SEWParser::AListContext* SEWParser::aList(WObject * wfContainer) {
  AListContext *_localctx = _tracker.createInstance<AListContext>(_ctx, getState(), wfContainer);
  enterRule(_localctx, 76, SEWParser::RuleAList);

  	BFVector plist;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(808);
    match(SEWParser::LCURLY);
    setState(820);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -70231326194176) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 554154934077483) != 0)) {
      setState(809);
      antlrcpp::downCast<AListContext *>(_localctx)->ap = avmProgram(_localctx->wfContainer);
       plist.append(antlrcpp::downCast<AListContext *>(_localctx)->ap->code); 
      setState(817);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == SEWParser::COMMA) {
        setState(811);
        match(SEWParser::COMMA);
        setState(812);
        antlrcpp::downCast<AListContext *>(_localctx)->ap = avmProgram(_localctx->wfContainer);
         plist.append(antlrcpp::downCast<AListContext *>(_localctx)->ap->code); 
        setState(819);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(822);
    match(SEWParser::RCURLY);

    		antlrcpp::downCast<AListContext *>(_localctx)->plist =  BuiltinArray::create(plist);
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_invokeContext ------------------------------------------------------------------

SEWParser::Expression_invokeContext::Expression_invokeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::Expression_invokeContext::LPAREN_INVOKE() {
  return getToken(SEWParser::LPAREN_INVOKE, 0);
}

tree::TerminalNode* SEWParser::Expression_invokeContext::RPAREN() {
  return getToken(SEWParser::RPAREN, 0);
}

std::vector<SEWParser::UnaryExpressionContext *> SEWParser::Expression_invokeContext::unaryExpression() {
  return getRuleContexts<SEWParser::UnaryExpressionContext>();
}

SEWParser::UnaryExpressionContext* SEWParser::Expression_invokeContext::unaryExpression(size_t i) {
  return getRuleContext<SEWParser::UnaryExpressionContext>(i);
}

tree::TerminalNode* SEWParser::Expression_invokeContext::Identifier() {
  return getToken(SEWParser::Identifier, 0);
}

SEWParser::ASymbolOperatorContext* SEWParser::Expression_invokeContext::aSymbolOperator() {
  return getRuleContext<SEWParser::ASymbolOperatorContext>(0);
}

tree::TerminalNode* SEWParser::Expression_invokeContext::Provided() {
  return getToken(SEWParser::Provided, 0);
}

tree::TerminalNode* SEWParser::Expression_invokeContext::From() {
  return getToken(SEWParser::From, 0);
}

tree::TerminalNode* SEWParser::Expression_invokeContext::To() {
  return getToken(SEWParser::To, 0);
}

tree::TerminalNode* SEWParser::Expression_invokeContext::Activity() {
  return getToken(SEWParser::Activity, 0);
}

std::vector<SEWParser::ExpressionContext *> SEWParser::Expression_invokeContext::expression() {
  return getRuleContexts<SEWParser::ExpressionContext>();
}

SEWParser::ExpressionContext* SEWParser::Expression_invokeContext::expression(size_t i) {
  return getRuleContext<SEWParser::ExpressionContext>(i);
}

SEWParser::AnOperatorContext* SEWParser::Expression_invokeContext::anOperator() {
  return getRuleContext<SEWParser::AnOperatorContext>(0);
}


size_t SEWParser::Expression_invokeContext::getRuleIndex() const {
  return SEWParser::RuleExpression_invoke;
}


SEWParser::Expression_invokeContext* SEWParser::expression_invoke() {
  Expression_invokeContext *_localctx = _tracker.createInstance<Expression_invokeContext>(_ctx, getState());
  enterRule(_localctx, 78, SEWParser::RuleExpression_invoke);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(825);
    match(SEWParser::LPAREN_INVOKE);
    setState(826);
    antlrcpp::downCast<Expression_invokeContext *>(_localctx)->ue = unaryExpression();
     antlrcpp::downCast<Expression_invokeContext *>(_localctx)->expr =  ExpressionConstructor::newCode(
    	    			OperatorManager::OPERATOR_INVOKE_METHOD, antlrcpp::downCast<Expression_invokeContext *>(_localctx)->ue->expr);
    	    
    setState(833);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::Identifier: {
        setState(828);
        antlrcpp::downCast<Expression_invokeContext *>(_localctx)->id = match(SEWParser::Identifier);
         _localctx->expr->append(ParserUtil::getInvokable(antlrcpp::downCast<Expression_invokeContext *>(_localctx)->ue->expr, antlrcpp::downCast<Expression_invokeContext *>(_localctx)->id->getText())); 
        break;
      }

      case SEWParser::PLUS:
      case SEWParser::MINUS:
      case SEWParser::MOD:
      case SEWParser::MULT:
      case SEWParser::DIV:
      case SEWParser::POW:
      case SEWParser::ASSIGN:
      case SEWParser::PUSH:
      case SEWParser::ASSIGN_TOP:
      case SEWParser::TOP:
      case SEWParser::POP:
      case SEWParser::EQ:
      case SEWParser::EQEQ:
      case SEWParser::NEQ:
      case SEWParser::SEQ:
      case SEWParser::NSEQ:
      case SEWParser::GT:
      case SEWParser::GTE:
      case SEWParser::LT_:
      case SEWParser::LTE:
      case SEWParser::BAND:
      case SEWParser::BOR:
      case SEWParser::BXOR:
      case SEWParser::BNOT:
      case SEWParser::LSHIFT:
      case SEWParser::RSHIFT:
      case SEWParser::LAND:
      case SEWParser::LOR:
      case SEWParser::LNOT:
      case SEWParser::INTERLEAVING:
      case SEWParser::PARTIAL_ORDER:
      case SEWParser::ASYNC:
      case SEWParser::STRONG_SYNC:
      case SEWParser::WEAK_SYNC:
      case SEWParser::PARALLEL:
      case SEWParser::PRODUCT:
      case SEWParser::EXCLUSIVE:
      case SEWParser::NONDETERMINISM:
      case SEWParser::PRIOR_GT:
      case SEWParser::PRIOR_LT:
      case SEWParser::SEQUENCE:
      case SEWParser::SEQUENCE_SIDE:
      case SEWParser::SEQUENCE_WEAK: {
        setState(830);
        antlrcpp::downCast<Expression_invokeContext *>(_localctx)->sop = aSymbolOperator();
         _localctx->expr->append( INCR_BF(antlrcpp::downCast<Expression_invokeContext *>(_localctx)->sop->operation) ); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(840);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -4449556431728802304) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & 554153860401163) != 0)) {
      setState(835);
      antlrcpp::downCast<Expression_invokeContext *>(_localctx)->arg = expression();
       _localctx->expr->append( antlrcpp::downCast<Expression_invokeContext *>(_localctx)->arg->expr  ); 
      setState(842);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(859);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::Provided: {
        setState(843);
        match(SEWParser::Provided);
        setState(844);
        antlrcpp::downCast<Expression_invokeContext *>(_localctx)->prov = expression();
         _localctx->expr->append( antlrcpp::downCast<Expression_invokeContext *>(_localctx)->prov->expr ); 
        break;
      }

      case SEWParser::From: {
        setState(847);
        match(SEWParser::From);
        setState(848);
        antlrcpp::downCast<Expression_invokeContext *>(_localctx)->from = unaryExpression();
         _localctx->expr->append( antlrcpp::downCast<Expression_invokeContext *>(_localctx)->from->expr ); 
        break;
      }

      case SEWParser::To: {
        setState(851);
        match(SEWParser::To);
        setState(852);
        antlrcpp::downCast<Expression_invokeContext *>(_localctx)->to = unaryExpression();
         _localctx->expr->append( antlrcpp::downCast<Expression_invokeContext *>(_localctx)->to->expr   ); 
        break;
      }

      case SEWParser::Activity: {
        setState(855);
        match(SEWParser::Activity);
        setState(856);
        antlrcpp::downCast<Expression_invokeContext *>(_localctx)->op = anOperator();
         _localctx->expr->append( INCR_BF(antlrcpp::downCast<Expression_invokeContext *>(_localctx)->op->operation) ); 
        break;
      }

      case SEWParser::RPAREN: {
        break;
      }

    default:
      break;
    }
    setState(861);
    match(SEWParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

SEWParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::ConditionalExpressionContext* SEWParser::ExpressionContext::conditionalExpression() {
  return getRuleContext<SEWParser::ConditionalExpressionContext>(0);
}


size_t SEWParser::ExpressionContext::getRuleIndex() const {
  return SEWParser::RuleExpression;
}


SEWParser::ExpressionContext* SEWParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 80, SEWParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(863);
    antlrcpp::downCast<ExpressionContext *>(_localctx)->cond = conditionalExpression();
     antlrcpp::downCast<ExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<ExpressionContext *>(_localctx)->cond->expr; 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalExpressionContext ------------------------------------------------------------------

SEWParser::ConditionalExpressionContext::ConditionalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::ConditionalOrExpressionContext* SEWParser::ConditionalExpressionContext::conditionalOrExpression() {
  return getRuleContext<SEWParser::ConditionalOrExpressionContext>(0);
}

tree::TerminalNode* SEWParser::ConditionalExpressionContext::QUESTION() {
  return getToken(SEWParser::QUESTION, 0);
}

tree::TerminalNode* SEWParser::ConditionalExpressionContext::COLON() {
  return getToken(SEWParser::COLON, 0);
}

std::vector<SEWParser::ExpressionContext *> SEWParser::ConditionalExpressionContext::expression() {
  return getRuleContexts<SEWParser::ExpressionContext>();
}

SEWParser::ExpressionContext* SEWParser::ConditionalExpressionContext::expression(size_t i) {
  return getRuleContext<SEWParser::ExpressionContext>(i);
}


size_t SEWParser::ConditionalExpressionContext::getRuleIndex() const {
  return SEWParser::RuleConditionalExpression;
}


SEWParser::ConditionalExpressionContext* SEWParser::conditionalExpression() {
  ConditionalExpressionContext *_localctx = _tracker.createInstance<ConditionalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 82, SEWParser::RuleConditionalExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(866);
    antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->cond = conditionalOrExpression();
     antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->cond->expr; 
    setState(874);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == SEWParser::QUESTION) {
      setState(868);
      match(SEWParser::QUESTION);
      setState(869);
      antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->arg1 = expression();
      setState(870);
      match(SEWParser::COLON);
      setState(871);
      antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->arg2 = expression();
       antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->expr =  ExpressionConstructor::newCode(
      				OperatorManager::OPERATOR_IFE, antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->cond->expr, antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->arg1->expr, antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->arg2->expr); 
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalOrExpressionContext ------------------------------------------------------------------

SEWParser::ConditionalOrExpressionContext::ConditionalOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SEWParser::ConditionalAndExpressionContext *> SEWParser::ConditionalOrExpressionContext::conditionalAndExpression() {
  return getRuleContexts<SEWParser::ConditionalAndExpressionContext>();
}

SEWParser::ConditionalAndExpressionContext* SEWParser::ConditionalOrExpressionContext::conditionalAndExpression(size_t i) {
  return getRuleContext<SEWParser::ConditionalAndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SEWParser::ConditionalOrExpressionContext::LOR() {
  return getTokens(SEWParser::LOR);
}

tree::TerminalNode* SEWParser::ConditionalOrExpressionContext::LOR(size_t i) {
  return getToken(SEWParser::LOR, i);
}


size_t SEWParser::ConditionalOrExpressionContext::getRuleIndex() const {
  return SEWParser::RuleConditionalOrExpression;
}


SEWParser::ConditionalOrExpressionContext* SEWParser::conditionalOrExpression() {
  ConditionalOrExpressionContext *_localctx = _tracker.createInstance<ConditionalOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 84, SEWParser::RuleConditionalOrExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(876);
    antlrcpp::downCast<ConditionalOrExpressionContext *>(_localctx)->cond = conditionalAndExpression();
     antlrcpp::downCast<ConditionalOrExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<ConditionalOrExpressionContext *>(_localctx)->cond->expr; 
    setState(884);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SEWParser::LOR) {
      setState(878);
      match(SEWParser::LOR);
      setState(879);
      antlrcpp::downCast<ConditionalOrExpressionContext *>(_localctx)->arg = conditionalAndExpression();
       antlrcpp::downCast<ConditionalOrExpressionContext *>(_localctx)->expr =  ExpressionConstructor::newCodeFlat(
      				OperatorManager::OPERATOR_OR, antlrcpp::downCast<ConditionalOrExpressionContext *>(_localctx)->cond->expr, antlrcpp::downCast<ConditionalOrExpressionContext *>(_localctx)->arg->expr); 
      setState(886);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalAndExpressionContext ------------------------------------------------------------------

SEWParser::ConditionalAndExpressionContext::ConditionalAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SEWParser::BitwiseOrExpressionContext *> SEWParser::ConditionalAndExpressionContext::bitwiseOrExpression() {
  return getRuleContexts<SEWParser::BitwiseOrExpressionContext>();
}

SEWParser::BitwiseOrExpressionContext* SEWParser::ConditionalAndExpressionContext::bitwiseOrExpression(size_t i) {
  return getRuleContext<SEWParser::BitwiseOrExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SEWParser::ConditionalAndExpressionContext::LAND() {
  return getTokens(SEWParser::LAND);
}

tree::TerminalNode* SEWParser::ConditionalAndExpressionContext::LAND(size_t i) {
  return getToken(SEWParser::LAND, i);
}


size_t SEWParser::ConditionalAndExpressionContext::getRuleIndex() const {
  return SEWParser::RuleConditionalAndExpression;
}


SEWParser::ConditionalAndExpressionContext* SEWParser::conditionalAndExpression() {
  ConditionalAndExpressionContext *_localctx = _tracker.createInstance<ConditionalAndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 86, SEWParser::RuleConditionalAndExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(887);
    antlrcpp::downCast<ConditionalAndExpressionContext *>(_localctx)->bwor = bitwiseOrExpression();
     antlrcpp::downCast<ConditionalAndExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<ConditionalAndExpressionContext *>(_localctx)->bwor->expr; 
    setState(895);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SEWParser::LAND) {
      setState(889);
      match(SEWParser::LAND);
      setState(890);
      antlrcpp::downCast<ConditionalAndExpressionContext *>(_localctx)->arg = bitwiseOrExpression();
       antlrcpp::downCast<ConditionalAndExpressionContext *>(_localctx)->expr =  ExpressionConstructor::newCodeFlat(
      				OperatorManager::OPERATOR_AND, antlrcpp::downCast<ConditionalAndExpressionContext *>(_localctx)->bwor->expr, antlrcpp::downCast<ConditionalAndExpressionContext *>(_localctx)->arg->expr); 
      setState(897);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseOrExpressionContext ------------------------------------------------------------------

SEWParser::BitwiseOrExpressionContext::BitwiseOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SEWParser::BitwiseXorExpressionContext *> SEWParser::BitwiseOrExpressionContext::bitwiseXorExpression() {
  return getRuleContexts<SEWParser::BitwiseXorExpressionContext>();
}

SEWParser::BitwiseXorExpressionContext* SEWParser::BitwiseOrExpressionContext::bitwiseXorExpression(size_t i) {
  return getRuleContext<SEWParser::BitwiseXorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SEWParser::BitwiseOrExpressionContext::BOR() {
  return getTokens(SEWParser::BOR);
}

tree::TerminalNode* SEWParser::BitwiseOrExpressionContext::BOR(size_t i) {
  return getToken(SEWParser::BOR, i);
}


size_t SEWParser::BitwiseOrExpressionContext::getRuleIndex() const {
  return SEWParser::RuleBitwiseOrExpression;
}


SEWParser::BitwiseOrExpressionContext* SEWParser::bitwiseOrExpression() {
  BitwiseOrExpressionContext *_localctx = _tracker.createInstance<BitwiseOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 88, SEWParser::RuleBitwiseOrExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(898);
    antlrcpp::downCast<BitwiseOrExpressionContext *>(_localctx)->bwxor = bitwiseXorExpression();
     antlrcpp::downCast<BitwiseOrExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<BitwiseOrExpressionContext *>(_localctx)->bwxor->expr; 
    setState(906);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SEWParser::BOR) {
      setState(900);
      match(SEWParser::BOR);
      setState(901);
      antlrcpp::downCast<BitwiseOrExpressionContext *>(_localctx)->arg = bitwiseXorExpression();
       antlrcpp::downCast<BitwiseOrExpressionContext *>(_localctx)->expr =  ExpressionConstructor::newCodeFlat(
      				OperatorManager::OPERATOR_BOR, antlrcpp::downCast<BitwiseOrExpressionContext *>(_localctx)->bwxor->expr, antlrcpp::downCast<BitwiseOrExpressionContext *>(_localctx)->arg->expr); 
      setState(908);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseXorExpressionContext ------------------------------------------------------------------

SEWParser::BitwiseXorExpressionContext::BitwiseXorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SEWParser::BitwiseAndExpressionContext *> SEWParser::BitwiseXorExpressionContext::bitwiseAndExpression() {
  return getRuleContexts<SEWParser::BitwiseAndExpressionContext>();
}

SEWParser::BitwiseAndExpressionContext* SEWParser::BitwiseXorExpressionContext::bitwiseAndExpression(size_t i) {
  return getRuleContext<SEWParser::BitwiseAndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SEWParser::BitwiseXorExpressionContext::BXOR() {
  return getTokens(SEWParser::BXOR);
}

tree::TerminalNode* SEWParser::BitwiseXorExpressionContext::BXOR(size_t i) {
  return getToken(SEWParser::BXOR, i);
}


size_t SEWParser::BitwiseXorExpressionContext::getRuleIndex() const {
  return SEWParser::RuleBitwiseXorExpression;
}


SEWParser::BitwiseXorExpressionContext* SEWParser::bitwiseXorExpression() {
  BitwiseXorExpressionContext *_localctx = _tracker.createInstance<BitwiseXorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 90, SEWParser::RuleBitwiseXorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(909);
    antlrcpp::downCast<BitwiseXorExpressionContext *>(_localctx)->bwand = bitwiseAndExpression();
     antlrcpp::downCast<BitwiseXorExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<BitwiseXorExpressionContext *>(_localctx)->bwand->expr; 
    setState(917);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SEWParser::BXOR) {
      setState(911);
      match(SEWParser::BXOR);
      setState(912);
      antlrcpp::downCast<BitwiseXorExpressionContext *>(_localctx)->arg = bitwiseAndExpression();
       antlrcpp::downCast<BitwiseXorExpressionContext *>(_localctx)->expr =  ExpressionConstructor::newCodeFlat(
      				OperatorManager::OPERATOR_BXOR, antlrcpp::downCast<BitwiseXorExpressionContext *>(_localctx)->bwand->expr, antlrcpp::downCast<BitwiseXorExpressionContext *>(_localctx)->arg->expr); 
      setState(919);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseAndExpressionContext ------------------------------------------------------------------

SEWParser::BitwiseAndExpressionContext::BitwiseAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SEWParser::EqualityExpressionContext *> SEWParser::BitwiseAndExpressionContext::equalityExpression() {
  return getRuleContexts<SEWParser::EqualityExpressionContext>();
}

SEWParser::EqualityExpressionContext* SEWParser::BitwiseAndExpressionContext::equalityExpression(size_t i) {
  return getRuleContext<SEWParser::EqualityExpressionContext>(i);
}

std::vector<tree::TerminalNode *> SEWParser::BitwiseAndExpressionContext::BAND() {
  return getTokens(SEWParser::BAND);
}

tree::TerminalNode* SEWParser::BitwiseAndExpressionContext::BAND(size_t i) {
  return getToken(SEWParser::BAND, i);
}


size_t SEWParser::BitwiseAndExpressionContext::getRuleIndex() const {
  return SEWParser::RuleBitwiseAndExpression;
}


SEWParser::BitwiseAndExpressionContext* SEWParser::bitwiseAndExpression() {
  BitwiseAndExpressionContext *_localctx = _tracker.createInstance<BitwiseAndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 92, SEWParser::RuleBitwiseAndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(920);
    antlrcpp::downCast<BitwiseAndExpressionContext *>(_localctx)->eq = equalityExpression();
     antlrcpp::downCast<BitwiseAndExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<BitwiseAndExpressionContext *>(_localctx)->eq->expr; 
    setState(928);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(922);
        match(SEWParser::BAND);
        setState(923);
        antlrcpp::downCast<BitwiseAndExpressionContext *>(_localctx)->arg = equalityExpression();
         antlrcpp::downCast<BitwiseAndExpressionContext *>(_localctx)->expr =  ExpressionConstructor::newCodeFlat(
        				OperatorManager::OPERATOR_BAND, antlrcpp::downCast<BitwiseAndExpressionContext *>(_localctx)->eq->expr, antlrcpp::downCast<BitwiseAndExpressionContext *>(_localctx)->arg->expr);  
      }
      setState(930);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

SEWParser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SEWParser::RelationalExpressionContext *> SEWParser::EqualityExpressionContext::relationalExpression() {
  return getRuleContexts<SEWParser::RelationalExpressionContext>();
}

SEWParser::RelationalExpressionContext* SEWParser::EqualityExpressionContext::relationalExpression(size_t i) {
  return getRuleContext<SEWParser::RelationalExpressionContext>(i);
}

SEWParser::EqualOpContext* SEWParser::EqualityExpressionContext::equalOp() {
  return getRuleContext<SEWParser::EqualOpContext>(0);
}


size_t SEWParser::EqualityExpressionContext::getRuleIndex() const {
  return SEWParser::RuleEqualityExpression;
}


SEWParser::EqualityExpressionContext* SEWParser::equalityExpression() {
  EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, getState());
  enterRule(_localctx, 94, SEWParser::RuleEqualityExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(931);
    antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->rel = relationalExpression();
     antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->rel->expr; 
    setState(937);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1055599882141696) != 0)) {
      setState(933);
      antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->eo = equalOp();
      setState(934);
      antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->arg = relationalExpression();
       antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->expr =  ExpressionConstructor::newCode(antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->eo->operation, antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->rel->expr, antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->arg->expr); 
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualOpContext ------------------------------------------------------------------

SEWParser::EqualOpContext::EqualOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::EqualOpContext::EQ() {
  return getToken(SEWParser::EQ, 0);
}

tree::TerminalNode* SEWParser::EqualOpContext::EQEQ() {
  return getToken(SEWParser::EQEQ, 0);
}

tree::TerminalNode* SEWParser::EqualOpContext::NEQ() {
  return getToken(SEWParser::NEQ, 0);
}

tree::TerminalNode* SEWParser::EqualOpContext::SEQ() {
  return getToken(SEWParser::SEQ, 0);
}

tree::TerminalNode* SEWParser::EqualOpContext::NSEQ() {
  return getToken(SEWParser::NSEQ, 0);
}


size_t SEWParser::EqualOpContext::getRuleIndex() const {
  return SEWParser::RuleEqualOp;
}


SEWParser::EqualOpContext* SEWParser::equalOp() {
  EqualOpContext *_localctx = _tracker.createInstance<EqualOpContext>(_ctx, getState());
  enterRule(_localctx, 96, SEWParser::RuleEqualOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(949);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::EQ: {
        enterOuterAlt(_localctx, 1);
        setState(939);
        match(SEWParser::EQ);
         antlrcpp::downCast<EqualOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_EQ;   
        break;
      }

      case SEWParser::EQEQ: {
        enterOuterAlt(_localctx, 2);
        setState(941);
        match(SEWParser::EQEQ);
         antlrcpp::downCast<EqualOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_EQ;   
        break;
      }

      case SEWParser::NEQ: {
        enterOuterAlt(_localctx, 3);
        setState(943);
        match(SEWParser::NEQ);
         antlrcpp::downCast<EqualOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_NEQ;  
        break;
      }

      case SEWParser::SEQ: {
        enterOuterAlt(_localctx, 4);
        setState(945);
        match(SEWParser::SEQ);
         antlrcpp::downCast<EqualOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_SEQ;  
        break;
      }

      case SEWParser::NSEQ: {
        enterOuterAlt(_localctx, 5);
        setState(947);
        match(SEWParser::NSEQ);
         antlrcpp::downCast<EqualOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_NSEQ; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

SEWParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SEWParser::ShiftExpressionContext *> SEWParser::RelationalExpressionContext::shiftExpression() {
  return getRuleContexts<SEWParser::ShiftExpressionContext>();
}

SEWParser::ShiftExpressionContext* SEWParser::RelationalExpressionContext::shiftExpression(size_t i) {
  return getRuleContext<SEWParser::ShiftExpressionContext>(i);
}

SEWParser::RelationalOpContext* SEWParser::RelationalExpressionContext::relationalOp() {
  return getRuleContext<SEWParser::RelationalOpContext>(0);
}


size_t SEWParser::RelationalExpressionContext::getRuleIndex() const {
  return SEWParser::RuleRelationalExpression;
}


SEWParser::RelationalExpressionContext* SEWParser::relationalExpression() {
  RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 98, SEWParser::RuleRelationalExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(951);
    antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->se = shiftExpression();
     antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->se->expr; 
    setState(957);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 16888498602639360) != 0)) {
      setState(953);
      antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->ro = relationalOp();
      setState(954);
      antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->arg = shiftExpression();
       antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->expr =  ExpressionConstructor::newCode(antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->ro->operation, antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->se->expr, antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->arg->expr); 
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalOpContext ------------------------------------------------------------------

SEWParser::RelationalOpContext::RelationalOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::RelationalOpContext::LTE() {
  return getToken(SEWParser::LTE, 0);
}

tree::TerminalNode* SEWParser::RelationalOpContext::GTE() {
  return getToken(SEWParser::GTE, 0);
}

tree::TerminalNode* SEWParser::RelationalOpContext::LT_() {
  return getToken(SEWParser::LT_, 0);
}

tree::TerminalNode* SEWParser::RelationalOpContext::GT() {
  return getToken(SEWParser::GT, 0);
}


size_t SEWParser::RelationalOpContext::getRuleIndex() const {
  return SEWParser::RuleRelationalOp;
}


SEWParser::RelationalOpContext* SEWParser::relationalOp() {
  RelationalOpContext *_localctx = _tracker.createInstance<RelationalOpContext>(_ctx, getState());
  enterRule(_localctx, 100, SEWParser::RuleRelationalOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(967);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::LTE: {
        enterOuterAlt(_localctx, 1);
        setState(959);
        match(SEWParser::LTE);
         antlrcpp::downCast<RelationalOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_LTE; 
        break;
      }

      case SEWParser::GTE: {
        enterOuterAlt(_localctx, 2);
        setState(961);
        match(SEWParser::GTE);
         antlrcpp::downCast<RelationalOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_GTE; 
        break;
      }

      case SEWParser::LT_: {
        enterOuterAlt(_localctx, 3);
        setState(963);
        match(SEWParser::LT_);
         antlrcpp::downCast<RelationalOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_LT;  
        break;
      }

      case SEWParser::GT: {
        enterOuterAlt(_localctx, 4);
        setState(965);
        match(SEWParser::GT);
         antlrcpp::downCast<RelationalOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_GT;  
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftExpressionContext ------------------------------------------------------------------

SEWParser::ShiftExpressionContext::ShiftExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SEWParser::AdditiveExpressionContext *> SEWParser::ShiftExpressionContext::additiveExpression() {
  return getRuleContexts<SEWParser::AdditiveExpressionContext>();
}

SEWParser::AdditiveExpressionContext* SEWParser::ShiftExpressionContext::additiveExpression(size_t i) {
  return getRuleContext<SEWParser::AdditiveExpressionContext>(i);
}

std::vector<SEWParser::ShiftOpContext *> SEWParser::ShiftExpressionContext::shiftOp() {
  return getRuleContexts<SEWParser::ShiftOpContext>();
}

SEWParser::ShiftOpContext* SEWParser::ShiftExpressionContext::shiftOp(size_t i) {
  return getRuleContext<SEWParser::ShiftOpContext>(i);
}


size_t SEWParser::ShiftExpressionContext::getRuleIndex() const {
  return SEWParser::RuleShiftExpression;
}


SEWParser::ShiftExpressionContext* SEWParser::shiftExpression() {
  ShiftExpressionContext *_localctx = _tracker.createInstance<ShiftExpressionContext>(_ctx, getState());
  enterRule(_localctx, 102, SEWParser::RuleShiftExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(969);
    antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->ae = additiveExpression();
     antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->ae->expr; 
    setState(977);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == SEWParser::LSHIFT

    || _la == SEWParser::RSHIFT) {
      setState(971);
      antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->so = shiftOp();
      setState(972);
      antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->arg = additiveExpression();
       antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->expr =  ExpressionConstructor::newCode(antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->so->operation, antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->ae->expr, antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->arg->expr); 
      setState(979);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftOpContext ------------------------------------------------------------------

SEWParser::ShiftOpContext::ShiftOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::ShiftOpContext::LSHIFT() {
  return getToken(SEWParser::LSHIFT, 0);
}

tree::TerminalNode* SEWParser::ShiftOpContext::RSHIFT() {
  return getToken(SEWParser::RSHIFT, 0);
}


size_t SEWParser::ShiftOpContext::getRuleIndex() const {
  return SEWParser::RuleShiftOp;
}


SEWParser::ShiftOpContext* SEWParser::shiftOp() {
  ShiftOpContext *_localctx = _tracker.createInstance<ShiftOpContext>(_ctx, getState());
  enterRule(_localctx, 104, SEWParser::RuleShiftOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(984);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::LSHIFT: {
        enterOuterAlt(_localctx, 1);
        setState(980);
        match(SEWParser::LSHIFT);
         antlrcpp::downCast<ShiftOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_LSHIFT;  
        break;
      }

      case SEWParser::RSHIFT: {
        enterOuterAlt(_localctx, 2);
        setState(982);
        match(SEWParser::RSHIFT);
         antlrcpp::downCast<ShiftOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_RSHIFT;  
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

SEWParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SEWParser::MultiplicativeExpressionContext *> SEWParser::AdditiveExpressionContext::multiplicativeExpression() {
  return getRuleContexts<SEWParser::MultiplicativeExpressionContext>();
}

SEWParser::MultiplicativeExpressionContext* SEWParser::AdditiveExpressionContext::multiplicativeExpression(size_t i) {
  return getRuleContext<SEWParser::MultiplicativeExpressionContext>(i);
}

std::vector<SEWParser::AdditiveOpContext *> SEWParser::AdditiveExpressionContext::additiveOp() {
  return getRuleContexts<SEWParser::AdditiveOpContext>();
}

SEWParser::AdditiveOpContext* SEWParser::AdditiveExpressionContext::additiveOp(size_t i) {
  return getRuleContext<SEWParser::AdditiveOpContext>(i);
}


size_t SEWParser::AdditiveExpressionContext::getRuleIndex() const {
  return SEWParser::RuleAdditiveExpression;
}


SEWParser::AdditiveExpressionContext* SEWParser::additiveExpression() {
  AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, getState());
  enterRule(_localctx, 106, SEWParser::RuleAdditiveExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(986);
    antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->me = multiplicativeExpression();
     antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->me->expr; 
    setState(994);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(988);
        antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->ao = additiveOp();
        setState(989);
        antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->arg = multiplicativeExpression();
         antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->expr =  ExpressionConstructor::newCode(antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->ao->operation, antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->me->expr, antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->arg->expr);  
      }
      setState(996);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveOpContext ------------------------------------------------------------------

SEWParser::AdditiveOpContext::AdditiveOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::AdditiveOpContext::PLUS() {
  return getToken(SEWParser::PLUS, 0);
}

tree::TerminalNode* SEWParser::AdditiveOpContext::MINUS() {
  return getToken(SEWParser::MINUS, 0);
}


size_t SEWParser::AdditiveOpContext::getRuleIndex() const {
  return SEWParser::RuleAdditiveOp;
}


SEWParser::AdditiveOpContext* SEWParser::additiveOp() {
  AdditiveOpContext *_localctx = _tracker.createInstance<AdditiveOpContext>(_ctx, getState());
  enterRule(_localctx, 108, SEWParser::RuleAdditiveOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1001);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::PLUS: {
        enterOuterAlt(_localctx, 1);
        setState(997);
        match(SEWParser::PLUS);
         antlrcpp::downCast<AdditiveOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_PLUS;  
        break;
      }

      case SEWParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(999);
        match(SEWParser::MINUS);
         antlrcpp::downCast<AdditiveOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_MINUS;  
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

SEWParser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<SEWParser::UnaryExpressionContext *> SEWParser::MultiplicativeExpressionContext::unaryExpression() {
  return getRuleContexts<SEWParser::UnaryExpressionContext>();
}

SEWParser::UnaryExpressionContext* SEWParser::MultiplicativeExpressionContext::unaryExpression(size_t i) {
  return getRuleContext<SEWParser::UnaryExpressionContext>(i);
}

std::vector<SEWParser::MultiplicativeOpContext *> SEWParser::MultiplicativeExpressionContext::multiplicativeOp() {
  return getRuleContexts<SEWParser::MultiplicativeOpContext>();
}

SEWParser::MultiplicativeOpContext* SEWParser::MultiplicativeExpressionContext::multiplicativeOp(size_t i) {
  return getRuleContext<SEWParser::MultiplicativeOpContext>(i);
}


size_t SEWParser::MultiplicativeExpressionContext::getRuleIndex() const {
  return SEWParser::RuleMultiplicativeExpression;
}


SEWParser::MultiplicativeExpressionContext* SEWParser::multiplicativeExpression() {
  MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 110, SEWParser::RuleMultiplicativeExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1003);
    antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->ue = unaryExpression();
     antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->ue->expr; 
    setState(1011);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 939524096) != 0)) {
      setState(1005);
      antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->mo = multiplicativeOp();
      setState(1006);
      antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->arg = unaryExpression();
       antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->expr =  ExpressionConstructor::newCode(antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->mo->operation, antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->ue->expr, antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->arg->expr); 
      setState(1013);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeOpContext ------------------------------------------------------------------

SEWParser::MultiplicativeOpContext::MultiplicativeOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::MultiplicativeOpContext::MULT() {
  return getToken(SEWParser::MULT, 0);
}

tree::TerminalNode* SEWParser::MultiplicativeOpContext::DIV() {
  return getToken(SEWParser::DIV, 0);
}

tree::TerminalNode* SEWParser::MultiplicativeOpContext::MOD() {
  return getToken(SEWParser::MOD, 0);
}


size_t SEWParser::MultiplicativeOpContext::getRuleIndex() const {
  return SEWParser::RuleMultiplicativeOp;
}


SEWParser::MultiplicativeOpContext* SEWParser::multiplicativeOp() {
  MultiplicativeOpContext *_localctx = _tracker.createInstance<MultiplicativeOpContext>(_ctx, getState());
  enterRule(_localctx, 112, SEWParser::RuleMultiplicativeOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1020);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::MULT: {
        enterOuterAlt(_localctx, 1);
        setState(1014);
        match(SEWParser::MULT);
         antlrcpp::downCast<MultiplicativeOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_MULT; 
        break;
      }

      case SEWParser::DIV: {
        enterOuterAlt(_localctx, 2);
        setState(1016);
        match(SEWParser::DIV);
         antlrcpp::downCast<MultiplicativeOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_DIV;  
        break;
      }

      case SEWParser::MOD: {
        enterOuterAlt(_localctx, 3);
        setState(1018);
        match(SEWParser::MOD);
         antlrcpp::downCast<MultiplicativeOpContext *>(_localctx)->operation =  OperatorManager::OPERATOR_MOD;  
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

SEWParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

SEWParser::LiteralContext* SEWParser::UnaryExpressionContext::literal() {
  return getRuleContext<SEWParser::LiteralContext>(0);
}

tree::TerminalNode* SEWParser::UnaryExpressionContext::LNOT() {
  return getToken(SEWParser::LNOT, 0);
}

SEWParser::UnaryExpressionContext* SEWParser::UnaryExpressionContext::unaryExpression() {
  return getRuleContext<SEWParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* SEWParser::UnaryExpressionContext::BNOT() {
  return getToken(SEWParser::BNOT, 0);
}

SEWParser::Expression_invokeContext* SEWParser::UnaryExpressionContext::expression_invoke() {
  return getRuleContext<SEWParser::Expression_invokeContext>(0);
}

tree::TerminalNode* SEWParser::UnaryExpressionContext::LPAREN() {
  return getToken(SEWParser::LPAREN, 0);
}

tree::TerminalNode* SEWParser::UnaryExpressionContext::RPAREN() {
  return getToken(SEWParser::RPAREN, 0);
}

SEWParser::ExpressionContext* SEWParser::UnaryExpressionContext::expression() {
  return getRuleContext<SEWParser::ExpressionContext>(0);
}


size_t SEWParser::UnaryExpressionContext::getRuleIndex() const {
  return SEWParser::RuleUnaryExpression;
}


SEWParser::UnaryExpressionContext* SEWParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 114, SEWParser::RuleUnaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1041);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case SEWParser::Meta:
      case SEWParser::Form:
      case SEWParser::True:
      case SEWParser::False:
      case SEWParser::PLUS:
      case SEWParser::MINUS:
      case SEWParser::BAND:
      case SEWParser::LBRACK:
      case SEWParser::LCURLY:
      case SEWParser::COLON2:
      case SEWParser::FloatingPointNumber:
      case SEWParser::IntegerNumber:
      case SEWParser::CharacterLiteral:
      case SEWParser::DoubleQuotedString:
      case SEWParser::SingleQuotedString:
      case SEWParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1022);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->lit = literal();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->lit->expr; 
        break;
      }

      case SEWParser::LNOT: {
        enterOuterAlt(_localctx, 2);
        setState(1025);
        match(SEWParser::LNOT);
        setState(1026);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->le = unaryExpression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->expr =  ExpressionConstructor::newCode(OperatorManager::OPERATOR_NOT, antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->le->expr); 
        break;
      }

      case SEWParser::BNOT: {
        enterOuterAlt(_localctx, 3);
        setState(1029);
        match(SEWParser::BNOT);
        setState(1030);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->be = unaryExpression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->expr =  ExpressionConstructor::newCode(OperatorManager::OPERATOR_BNOT, antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->be->expr); 
        break;
      }

      case SEWParser::LPAREN_INVOKE: {
        enterOuterAlt(_localctx, 4);
        setState(1033);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->i = expression_invoke();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->i->expr; 
        break;
      }

      case SEWParser::LPAREN: {
        enterOuterAlt(_localctx, 5);
        setState(1036);
        match(SEWParser::LPAREN);
        setState(1037);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->p = expression();
        setState(1038);
        match(SEWParser::RPAREN);
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->expr =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->p->expr; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

SEWParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* SEWParser::LiteralContext::True() {
  return getToken(SEWParser::True, 0);
}

tree::TerminalNode* SEWParser::LiteralContext::False() {
  return getToken(SEWParser::False, 0);
}

tree::TerminalNode* SEWParser::LiteralContext::MINUS() {
  return getToken(SEWParser::MINUS, 0);
}

tree::TerminalNode* SEWParser::LiteralContext::IntegerNumber() {
  return getToken(SEWParser::IntegerNumber, 0);
}

tree::TerminalNode* SEWParser::LiteralContext::PLUS() {
  return getToken(SEWParser::PLUS, 0);
}

tree::TerminalNode* SEWParser::LiteralContext::FloatingPointNumber() {
  return getToken(SEWParser::FloatingPointNumber, 0);
}

tree::TerminalNode* SEWParser::LiteralContext::CharacterLiteral() {
  return getToken(SEWParser::CharacterLiteral, 0);
}

tree::TerminalNode* SEWParser::LiteralContext::DoubleQuotedString() {
  return getToken(SEWParser::DoubleQuotedString, 0);
}

tree::TerminalNode* SEWParser::LiteralContext::SingleQuotedString() {
  return getToken(SEWParser::SingleQuotedString, 0);
}

SEWParser::UfiStringContext* SEWParser::LiteralContext::ufiString() {
  return getRuleContext<SEWParser::UfiStringContext>(0);
}

SEWParser::AReferenceContext* SEWParser::LiteralContext::aReference() {
  return getRuleContext<SEWParser::AReferenceContext>(0);
}

SEWParser::AnArrayContext* SEWParser::LiteralContext::anArray() {
  return getRuleContext<SEWParser::AnArrayContext>(0);
}

SEWParser::AListContext* SEWParser::LiteralContext::aList() {
  return getRuleContext<SEWParser::AListContext>(0);
}


size_t SEWParser::LiteralContext::getRuleIndex() const {
  return SEWParser::RuleLiteral;
}


SEWParser::LiteralContext* SEWParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 116, SEWParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1081);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1043);
      match(SEWParser::True);
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  ExpressionConstructor::newBoolean(true); 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1045);
      match(SEWParser::False);
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  ExpressionConstructor::newBoolean(false); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1047);
      match(SEWParser::MINUS);
      setState(1048);
      antlrcpp::downCast<LiteralContext *>(_localctx)->mn = match(SEWParser::IntegerNumber);
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  ExpressionConstructor::newInteger( "-" + antlrcpp::downCast<LiteralContext *>(_localctx)->mn->getText() ); 
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1050);
      match(SEWParser::PLUS);
      setState(1051);
      antlrcpp::downCast<LiteralContext *>(_localctx)->pn = match(SEWParser::IntegerNumber);
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  ExpressionConstructor::newInteger( antlrcpp::downCast<LiteralContext *>(_localctx)->pn->getText() ); 
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1053);
      antlrcpp::downCast<LiteralContext *>(_localctx)->n = match(SEWParser::IntegerNumber);
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  ExpressionConstructor::newInteger( antlrcpp::downCast<LiteralContext *>(_localctx)->n->getText() ); 
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1055);
      match(SEWParser::MINUS);
      setState(1056);
      antlrcpp::downCast<LiteralContext *>(_localctx)->mf = match(SEWParser::FloatingPointNumber);
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  ExpressionConstructor::newFloat( "-" + antlrcpp::downCast<LiteralContext *>(_localctx)->mf->getText() ); 
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1058);
      match(SEWParser::PLUS);
      setState(1059);
      antlrcpp::downCast<LiteralContext *>(_localctx)->pf = match(SEWParser::FloatingPointNumber);
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  ExpressionConstructor::newFloat( antlrcpp::downCast<LiteralContext *>(_localctx)->pf->getText() ); 
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1061);
      antlrcpp::downCast<LiteralContext *>(_localctx)->f = match(SEWParser::FloatingPointNumber);
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  ExpressionConstructor::newFloat( antlrcpp::downCast<LiteralContext *>(_localctx)->f->getText() ); 
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1063);
      antlrcpp::downCast<LiteralContext *>(_localctx)->cl = match(SEWParser::CharacterLiteral);
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  ExpressionConstructor::newChar( antlrcpp::downCast<LiteralContext *>(_localctx)->cl->getText().c_str()[0] ); 
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1065);
      antlrcpp::downCast<LiteralContext *>(_localctx)->dqs = match(SEWParser::DoubleQuotedString);
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  ExpressionConstructor::newString(
      				antlrcpp::downCast<LiteralContext *>(_localctx)->dqs->getText() , String::DOUBLE_QUOTE_DELIMITER );
      	
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1067);
      antlrcpp::downCast<LiteralContext *>(_localctx)->sqs = match(SEWParser::SingleQuotedString);
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  ExpressionConstructor::newString(
      				antlrcpp::downCast<LiteralContext *>(_localctx)->sqs->getText() , String::SINGLE_QUOTE_DELIMITER );
      	
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1069);
      antlrcpp::downCast<LiteralContext *>(_localctx)->u = ufiString();
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  antlrcpp::downCast<LiteralContext *>(_localctx)->u->bfUFI; 
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1072);
      antlrcpp::downCast<LiteralContext *>(_localctx)->r = aReference();
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  antlrcpp::downCast<LiteralContext *>(_localctx)->r->form;  
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1075);
      antlrcpp::downCast<LiteralContext *>(_localctx)->aa = anArray(WObject::_NULL_);
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  antlrcpp::downCast<LiteralContext *>(_localctx)->aa->array; 
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1078);
      antlrcpp::downCast<LiteralContext *>(_localctx)->al = aList(WObject::_NULL_);
       antlrcpp::downCast<LiteralContext *>(_localctx)->expr =  antlrcpp::downCast<LiteralContext *>(_localctx)->al->plist; 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool SEWParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 27: return aWSequenceSempred(antlrcpp::downCast<AWSequenceContext *>(context), predicateIndex);
    case 34: return anOperatorSempred(antlrcpp::downCast<AnOperatorContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool SEWParser::aWSequenceSempred(AWSequenceContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return  getCurrentToken()->getText() == antlrcpp::downCast<AWSequenceContext *>(_localctx)->identifierToken->getText() ;

  default:
    break;
  }
  return true;
}

bool SEWParser::anOperatorSempred(AnOperatorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return  OperatorManager::getOp(getCurrentToken()->getText()) != NULL ;

  default:
    break;
  }
  return true;
}

void SEWParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  sewparserParserInitialize();
#else
  ::antlr4::internal::call_once(sewparserParserOnceFlag, sewparserParserInitialize);
#endif
}
