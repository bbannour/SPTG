/*******************************************************************************
 * Copyright (c) 2020 CEA LIST.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 *
 * Created on: 23 avr. 2020
 *
 * Contributors:
 *  Arnault Lapitre (CEA LIST) arnault.lapitre@cea.fr
 *  Erwan Mahe (CentraleSUpelec) erwan.mahe@student.ecp.fr
 *   - Initial API and Implementation
 ******************************************************************************/

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";
option objc_class_prefix = "HLW";

//import "google/protobuf/empty.proto";

package sep.grpc;


// The DIVERSITY/SYMBEX service definition.
service Symbex {
	////////////////////////////////////////////////////////////////////////////
	// Initialization
	rpc initialization (InitializationRequest) returns (InitializationReply) {}

	////////////////////////////////////////////////////////////////////////////
	// Model Parsing
	rpc modelParse (ModelDefinitionRequest) returns (ModelParseReply) {}

	rpc modelParseFile (ModelDefinitionRequest) returns (ModelParseReply) {}

	// Model Parsing for Raw Textual 
	rpc modelParseText (ModelDefinitionRequest) returns (ModelParseReply) {}

	////////////////////////////////////////////////////////////////////////////
	// Model Evaluation
	rpc modelEval (ModelDefinitionRequest) returns (ModelEvalReply) {}

	////////////////////////////////////////////////////////////////////////////
	// SYMBEX

	// Symbex Evaluation Initialization
	rpc symbexEvalInit (SymbexEvalInitRequest) returns (SymbexEvalInitReply) {}

	// Symbex Step
	rpc symbexEvalStep (SymbexEvalStepRequest) returns (SymbexEvalStepReply) {}

	// Symbex Evaluation
	rpc symbexEvalContext (SymbexEvalContextRequest) returns (SymbexEvalContextReply) {}

	// Symbex Evaluation of a Machine (by a string FQN_ID) on a symbolic Execution Context
	rpc symbexEvalMachine (SymbexEvalRunnableRequest) returns (SymbexEvalRunnableReply) {}


	// Symbex Evaluation of a Machine (by a string FQN_ID) on a Symbex Context
	rpc symbexEvalBasicMachine (SymbexEvalRunnableRequest) returns (SymbexEvalRunnableBasicReply) {}



	// Symbex Evaluation of a State (by a string FQN_ID) on a Symbex Context
	rpc symbexEvalState (SymbexEvalRunnableRequest) returns (SymbexEvalRunnableReply) {}

	// Symbex Evaluation of a Transition (by a string FQN_ID) on a Context
	rpc symbexEvalTransition (SymbexEvalRunnableRequest) returns (SymbexEvalRunnableReply) {}


	////////////////////////////////////////////////////////////////////////////
	// QUERY

	// Symbex Query Variable Value, if the variable request set is empty, all variable values are returned 
	rpc queryValueofVariable (QueryValueForVariableRequest) returns (QueryValueForVariableReply) {}

	// Symbex Query Trace for Condition
	rpc queryNodeCondition (QueryValueForVariableRequest) returns (QueryValueForVariableReply) {}
	rpc queryPathCondition (QueryValueForVariableRequest) returns (QueryValueForVariableReply) {}

	// Symbex Query Trace for IO Ã©lement (input / output / newfresh)
	rpc queryTraceIO(QueryValueForVariableRequest) returns (QueryValueForVariableReply) {}

	// Symbex Query Trace for Executable element (machine / statemachine / state / transition)
	rpc queryTraceExecutable (QueryValueForVariableRequest) returns (QueryValueForVariableReply) {}


	// EC tree Query Note : these might be merge with other query once matured
	rpc queryEC(ECQuery) returns (GRPCExecutionContext){}
	rpc queryChildContext(ECQuery) returns (ECReply){} 

	rpc queryRuntimesStatus(ECQuery) returns (RuntimesStatusReply){}

	////////////////////////////////////////////////////////////////////////////
	// POST PROCESSING

	rpc runPostProcessor (PostProcessingRequest) returns (PostProcessingReply) {}
}


// **********
// EXPRESSION ENCODING
enum SymbolKind {
	UNKNOWN_SYMBOL = 0;

	// var / param element
	VARIABLE       = 1;

	PARAMETER      = 2;

	// io/com element
	PORT           = 3;
	SIGNAL         = 4;
	MESSAGE        = 5;
	BUFFER         = 6;
	CHANNEL        = 7;
	CONNECTOR      = 8;

	// state transition system element
	SYSTEM         = 9;
	MACHINE        = 10;
	STATEMACHINE   = 11;
	STATE          = 12;
	TRANSITION     = 13;

	// runtime machine id like pid
	RUNTIME_ID     = 14;

	// function / program
	FUNCTION       = 15;
	PROGRAM        = 16;

	// anything else
	OPERATOR       = 17;
	
	ARRAY          = 18;
	LIST           = 19;
	COLLECTION     = 20;
}

enum OperatorKind {
	UNKNOWN_OP     = 0;

	NOP            = 1;
	
	// additive op
	ADD            = 2;
	MINUS          = 3;
	UMINUS         = 4;
	
	// multiplicative op
	MULT           = 5;
	DIV            = 6;
	
	// biwise op
	OR             = 7;
	AND            = 8;
	NOT            = 9;
	XOR            = 10;
	IMPLIES        = 11;
	
	// logical op
	BOR            = 12;
	BAND           = 13;
	BNOT           = 14;
	BXOR           = 15;
	LSHIFT         = 16;
	RSHIFT         = 17;
	
	// [syntactical] equal op
	EQ             = 18;
	NEQ            = 19;
	SEQ            = 20;
	NSEQ           = 21;

	// relationnal op
	GT             = 22;
	GTE            = 23;
	LT             = 24;
	LTE            = 25;

	// statement op
	ASSIGN         = 26; 
	
	// I/O op
	NEWFRESH       = 27;

	INPUT          = 28;
	INPUT_ENV      = 29;
	INPUT_RDV      = 30;
	
	OUTPUT         = 31;
	OUTPUT_ENV     = 32;
	OUTPUT_RDV     = 33;

	// runnable machine op
	ABORT          = 34;
	DISABLE        = 35;
	ENABLE         = 36;

	INIT           = 37;
	FINAL          = 38;
	DESTROY        = 39;

	START          = 40;
	STOP           = 41;

	RUN            = 42;
	RTC            = 43;
	SCHEDULE       = 44;
	DEFER          = 45;

	// invoke transition op
	INVOKE_TRANSITION = 46;
	INVOKE_ROUTINE    = 47;

	// schedule op
	SEQUENCE       = 48;
	PARALLEL       = 49;
	INTERLEAVING   = 50;
	SYNCHRONOUS    = 51;
	PRIOR_GT       = 52;
}


message Expression {
	oneof expression_alt {
	    // ***
	    // builtin raw expression 
	    bool   raw_bool       = 1;
	    int64  raw_integer    = 2;
	    double raw_float      = 3;
	    string raw_string     = 4;
	    
	    // ***
	    // operation for sub expression
	    Symbol symbol          = 5;

	    // operation for sub expression
	    Operation operation    = 6;
	}
}

message Symbol {
	SymbolKind kind = 1;
	string id       = 2;
}

message Operation {
	OperatorKind operatorKind   = 1;
	repeated Expression operand = 2;
}
// **********

/*
// **********
// REFERENCES
message SymbolID {
	string FQN     = 1;
//    uint32 UID   = 2;
}

message VariableID {
	string FQN     = 1;
//    uint32 UID   = 2;
//    uint32 index = 3;
}
// **********
*/

// **********
// VARIABLE VALUE TRANSMISSION
message VariableValuePair {
	string variable_id = 1;
	Expression value   = 2;
}
// **********

// **********
// TYPED SYMBOL
enum DataType {
	ANY         = 0;
	
	BOOLEAN     = 1;
	
	INTEGER     = 2;
	RATIONAL    = 3;
	FLOAT       = 4;
	
	STRING      = 5;
	
	UNKNOWN     = 6;
}

message TypedSymbol {
	string symbol_id = 1;
	DataType type    = 2;
}
// **********


// **********
// The request / reply messages for Initialization.
message InitializationRequest {
	string session_id = 1;
}

message InitializationReply {
	string message = 1;
}
// **********

// **********
// The request for model definition.
// string field for file path location or full raw text model or workflow
message ModelDefinitionRequest {
	oneof model_alt {
	    // Model file path
	    string model_file_path = 1;
	    // Model raw text
	    string model_raw_text  = 2;
	}
	
	oneof workflow_alt {
	    // Model file path
	    string workflow_file_path = 3;
	    // Model raw text
	    string workflow_raw_text  = 4;
	}
}
// **********

// **********
// The request / reply messages for Model Parsing.
message ModelParseReply {
	uint32 error_count    = 1;
	uint32 warning_count  = 2;
	repeated string error = 3;
}
// **********


// **********
// The request / reply messages for Model Evaluation.
message ModelEvalReply {
	ModelParseReply parse_reply = 1;
	
	uint32 execution_context_count   = 2;
	uint32 execution_context_root_id = 3;
	
	repeated uint32 not_yet_eval_execution_context_id = 4;

	uint32 step_count = 5;
	uint32 eval_count = 6;

	uint32 max_execution_context_height = 7;
	uint32 max_execution_context_width  = 8;
	
	uint32 redundancy_count             = 9;
	uint32 exit_execution_context_count = 10;
	bool eval_limit_reached             = 11;
}
// **********


// **********
// The request / reply messages for Symbex initialization
message SymbexEvalInitRequest {
	repeated VariableValuePair variable_value = 1;
	Expression condition                      = 2;
}

message SymbexEvalInitReply {
	uint32 execution_context_id               = 1;
	repeated VariableValuePair variable_value = 2;
	Expression path_condition                 = 3;
	Expression other_condition                = 4;
}
// **********


// **********
// The request / reply messages for some Evaluation step
message SymbexEvalStepRequest {
	uint32 step_count                         = 1;
	repeated VariableValuePair variable_value = 2;
	Expression condition                      = 3;
}

message SymbexEvalStepReply {    
	uint32 step_count = 1;
	uint32 eval_count = 2;
	
	repeated uint32 not_yet_eval_execution_context_id = 3;
}
// **********

// **********
// The request / reply messages for Evaluation of a Context (by a integer ID)
message SymbexEvalContextRequest {
	uint32 execution_context_id               = 1;
	uint32 step_count                         = 2;
	repeated VariableValuePair variable_value = 3;
	Expression condition                      = 4;
}

message SymbexEvalContextReply {    
uint32 execution_context_id                = 1;
uint32 step_count                          = 2;
uint32 eval_count                          = 3;
repeated uint32 child_execution_context_id = 4;
}


// **********
// The request / reply message for Evaluation of a Machine / State / Transtion 
// (by a string as Fully Qualified NameID) in the context of a symbeolic Execution Context
message SymbexEvalRunnableRequest {
	uint32 execution_context_id               = 1;
	string runnable_element_id                = 2;
	repeated VariableValuePair variable_value = 3;
	Expression condition                      = 4;
	}

message SymbexEvalRunnableReply {    
	repeated uint32 execution_context_id              = 1;
	repeated uint32 not_yet_eval_execution_context_id = 2;
}

message SymbexEvalRunnableBasicReply {    
	bool is_satisfiable                               = 1;
	uint32 execution_context_id                       = 2;
	
	Expression path_condition                         = 3;
	Expression other_condition                        = 4;
	
	repeated TypedSymbol created_symbols              = 5;
	
	repeated uint32 not_yet_eval_execution_context_id = 6;
}
// **********


// **********
// The request / reply message for Query on Symbex Context : value of a variable
message QueryValueForVariableRequest {
	uint32 execution_context_id = 1;
	repeated string variable_id = 2;
}

message QueryValueForVariableReply {    
	uint32 execution_context_id               = 1;
	repeated VariableValuePair variable_value = 2;
}
// **********



// EC Tree 
message ECQuery{
	uint32 execution_context_id          = 1;
}

message ECReply{
	repeated uint32 execution_context_id = 6;
}


//Type PROCESS_STATE
enum PROCESS_STATE
{
	PROCESS_CREATING_STATE=0;
	PROCESS_CREATED_STATE=1;
	PROCESS_LOADED_STATE=2;
	PROCESS_STARTING_STATE=3;
	PROCESS_INITING_STATE=4;
	PROCESS_FINALIZING_STATE=5;
	PROCESS_FINALIZED_STATE=6;
	PROCESS_DESTROYED_STATE=7;
	PROCESS_STOPPING_STATE=8;
	PROCESS_STOPPED_STATE=9;
	PROCESS_SUSPENDED_STATE=10;
	PROCESS_WAITING_STATE=11;
	PROCESS_WAITING_JOIN_STATE=12;
	PROCESS_ABORTED_STATE=13;
	PROCESS_DISABLED_STATE=14;
	PROCESS_IDLE_STATE=15;
	PROCESS_RUNNING_STATE=16;
	PROCESS_RTC_STATE=17;
	PROCESS_UNDEFINED_STATE=18;
}

message SingleRuntimeStatus{
	string runtime_id = 1;
	PROCESS_STATE runtime_state = 2;    
}

message RuntimesStatusReply{
	repeated SingleRuntimeStatus runtime_status = 1;
}

message RuntimeStatusTree{
	SingleRuntimeStatus runtime_status = 1;
	repeated RuntimeStatusTree children_status = 2;
}

message GRPCExecutionContext{
	uint32 execution_context_id = 1;
	RuntimeStatusTree runtime_status = 2;
	repeated VariableValuePair variable_value = 3;
	Expression trace_io = 4;
	Expression trace_executable = 5;
	repeated uint32 children = 6;
    bool is_eval =7;
}

// **********

////////////////////////////////////////////////////////////////////////////////
// POST PROCESSING

// **********
// The request / reply message for Query on Symbex Context : value of a variable
message PostProcessingRequest {
	bool enable_execution_graph = 1;
}

message PostProcessingReply {
	string execution_graph = 1;
}
// **********

