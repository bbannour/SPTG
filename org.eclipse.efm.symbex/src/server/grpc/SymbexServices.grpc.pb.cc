#if defined(_EXPERIMENTAL_SERVER_GRPC_FEATURE_)

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: SymbexServices.proto

#include "SymbexServices.pb.h"
#include "SymbexServices.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sep {
namespace grpc {

static const char* Symbex_method_names[] = {
  "/sep.grpc.Symbex/initialization",
  "/sep.grpc.Symbex/modelParse",
  "/sep.grpc.Symbex/modelParseFile",
  "/sep.grpc.Symbex/modelParseText",
  "/sep.grpc.Symbex/modelEval",
  "/sep.grpc.Symbex/symbexEvalInit",
  "/sep.grpc.Symbex/symbexEvalStep",
  "/sep.grpc.Symbex/symbexEvalContext",
  "/sep.grpc.Symbex/symbexEvalMachine",
  "/sep.grpc.Symbex/symbexEvalBasicMachine",
  "/sep.grpc.Symbex/symbexEvalState",
  "/sep.grpc.Symbex/symbexEvalTransition",
  "/sep.grpc.Symbex/queryValueofVariable",
  "/sep.grpc.Symbex/queryNodeCondition",
  "/sep.grpc.Symbex/queryPathCondition",
  "/sep.grpc.Symbex/queryTraceIO",
  "/sep.grpc.Symbex/queryTraceExecutable",
  "/sep.grpc.Symbex/queryEC",
  "/sep.grpc.Symbex/queryChildContext",
  "/sep.grpc.Symbex/queryRuntimesStatus",
  "/sep.grpc.Symbex/runPostProcessor",
};

std::unique_ptr< Symbex::Stub> Symbex::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Symbex::Stub> stub(new Symbex::Stub(channel, options));
  return stub;
}

Symbex::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_initialization_(Symbex_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_modelParse_(Symbex_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_modelParseFile_(Symbex_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_modelParseText_(Symbex_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_modelEval_(Symbex_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_symbexEvalInit_(Symbex_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_symbexEvalStep_(Symbex_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_symbexEvalContext_(Symbex_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_symbexEvalMachine_(Symbex_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_symbexEvalBasicMachine_(Symbex_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_symbexEvalState_(Symbex_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_symbexEvalTransition_(Symbex_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_queryValueofVariable_(Symbex_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_queryNodeCondition_(Symbex_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_queryPathCondition_(Symbex_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_queryTraceIO_(Symbex_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_queryTraceExecutable_(Symbex_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_queryEC_(Symbex_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_queryChildContext_(Symbex_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_queryRuntimesStatus_(Symbex_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_runPostProcessor_(Symbex_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Symbex::Stub::initialization(::grpc::ClientContext* context, const ::sep::grpc::InitializationRequest& request, ::sep::grpc::InitializationReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::InitializationRequest, ::sep::grpc::InitializationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_initialization_, context, request, response);
}

void Symbex::Stub::async::initialization(::grpc::ClientContext* context, const ::sep::grpc::InitializationRequest* request, ::sep::grpc::InitializationReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::InitializationRequest, ::sep::grpc::InitializationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_initialization_, context, request, response, std::move(f));
}

void Symbex::Stub::async::initialization(::grpc::ClientContext* context, const ::sep::grpc::InitializationRequest* request, ::sep::grpc::InitializationReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_initialization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::InitializationReply>* Symbex::Stub::PrepareAsyncinitializationRaw(::grpc::ClientContext* context, const ::sep::grpc::InitializationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::InitializationReply, ::sep::grpc::InitializationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_initialization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::InitializationReply>* Symbex::Stub::AsyncinitializationRaw(::grpc::ClientContext* context, const ::sep::grpc::InitializationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitializationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::modelParse(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest& request, ::sep::grpc::ModelParseReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::ModelDefinitionRequest, ::sep::grpc::ModelParseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_modelParse_, context, request, response);
}

void Symbex::Stub::async::modelParse(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest* request, ::sep::grpc::ModelParseReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::ModelDefinitionRequest, ::sep::grpc::ModelParseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modelParse_, context, request, response, std::move(f));
}

void Symbex::Stub::async::modelParse(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest* request, ::sep::grpc::ModelParseReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modelParse_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::ModelParseReply>* Symbex::Stub::PrepareAsyncmodelParseRaw(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::ModelParseReply, ::sep::grpc::ModelDefinitionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_modelParse_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::ModelParseReply>* Symbex::Stub::AsyncmodelParseRaw(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmodelParseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::modelParseFile(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest& request, ::sep::grpc::ModelParseReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::ModelDefinitionRequest, ::sep::grpc::ModelParseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_modelParseFile_, context, request, response);
}

void Symbex::Stub::async::modelParseFile(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest* request, ::sep::grpc::ModelParseReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::ModelDefinitionRequest, ::sep::grpc::ModelParseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modelParseFile_, context, request, response, std::move(f));
}

void Symbex::Stub::async::modelParseFile(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest* request, ::sep::grpc::ModelParseReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modelParseFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::ModelParseReply>* Symbex::Stub::PrepareAsyncmodelParseFileRaw(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::ModelParseReply, ::sep::grpc::ModelDefinitionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_modelParseFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::ModelParseReply>* Symbex::Stub::AsyncmodelParseFileRaw(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmodelParseFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::modelParseText(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest& request, ::sep::grpc::ModelParseReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::ModelDefinitionRequest, ::sep::grpc::ModelParseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_modelParseText_, context, request, response);
}

void Symbex::Stub::async::modelParseText(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest* request, ::sep::grpc::ModelParseReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::ModelDefinitionRequest, ::sep::grpc::ModelParseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modelParseText_, context, request, response, std::move(f));
}

void Symbex::Stub::async::modelParseText(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest* request, ::sep::grpc::ModelParseReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modelParseText_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::ModelParseReply>* Symbex::Stub::PrepareAsyncmodelParseTextRaw(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::ModelParseReply, ::sep::grpc::ModelDefinitionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_modelParseText_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::ModelParseReply>* Symbex::Stub::AsyncmodelParseTextRaw(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmodelParseTextRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::modelEval(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest& request, ::sep::grpc::ModelEvalReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::ModelDefinitionRequest, ::sep::grpc::ModelEvalReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_modelEval_, context, request, response);
}

void Symbex::Stub::async::modelEval(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest* request, ::sep::grpc::ModelEvalReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::ModelDefinitionRequest, ::sep::grpc::ModelEvalReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modelEval_, context, request, response, std::move(f));
}

void Symbex::Stub::async::modelEval(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest* request, ::sep::grpc::ModelEvalReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modelEval_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::ModelEvalReply>* Symbex::Stub::PrepareAsyncmodelEvalRaw(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::ModelEvalReply, ::sep::grpc::ModelDefinitionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_modelEval_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::ModelEvalReply>* Symbex::Stub::AsyncmodelEvalRaw(::grpc::ClientContext* context, const ::sep::grpc::ModelDefinitionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmodelEvalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::symbexEvalInit(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalInitRequest& request, ::sep::grpc::SymbexEvalInitReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::SymbexEvalInitRequest, ::sep::grpc::SymbexEvalInitReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_symbexEvalInit_, context, request, response);
}

void Symbex::Stub::async::symbexEvalInit(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalInitRequest* request, ::sep::grpc::SymbexEvalInitReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::SymbexEvalInitRequest, ::sep::grpc::SymbexEvalInitReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_symbexEvalInit_, context, request, response, std::move(f));
}

void Symbex::Stub::async::symbexEvalInit(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalInitRequest* request, ::sep::grpc::SymbexEvalInitReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_symbexEvalInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::SymbexEvalInitReply>* Symbex::Stub::PrepareAsyncsymbexEvalInitRaw(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalInitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::SymbexEvalInitReply, ::sep::grpc::SymbexEvalInitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_symbexEvalInit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::SymbexEvalInitReply>* Symbex::Stub::AsyncsymbexEvalInitRaw(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalInitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsymbexEvalInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::symbexEvalStep(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalStepRequest& request, ::sep::grpc::SymbexEvalStepReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::SymbexEvalStepRequest, ::sep::grpc::SymbexEvalStepReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_symbexEvalStep_, context, request, response);
}

void Symbex::Stub::async::symbexEvalStep(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalStepRequest* request, ::sep::grpc::SymbexEvalStepReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::SymbexEvalStepRequest, ::sep::grpc::SymbexEvalStepReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_symbexEvalStep_, context, request, response, std::move(f));
}

void Symbex::Stub::async::symbexEvalStep(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalStepRequest* request, ::sep::grpc::SymbexEvalStepReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_symbexEvalStep_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::SymbexEvalStepReply>* Symbex::Stub::PrepareAsyncsymbexEvalStepRaw(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalStepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::SymbexEvalStepReply, ::sep::grpc::SymbexEvalStepRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_symbexEvalStep_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::SymbexEvalStepReply>* Symbex::Stub::AsyncsymbexEvalStepRaw(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalStepRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsymbexEvalStepRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::symbexEvalContext(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalContextRequest& request, ::sep::grpc::SymbexEvalContextReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::SymbexEvalContextRequest, ::sep::grpc::SymbexEvalContextReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_symbexEvalContext_, context, request, response);
}

void Symbex::Stub::async::symbexEvalContext(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalContextRequest* request, ::sep::grpc::SymbexEvalContextReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::SymbexEvalContextRequest, ::sep::grpc::SymbexEvalContextReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_symbexEvalContext_, context, request, response, std::move(f));
}

void Symbex::Stub::async::symbexEvalContext(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalContextRequest* request, ::sep::grpc::SymbexEvalContextReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_symbexEvalContext_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::SymbexEvalContextReply>* Symbex::Stub::PrepareAsyncsymbexEvalContextRaw(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalContextRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::SymbexEvalContextReply, ::sep::grpc::SymbexEvalContextRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_symbexEvalContext_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::SymbexEvalContextReply>* Symbex::Stub::AsyncsymbexEvalContextRaw(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalContextRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsymbexEvalContextRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::symbexEvalMachine(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest& request, ::sep::grpc::SymbexEvalRunnableReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::SymbexEvalRunnableRequest, ::sep::grpc::SymbexEvalRunnableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_symbexEvalMachine_, context, request, response);
}

void Symbex::Stub::async::symbexEvalMachine(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest* request, ::sep::grpc::SymbexEvalRunnableReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::SymbexEvalRunnableRequest, ::sep::grpc::SymbexEvalRunnableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_symbexEvalMachine_, context, request, response, std::move(f));
}

void Symbex::Stub::async::symbexEvalMachine(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest* request, ::sep::grpc::SymbexEvalRunnableReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_symbexEvalMachine_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::SymbexEvalRunnableReply>* Symbex::Stub::PrepareAsyncsymbexEvalMachineRaw(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::SymbexEvalRunnableReply, ::sep::grpc::SymbexEvalRunnableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_symbexEvalMachine_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::SymbexEvalRunnableReply>* Symbex::Stub::AsyncsymbexEvalMachineRaw(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsymbexEvalMachineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::symbexEvalBasicMachine(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest& request, ::sep::grpc::SymbexEvalRunnableBasicReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::SymbexEvalRunnableRequest, ::sep::grpc::SymbexEvalRunnableBasicReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_symbexEvalBasicMachine_, context, request, response);
}

void Symbex::Stub::async::symbexEvalBasicMachine(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest* request, ::sep::grpc::SymbexEvalRunnableBasicReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::SymbexEvalRunnableRequest, ::sep::grpc::SymbexEvalRunnableBasicReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_symbexEvalBasicMachine_, context, request, response, std::move(f));
}

void Symbex::Stub::async::symbexEvalBasicMachine(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest* request, ::sep::grpc::SymbexEvalRunnableBasicReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_symbexEvalBasicMachine_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::SymbexEvalRunnableBasicReply>* Symbex::Stub::PrepareAsyncsymbexEvalBasicMachineRaw(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::SymbexEvalRunnableBasicReply, ::sep::grpc::SymbexEvalRunnableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_symbexEvalBasicMachine_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::SymbexEvalRunnableBasicReply>* Symbex::Stub::AsyncsymbexEvalBasicMachineRaw(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsymbexEvalBasicMachineRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::symbexEvalState(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest& request, ::sep::grpc::SymbexEvalRunnableReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::SymbexEvalRunnableRequest, ::sep::grpc::SymbexEvalRunnableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_symbexEvalState_, context, request, response);
}

void Symbex::Stub::async::symbexEvalState(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest* request, ::sep::grpc::SymbexEvalRunnableReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::SymbexEvalRunnableRequest, ::sep::grpc::SymbexEvalRunnableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_symbexEvalState_, context, request, response, std::move(f));
}

void Symbex::Stub::async::symbexEvalState(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest* request, ::sep::grpc::SymbexEvalRunnableReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_symbexEvalState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::SymbexEvalRunnableReply>* Symbex::Stub::PrepareAsyncsymbexEvalStateRaw(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::SymbexEvalRunnableReply, ::sep::grpc::SymbexEvalRunnableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_symbexEvalState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::SymbexEvalRunnableReply>* Symbex::Stub::AsyncsymbexEvalStateRaw(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsymbexEvalStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::symbexEvalTransition(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest& request, ::sep::grpc::SymbexEvalRunnableReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::SymbexEvalRunnableRequest, ::sep::grpc::SymbexEvalRunnableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_symbexEvalTransition_, context, request, response);
}

void Symbex::Stub::async::symbexEvalTransition(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest* request, ::sep::grpc::SymbexEvalRunnableReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::SymbexEvalRunnableRequest, ::sep::grpc::SymbexEvalRunnableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_symbexEvalTransition_, context, request, response, std::move(f));
}

void Symbex::Stub::async::symbexEvalTransition(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest* request, ::sep::grpc::SymbexEvalRunnableReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_symbexEvalTransition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::SymbexEvalRunnableReply>* Symbex::Stub::PrepareAsyncsymbexEvalTransitionRaw(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::SymbexEvalRunnableReply, ::sep::grpc::SymbexEvalRunnableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_symbexEvalTransition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::SymbexEvalRunnableReply>* Symbex::Stub::AsyncsymbexEvalTransitionRaw(::grpc::ClientContext* context, const ::sep::grpc::SymbexEvalRunnableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsymbexEvalTransitionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::queryValueofVariable(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::sep::grpc::QueryValueForVariableReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_queryValueofVariable_, context, request, response);
}

void Symbex::Stub::async::queryValueofVariable(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryValueofVariable_, context, request, response, std::move(f));
}

void Symbex::Stub::async::queryValueofVariable(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryValueofVariable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::QueryValueForVariableReply>* Symbex::Stub::PrepareAsyncqueryValueofVariableRaw(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::QueryValueForVariableReply, ::sep::grpc::QueryValueForVariableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_queryValueofVariable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::QueryValueForVariableReply>* Symbex::Stub::AsyncqueryValueofVariableRaw(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncqueryValueofVariableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::queryNodeCondition(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::sep::grpc::QueryValueForVariableReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_queryNodeCondition_, context, request, response);
}

void Symbex::Stub::async::queryNodeCondition(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryNodeCondition_, context, request, response, std::move(f));
}

void Symbex::Stub::async::queryNodeCondition(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryNodeCondition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::QueryValueForVariableReply>* Symbex::Stub::PrepareAsyncqueryNodeConditionRaw(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::QueryValueForVariableReply, ::sep::grpc::QueryValueForVariableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_queryNodeCondition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::QueryValueForVariableReply>* Symbex::Stub::AsyncqueryNodeConditionRaw(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncqueryNodeConditionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::queryPathCondition(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::sep::grpc::QueryValueForVariableReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_queryPathCondition_, context, request, response);
}

void Symbex::Stub::async::queryPathCondition(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryPathCondition_, context, request, response, std::move(f));
}

void Symbex::Stub::async::queryPathCondition(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryPathCondition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::QueryValueForVariableReply>* Symbex::Stub::PrepareAsyncqueryPathConditionRaw(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::QueryValueForVariableReply, ::sep::grpc::QueryValueForVariableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_queryPathCondition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::QueryValueForVariableReply>* Symbex::Stub::AsyncqueryPathConditionRaw(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncqueryPathConditionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::queryTraceIO(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::sep::grpc::QueryValueForVariableReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_queryTraceIO_, context, request, response);
}

void Symbex::Stub::async::queryTraceIO(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryTraceIO_, context, request, response, std::move(f));
}

void Symbex::Stub::async::queryTraceIO(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryTraceIO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::QueryValueForVariableReply>* Symbex::Stub::PrepareAsyncqueryTraceIORaw(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::QueryValueForVariableReply, ::sep::grpc::QueryValueForVariableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_queryTraceIO_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::QueryValueForVariableReply>* Symbex::Stub::AsyncqueryTraceIORaw(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncqueryTraceIORaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::queryTraceExecutable(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::sep::grpc::QueryValueForVariableReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_queryTraceExecutable_, context, request, response);
}

void Symbex::Stub::async::queryTraceExecutable(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryTraceExecutable_, context, request, response, std::move(f));
}

void Symbex::Stub::async::queryTraceExecutable(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryTraceExecutable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::QueryValueForVariableReply>* Symbex::Stub::PrepareAsyncqueryTraceExecutableRaw(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::QueryValueForVariableReply, ::sep::grpc::QueryValueForVariableRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_queryTraceExecutable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::QueryValueForVariableReply>* Symbex::Stub::AsyncqueryTraceExecutableRaw(::grpc::ClientContext* context, const ::sep::grpc::QueryValueForVariableRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncqueryTraceExecutableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::queryEC(::grpc::ClientContext* context, const ::sep::grpc::ECQuery& request, ::sep::grpc::GRPCExecutionContext* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::ECQuery, ::sep::grpc::GRPCExecutionContext, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_queryEC_, context, request, response);
}

void Symbex::Stub::async::queryEC(::grpc::ClientContext* context, const ::sep::grpc::ECQuery* request, ::sep::grpc::GRPCExecutionContext* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::ECQuery, ::sep::grpc::GRPCExecutionContext, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryEC_, context, request, response, std::move(f));
}

void Symbex::Stub::async::queryEC(::grpc::ClientContext* context, const ::sep::grpc::ECQuery* request, ::sep::grpc::GRPCExecutionContext* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryEC_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::GRPCExecutionContext>* Symbex::Stub::PrepareAsyncqueryECRaw(::grpc::ClientContext* context, const ::sep::grpc::ECQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::GRPCExecutionContext, ::sep::grpc::ECQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_queryEC_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::GRPCExecutionContext>* Symbex::Stub::AsyncqueryECRaw(::grpc::ClientContext* context, const ::sep::grpc::ECQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncqueryECRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::queryChildContext(::grpc::ClientContext* context, const ::sep::grpc::ECQuery& request, ::sep::grpc::ECReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::ECQuery, ::sep::grpc::ECReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_queryChildContext_, context, request, response);
}

void Symbex::Stub::async::queryChildContext(::grpc::ClientContext* context, const ::sep::grpc::ECQuery* request, ::sep::grpc::ECReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::ECQuery, ::sep::grpc::ECReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryChildContext_, context, request, response, std::move(f));
}

void Symbex::Stub::async::queryChildContext(::grpc::ClientContext* context, const ::sep::grpc::ECQuery* request, ::sep::grpc::ECReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryChildContext_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::ECReply>* Symbex::Stub::PrepareAsyncqueryChildContextRaw(::grpc::ClientContext* context, const ::sep::grpc::ECQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::ECReply, ::sep::grpc::ECQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_queryChildContext_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::ECReply>* Symbex::Stub::AsyncqueryChildContextRaw(::grpc::ClientContext* context, const ::sep::grpc::ECQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncqueryChildContextRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::queryRuntimesStatus(::grpc::ClientContext* context, const ::sep::grpc::ECQuery& request, ::sep::grpc::RuntimesStatusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::ECQuery, ::sep::grpc::RuntimesStatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_queryRuntimesStatus_, context, request, response);
}

void Symbex::Stub::async::queryRuntimesStatus(::grpc::ClientContext* context, const ::sep::grpc::ECQuery* request, ::sep::grpc::RuntimesStatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::ECQuery, ::sep::grpc::RuntimesStatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryRuntimesStatus_, context, request, response, std::move(f));
}

void Symbex::Stub::async::queryRuntimesStatus(::grpc::ClientContext* context, const ::sep::grpc::ECQuery* request, ::sep::grpc::RuntimesStatusReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_queryRuntimesStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::RuntimesStatusReply>* Symbex::Stub::PrepareAsyncqueryRuntimesStatusRaw(::grpc::ClientContext* context, const ::sep::grpc::ECQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::RuntimesStatusReply, ::sep::grpc::ECQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_queryRuntimesStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::RuntimesStatusReply>* Symbex::Stub::AsyncqueryRuntimesStatusRaw(::grpc::ClientContext* context, const ::sep::grpc::ECQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncqueryRuntimesStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Symbex::Stub::runPostProcessor(::grpc::ClientContext* context, const ::sep::grpc::PostProcessingRequest& request, ::sep::grpc::PostProcessingReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sep::grpc::PostProcessingRequest, ::sep::grpc::PostProcessingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_runPostProcessor_, context, request, response);
}

void Symbex::Stub::async::runPostProcessor(::grpc::ClientContext* context, const ::sep::grpc::PostProcessingRequest* request, ::sep::grpc::PostProcessingReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sep::grpc::PostProcessingRequest, ::sep::grpc::PostProcessingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_runPostProcessor_, context, request, response, std::move(f));
}

void Symbex::Stub::async::runPostProcessor(::grpc::ClientContext* context, const ::sep::grpc::PostProcessingRequest* request, ::sep::grpc::PostProcessingReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_runPostProcessor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::PostProcessingReply>* Symbex::Stub::PrepareAsyncrunPostProcessorRaw(::grpc::ClientContext* context, const ::sep::grpc::PostProcessingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sep::grpc::PostProcessingReply, ::sep::grpc::PostProcessingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_runPostProcessor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sep::grpc::PostProcessingReply>* Symbex::Stub::AsyncrunPostProcessorRaw(::grpc::ClientContext* context, const ::sep::grpc::PostProcessingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrunPostProcessorRaw(context, request, cq);
  result->StartCall();
  return result;
}

Symbex::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::InitializationRequest, ::sep::grpc::InitializationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::InitializationRequest* req,
             ::sep::grpc::InitializationReply* resp) {
               return service->initialization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::ModelDefinitionRequest, ::sep::grpc::ModelParseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::ModelDefinitionRequest* req,
             ::sep::grpc::ModelParseReply* resp) {
               return service->modelParse(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::ModelDefinitionRequest, ::sep::grpc::ModelParseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::ModelDefinitionRequest* req,
             ::sep::grpc::ModelParseReply* resp) {
               return service->modelParseFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::ModelDefinitionRequest, ::sep::grpc::ModelParseReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::ModelDefinitionRequest* req,
             ::sep::grpc::ModelParseReply* resp) {
               return service->modelParseText(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::ModelDefinitionRequest, ::sep::grpc::ModelEvalReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::ModelDefinitionRequest* req,
             ::sep::grpc::ModelEvalReply* resp) {
               return service->modelEval(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::SymbexEvalInitRequest, ::sep::grpc::SymbexEvalInitReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::SymbexEvalInitRequest* req,
             ::sep::grpc::SymbexEvalInitReply* resp) {
               return service->symbexEvalInit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::SymbexEvalStepRequest, ::sep::grpc::SymbexEvalStepReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::SymbexEvalStepRequest* req,
             ::sep::grpc::SymbexEvalStepReply* resp) {
               return service->symbexEvalStep(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::SymbexEvalContextRequest, ::sep::grpc::SymbexEvalContextReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::SymbexEvalContextRequest* req,
             ::sep::grpc::SymbexEvalContextReply* resp) {
               return service->symbexEvalContext(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::SymbexEvalRunnableRequest, ::sep::grpc::SymbexEvalRunnableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::SymbexEvalRunnableRequest* req,
             ::sep::grpc::SymbexEvalRunnableReply* resp) {
               return service->symbexEvalMachine(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::SymbexEvalRunnableRequest, ::sep::grpc::SymbexEvalRunnableBasicReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::SymbexEvalRunnableRequest* req,
             ::sep::grpc::SymbexEvalRunnableBasicReply* resp) {
               return service->symbexEvalBasicMachine(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::SymbexEvalRunnableRequest, ::sep::grpc::SymbexEvalRunnableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::SymbexEvalRunnableRequest* req,
             ::sep::grpc::SymbexEvalRunnableReply* resp) {
               return service->symbexEvalState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::SymbexEvalRunnableRequest, ::sep::grpc::SymbexEvalRunnableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::SymbexEvalRunnableRequest* req,
             ::sep::grpc::SymbexEvalRunnableReply* resp) {
               return service->symbexEvalTransition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::QueryValueForVariableRequest* req,
             ::sep::grpc::QueryValueForVariableReply* resp) {
               return service->queryValueofVariable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::QueryValueForVariableRequest* req,
             ::sep::grpc::QueryValueForVariableReply* resp) {
               return service->queryNodeCondition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::QueryValueForVariableRequest* req,
             ::sep::grpc::QueryValueForVariableReply* resp) {
               return service->queryPathCondition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::QueryValueForVariableRequest* req,
             ::sep::grpc::QueryValueForVariableReply* resp) {
               return service->queryTraceIO(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::QueryValueForVariableRequest, ::sep::grpc::QueryValueForVariableReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::QueryValueForVariableRequest* req,
             ::sep::grpc::QueryValueForVariableReply* resp) {
               return service->queryTraceExecutable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::ECQuery, ::sep::grpc::GRPCExecutionContext, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::ECQuery* req,
             ::sep::grpc::GRPCExecutionContext* resp) {
               return service->queryEC(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::ECQuery, ::sep::grpc::ECReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::ECQuery* req,
             ::sep::grpc::ECReply* resp) {
               return service->queryChildContext(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::ECQuery, ::sep::grpc::RuntimesStatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::ECQuery* req,
             ::sep::grpc::RuntimesStatusReply* resp) {
               return service->queryRuntimesStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Symbex_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Symbex::Service, ::sep::grpc::PostProcessingRequest, ::sep::grpc::PostProcessingReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Symbex::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sep::grpc::PostProcessingRequest* req,
             ::sep::grpc::PostProcessingReply* resp) {
               return service->runPostProcessor(ctx, req, resp);
             }, this)));
}

Symbex::Service::~Service() {
}

::grpc::Status Symbex::Service::initialization(::grpc::ServerContext* context, const ::sep::grpc::InitializationRequest* request, ::sep::grpc::InitializationReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::modelParse(::grpc::ServerContext* context, const ::sep::grpc::ModelDefinitionRequest* request, ::sep::grpc::ModelParseReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::modelParseFile(::grpc::ServerContext* context, const ::sep::grpc::ModelDefinitionRequest* request, ::sep::grpc::ModelParseReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::modelParseText(::grpc::ServerContext* context, const ::sep::grpc::ModelDefinitionRequest* request, ::sep::grpc::ModelParseReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::modelEval(::grpc::ServerContext* context, const ::sep::grpc::ModelDefinitionRequest* request, ::sep::grpc::ModelEvalReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::symbexEvalInit(::grpc::ServerContext* context, const ::sep::grpc::SymbexEvalInitRequest* request, ::sep::grpc::SymbexEvalInitReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::symbexEvalStep(::grpc::ServerContext* context, const ::sep::grpc::SymbexEvalStepRequest* request, ::sep::grpc::SymbexEvalStepReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::symbexEvalContext(::grpc::ServerContext* context, const ::sep::grpc::SymbexEvalContextRequest* request, ::sep::grpc::SymbexEvalContextReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::symbexEvalMachine(::grpc::ServerContext* context, const ::sep::grpc::SymbexEvalRunnableRequest* request, ::sep::grpc::SymbexEvalRunnableReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::symbexEvalBasicMachine(::grpc::ServerContext* context, const ::sep::grpc::SymbexEvalRunnableRequest* request, ::sep::grpc::SymbexEvalRunnableBasicReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::symbexEvalState(::grpc::ServerContext* context, const ::sep::grpc::SymbexEvalRunnableRequest* request, ::sep::grpc::SymbexEvalRunnableReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::symbexEvalTransition(::grpc::ServerContext* context, const ::sep::grpc::SymbexEvalRunnableRequest* request, ::sep::grpc::SymbexEvalRunnableReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::queryValueofVariable(::grpc::ServerContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::queryNodeCondition(::grpc::ServerContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::queryPathCondition(::grpc::ServerContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::queryTraceIO(::grpc::ServerContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::queryTraceExecutable(::grpc::ServerContext* context, const ::sep::grpc::QueryValueForVariableRequest* request, ::sep::grpc::QueryValueForVariableReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::queryEC(::grpc::ServerContext* context, const ::sep::grpc::ECQuery* request, ::sep::grpc::GRPCExecutionContext* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::queryChildContext(::grpc::ServerContext* context, const ::sep::grpc::ECQuery* request, ::sep::grpc::ECReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::queryRuntimesStatus(::grpc::ServerContext* context, const ::sep::grpc::ECQuery* request, ::sep::grpc::RuntimesStatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Symbex::Service::runPostProcessor(::grpc::ServerContext* context, const ::sep::grpc::PostProcessingRequest* request, ::sep::grpc::PostProcessingReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sep
}  // namespace grpc


#endif /* _EXPERIMENTAL_SERVER_GRPC_FEATURE_ */
