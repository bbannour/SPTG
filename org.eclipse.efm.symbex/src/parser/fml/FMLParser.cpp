
/*******************************************************************************
 * Copyright (c) 2021 CEA LIST.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *  Arnault Lapitre (CEA LIST) arnault.lapitre@cea.fr
 *   - Initial API and Implementation
 *******************************************************************************/
	
/* parser/listener/visitor header section */


// Generated from FML.g4 by ANTLR 4.13.1

/* parser precinclude section */
	
	#include <common/BF.h>
	
	#include <collection/BFContainer.h>
	
	#include <fml/common/BehavioralElement.h>
	#include <fml/common/ModifierElement.h>
	#include <fml/common/SpecifierElement.h>
	
	#include <fml/executable/ExecutableLib.h>
	
	#include <fml/expression/AvmCode.h>
	#include <fml/expression/BuiltinArray.h>
	#include <fml/expression/ExpressionConstant.h>
	#include <fml/expression/ExpressionConstructor.h>
	#include <fml/expression/StatementConstructor.h>
	
	#include <fml/lib/IComPoint.h>
	
	#include <fml/operator/Operator.h>
	#include <fml/operator/OperatorManager.h>
	
	#include <fml/template/TemplateFactory.h>
	
	#include <fml/type/TypeSpecifier.h>
	
	#include <fml/type/TypeManager.h>
	
	#include <fml/infrastructure/Buffer.h>
	#include <fml/infrastructure/Channel.h>
	#include <fml/infrastructure/ComPoint.h>
	#include <fml/infrastructure/ComProtocol.h>
	#include <fml/infrastructure/ComRoute.h>
	#include <fml/infrastructure/Connector.h>
	#include <fml/infrastructure/DataType.h>
	#include <fml/infrastructure/Machine.h>
	#include <fml/infrastructure/Package.h>
	#include <fml/infrastructure/Port.h>
	#include <fml/infrastructure/Routine.h>
	#include <fml/infrastructure/System.h>
	#include <fml/infrastructure/Transition.h>
	#include <fml/infrastructure/Variable.h>
	
	#include <fml/infrastructure/BehavioralPart.h>
	#include <fml/infrastructure/CompositePart.h>
	#include <fml/infrastructure/InstanceSpecifierPart.h>
	#include <fml/infrastructure/InteractionPart.h>
	#include <fml/infrastructure/ModelOfComputationPart.h>
	//#include <fml/infrastructure/PropertyPart.h>
	
	#include <fml/workflow/Query.h>
	#include <fml/workflow/UniFormIdentifier.h>
	#include <fml/workflow/WObject.h>

	#include <parser/ParserUtil.h>




#include "FMLParser.h"


/* parser postinclude section */
#ifndef _WIN32
#pragma GCC diagnostic ignored "-Wunused-parameter"
#endif


using namespace antlrcpp;
using namespace sep;

using namespace antlr4;

namespace {

struct FMLParserStaticData final {
  FMLParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  FMLParserStaticData(const FMLParserStaticData&) = delete;
  FMLParserStaticData(FMLParserStaticData&&) = delete;
  FMLParserStaticData& operator=(const FMLParserStaticData&) = delete;
  FMLParserStaticData& operator=(FMLParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag fmlParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
FMLParserStaticData *fmlParserStaticData = nullptr;

void fmlParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (fmlParserStaticData != nullptr) {
    return;
  }
#else
  assert(fmlParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<FMLParserStaticData>(
    std::vector<std::string>{
      "formalML", "prologue_fml", "prologue_attribute", "prologue_options", 
      "modifier_declaration", "modifier_direction", "modifier_direction_text", 
      "modifier_set_direction_strict_text", "modifier_direction_symbol", 
      "modifier_param", "procedure_modifier_specifier", "executable_modifier_specifier", 
      "instance_modifier_specifier", "modifier_transition", "def_package", 
      "def_system", "qualifiedNameID", "integer_constant", "float_constant", 
      "section_header", "section_import", "include_package", "section_procedure", 
      "def_procedure", "def_machine_parameters", "def_machine_variable_parameter_atom", 
      "def_machine_returns", "def_machine_variable_return_atom", "def_body_procedure", 
      "def_body_procedure_section", "def_body_procedure_simplif", "section_composite_structure", 
      "section_composite_generic", "section_machine_model", "section_machine_prototype", 
      "section_machine_instance", "executable_machine", "executable_model_definiton", 
      "executable_instance_definiton", "decl_instance", "def_instance_on_new_activity", 
      "def_instance_on_new_activity_parameter", "op_assign_param", "def_instance_activity", 
      "section_behavior", "def_instance_count", "def_instance_count_atom", 
      "def_machine", "def_body_machine", "def_body_machine_section", "def_body_machine_simplif", 
      "any_def_statemachine", "def_statemachine", "def_body_statemachine", 
      "section_state_region", "section_composite_region", "section_statemachine", 
      "def_state", "state_kw_id", "state_id", "def_state_singleton", "executable_specifier", 
      "executable_specifier_atom", "instance_machine_model", "def_body_state", 
      "def_body_state_section", "def_body_state_simplif", "section_transition", 
      "def_transition", "kind_transition", "moc_transition_attribute", "moc_transition", 
      "moc_transition_atom", "moe_transition", "transition_statement", "transition_trigger", 
      "transition_guard", "transition_timed_guard", "transition_effect", 
      "target_state_id", "target_state_kw_id", "def_state_activity", "section_header_import_parameter_property", 
      "section_parameter", "section_property", "section_property_free_declaration", 
      "property_declaration", "decl_property_element", "labelled_argument", 
      "decl_instance_machine_params", "decl_instance_machine_returns", "activity_machine_param_return", 
      "decl_port", "decl_port_impl", "decl_signal", "decl_signal_impl", 
      "typed_parameter_input", "typed_parameter_return", "typed_parameter_atom", 
      "decl_buffer", "decl_buffer_impl", "def_buffer", "policy_buffer", 
      "ref_buffer", "initial_buffer_contents", "decl_channel", "decl_channel_port", 
      "decl_channel_var", "decl_function", "decl_function_impl", "decl_variable", 
      "decl_variable_time_clock_impl", "decl_variable_impl", "decl_variable_atom_impl", 
      "decl_typed_variable_atom_impl", "initial_value", "type_var", "def_type_array", 
      "def_type_array_size", "def_type_container", "specifier_buffer", "def_type_interval", 
      "base_type_var", "primitive_type", "bit_field_size", "string_field_size", 
      "range_constant", "on_write_var_routine_def", "var_routine_def", "routine_single_param", 
      "def_enum", "def_enum_impl", "def_struct", "def_class_structure_impl", 
      "def_choice", "def_choice_impl", "def_union", "def_union_impl", "def_type", 
      "def_type_impl", "def_type_atom_impl", "def_typedef_constraint", "time_type", 
      "time_clock_type", "time_type_domain", "section_model_of_computation", 
      "section_routine", "def_routine_model", "def_routine_model_impl", 
      "def_routine_parameters", "def_routine_param_atom", "def_routine_returns", 
      "def_routine_returns_atom", "section_model_of_execution", "def_moe_primitive", 
      "def_routine_seq", "section_model_of_interaction", "com_protocol", 
      "com_cast", "buffer_com", "com_connector", "com_route", "com_route_points", 
      "com_port", "com_port_id", "statement", "block_statement", "op_block", 
      "op_sequence", "op_scheduling", "op_concurrency", "op_invokable", 
      "prefix_statement", "prefix_expression", "avm_operator", "statement_invoke_method", 
      "statement_invoke", "expression_invoke", "statement_activity_new", 
      "decl_instance_dynamic_impl", "expression_activity_new", "statement_prompt", 
      "statement_prompt_obs", "statement_prompt_obs_com", "meta_statement", 
      "statement_assign", "lvalue", "parameters", "statement_com", "statement_com_input", 
      "statement_com_output", "parameters_port", "expression_com", "statement_constraint", 
      "statement_guard", "statement_timed_guard", "statement_checksat", 
      "expression_checksat", "expression_quantifier", "statement_ite", "expression_ite", 
      "statement_iteration", "for_assign_header", "statement_jump", "expression_lambda", 
      "expression_status", "op_activity", "statement_activity", "statement_init_flow", 
      "statement_invoke_routine", "invoke_routine_params", "invoke_routine_returns", 
      "statement_moc", "expression", "conditionalExpression", "scheduleExpression", 
      "conditionalOrExpression", "conditionalImpliesExpression", "conditionalAndExpression", 
      "bitwiseOrExpression", "bitwiseXorExpression", "bitwiseAndExpression", 
      "equalityExpression", "equalOp", "relationalExpression", "relationalOp", 
      "shiftExpression", "shiftOp", "additiveExpression", "multiplicativeExpression", 
      "unaryExpression", "ctorExpression", "quote_expression", "meta_eval_expression", 
      "primary", "primary_ufid", "primary_ufi", "primary_invoke", "literal", 
      "collection_of_expression"
    },
    std::vector<std::string>{
      "", "'@FormalML'", "'@formalml'", "'@xfml'", "'@fml'", "'@diversity'", 
      "'@xlia'", "'@xfsp'", "'system'", "'package'", "'version:'", "'@package'", 
      "'@system'", "'@options'", "'final'", "'static'", "'volatile'", "'transient'", 
      "'unsafe'", "'optional'", "'ref'", "'bind'", "'public'", "'private'", 
      "'->'", "'in'", "'input'", "'out'", "'output'", "'<->'", "'inout'", 
      "'return'", "'const'", "'macro'", "'timed'", "'timed#dense'", "'timed#discrete'", 
      "'input_enabled'", "'model'", "'prototype'", "'dynamic'", "'lifeline'", 
      "'protected'", "'moc:'", "'@header:'", "'@import:'", "'@include'", 
      "'@procedure:'", "'procedure'", "'bind:'", "'-->'", "'returns:'", 
      "'@composite:'", "'@executable:'", "'@machine:'", "'@model:'", "'@prototype:'", 
      "'@instance:'", "'instance'", "'machine'", "'statemachine'", "'model:'", 
      "'@create'", "'@start'", "'@behavior:'", "'multiplicity:'", "'instance:'", 
      "'init:'", "'max:'", "'@state:'", "'@region:'", "'@region('", "'name:'", 
      "'):'", "'@statemachine:'", "'state'", "'#init'", "'#initial'", "'#start'", 
      "'#dhistory'", "'#shistory'", "'#final'", "'#terminal'", "'#return'", 
      "'start'", "'choice'", "'fork'", "'join'", "'and'", "'or'", "'#sts'", 
      "'#stf'", "'flow'", "'#alt'", "'#opt'", "'#loop'", "'#break'", "'#par'", 
      "'#strict'", "'#weak'", "'#seq'", "'#critical'", "'#ignore'", "'#consider'", 
      "'#assert'", "'#neg'", "'@transition:'", "'@'", "'transition'", "'abort'", 
      "'else'", "'prior:'", "'proba:'", "'@trigger:'", "'@guard:'", "'@tguard:'", 
      "'@effect:'", "'@init'", "'@ienable'", "'@enable'", "'@idisable'", 
      "'@disable'", "'@iabort'", "'@abort'", "'@irun'", "'@run'", "'@rtc'", 
      "'@final'", "'@parameter:'", "'@param:'", "'@input:'", "'@inout:'", 
      "'@output:'", "'@returns:'", "'@return:'", "'@property:'", "'@declaration:'", 
      "'@public:'", "'@protected:'", "'@private:'", "'@local:'", "'size:'", 
      "'port'", "'signal'", "'message'", "'buffer'", "'ram'", "'fifo'", 
      "'lifo'", "'multififo'", "'multilifo'", "'set'", "'bag'", "'multiset'", 
      "'vector'", "'rvector'", "'channel'", "'fun'", "'var'", "'val'", "'array'", 
      "'list'", "'interval'", "'boolean'", "'bool'", "'integer'", "'int'", 
      "'uinteger'", "'uint'", "'pos_integer'", "'pos_int'", "'rational'", 
      "'rat'", "'urational'", "'urat'", "'pos_rational'", "'pos_rat'", "'float'", 
      "'ufloat'", "'double'", "'udouble'", "'real'", "'ureal'", "'char'", 
      "'character'", "'string'", "'operator'", "'avmcode'", "'connector'", 
      "'universal'", "'@write'", "'@on_write'", "'|=>'", "'enum'", "'super:'", 
      "'struct'", "'class'", "'union'", "'type'", "'@constraint'", "'time'", 
      "'ctime'", "'time#continous'", "'time#dense'", "'dtime'", "'time#discrete'", 
      "'clock'", "'@moc:'", "'@routine:'", "'@macro:'", "'routine'", "'@moe:'", 
      "'@stop'", "'@return'", "'@concurrency'", "'@schedule'", "'@xschedule'", 
      "'@interaction:'", "'@com:'", "'env'", "'rdv'", "'multirdv'", "'anycast'", 
      "'unicast'", "'multicast'", "'broadcast'", "'connect'", "'route'", 
      "'call'", "'provided:'", "'from:'", "'to:'", "'activity:'", "'new'", 
      "'@observe'", "'@obs'", "'ctx:'", "'@informal'", "'@trace'", "'@debug'", 
      "'@comment'", "'input#save'", "'input#var'", "'input#flow'", "'input#env'", 
      "'input#buffer'", "'input#rdv'", "'<--'", "'<=='", "'via'", "'output#var'", 
      "'output#flow'", "'output#env'", "'output#buffer'", "'output#rdv'", 
      "'==>'", "'present'", "'absent'", "'guard'", "'event'", "'tguard'", 
      "'checksat'", "'solver:'", "'forall'", "'exists'", "'if'", "'elseif'", 
      "'for'", "'while'", "'do'", "'break'", "'continue'", "'exit'", "'lambda'", 
      "'status#was'", "'status#is'", "'status#being'", "'status#will'", 
      "'changed'", "'changed#to'", "'init'", "'destroy'", "'restart'", "'stop'", 
      "'ienable'", "'enable'", "'idisable'", "'disable'", "'iabort'", "'run'", 
      "'rtc'", "'schedule'", "'suspend'", "'resume'", "'wait'", "'$self'", 
      "'self'", "'$this'", "'this'", "'$parent'", "'$super'", "'$system'", 
      "'goto'", "'step_mark'", "'ctor'", "'true'", "'false'", "'$time'", 
      "'$delay'", "'$delta'", "'$env'", "'$null'", "'$any'", "'$default'", 
      "'$optional'", "'$omit'", "'$none'", "'$any$none'", "'|\\u00A7|'", 
      "'|;|'", "", "'|;;|'", "'|>|'", "'|<|'", "'|xor|'", "'|and#then|'", 
      "'|or#else|'", "", "", "", "", "", "", "", "'|fork|'", "'|join|'", 
      "'||a||'", "'||and||'", "'||or||'", "'||i||'", "'||~||'", "'||,||'", 
      "", "'=:'", "'<-'", "'::='", "'<=<'", "'^=<'", "'^=>'", "'>=>'", "'('", 
      "')'", "'{'", "'}'", "'['", "']'", "'[^'", "'(:'", "'{:'", "'%(:'", 
      "'%('", "')%'", "':>'", "'${'", "'}$'", "'%{'", "'}%'", "'[|'", "'|]'", 
      "'[{'", "'}]'", "':'", "','", "'\\u003F'", "';'", "'#'", "'$'", "'.'", 
      "'..'", "'::'", "", "'and#then'", "", "'&&=:'", "", "", "'or#else'", 
      "", "'||=:'", "'xor'", "'=>'", "'=='", "'!='", "'==='", "", "'<='", 
      "'<'", "'>='", "'>'", "'+'", "", "'+=:'", "'++'", "'-'", "", "'-=:'", 
      "'--'", "'*'", "", "'*=:'", "'/'", "", "'/=:'", "'%'", "", "'%=:'", 
      "'>>'", "", "'>>=:'", "'<<'", "", "'<<=:'", "'&'", "", "'&=:'", "'~'", 
      "'|'", "", "'|=:'", "'^'", "", "'^=:'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "OP_ATOMIC_SEQUENCE", 
      "OP_SEQUENCE", "OP_SEQUENCE_SIDE", "OP_SEQUENCE_WEAK", "OP_SCHEDULE_GT", 
      "OP_SCHEDULE_LT", "OP_SCHEDULE_XOR", "OP_SCHEDULE_AND_THEN", "OP_SCHEDULE_OR_ELSE", 
      "OP_NON_DETERMINISM", "OP_CONCURRENCY_ASYNC", "OP_CONCURRENCY_AND", 
      "OP_CONCURRENCY_OR", "OP_CONCURRENCY_INTERLEAVING", "OP_CONCURRENCY_PARTIAL_ORDER", 
      "OP_CONCURRENCY_PARALLEL", "OP_FORK", "OP_JOIN", "OP_CONCURRENCY_RDV_ASYNC", 
      "OP_CONCURRENCY_RDV_AND", "OP_CONCURRENCY_RDV_OR", "OP_CONCURRENCY_RDV_INTERLEAVING", 
      "OP_CONCURRENCY_RDV_PARTIAL_ORDER", "OP_CONCURRENCY_RDV_PARALLEL", 
      "ASSIGN", "ASSIGN_AFTER", "ASSIGN_REF", "ASSIGN_MACRO", "OP_PUSH", 
      "OP_ASSIGN_TOP", "OP_TOP", "OP_POP", "LPAREN", "RPAREN", "LCURLY", 
      "RCURLY", "LBRACKET", "RBRACKET", "LBRACKET_EXCEPT", "LPAREN_INVOKE", 
      "LCURLY_INVOKE", "PERCENT_LPAREN_INVOKE", "PERCENT_LPAREN", "RPAREN_PERCENT", 
      "STATEMENT_PROMPT", "DOLLAR_LCURLY", "RCURLY_DOLLAR", "PERCENT_LCURLY", 
      "RCURLY_PERCENT", "LBRACKET_BAR", "BAR_RBRACKET", "LBRACKET_LCURLY", 
      "RCURLY_RBRACKET", "COLON", "COMMA", "QUESTION", "SEMI", "DIESE", 
      "DOLLAR", "DOT", "DOTDOT", "COLONx2", "LAND", "LAND_THEN", "LAND_ASSIGN", 
      "LAND_ASSIGN_AFTER", "LNOT", "LOR", "LOR_ELSE", "LOR_ASSIGN", "LOR_ASSIGN_AFTER", 
      "LXOR", "LIMPLIES", "EQUAL", "NEQUAL", "SEQUAL", "NSEQUAL", "LTE", 
      "LT_", "GTE", "GT", "PLUS", "PLUS_ASSIGN", "PLUS_ASSIGN_AFTER", "INCR", 
      "MINUS", "MINUS_ASSIGN", "MINUS_ASSIGN_AFTER", "DECR", "STAR", "STAR_ASSIGN", 
      "STAR_ASSIGN_AFTER", "DIV", "DIV_ASSIGN", "DIV_ASSIGN_AFTER", "MOD", 
      "MOD_ASSIGN", "MOD_ASSIGN_AFTER", "RSHIFT", "RSHIFT_ASSIGN", "RSHIFT_ASSIGN_AFTER", 
      "LSHIFT", "LSHIFT_ASSIGN", "LSHIFT_ASSIGN_AFTER", "BAND", "BAND_ASSIGN", 
      "BAND_ASSIGN_AFTER", "BNOT", "BOR", "BOR_ASSIGN", "BOR_ASSIGN_AFTER", 
      "BXOR", "BXOR_ASSIGN", "BXOR_ASSIGN_AFTER", "ID", "AT_ID", "StringLiteral", 
      "CharLiteral", "FloatLiteral", "RationalLiteral", "IntegerLiteral", 
      "WHITESPACE", "NEWLINE", "BLOCKCOMMENT", "LINECOMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,442,5414,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
  	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,499,8,1,1,1,1,1,1,1,1,
  	1,1,1,1,1,1,1,1,1,3,1,509,8,1,1,1,1,1,1,1,3,1,514,8,1,1,1,1,1,3,1,518,
  	8,1,1,1,5,1,521,8,1,10,1,12,1,524,9,1,1,1,1,1,1,1,3,1,529,8,1,1,1,3,1,
  	532,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,544,8,2,1,3,1,3,1,
  	3,1,3,1,3,1,3,1,3,1,3,5,3,554,8,3,10,3,12,3,557,9,3,1,3,1,3,1,4,1,4,1,
  	4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
  	1,4,4,4,582,8,4,11,4,12,4,583,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,594,
  	8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,604,8,6,1,7,1,7,1,7,1,7,1,7,1,
  	7,1,7,1,7,3,7,614,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,624,8,8,1,9,
  	1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,639,8,9,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,651,8,10,11,10,12,10,652,
  	1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
  	1,11,1,11,1,11,1,11,4,11,673,8,11,11,11,12,11,674,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
  	1,12,1,12,1,12,1,12,4,12,699,8,12,11,12,12,12,700,1,13,1,13,1,13,1,13,
  	1,13,1,13,1,13,1,13,1,13,1,13,4,13,713,8,13,11,13,12,13,714,1,14,1,14,
  	1,14,1,14,1,14,3,14,722,8,14,1,14,1,14,3,14,726,8,14,1,14,3,14,729,8,
  	14,1,14,5,14,732,8,14,10,14,12,14,735,9,14,1,14,5,14,738,8,14,10,14,12,
  	14,741,9,14,1,14,1,14,1,15,1,15,1,15,3,15,748,8,15,1,15,1,15,1,15,3,15,
  	753,8,15,1,15,1,15,1,15,3,15,758,8,15,1,15,1,15,1,15,1,15,3,15,764,8,
  	15,1,15,1,15,3,15,768,8,15,1,15,3,15,771,8,15,1,15,5,15,774,8,15,10,15,
  	12,15,777,9,15,1,15,1,15,5,15,781,8,15,10,15,12,15,784,9,15,1,15,5,15,
  	787,8,15,10,15,12,15,790,9,15,1,15,1,15,3,15,794,8,15,1,15,1,15,1,15,
  	1,15,5,15,800,8,15,10,15,12,15,803,9,15,1,15,1,15,1,16,1,16,1,16,1,16,
  	1,16,1,16,3,16,813,8,16,1,16,1,16,5,16,817,8,16,10,16,12,16,820,9,16,
  	1,17,1,17,1,17,1,17,1,17,3,17,827,8,17,1,18,1,18,1,18,1,18,1,18,3,18,
  	834,8,18,1,19,1,19,1,20,1,20,4,20,840,8,20,11,20,12,20,841,1,21,1,21,
  	1,21,1,21,1,21,4,21,849,8,21,11,21,12,21,850,1,21,3,21,854,8,21,1,22,
  	1,22,5,22,858,8,22,10,22,12,22,861,9,22,1,23,1,23,1,23,3,23,866,8,23,
  	1,23,1,23,1,23,3,23,871,8,23,1,23,1,23,1,23,3,23,876,8,23,1,23,1,23,1,
  	23,1,23,3,23,882,8,23,1,23,3,23,885,8,23,1,23,3,23,888,8,23,1,23,1,23,
  	1,24,1,24,1,24,1,24,5,24,896,8,24,10,24,12,24,899,9,24,1,24,1,24,1,24,
  	1,24,1,24,1,24,5,24,907,8,24,10,24,12,24,910,9,24,1,24,1,24,3,24,914,
  	8,24,1,25,1,25,1,25,3,25,919,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
  	3,25,928,8,25,3,25,930,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
  	25,1,25,1,25,1,25,3,25,944,8,25,1,25,1,25,3,25,948,8,25,1,26,1,26,1,26,
  	1,26,1,26,5,26,955,8,26,10,26,12,26,958,9,26,1,26,1,26,1,26,1,26,1,26,
  	1,26,5,26,966,8,26,10,26,12,26,969,9,26,1,26,1,26,1,26,1,26,1,26,1,26,
  	3,26,977,8,26,1,26,1,26,3,26,981,8,26,1,27,1,27,1,27,3,27,986,8,27,1,
  	27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,995,8,27,3,27,997,8,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,1011,8,27,1,27,
  	1,27,3,27,1015,8,27,1,28,1,28,1,28,3,28,1020,8,28,1,28,1,28,1,29,3,29,
  	1025,8,29,1,29,3,29,1028,8,29,1,29,5,29,1031,8,29,10,29,12,29,1034,9,
  	29,1,29,5,29,1037,8,29,10,29,12,29,1040,9,29,1,29,5,29,1043,8,29,10,29,
  	12,29,1046,9,29,1,29,1,29,3,29,1050,8,29,1,29,1,29,1,29,5,29,1055,8,29,
  	10,29,12,29,1058,9,29,1,30,1,30,1,30,1,30,3,30,1064,8,30,1,30,1,30,1,
  	30,3,30,1069,8,30,4,30,1071,8,30,11,30,12,30,1072,1,31,1,31,1,31,1,31,
  	1,31,1,31,3,31,1081,8,31,1,32,1,32,5,32,1085,8,32,10,32,12,32,1088,9,
  	32,1,33,1,33,5,33,1092,8,33,10,33,12,33,1095,9,33,1,34,1,34,5,34,1099,
  	8,34,10,34,12,34,1102,9,34,1,35,1,35,5,35,1106,8,35,10,35,12,35,1109,
  	9,35,1,36,1,36,1,36,3,36,1114,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
  	1,36,1,36,3,36,1125,8,36,1,37,1,37,1,37,3,37,1130,8,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,3,37,1138,8,37,1,38,1,38,1,38,3,38,1143,8,38,1,38,1,38,
  	1,38,1,39,1,39,3,39,1150,8,39,1,39,1,39,3,39,1154,8,39,1,39,1,39,1,39,
  	1,39,3,39,1160,8,39,1,39,1,39,1,39,1,39,1,39,3,39,1167,8,39,1,39,1,39,
  	3,39,1171,8,39,1,39,3,39,1174,8,39,1,39,1,39,1,39,1,39,1,39,5,39,1181,
  	8,39,10,39,12,39,1184,9,39,1,39,5,39,1187,8,39,10,39,12,39,1190,9,39,
  	1,39,3,39,1193,8,39,1,40,1,40,1,40,5,40,1198,8,40,10,40,12,40,1201,9,
  	40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1211,8,41,1,42,1,42,1,
  	42,1,42,1,42,1,42,3,42,1219,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
  	43,3,43,1229,8,43,1,44,1,44,1,44,1,44,1,44,4,44,1236,8,44,11,44,12,44,
  	1237,1,45,3,45,1241,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
  	3,45,1252,8,45,1,45,1,45,1,45,1,45,3,45,1258,8,45,1,45,1,45,1,45,1,45,
  	3,45,1264,8,45,1,45,5,45,1267,8,45,10,45,12,45,1270,9,45,1,45,1,45,3,
  	45,1274,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1284,8,46,1,
  	47,1,47,1,47,3,47,1289,8,47,1,47,1,47,1,47,3,47,1294,8,47,1,47,3,47,1297,
  	8,47,1,47,3,47,1300,8,47,1,47,1,47,1,47,1,47,3,47,1306,8,47,1,47,3,47,
  	1309,8,47,1,47,3,47,1312,8,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,3,49,
  	1321,8,49,1,49,3,49,1324,8,49,1,49,5,49,1327,8,49,10,49,12,49,1330,9,
  	49,1,49,1,49,5,49,1334,8,49,10,49,12,49,1337,9,49,1,49,5,49,1340,8,49,
  	10,49,12,49,1343,9,49,1,49,1,49,3,49,1347,8,49,1,49,1,49,1,49,1,49,5,
  	49,1353,8,49,10,49,12,49,1356,9,49,1,50,5,50,1359,8,50,10,50,12,50,1362,
  	9,50,1,50,4,50,1365,8,50,11,50,12,50,1366,3,50,1369,8,50,1,51,1,51,1,
  	51,3,51,1374,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1385,
  	8,51,1,52,1,52,1,52,3,52,1390,8,52,1,52,1,52,1,52,3,52,1395,8,52,1,52,
  	3,52,1398,8,52,1,52,3,52,1401,8,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,
  	1409,8,52,1,52,1,52,1,52,1,52,1,52,1,52,5,52,1417,8,52,10,52,12,52,1420,
  	9,52,1,52,1,52,3,52,1424,8,52,1,52,1,52,3,52,1428,8,52,1,52,1,52,3,52,
  	1432,8,52,1,52,3,52,1435,8,52,1,52,3,52,1438,8,52,1,52,1,52,1,53,1,53,
  	3,53,1444,8,53,1,53,3,53,1447,8,53,1,53,5,53,1450,8,53,10,53,12,53,1453,
  	9,53,1,53,1,53,5,53,1457,8,53,10,53,12,53,1460,9,53,1,53,5,53,1463,8,
  	53,10,53,12,53,1466,9,53,1,53,1,53,4,53,1470,8,53,11,53,12,53,1471,3,
  	53,1474,8,53,1,53,3,53,1477,8,53,1,53,1,53,1,53,1,53,5,53,1483,8,53,10,
  	53,12,53,1486,9,53,1,53,1,53,1,54,1,54,1,54,4,54,1493,8,54,11,54,12,54,
  	1494,1,55,1,55,3,55,1499,8,55,1,55,1,55,1,55,3,55,1504,8,55,1,55,1,55,
  	1,55,4,55,1509,8,55,11,55,12,55,1510,1,56,1,56,1,56,4,56,1516,8,56,11,
  	56,12,56,1517,1,57,1,57,1,57,3,57,1523,8,57,1,57,1,57,1,57,1,57,3,57,
  	1529,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,1538,8,57,1,57,1,57,
  	1,57,1,57,1,57,1,57,1,57,5,57,1547,8,57,10,57,12,57,1550,9,57,1,57,1,
  	57,3,57,1554,8,57,1,57,1,57,3,57,1558,8,57,1,57,1,57,1,57,3,57,1563,8,
  	57,1,57,1,57,3,57,1567,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
  	58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1585,8,58,1,59,1,59,1,59,1,
  	59,1,59,1,59,1,59,1,59,3,59,1595,8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,
  	60,1,60,3,60,1605,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
  	60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,1623,8,60,1,61,1,61,1,61,5,61,1628,
  	8,61,10,61,12,61,1631,9,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
  	62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
  	62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
  	62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,
  	62,1683,8,62,1,63,1,63,1,63,1,64,1,64,1,64,3,64,1691,8,64,1,64,1,64,1,
  	65,5,65,1696,8,65,10,65,12,65,1699,9,65,1,65,5,65,1702,8,65,10,65,12,
  	65,1705,9,65,1,65,1,65,4,65,1709,8,65,11,65,12,65,1710,3,65,1713,8,65,
  	1,65,3,65,1716,8,65,1,65,1,65,1,65,5,65,1721,8,65,10,65,12,65,1724,9,
  	65,1,66,1,66,1,66,1,66,3,66,1730,8,66,1,66,1,66,1,66,1,66,3,66,1736,8,
  	66,5,66,1738,8,66,10,66,12,66,1741,9,66,1,67,1,67,1,67,1,67,3,67,1747,
  	8,67,1,67,5,67,1750,8,67,10,67,12,67,1753,9,67,1,68,1,68,1,68,3,68,1758,
  	8,68,1,68,1,68,1,68,1,68,1,68,3,68,1765,8,68,1,68,1,68,1,68,1,68,1,68,
  	1,68,1,68,3,68,1774,8,68,1,68,1,68,3,68,1778,8,68,1,68,1,68,1,68,3,68,
  	1783,8,68,1,68,3,68,1786,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
  	1,69,1,69,3,69,1798,8,69,1,70,1,70,1,70,1,70,1,70,3,70,1805,8,70,1,71,
  	1,71,1,71,5,71,1810,8,71,10,71,12,71,1813,9,71,1,72,3,72,1816,8,72,1,
  	72,1,72,1,72,1,72,3,72,1822,8,72,1,72,1,72,1,72,1,72,3,72,1828,8,72,1,
  	72,1,72,1,72,3,72,1833,8,72,1,73,1,73,1,73,3,73,1838,8,73,1,73,1,73,1,
  	73,1,73,3,73,1844,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1853,8,
  	73,3,73,1855,8,73,1,74,1,74,1,74,1,74,3,74,1861,8,74,1,74,1,74,1,74,1,
  	74,5,74,1867,8,74,10,74,12,74,1870,9,74,1,74,3,74,1873,8,74,1,74,3,74,
  	1876,8,74,1,74,3,74,1879,8,74,1,74,3,74,1882,8,74,1,74,1,74,1,75,1,75,
  	1,75,1,75,5,75,1890,8,75,10,75,12,75,1893,9,75,1,76,1,76,1,76,1,76,1,
  	76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,5,76,1907,8,76,10,76,12,76,1910,
  	9,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,5,77,
  	1924,8,77,10,77,12,77,1927,9,77,1,78,1,78,1,78,1,78,5,78,1933,8,78,10,
  	78,12,78,1936,9,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,
  	1947,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
  	1,80,1,80,1,80,1,80,3,80,1965,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
  	1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
  	1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
  	1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,
  	2015,8,81,1,82,1,82,3,82,2019,8,82,1,82,3,82,2022,8,82,1,82,1,82,5,82,
  	2026,8,82,10,82,12,82,2029,9,82,1,82,1,82,3,82,2033,8,82,1,82,1,82,5,
  	82,2037,8,82,10,82,12,82,2040,9,82,1,82,1,82,1,82,5,82,2045,8,82,10,82,
  	12,82,2048,9,82,1,82,1,82,4,82,2052,8,82,11,82,12,82,2053,1,82,1,82,3,
  	82,2058,8,82,1,83,1,83,5,83,2062,8,83,10,83,12,83,2065,9,83,1,83,1,83,
  	5,83,2069,8,83,10,83,12,83,2072,9,83,1,83,1,83,5,83,2076,8,83,10,83,12,
  	83,2079,9,83,1,83,1,83,5,83,2083,8,83,10,83,12,83,2086,9,83,1,83,1,83,
  	5,83,2090,8,83,10,83,12,83,2093,9,83,3,83,2095,8,83,1,84,1,84,5,84,2099,
  	8,84,10,84,12,84,2102,9,84,1,84,1,84,5,84,2106,8,84,10,84,12,84,2109,
  	9,84,1,84,1,84,5,84,2113,8,84,10,84,12,84,2116,9,84,1,84,1,84,5,84,2120,
  	8,84,10,84,12,84,2123,9,84,3,84,2125,8,84,1,85,5,85,2128,8,85,10,85,12,
  	85,2131,9,85,1,86,1,86,1,86,3,86,2136,8,86,1,86,1,86,1,87,1,87,1,87,1,
  	87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,2151,8,87,1,88,1,88,1,88,1,
  	88,1,88,1,88,1,88,3,88,2160,8,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,2168,
  	8,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,5,89,2177,8,89,10,89,12,89,2180,
  	9,89,3,89,2182,8,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
  	5,90,2194,8,90,10,90,12,90,2197,9,90,1,90,1,90,1,90,1,90,1,90,3,90,2204,
  	8,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,5,91,2213,8,91,10,91,12,91,2216,
  	9,91,3,91,2218,8,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,5,91,
  	2229,8,91,10,91,12,91,2232,9,91,1,91,1,91,1,91,1,91,1,91,3,91,2239,8,
  	91,3,91,2241,8,91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,3,93,2251,8,
  	93,1,93,3,93,2254,8,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,2262,8,93,1,
  	93,3,93,2265,8,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,2273,8,93,1,93,3,
  	93,2276,8,93,1,93,4,93,2279,8,93,11,93,12,93,2280,1,93,3,93,2284,8,93,
  	1,93,1,93,1,93,1,93,1,93,3,93,2291,8,93,1,93,3,93,2294,8,93,1,93,1,93,
  	1,93,1,93,1,93,1,93,3,93,2302,8,93,1,93,3,93,2305,8,93,1,93,1,93,4,93,
  	2309,8,93,11,93,12,93,2310,1,93,3,93,2314,8,93,1,94,1,94,1,94,1,94,3,
  	94,2320,8,94,1,94,1,94,1,95,1,95,1,95,1,95,3,95,2328,8,95,1,95,3,95,2331,
  	8,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2339,8,95,1,95,3,95,2342,8,95,
  	1,95,1,95,1,95,1,95,1,95,1,95,3,95,2350,8,95,1,95,3,95,2353,8,95,1,95,
  	4,95,2356,8,95,11,95,12,95,2357,1,95,3,95,2361,8,95,1,95,1,95,1,95,1,
  	95,1,95,3,95,2368,8,95,1,95,3,95,2371,8,95,1,95,1,95,1,95,1,95,1,95,1,
  	95,3,95,2379,8,95,1,95,3,95,2382,8,95,1,95,1,95,4,95,2386,8,95,11,95,
  	12,95,2387,1,95,3,95,2391,8,95,1,96,1,96,1,96,1,96,5,96,2397,8,96,10,
  	96,12,96,2400,9,96,1,96,1,96,1,97,1,97,1,97,1,97,5,97,2408,8,97,10,97,
  	12,97,2411,9,97,1,97,1,97,1,97,3,97,2416,8,97,1,98,1,98,1,98,1,98,1,98,
  	1,98,1,98,3,98,2425,8,98,3,98,2427,8,98,1,98,1,98,1,98,1,98,1,98,1,98,
  	1,98,1,98,1,98,1,98,1,98,1,98,3,98,2441,8,98,1,98,1,98,3,98,2445,8,98,
  	1,99,1,99,1,99,1,100,1,100,1,100,1,100,3,100,2454,8,100,1,100,1,100,1,
  	100,1,100,1,100,1,100,1,100,4,100,2463,8,100,11,100,12,100,2464,1,100,
  	1,100,3,100,2469,8,100,1,101,1,101,1,101,1,101,3,101,2475,8,101,1,101,
  	1,101,1,101,1,101,1,101,3,101,2482,8,101,1,101,1,101,1,101,3,101,2487,
  	8,101,1,101,1,101,1,101,1,101,1,101,3,101,2494,8,101,1,101,3,101,2497,
  	8,101,1,101,1,101,3,101,2501,8,101,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	3,102,2521,8,102,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,1,104,
  	5,104,2532,8,104,10,104,12,104,2535,9,104,1,104,1,104,1,105,1,105,1,105,
  	1,106,1,106,1,106,1,106,3,106,2546,8,106,1,106,1,106,3,106,2550,8,106,
  	1,106,3,106,2553,8,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,
  	1,106,1,106,4,106,2565,8,106,11,106,12,106,2566,1,106,1,106,1,107,1,107,
  	1,107,1,107,1,107,1,107,3,107,2577,8,107,1,107,1,107,3,107,2581,8,107,
  	1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,2590,8,107,1,107,1,107,
  	3,107,2594,8,107,4,107,2596,8,107,11,107,12,107,2597,1,107,1,107,3,107,
  	2602,8,107,1,108,1,108,1,108,1,109,1,109,1,109,3,109,2610,8,109,1,109,
  	1,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,4,110,
  	2624,8,110,11,110,12,110,2625,1,110,3,110,2629,8,110,3,110,2631,8,110,
  	1,110,1,110,3,110,2635,8,110,1,111,1,111,1,111,1,112,1,112,1,112,4,112,
  	2643,8,112,11,112,12,112,2644,1,112,1,112,3,112,2649,8,112,1,113,1,113,
  	1,113,3,113,2654,8,113,1,113,1,113,1,114,1,114,1,114,1,114,3,114,2662,
  	8,114,1,114,1,114,1,114,3,114,2667,8,114,1,114,1,114,3,114,2671,8,114,
  	1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,2682,8,115,
  	1,116,1,116,1,116,1,116,1,116,3,116,2689,8,116,1,116,1,116,1,116,1,116,
  	1,116,1,116,3,116,2697,8,116,1,117,1,117,1,117,4,117,2702,8,117,11,117,
  	12,117,2703,1,117,1,117,1,118,1,118,1,118,1,118,1,118,1,118,3,118,2714,
  	8,118,1,118,1,118,1,119,1,119,1,119,1,119,1,119,1,119,3,119,2724,8,119,
  	1,119,1,119,1,119,1,119,1,119,3,119,2731,8,119,3,119,2733,8,119,1,119,
  	3,119,2736,8,119,1,119,1,119,1,119,3,119,2741,8,119,1,119,1,119,3,119,
  	2745,8,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
  	1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,1,120,
  	1,120,1,120,3,120,2771,8,120,1,121,1,121,1,121,1,121,1,121,1,121,3,121,
  	2779,8,121,1,121,1,121,1,121,3,121,2784,8,121,1,121,1,121,1,121,1,121,
  	1,121,1,121,3,121,2792,8,121,1,121,1,121,1,121,1,122,1,122,1,122,1,122,
  	1,122,1,122,3,122,2803,8,122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
  	3,123,2812,8,123,1,123,1,123,1,123,1,123,1,123,3,123,2819,8,123,1,123,
  	1,123,1,123,1,123,1,123,3,123,2826,8,123,1,123,1,123,1,123,1,123,1,123,
  	1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
  	1,123,3,123,2846,8,123,1,123,1,123,1,123,3,123,2851,8,123,1,123,1,123,
  	1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,3,123,2864,8,123,
  	1,123,1,123,1,123,1,123,1,123,3,123,2871,8,123,1,123,1,123,1,123,1,123,
  	1,123,3,123,2878,8,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
  	1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
  	1,123,3,123,2901,8,123,1,123,1,123,3,123,2905,8,123,1,124,1,124,1,124,
  	1,124,1,124,1,124,3,124,2913,8,124,1,124,1,124,1,124,1,124,3,124,2919,
  	8,124,1,125,1,125,1,125,1,125,1,125,1,125,3,125,2927,8,125,1,125,1,125,
  	1,125,1,125,3,125,2933,8,125,1,126,1,126,1,126,1,126,1,126,1,126,3,126,
  	2941,8,126,1,127,1,127,4,127,2945,8,127,11,127,12,127,2946,1,127,1,127,
  	1,128,1,128,1,128,3,128,2954,8,128,1,128,1,128,1,128,1,128,1,128,1,128,
  	1,128,1,128,3,128,2964,8,128,1,129,1,129,1,129,1,129,1,129,1,129,3,129,
  	2972,8,129,1,129,1,129,1,129,3,129,2977,8,129,1,129,1,129,1,129,1,130,
  	1,130,1,130,1,130,1,131,1,131,1,131,1,131,1,131,3,131,2991,8,131,1,131,
  	1,131,1,131,1,131,3,131,2997,8,131,1,131,1,131,1,131,1,131,1,131,3,131,
  	3004,8,131,1,131,1,131,1,131,1,131,3,131,3010,8,131,5,131,3012,8,131,
  	10,131,12,131,3015,9,131,1,131,1,131,1,131,3,131,3020,8,131,1,131,1,131,
  	1,131,1,131,1,131,1,131,1,131,1,131,1,131,5,131,3031,8,131,10,131,12,
  	131,3034,9,131,1,131,3,131,3037,8,131,1,132,1,132,1,132,1,132,1,133,1,
  	133,1,133,1,133,1,133,3,133,3048,8,133,1,133,4,133,3051,8,133,11,133,
  	12,133,3052,1,133,1,133,1,134,1,134,1,134,1,134,1,135,1,135,1,135,1,135,
  	1,135,3,135,3066,8,135,1,135,4,135,3069,8,135,11,135,12,135,3070,1,135,
  	1,135,1,136,1,136,1,136,1,136,1,137,1,137,1,137,1,137,1,137,3,137,3084,
  	8,137,1,137,4,137,3087,8,137,11,137,12,137,3088,1,137,1,137,1,138,1,138,
  	1,138,1,139,1,139,1,139,4,139,3099,8,139,11,139,12,139,3100,1,139,1,139,
  	3,139,3105,8,139,1,140,1,140,1,140,1,140,1,140,1,140,3,140,3113,8,140,
  	1,140,1,140,1,140,3,140,3118,8,140,1,140,1,140,1,140,1,140,3,140,3124,
  	8,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
  	1,140,3,140,3138,8,140,1,140,1,140,1,140,1,140,3,140,3144,8,140,1,141,
  	1,141,1,141,1,141,3,141,3150,8,141,1,141,1,141,1,141,1,141,1,141,1,141,
  	1,141,1,141,3,141,3160,8,141,1,141,1,141,1,142,1,142,1,142,1,142,1,142,
  	1,142,1,142,1,142,1,142,1,142,1,142,1,142,3,142,3176,8,142,1,142,1,142,
  	1,142,1,142,1,142,1,142,1,142,1,142,3,142,3186,8,142,1,142,1,142,1,142,
  	1,142,1,142,1,142,3,142,3194,8,142,1,143,1,143,1,143,1,143,1,143,1,143,
  	1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
  	3,143,3214,8,143,1,143,1,143,1,143,1,143,3,143,3220,8,143,1,143,1,143,
  	1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,1,143,
  	1,143,1,143,1,143,3,143,3239,8,143,1,143,1,143,1,143,1,143,3,143,3245,
  	8,143,1,143,3,143,3248,8,143,1,144,1,144,1,144,1,144,1,144,1,144,1,144,
  	3,144,3257,8,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,3266,
  	8,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,
  	1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,144,3286,8,144,1,145,1,145,
  	1,146,1,146,1,146,3,146,3293,8,146,1,146,5,146,3296,8,146,10,146,12,146,
  	3299,9,146,1,147,1,147,1,147,1,147,3,147,3305,8,147,3,147,3307,8,147,
  	1,147,1,147,1,148,1,148,1,148,3,148,3314,8,148,1,148,1,148,3,148,3318,
  	8,148,1,148,1,148,1,148,1,149,1,149,1,149,1,149,5,149,3327,8,149,10,149,
  	12,149,3330,9,149,3,149,3332,8,149,1,149,1,149,1,150,1,150,1,150,3,150,
  	3339,8,150,1,150,1,150,1,150,1,150,1,150,1,150,3,150,3347,8,150,1,150,
  	1,150,1,150,1,150,3,150,3353,8,150,1,151,1,151,1,151,1,151,5,151,3359,
  	8,151,10,151,12,151,3362,9,151,1,151,1,151,1,151,1,151,1,151,1,151,3,
  	151,3370,8,151,1,151,1,151,3,151,3374,8,151,1,152,1,152,1,152,3,152,3379,
  	8,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,3387,8,152,1,152,1,152,
  	1,152,1,152,3,152,3393,8,152,1,153,1,153,5,153,3397,8,153,10,153,12,153,
  	3400,9,153,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
  	1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
  	1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
  	1,154,1,154,1,154,1,154,1,154,3,154,3441,8,154,1,155,3,155,3444,8,155,
  	1,155,1,155,3,155,3448,8,155,1,155,1,155,1,155,1,156,1,156,5,156,3455,
  	8,156,10,156,12,156,3458,9,156,1,157,1,157,1,157,1,157,1,157,1,157,1,
  	157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,
  	1,157,3,157,3479,8,157,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
  	3,158,3489,8,158,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,
  	3499,8,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,3508,8,159,
  	1,159,1,159,3,159,3512,8,159,1,159,1,159,1,159,3,159,3517,8,159,1,160,
  	1,160,1,160,1,160,1,160,3,160,3524,8,160,1,160,1,160,3,160,3528,8,160,
  	1,160,1,160,3,160,3532,8,160,1,160,1,160,1,160,4,160,3537,8,160,11,160,
  	12,160,3538,1,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,3,160,3549,
  	8,160,1,160,1,160,3,160,3553,8,160,1,160,1,160,1,160,4,160,3558,8,160,
  	11,160,12,160,3559,1,160,1,160,1,160,1,160,1,160,1,160,1,160,3,160,3569,
  	8,160,3,160,3571,8,160,1,161,1,161,1,161,1,161,1,161,1,161,3,161,3579,
  	8,161,1,161,1,161,3,161,3583,8,161,1,161,1,161,1,161,1,161,1,161,1,161,
  	1,161,4,161,3592,8,161,11,161,12,161,3593,1,161,1,161,1,161,1,161,1,161,
  	1,161,5,161,3602,8,161,10,161,12,161,3605,9,161,1,161,1,161,3,161,3609,
  	8,161,1,161,1,161,3,161,3613,8,161,1,161,1,161,1,161,3,161,3618,8,161,
  	1,162,1,162,1,162,5,162,3623,8,162,10,162,12,162,3626,9,162,1,162,1,162,
  	3,162,3630,8,162,1,163,1,163,1,163,1,163,1,163,1,163,1,163,1,163,5,163,
  	3640,8,163,10,163,12,163,3643,9,163,1,163,1,163,3,163,3647,8,163,1,163,
  	3,163,3650,8,163,1,163,1,163,1,163,3,163,3655,8,163,1,164,1,164,1,164,
  	1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,
  	1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,
  	1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,
  	1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,1,165,
  	3,165,3708,8,165,1,166,1,166,1,166,1,166,3,166,3714,8,166,1,166,1,166,
  	1,166,1,166,5,166,3720,8,166,10,166,12,166,3723,9,166,1,166,1,166,1,167,
  	1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,1,167,
  	3,167,3740,8,167,1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,
  	3750,8,168,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
  	1,169,1,169,3,169,3764,8,169,1,170,1,170,1,170,1,170,1,170,1,170,1,170,
  	1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,
  	1,170,1,170,1,170,3,170,3788,8,170,1,171,1,171,1,171,1,171,1,171,1,171,
  	1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,
  	1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,
  	1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,
  	1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,
  	1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,3854,
  	8,171,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,5,172,3865,
  	8,172,10,172,12,172,3868,9,172,1,172,1,172,1,173,1,173,1,173,1,173,1,
  	173,1,173,1,173,1,173,1,173,5,173,3881,8,173,10,173,12,173,3884,9,173,
  	1,173,1,173,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,3,174,3896,
  	8,174,1,175,1,175,1,175,1,175,3,175,3902,8,175,1,175,3,175,3905,8,175,
  	1,175,1,175,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
  	3,176,3919,8,176,1,176,1,176,1,176,5,176,3924,8,176,10,176,12,176,3927,
  	9,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,3937,8,176,
  	1,176,1,176,1,176,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,177,
  	1,177,3,177,3952,8,177,1,177,1,177,1,177,5,177,3957,8,177,10,177,12,177,
  	3960,9,177,1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,178,1,178,3,178,
  	3971,8,178,1,178,1,178,1,179,1,179,3,179,3977,8,179,1,179,3,179,3980,
  	8,179,1,179,1,179,1,179,1,179,5,179,3986,8,179,10,179,12,179,3989,9,179,
  	1,179,5,179,3992,8,179,10,179,12,179,3995,9,179,1,179,3,179,3998,8,179,
  	1,180,1,180,1,180,1,180,1,180,1,180,1,181,1,181,1,181,1,182,1,182,1,182,
  	1,182,1,182,1,182,1,182,3,182,4016,8,182,1,182,1,182,1,182,1,182,1,182,
  	1,182,1,182,1,182,1,182,3,182,4027,8,182,1,182,1,182,1,182,3,182,4032,
  	8,182,1,182,1,182,1,183,1,183,1,183,1,184,1,184,1,184,1,184,1,184,1,184,
  	1,184,1,184,3,184,4047,8,184,1,184,1,184,1,184,1,184,4,184,4053,8,184,
  	11,184,12,184,4054,1,184,1,184,1,184,4,184,4060,8,184,11,184,12,184,4061,
  	3,184,4064,8,184,1,184,1,184,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
  	1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
  	1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
  	1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
  	1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
  	1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
  	1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
  	1,185,1,185,1,185,1,185,5,185,4151,8,185,10,185,12,185,4154,9,185,1,185,
  	1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
  	1,185,1,185,1,185,1,185,5,185,4173,8,185,10,185,12,185,4176,9,185,1,185,
  	1,185,1,185,1,185,1,185,1,185,1,185,3,185,4185,8,185,1,185,1,185,1,185,
  	1,185,1,185,1,185,1,185,1,185,1,185,1,185,3,185,4197,8,185,1,186,1,186,
  	3,186,4201,8,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,1,186,
  	1,186,5,186,4213,8,186,10,186,12,186,4216,9,186,1,186,1,186,1,187,1,187,
  	1,187,1,187,1,187,1,187,1,187,5,187,4227,8,187,10,187,12,187,4230,9,187,
  	1,187,1,187,1,188,1,188,1,188,1,188,1,188,1,188,3,188,4240,8,188,1,189,
  	1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
  	1,189,3,189,4256,8,189,1,189,1,189,1,189,3,189,4261,8,189,1,189,1,189,
  	1,189,1,189,1,189,1,189,3,189,4269,8,189,1,189,1,189,1,189,1,189,3,189,
  	4275,8,189,3,189,4277,8,189,1,189,1,189,1,189,1,189,3,189,4283,8,189,
  	1,189,1,189,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,1,190,
  	1,190,1,190,3,190,4299,8,190,1,190,1,190,1,190,3,190,4304,8,190,1,190,
  	1,190,1,190,1,190,1,190,1,190,3,190,4312,8,190,1,190,1,190,1,190,1,190,
  	3,190,4318,8,190,3,190,4320,8,190,1,190,1,190,1,190,1,190,3,190,4326,
  	8,190,1,190,1,190,1,191,1,191,1,191,1,191,1,191,1,191,1,191,5,191,4337,
  	8,191,10,191,12,191,4340,9,191,1,191,1,191,1,192,1,192,1,192,1,192,1,
  	192,1,192,1,192,1,192,3,192,4352,8,192,1,193,1,193,1,193,1,193,1,193,
  	1,193,1,193,1,193,1,193,3,193,4363,8,193,1,194,1,194,1,194,1,194,1,194,
  	1,194,1,194,1,194,1,194,1,194,3,194,4375,8,194,1,195,1,195,1,195,1,195,
  	1,195,1,196,1,196,1,196,1,196,3,196,4386,8,196,1,196,1,196,1,196,1,196,
  	1,196,3,196,4393,8,196,1,196,3,196,4396,8,196,1,196,1,196,1,196,1,196,
  	1,197,1,197,1,197,1,197,3,197,4406,8,197,1,197,1,197,1,197,1,197,1,197,
  	3,197,4413,8,197,1,197,3,197,4416,8,197,1,197,1,197,1,197,1,198,1,198,
  	1,198,1,198,3,198,4425,8,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
  	1,198,1,198,1,198,1,198,1,198,5,198,4439,8,198,10,198,12,198,4442,9,198,
  	1,198,1,198,1,198,1,198,1,199,1,199,1,199,1,199,1,199,1,199,1,199,3,199,
  	4455,8,199,1,199,1,199,1,199,1,199,5,199,4461,8,199,10,199,12,199,4464,
  	9,199,1,199,1,199,1,199,1,199,3,199,4470,8,199,1,200,1,200,1,200,1,200,
  	1,200,1,200,1,200,1,200,1,200,3,200,4481,8,200,1,200,1,200,1,200,1,200,
  	1,200,1,200,5,200,4489,8,200,10,200,12,200,4492,9,200,1,200,1,200,1,200,
  	1,200,1,200,1,200,3,200,4500,8,200,1,201,1,201,1,201,1,201,1,201,1,201,
  	1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
  	1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,
  	4531,8,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
  	1,201,1,201,1,201,1,201,1,201,3,201,4548,8,201,1,202,1,202,1,202,1,202,
  	1,202,1,202,1,202,1,202,1,202,3,202,4559,8,202,1,202,1,202,1,202,1,202,
  	1,202,1,202,1,202,1,202,3,202,4569,8,202,1,203,1,203,1,203,1,203,1,203,
  	3,203,4576,8,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,4584,8,203,
  	1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,5,203,4595,8,203,
  	10,203,12,203,4598,9,203,3,203,4600,8,203,1,203,1,203,1,203,1,203,1,203,
  	1,203,3,203,4608,8,203,1,203,3,203,4611,8,203,1,204,1,204,1,204,1,204,
  	5,204,4617,8,204,10,204,12,204,4620,9,204,1,204,1,204,1,204,1,204,1,205,
  	1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
  	1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,1,205,
  	1,205,1,205,1,205,3,205,4654,8,205,1,206,1,206,1,206,1,206,1,206,1,206,
  	1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,
  	1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,1,206,
  	1,206,1,206,1,206,1,206,1,206,1,206,3,206,4692,8,206,1,207,1,207,1,207,
  	1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,
  	3,207,4709,8,207,1,207,1,207,3,207,4713,8,207,1,207,1,207,1,207,1,207,
  	1,207,1,207,1,207,1,207,1,207,3,207,4724,8,207,1,207,3,207,4727,8,207,
  	1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,1,207,3,207,4738,8,207,
  	1,207,1,207,1,207,1,207,1,207,3,207,4745,8,207,1,208,1,208,1,208,1,208,
  	1,209,1,209,1,209,1,209,3,209,4755,8,209,1,209,1,209,1,209,1,210,1,210,
  	1,210,1,210,1,210,1,210,1,210,5,210,4767,8,210,10,210,12,210,4770,9,210,
  	3,210,4772,8,210,1,210,1,210,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
  	1,211,5,211,4784,8,211,10,211,12,211,4787,9,211,1,211,1,211,1,211,1,211,
  	1,211,3,211,4794,8,211,1,212,1,212,1,212,1,212,1,212,1,213,1,213,1,213,
  	1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
  	1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
  	1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
  	1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
  	1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
  	1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
  	1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
  	1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
  	1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
  	1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,3,213,
  	4923,8,213,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,3,214,4933,
  	8,214,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,
  	3,215,4946,8,215,1,215,1,215,1,215,5,215,4951,8,215,10,215,12,215,4954,
  	9,215,1,216,1,216,1,216,1,216,1,216,1,216,5,216,4962,8,216,10,216,12,
  	216,4965,9,216,1,217,1,217,1,217,1,217,1,217,1,217,5,217,4973,8,217,10,
  	217,12,217,4976,9,217,1,218,1,218,1,218,1,218,1,218,1,218,5,218,4984,
  	8,218,10,218,12,218,4987,9,218,1,219,1,219,1,219,1,219,1,219,1,219,5,
  	219,4995,8,219,10,219,12,219,4998,9,219,1,220,1,220,1,220,1,220,1,220,
  	1,220,5,220,5006,8,220,10,220,12,220,5009,9,220,1,221,1,221,1,221,1,221,
  	1,221,1,221,5,221,5017,8,221,10,221,12,221,5020,9,221,1,222,1,222,1,222,
  	1,222,1,222,1,222,1,222,1,222,1,222,5,222,5031,8,222,10,222,12,222,5034,
  	9,222,1,222,1,222,3,222,5038,8,222,1,223,1,223,1,223,1,223,1,223,1,223,
  	1,223,1,223,3,223,5048,8,223,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
  	1,224,1,224,5,224,5059,8,224,10,224,12,224,5062,9,224,1,224,1,224,3,224,
  	5066,8,224,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,
  	3,225,5078,8,225,1,226,1,226,1,226,1,226,1,226,1,226,5,226,5086,8,226,
  	10,226,12,226,5089,9,226,1,227,1,227,1,227,1,227,3,227,5095,8,227,1,228,
  	1,228,1,228,1,228,1,228,1,228,3,228,5103,8,228,1,228,1,228,1,228,5,228,
  	5108,8,228,10,228,12,228,5111,9,228,1,229,1,229,1,229,1,229,1,229,1,229,
  	1,229,1,229,3,229,5121,8,229,1,229,1,229,1,229,5,229,5126,8,229,10,229,
  	12,229,5129,9,229,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
  	1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
  	1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
  	1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
  	1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
  	1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,3,230,5196,8,230,1,230,
  	1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
  	1,230,1,230,1,230,1,230,3,230,5215,8,230,1,231,1,231,1,231,1,231,1,231,
  	1,231,1,231,1,231,1,231,1,232,1,232,1,232,1,232,1,232,1,233,1,233,1,233,
  	1,233,1,233,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,234,
  	1,234,1,234,1,234,3,234,5249,8,234,1,234,1,234,1,234,1,234,3,234,5255,
  	8,234,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,4,235,5265,8,235,
  	11,235,12,235,5266,1,235,1,235,1,236,1,236,1,236,1,236,1,236,1,236,1,
  	236,1,236,1,236,1,236,1,236,4,236,5282,8,236,11,236,12,236,5283,1,236,
  	1,236,1,237,1,237,1,237,1,237,1,237,1,237,1,237,5,237,5295,8,237,10,237,
  	12,237,5298,9,237,3,237,5300,8,237,1,237,1,237,1,237,1,238,1,238,1,238,
  	1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
  	1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
  	1,238,1,238,1,238,3,238,5335,8,238,1,238,1,238,3,238,5339,8,238,1,238,
  	1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
  	1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,3,238,
  	5365,8,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
  	1,238,1,238,1,238,3,238,5380,8,238,1,239,1,239,1,239,1,239,1,239,1,239,
  	1,239,5,239,5389,8,239,10,239,12,239,5392,9,239,1,239,1,239,1,239,1,239,
  	1,239,1,239,1,239,1,239,1,239,1,239,5,239,5404,8,239,10,239,12,239,5407,
  	9,239,1,239,1,239,1,239,3,239,5412,8,239,1,239,0,0,240,0,2,4,6,8,10,12,
  	14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
  	60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
  	106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
  	142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
  	178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,
  	214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
  	250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,
  	286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,
  	322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,
  	358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,
  	394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,
  	430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,
  	466,468,470,472,474,476,478,0,50,3,0,432,432,434,434,436,436,1,0,24,26,
  	2,0,27,28,344,344,1,0,29,30,2,0,31,31,395,395,1,0,25,26,1,0,27,28,2,0,
  	20,20,422,422,1,0,50,51,1,0,52,54,1,0,59,60,2,0,342,342,371,371,1,0,65,
  	66,2,0,399,399,407,407,1,0,69,70,1,0,128,129,1,0,133,134,1,0,135,136,
  	1,0,139,140,1,0,163,164,1,0,165,166,1,0,167,168,1,0,169,170,1,0,171,172,
  	1,0,173,174,1,0,175,176,2,0,372,372,378,378,1,0,190,191,1,0,195,196,1,
  	0,217,218,2,0,188,188,226,226,1,0,234,235,1,0,342,343,1,0,400,401,1,0,
  	404,405,1,0,408,409,1,0,411,412,1,0,414,415,1,0,382,383,1,0,387,388,1,
  	0,423,424,1,0,427,428,1,0,430,431,1,0,420,421,1,0,417,418,1,0,248,249,
  	2,0,249,249,255,255,1,0,295,296,1,0,297,298,2,0,219,219,310,310,6235,
  	0,480,1,0,0,0,2,498,1,0,0,0,4,543,1,0,0,0,6,545,1,0,0,0,8,581,1,0,0,0,
  	10,593,1,0,0,0,12,603,1,0,0,0,14,613,1,0,0,0,16,623,1,0,0,0,18,638,1,
  	0,0,0,20,650,1,0,0,0,22,672,1,0,0,0,24,698,1,0,0,0,26,712,1,0,0,0,28,
  	716,1,0,0,0,30,747,1,0,0,0,32,806,1,0,0,0,34,826,1,0,0,0,36,833,1,0,0,
  	0,38,835,1,0,0,0,40,837,1,0,0,0,42,843,1,0,0,0,44,855,1,0,0,0,46,865,
  	1,0,0,0,48,913,1,0,0,0,50,947,1,0,0,0,52,949,1,0,0,0,54,1014,1,0,0,0,
  	56,1016,1,0,0,0,58,1024,1,0,0,0,60,1070,1,0,0,0,62,1080,1,0,0,0,64,1082,
  	1,0,0,0,66,1089,1,0,0,0,68,1096,1,0,0,0,70,1103,1,0,0,0,72,1113,1,0,0,
  	0,74,1129,1,0,0,0,76,1142,1,0,0,0,78,1147,1,0,0,0,80,1194,1,0,0,0,82,
  	1210,1,0,0,0,84,1218,1,0,0,0,86,1228,1,0,0,0,88,1230,1,0,0,0,90,1240,
  	1,0,0,0,92,1283,1,0,0,0,94,1285,1,0,0,0,96,1315,1,0,0,0,98,1320,1,0,0,
  	0,100,1368,1,0,0,0,102,1373,1,0,0,0,104,1386,1,0,0,0,106,1441,1,0,0,0,
  	108,1489,1,0,0,0,110,1496,1,0,0,0,112,1512,1,0,0,0,114,1519,1,0,0,0,116,
  	1584,1,0,0,0,118,1594,1,0,0,0,120,1622,1,0,0,0,122,1624,1,0,0,0,124,1682,
  	1,0,0,0,126,1684,1,0,0,0,128,1687,1,0,0,0,130,1697,1,0,0,0,132,1739,1,
  	0,0,0,134,1742,1,0,0,0,136,1785,1,0,0,0,138,1797,1,0,0,0,140,1799,1,0,
  	0,0,142,1806,1,0,0,0,144,1832,1,0,0,0,146,1854,1,0,0,0,148,1856,1,0,0,
  	0,150,1885,1,0,0,0,152,1894,1,0,0,0,154,1911,1,0,0,0,156,1928,1,0,0,0,
  	158,1946,1,0,0,0,160,1964,1,0,0,0,162,2014,1,0,0,0,164,2057,1,0,0,0,166,
  	2094,1,0,0,0,168,2124,1,0,0,0,170,2129,1,0,0,0,172,2135,1,0,0,0,174,2150,
  	1,0,0,0,176,2167,1,0,0,0,178,2169,1,0,0,0,180,2185,1,0,0,0,182,2205,1,
  	0,0,0,184,2242,1,0,0,0,186,2313,1,0,0,0,188,2319,1,0,0,0,190,2390,1,0,
  	0,0,192,2392,1,0,0,0,194,2415,1,0,0,0,196,2444,1,0,0,0,198,2446,1,0,0,
  	0,200,2468,1,0,0,0,202,2500,1,0,0,0,204,2520,1,0,0,0,206,2522,1,0,0,0,
  	208,2525,1,0,0,0,210,2538,1,0,0,0,212,2549,1,0,0,0,214,2601,1,0,0,0,216,
  	2603,1,0,0,0,218,2606,1,0,0,0,220,2634,1,0,0,0,222,2636,1,0,0,0,224,2648,
  	1,0,0,0,226,2650,1,0,0,0,228,2657,1,0,0,0,230,2681,1,0,0,0,232,2696,1,
  	0,0,0,234,2701,1,0,0,0,236,2707,1,0,0,0,238,2717,1,0,0,0,240,2770,1,0,
  	0,0,242,2772,1,0,0,0,244,2802,1,0,0,0,246,2904,1,0,0,0,248,2918,1,0,0,
  	0,250,2932,1,0,0,0,252,2934,1,0,0,0,254,2942,1,0,0,0,256,2950,1,0,0,0,
  	258,2965,1,0,0,0,260,2981,1,0,0,0,262,3036,1,0,0,0,264,3038,1,0,0,0,266,
  	3042,1,0,0,0,268,3056,1,0,0,0,270,3060,1,0,0,0,272,3074,1,0,0,0,274,3078,
  	1,0,0,0,276,3092,1,0,0,0,278,3104,1,0,0,0,280,3143,1,0,0,0,282,3145,1,
  	0,0,0,284,3175,1,0,0,0,286,3195,1,0,0,0,288,3285,1,0,0,0,290,3287,1,0,
  	0,0,292,3292,1,0,0,0,294,3306,1,0,0,0,296,3310,1,0,0,0,298,3322,1,0,0,
  	0,300,3346,1,0,0,0,302,3373,1,0,0,0,304,3386,1,0,0,0,306,3394,1,0,0,0,
  	308,3440,1,0,0,0,310,3443,1,0,0,0,312,3452,1,0,0,0,314,3478,1,0,0,0,316,
  	3488,1,0,0,0,318,3516,1,0,0,0,320,3570,1,0,0,0,322,3617,1,0,0,0,324,3629,
  	1,0,0,0,326,3654,1,0,0,0,328,3656,1,0,0,0,330,3707,1,0,0,0,332,3709,1,
  	0,0,0,334,3739,1,0,0,0,336,3749,1,0,0,0,338,3763,1,0,0,0,340,3787,1,0,
  	0,0,342,3853,1,0,0,0,344,3855,1,0,0,0,346,3871,1,0,0,0,348,3895,1,0,0,
  	0,350,3897,1,0,0,0,352,3908,1,0,0,0,354,3941,1,0,0,0,356,3963,1,0,0,0,
  	358,3979,1,0,0,0,360,3999,1,0,0,0,362,4005,1,0,0,0,364,4008,1,0,0,0,366,
  	4035,1,0,0,0,368,4046,1,0,0,0,370,4196,1,0,0,0,372,4200,1,0,0,0,374,4219,
  	1,0,0,0,376,4239,1,0,0,0,378,4255,1,0,0,0,380,4298,1,0,0,0,382,4329,1,
  	0,0,0,384,4351,1,0,0,0,386,4362,1,0,0,0,388,4374,1,0,0,0,390,4376,1,0,
  	0,0,392,4381,1,0,0,0,394,4401,1,0,0,0,396,4424,1,0,0,0,398,4447,1,0,0,
  	0,400,4471,1,0,0,0,402,4547,1,0,0,0,404,4568,1,0,0,0,406,4610,1,0,0,0,
  	408,4612,1,0,0,0,410,4653,1,0,0,0,412,4691,1,0,0,0,414,4744,1,0,0,0,416,
  	4746,1,0,0,0,418,4750,1,0,0,0,420,4759,1,0,0,0,422,4775,1,0,0,0,424,4795,
  	1,0,0,0,426,4800,1,0,0,0,428,4924,1,0,0,0,430,4934,1,0,0,0,432,4955,1,
  	0,0,0,434,4966,1,0,0,0,436,4977,1,0,0,0,438,4988,1,0,0,0,440,4999,1,0,
  	0,0,442,5010,1,0,0,0,444,5021,1,0,0,0,446,5047,1,0,0,0,448,5049,1,0,0,
  	0,450,5077,1,0,0,0,452,5079,1,0,0,0,454,5094,1,0,0,0,456,5096,1,0,0,0,
  	458,5112,1,0,0,0,460,5214,1,0,0,0,462,5216,1,0,0,0,464,5225,1,0,0,0,466,
  	5230,1,0,0,0,468,5254,1,0,0,0,470,5264,1,0,0,0,472,5270,1,0,0,0,474,5287,
  	1,0,0,0,476,5379,1,0,0,0,478,5411,1,0,0,0,480,481,3,2,1,0,481,482,3,30,
  	15,0,482,483,6,0,-1,0,483,1,1,0,0,0,484,485,5,1,0,0,485,499,6,1,-1,0,
  	486,487,5,2,0,0,487,499,6,1,-1,0,488,489,5,3,0,0,489,499,6,1,-1,0,490,
  	491,5,4,0,0,491,499,6,1,-1,0,492,493,5,5,0,0,493,499,6,1,-1,0,494,495,
  	5,6,0,0,495,499,6,1,-1,0,496,497,5,7,0,0,497,499,6,1,-1,0,498,484,1,0,
  	0,0,498,486,1,0,0,0,498,488,1,0,0,0,498,490,1,0,0,0,498,492,1,0,0,0,498,
  	494,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,501,6,
  	1,-1,0,501,508,5,396,0,0,502,503,5,8,0,0,503,509,6,1,-1,0,504,505,5,9,
  	0,0,505,509,6,1,-1,0,506,507,5,432,0,0,507,509,6,1,-1,0,508,502,1,0,0,
  	0,508,504,1,0,0,0,508,506,1,0,0,0,509,513,1,0,0,0,510,511,5,342,0,0,511,
  	512,5,432,0,0,512,514,6,1,-1,0,513,510,1,0,0,0,513,514,1,0,0,0,514,522,
  	1,0,0,0,515,517,5,372,0,0,516,518,5,10,0,0,517,516,1,0,0,0,517,518,1,
  	0,0,0,518,519,1,0,0,0,519,521,7,0,0,0,520,515,1,0,0,0,521,524,1,0,0,0,
  	522,520,1,0,0,0,522,523,1,0,0,0,523,525,1,0,0,0,524,522,1,0,0,0,525,526,
  	5,398,0,0,526,528,5,371,0,0,527,529,3,4,2,0,528,527,1,0,0,0,528,529,1,
  	0,0,0,529,531,1,0,0,0,530,532,3,6,3,0,531,530,1,0,0,0,531,532,1,0,0,0,
  	532,3,1,0,0,0,533,534,5,11,0,0,534,535,5,342,0,0,535,536,5,432,0,0,536,
  	537,5,374,0,0,537,544,6,2,-1,0,538,539,5,12,0,0,539,540,5,342,0,0,540,
  	541,5,432,0,0,541,542,5,374,0,0,542,544,6,2,-1,0,543,533,1,0,0,0,543,
  	538,1,0,0,0,544,5,1,0,0,0,545,546,5,13,0,0,546,555,5,352,0,0,547,548,
  	5,432,0,0,548,549,5,342,0,0,549,550,3,426,213,0,550,551,5,374,0,0,551,
  	552,6,3,-1,0,552,554,1,0,0,0,553,547,1,0,0,0,554,557,1,0,0,0,555,553,
  	1,0,0,0,555,556,1,0,0,0,556,558,1,0,0,0,557,555,1,0,0,0,558,559,5,353,
  	0,0,559,7,1,0,0,0,560,561,5,14,0,0,561,582,6,4,-1,0,562,563,5,15,0,0,
  	563,582,6,4,-1,0,564,565,5,16,0,0,565,582,6,4,-1,0,566,567,5,17,0,0,567,
  	582,6,4,-1,0,568,569,5,18,0,0,569,582,6,4,-1,0,570,571,5,19,0,0,571,582,
  	6,4,-1,0,572,573,5,20,0,0,573,582,6,4,-1,0,574,575,5,21,0,0,575,582,6,
  	4,-1,0,576,577,5,22,0,0,577,582,6,4,-1,0,578,579,5,23,0,0,579,582,6,4,
  	-1,0,580,582,3,14,7,0,581,560,1,0,0,0,581,562,1,0,0,0,581,564,1,0,0,0,
  	581,566,1,0,0,0,581,568,1,0,0,0,581,570,1,0,0,0,581,572,1,0,0,0,581,574,
  	1,0,0,0,581,576,1,0,0,0,581,578,1,0,0,0,581,580,1,0,0,0,582,583,1,0,0,
  	0,583,581,1,0,0,0,583,584,1,0,0,0,584,9,1,0,0,0,585,586,7,1,0,0,586,594,
  	6,5,-1,0,587,588,7,2,0,0,588,594,6,5,-1,0,589,590,7,3,0,0,590,594,6,5,
  	-1,0,591,592,7,4,0,0,592,594,6,5,-1,0,593,585,1,0,0,0,593,587,1,0,0,0,
  	593,589,1,0,0,0,593,591,1,0,0,0,594,11,1,0,0,0,595,596,7,5,0,0,596,604,
  	6,6,-1,0,597,598,7,6,0,0,598,604,6,6,-1,0,599,600,5,30,0,0,600,604,6,
  	6,-1,0,601,602,5,31,0,0,602,604,6,6,-1,0,603,595,1,0,0,0,603,597,1,0,
  	0,0,603,599,1,0,0,0,603,601,1,0,0,0,604,13,1,0,0,0,605,606,5,26,0,0,606,
  	614,6,7,-1,0,607,608,5,28,0,0,608,614,6,7,-1,0,609,610,5,30,0,0,610,614,
  	6,7,-1,0,611,612,5,31,0,0,612,614,6,7,-1,0,613,605,1,0,0,0,613,607,1,
  	0,0,0,613,609,1,0,0,0,613,611,1,0,0,0,614,15,1,0,0,0,615,616,5,24,0,0,
  	616,624,6,8,-1,0,617,618,5,344,0,0,618,624,6,8,-1,0,619,620,5,29,0,0,
  	620,624,6,8,-1,0,621,622,5,395,0,0,622,624,6,8,-1,0,623,615,1,0,0,0,623,
  	617,1,0,0,0,623,619,1,0,0,0,623,621,1,0,0,0,624,17,1,0,0,0,625,626,3,
  	10,5,0,626,627,6,9,-1,0,627,639,1,0,0,0,628,629,5,14,0,0,629,639,6,9,
  	-1,0,630,631,5,32,0,0,631,639,6,9,-1,0,632,633,7,7,0,0,633,639,6,9,-1,
  	0,634,635,5,33,0,0,635,639,6,9,-1,0,636,637,5,21,0,0,637,639,6,9,-1,0,
  	638,625,1,0,0,0,638,628,1,0,0,0,638,630,1,0,0,0,638,632,1,0,0,0,638,634,
  	1,0,0,0,638,636,1,0,0,0,639,19,1,0,0,0,640,641,5,34,0,0,641,651,6,10,
  	-1,0,642,643,5,35,0,0,643,651,6,10,-1,0,644,645,5,36,0,0,645,651,6,10,
  	-1,0,646,647,5,37,0,0,647,651,6,10,-1,0,648,649,5,18,0,0,649,651,6,10,
  	-1,0,650,640,1,0,0,0,650,642,1,0,0,0,650,644,1,0,0,0,650,646,1,0,0,0,
  	650,648,1,0,0,0,651,652,1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,21,
  	1,0,0,0,654,655,5,38,0,0,655,673,6,11,-1,0,656,657,5,39,0,0,657,673,6,
  	11,-1,0,658,659,5,40,0,0,659,673,6,11,-1,0,660,661,5,18,0,0,661,673,6,
  	11,-1,0,662,663,5,34,0,0,663,673,6,11,-1,0,664,665,5,35,0,0,665,673,6,
  	11,-1,0,666,667,5,36,0,0,667,673,6,11,-1,0,668,669,5,37,0,0,669,673,6,
  	11,-1,0,670,671,5,41,0,0,671,673,6,11,-1,0,672,654,1,0,0,0,672,656,1,
  	0,0,0,672,658,1,0,0,0,672,660,1,0,0,0,672,662,1,0,0,0,672,664,1,0,0,0,
  	672,666,1,0,0,0,672,668,1,0,0,0,672,670,1,0,0,0,673,674,1,0,0,0,674,672,
  	1,0,0,0,674,675,1,0,0,0,675,23,1,0,0,0,676,677,5,14,0,0,677,699,6,12,
  	-1,0,678,679,5,40,0,0,679,699,6,12,-1,0,680,681,5,22,0,0,681,699,6,12,
  	-1,0,682,683,5,42,0,0,683,699,6,12,-1,0,684,685,5,23,0,0,685,699,6,12,
  	-1,0,686,687,5,18,0,0,687,699,6,12,-1,0,688,689,5,34,0,0,689,699,6,12,
  	-1,0,690,691,5,35,0,0,691,699,6,12,-1,0,692,693,5,36,0,0,693,699,6,12,
  	-1,0,694,695,5,37,0,0,695,699,6,12,-1,0,696,697,5,41,0,0,697,699,6,12,
  	-1,0,698,676,1,0,0,0,698,678,1,0,0,0,698,680,1,0,0,0,698,682,1,0,0,0,
  	698,684,1,0,0,0,698,686,1,0,0,0,698,688,1,0,0,0,698,690,1,0,0,0,698,692,
  	1,0,0,0,698,694,1,0,0,0,698,696,1,0,0,0,699,700,1,0,0,0,700,698,1,0,0,
  	0,700,701,1,0,0,0,701,25,1,0,0,0,702,703,5,17,0,0,703,713,6,13,-1,0,704,
  	705,5,34,0,0,705,713,6,13,-1,0,706,707,5,35,0,0,707,713,6,13,-1,0,708,
  	709,5,36,0,0,709,713,6,13,-1,0,710,711,5,37,0,0,711,713,6,13,-1,0,712,
  	702,1,0,0,0,712,704,1,0,0,0,712,706,1,0,0,0,712,708,1,0,0,0,712,710,1,
  	0,0,0,713,714,1,0,0,0,714,712,1,0,0,0,714,715,1,0,0,0,715,27,1,0,0,0,
  	716,717,5,9,0,0,717,718,5,432,0,0,718,721,6,14,-1,0,719,720,5,434,0,0,
  	720,722,6,14,-1,0,721,719,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,723,
  	725,5,352,0,0,724,726,3,38,19,0,725,724,1,0,0,0,725,726,1,0,0,0,726,728,
  	1,0,0,0,727,729,3,40,20,0,728,727,1,0,0,0,728,729,1,0,0,0,729,733,1,0,
  	0,0,730,732,3,168,84,0,731,730,1,0,0,0,732,735,1,0,0,0,733,731,1,0,0,
  	0,733,734,1,0,0,0,734,739,1,0,0,0,735,733,1,0,0,0,736,738,3,62,31,0,737,
  	736,1,0,0,0,738,741,1,0,0,0,739,737,1,0,0,0,739,740,1,0,0,0,740,742,1,
  	0,0,0,741,739,1,0,0,0,742,743,5,353,0,0,743,29,1,0,0,0,744,745,3,22,11,
  	0,745,746,6,15,-1,0,746,748,1,0,0,0,747,744,1,0,0,0,747,748,1,0,0,0,748,
  	749,1,0,0,0,749,757,5,8,0,0,750,752,5,396,0,0,751,753,5,43,0,0,752,751,
  	1,0,0,0,752,753,1,0,0,0,753,754,1,0,0,0,754,755,3,122,61,0,755,756,5,
  	398,0,0,756,758,1,0,0,0,757,750,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,
  	0,759,760,5,432,0,0,760,763,6,15,-1,0,761,762,5,434,0,0,762,764,6,15,
  	-1,0,763,761,1,0,0,0,763,764,1,0,0,0,764,765,1,0,0,0,765,767,5,352,0,
  	0,766,768,3,38,19,0,767,766,1,0,0,0,767,768,1,0,0,0,768,770,1,0,0,0,769,
  	771,3,40,20,0,770,769,1,0,0,0,770,771,1,0,0,0,771,775,1,0,0,0,772,774,
  	3,166,83,0,773,772,1,0,0,0,774,777,1,0,0,0,775,773,1,0,0,0,775,776,1,
  	0,0,0,776,778,1,0,0,0,777,775,1,0,0,0,778,782,6,15,-1,0,779,781,3,168,
  	84,0,780,779,1,0,0,0,781,784,1,0,0,0,782,780,1,0,0,0,782,783,1,0,0,0,
  	783,788,1,0,0,0,784,782,1,0,0,0,785,787,3,62,31,0,786,785,1,0,0,0,787,
  	790,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,793,1,0,0,0,790,788,1,
  	0,0,0,791,794,3,88,44,0,792,794,3,112,56,0,793,791,1,0,0,0,793,792,1,
  	0,0,0,793,794,1,0,0,0,794,795,1,0,0,0,795,801,6,15,-1,0,796,800,3,290,
  	145,0,797,800,3,312,156,0,798,800,3,306,153,0,799,796,1,0,0,0,799,797,
  	1,0,0,0,799,798,1,0,0,0,800,803,1,0,0,0,801,799,1,0,0,0,801,802,1,0,0,
  	0,802,804,1,0,0,0,803,801,1,0,0,0,804,805,5,353,0,0,805,31,1,0,0,0,806,
  	807,5,432,0,0,807,818,6,16,-1,0,808,809,5,377,0,0,809,813,6,16,-1,0,810,
  	811,5,379,0,0,811,813,6,16,-1,0,812,808,1,0,0,0,812,810,1,0,0,0,813,814,
  	1,0,0,0,814,815,5,432,0,0,815,817,6,16,-1,0,816,812,1,0,0,0,817,820,1,
  	0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,33,1,0,0,0,820,818,1,0,0,0,
  	821,822,5,438,0,0,822,827,6,17,-1,0,823,824,3,32,16,0,824,825,6,17,-1,
  	0,825,827,1,0,0,0,826,821,1,0,0,0,826,823,1,0,0,0,827,35,1,0,0,0,828,
  	829,5,436,0,0,829,834,6,18,-1,0,830,831,3,32,16,0,831,832,6,18,-1,0,832,
  	834,1,0,0,0,833,828,1,0,0,0,833,830,1,0,0,0,834,37,1,0,0,0,835,836,5,
  	44,0,0,836,39,1,0,0,0,837,839,5,45,0,0,838,840,3,42,21,0,839,838,1,0,
  	0,0,840,841,1,0,0,0,841,839,1,0,0,0,841,842,1,0,0,0,842,41,1,0,0,0,843,
  	853,5,46,0,0,844,845,5,434,0,0,845,854,5,374,0,0,846,848,5,352,0,0,847,
  	849,5,434,0,0,848,847,1,0,0,0,849,850,1,0,0,0,850,848,1,0,0,0,850,851,
  	1,0,0,0,851,852,1,0,0,0,852,854,5,353,0,0,853,844,1,0,0,0,853,846,1,0,
  	0,0,854,43,1,0,0,0,855,859,5,47,0,0,856,858,3,46,23,0,857,856,1,0,0,0,
  	858,861,1,0,0,0,859,857,1,0,0,0,859,860,1,0,0,0,860,45,1,0,0,0,861,859,
  	1,0,0,0,862,863,3,20,10,0,863,864,6,23,-1,0,864,866,1,0,0,0,865,862,1,
  	0,0,0,865,866,1,0,0,0,866,867,1,0,0,0,867,875,5,48,0,0,868,870,5,396,
  	0,0,869,871,5,43,0,0,870,869,1,0,0,0,870,871,1,0,0,0,871,872,1,0,0,0,
  	872,873,3,122,61,0,873,874,5,398,0,0,874,876,1,0,0,0,875,868,1,0,0,0,
  	875,876,1,0,0,0,876,877,1,0,0,0,877,878,5,432,0,0,878,881,6,23,-1,0,879,
  	880,5,434,0,0,880,882,6,23,-1,0,881,879,1,0,0,0,881,882,1,0,0,0,882,884,
  	1,0,0,0,883,885,3,48,24,0,884,883,1,0,0,0,884,885,1,0,0,0,885,887,1,0,
  	0,0,886,888,3,52,26,0,887,886,1,0,0,0,887,888,1,0,0,0,888,889,1,0,0,0,
  	889,890,3,56,28,0,890,47,1,0,0,0,891,892,5,354,0,0,892,897,3,50,25,0,
  	893,894,5,372,0,0,894,896,3,50,25,0,895,893,1,0,0,0,896,899,1,0,0,0,897,
  	895,1,0,0,0,897,898,1,0,0,0,898,900,1,0,0,0,899,897,1,0,0,0,900,901,5,
  	355,0,0,901,914,1,0,0,0,902,903,5,350,0,0,903,908,3,50,25,0,904,905,5,
  	372,0,0,905,907,3,50,25,0,906,904,1,0,0,0,907,910,1,0,0,0,908,906,1,0,
  	0,0,908,909,1,0,0,0,909,911,1,0,0,0,910,908,1,0,0,0,911,912,5,351,0,0,
  	912,914,1,0,0,0,913,891,1,0,0,0,913,902,1,0,0,0,914,49,1,0,0,0,915,916,
  	3,18,9,0,916,917,6,25,-1,0,917,919,1,0,0,0,918,915,1,0,0,0,918,919,1,
  	0,0,0,919,920,1,0,0,0,920,921,3,232,116,0,921,929,6,25,-1,0,922,923,5,
  	432,0,0,923,927,6,25,-1,0,924,925,3,230,115,0,925,926,6,25,-1,0,926,928,
  	1,0,0,0,927,924,1,0,0,0,927,928,1,0,0,0,928,930,1,0,0,0,929,922,1,0,0,
  	0,929,930,1,0,0,0,930,931,1,0,0,0,931,932,6,25,-1,0,932,948,1,0,0,0,933,
  	943,5,49,0,0,934,935,3,232,116,0,935,936,5,371,0,0,936,937,6,25,-1,0,
  	937,938,3,426,213,0,938,939,6,25,-1,0,939,944,1,0,0,0,940,941,3,32,16,
  	0,941,942,6,25,-1,0,942,944,1,0,0,0,943,934,1,0,0,0,943,940,1,0,0,0,944,
  	945,1,0,0,0,945,946,6,25,-1,0,946,948,1,0,0,0,947,918,1,0,0,0,947,933,
  	1,0,0,0,948,51,1,0,0,0,949,980,7,8,0,0,950,951,5,354,0,0,951,956,3,54,
  	27,0,952,953,5,372,0,0,953,955,3,54,27,0,954,952,1,0,0,0,955,958,1,0,
  	0,0,956,954,1,0,0,0,956,957,1,0,0,0,957,959,1,0,0,0,958,956,1,0,0,0,959,
  	960,5,355,0,0,960,981,1,0,0,0,961,962,5,350,0,0,962,967,3,54,27,0,963,
  	964,5,372,0,0,964,966,3,54,27,0,965,963,1,0,0,0,966,969,1,0,0,0,967,965,
  	1,0,0,0,967,968,1,0,0,0,968,970,1,0,0,0,969,967,1,0,0,0,970,971,5,351,
  	0,0,971,981,1,0,0,0,972,976,3,232,116,0,973,974,3,230,115,0,974,975,6,
  	26,-1,0,975,977,1,0,0,0,976,973,1,0,0,0,976,977,1,0,0,0,977,978,1,0,0,
  	0,978,979,6,26,-1,0,979,981,1,0,0,0,980,950,1,0,0,0,980,961,1,0,0,0,980,
  	972,1,0,0,0,981,53,1,0,0,0,982,983,3,18,9,0,983,984,6,27,-1,0,984,986,
  	1,0,0,0,985,982,1,0,0,0,985,986,1,0,0,0,986,987,1,0,0,0,987,988,3,232,
  	116,0,988,996,6,27,-1,0,989,990,5,432,0,0,990,994,6,27,-1,0,991,992,3,
  	230,115,0,992,993,6,27,-1,0,993,995,1,0,0,0,994,991,1,0,0,0,994,995,1,
  	0,0,0,995,997,1,0,0,0,996,989,1,0,0,0,996,997,1,0,0,0,997,998,1,0,0,0,
  	998,999,6,27,-1,0,999,1015,1,0,0,0,1000,1010,5,49,0,0,1001,1002,3,232,
  	116,0,1002,1003,5,371,0,0,1003,1004,6,27,-1,0,1004,1005,3,426,213,0,1005,
  	1006,6,27,-1,0,1006,1011,1,0,0,0,1007,1008,3,32,16,0,1008,1009,6,27,-1,
  	0,1009,1011,1,0,0,0,1010,1001,1,0,0,0,1010,1007,1,0,0,0,1011,1012,1,0,
  	0,0,1012,1013,6,27,-1,0,1013,1015,1,0,0,0,1014,985,1,0,0,0,1014,1000,
  	1,0,0,0,1015,55,1,0,0,0,1016,1019,5,352,0,0,1017,1020,3,58,29,0,1018,
  	1020,3,60,30,0,1019,1017,1,0,0,0,1019,1018,1,0,0,0,1020,1021,1,0,0,0,
  	1021,1022,5,353,0,0,1022,57,1,0,0,0,1023,1025,3,38,19,0,1024,1023,1,0,
  	0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,1028,3,40,20,0,1027,1026,
  	1,0,0,0,1027,1028,1,0,0,0,1028,1032,1,0,0,0,1029,1031,3,166,83,0,1030,
  	1029,1,0,0,0,1031,1034,1,0,0,0,1032,1030,1,0,0,0,1032,1033,1,0,0,0,1033,
  	1038,1,0,0,0,1034,1032,1,0,0,0,1035,1037,3,168,84,0,1036,1035,1,0,0,0,
  	1037,1040,1,0,0,0,1038,1036,1,0,0,0,1038,1039,1,0,0,0,1039,1044,1,0,0,
  	0,1040,1038,1,0,0,0,1041,1043,3,62,31,0,1042,1041,1,0,0,0,1043,1046,1,
  	0,0,0,1044,1042,1,0,0,0,1044,1045,1,0,0,0,1045,1049,1,0,0,0,1046,1044,
  	1,0,0,0,1047,1050,3,88,44,0,1048,1050,3,112,56,0,1049,1047,1,0,0,0,1049,
  	1048,1,0,0,0,1049,1050,1,0,0,0,1050,1056,1,0,0,0,1051,1055,3,290,145,
  	0,1052,1055,3,306,153,0,1053,1055,3,312,156,0,1054,1051,1,0,0,0,1054,
  	1052,1,0,0,0,1054,1053,1,0,0,0,1055,1058,1,0,0,0,1056,1054,1,0,0,0,1056,
  	1057,1,0,0,0,1057,59,1,0,0,0,1058,1056,1,0,0,0,1059,1063,6,30,-1,0,1060,
  	1061,3,8,4,0,1061,1062,6,30,-1,0,1062,1064,1,0,0,0,1063,1060,1,0,0,0,
  	1063,1064,1,0,0,0,1064,1068,1,0,0,0,1065,1069,3,220,110,0,1066,1069,3,
  	102,51,0,1067,1069,3,162,81,0,1068,1065,1,0,0,0,1068,1066,1,0,0,0,1068,
  	1067,1,0,0,0,1069,1071,1,0,0,0,1070,1059,1,0,0,0,1071,1072,1,0,0,0,1072,
  	1070,1,0,0,0,1072,1073,1,0,0,0,1073,61,1,0,0,0,1074,1081,3,292,146,0,
  	1075,1081,3,44,22,0,1076,1081,3,64,32,0,1077,1081,3,66,33,0,1078,1081,
  	3,68,34,0,1079,1081,3,70,35,0,1080,1074,1,0,0,0,1080,1075,1,0,0,0,1080,
  	1076,1,0,0,0,1080,1077,1,0,0,0,1080,1078,1,0,0,0,1080,1079,1,0,0,0,1081,
  	63,1,0,0,0,1082,1086,7,9,0,0,1083,1085,3,72,36,0,1084,1083,1,0,0,0,1085,
  	1088,1,0,0,0,1086,1084,1,0,0,0,1086,1087,1,0,0,0,1087,65,1,0,0,0,1088,
  	1086,1,0,0,0,1089,1093,5,55,0,0,1090,1092,3,74,37,0,1091,1090,1,0,0,0,
  	1092,1095,1,0,0,0,1093,1091,1,0,0,0,1093,1094,1,0,0,0,1094,67,1,0,0,0,
  	1095,1093,1,0,0,0,1096,1100,5,56,0,0,1097,1099,3,74,37,0,1098,1097,1,
  	0,0,0,1099,1102,1,0,0,0,1100,1098,1,0,0,0,1100,1101,1,0,0,0,1101,69,1,
  	0,0,0,1102,1100,1,0,0,0,1103,1107,5,57,0,0,1104,1106,3,76,38,0,1105,1104,
  	1,0,0,0,1106,1109,1,0,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,71,
  	1,0,0,0,1109,1107,1,0,0,0,1110,1111,3,22,11,0,1111,1112,6,36,-1,0,1112,
  	1114,1,0,0,0,1113,1110,1,0,0,0,1113,1114,1,0,0,0,1114,1124,1,0,0,0,1115,
  	1116,3,94,47,0,1116,1117,6,36,-1,0,1117,1125,1,0,0,0,1118,1119,3,102,
  	51,0,1119,1120,6,36,-1,0,1120,1125,1,0,0,0,1121,1122,3,78,39,0,1122,1123,
  	6,36,-1,0,1123,1125,1,0,0,0,1124,1115,1,0,0,0,1124,1118,1,0,0,0,1124,
  	1121,1,0,0,0,1125,73,1,0,0,0,1126,1127,3,22,11,0,1127,1128,6,37,-1,0,
  	1128,1130,1,0,0,0,1129,1126,1,0,0,0,1129,1130,1,0,0,0,1130,1137,1,0,0,
  	0,1131,1132,3,94,47,0,1132,1133,6,37,-1,0,1133,1138,1,0,0,0,1134,1135,
  	3,104,52,0,1135,1136,6,37,-1,0,1136,1138,1,0,0,0,1137,1131,1,0,0,0,1137,
  	1134,1,0,0,0,1138,75,1,0,0,0,1139,1140,3,24,12,0,1140,1141,6,38,-1,0,
  	1141,1143,1,0,0,0,1142,1139,1,0,0,0,1142,1143,1,0,0,0,1143,1144,1,0,0,
  	0,1144,1145,3,78,39,0,1145,1146,6,38,-1,0,1146,77,1,0,0,0,1147,1149,5,
  	58,0,0,1148,1150,7,10,0,0,1149,1148,1,0,0,0,1149,1150,1,0,0,0,1150,1151,
  	1,0,0,0,1151,1153,5,396,0,0,1152,1154,5,61,0,0,1153,1152,1,0,0,0,1153,
  	1154,1,0,0,0,1154,1155,1,0,0,0,1155,1156,3,126,63,0,1156,1159,6,39,-1,
  	0,1157,1158,5,372,0,0,1158,1160,3,90,45,0,1159,1157,1,0,0,0,1159,1160,
  	1,0,0,0,1160,1161,1,0,0,0,1161,1162,5,398,0,0,1162,1163,5,432,0,0,1163,
  	1166,6,39,-1,0,1164,1165,5,434,0,0,1165,1167,6,39,-1,0,1166,1164,1,0,
  	0,0,1166,1167,1,0,0,0,1167,1173,1,0,0,0,1168,1170,5,350,0,0,1169,1171,
  	3,80,40,0,1170,1169,1,0,0,0,1170,1171,1,0,0,0,1171,1172,1,0,0,0,1172,
  	1174,5,351,0,0,1173,1168,1,0,0,0,1173,1174,1,0,0,0,1174,1192,1,0,0,0,
  	1175,1193,5,374,0,0,1176,1182,5,352,0,0,1177,1178,3,330,165,0,1178,1179,
  	6,39,-1,0,1179,1181,1,0,0,0,1180,1177,1,0,0,0,1181,1184,1,0,0,0,1182,
  	1180,1,0,0,0,1182,1183,1,0,0,0,1183,1188,1,0,0,0,1184,1182,1,0,0,0,1185,
  	1187,3,86,43,0,1186,1185,1,0,0,0,1187,1190,1,0,0,0,1188,1186,1,0,0,0,
  	1188,1189,1,0,0,0,1189,1191,1,0,0,0,1190,1188,1,0,0,0,1191,1193,5,353,
  	0,0,1192,1175,1,0,0,0,1192,1176,1,0,0,0,1193,79,1,0,0,0,1194,1199,3,82,
  	41,0,1195,1196,5,372,0,0,1196,1198,3,82,41,0,1197,1195,1,0,0,0,1198,1201,
  	1,0,0,0,1199,1197,1,0,0,0,1199,1200,1,0,0,0,1200,81,1,0,0,0,1201,1199,
  	1,0,0,0,1202,1203,3,372,186,0,1203,1204,3,84,42,0,1204,1205,3,426,213,
  	0,1205,1206,6,41,-1,0,1206,1211,1,0,0,0,1207,1208,3,426,213,0,1208,1209,
  	6,41,-1,0,1209,1211,1,0,0,0,1210,1202,1,0,0,0,1210,1207,1,0,0,0,1211,
  	83,1,0,0,0,1212,1213,7,11,0,0,1213,1219,6,42,-1,0,1214,1215,5,344,0,0,
  	1215,1219,6,42,-1,0,1216,1217,5,345,0,0,1217,1219,6,42,-1,0,1218,1212,
  	1,0,0,0,1218,1214,1,0,0,0,1218,1216,1,0,0,0,1219,85,1,0,0,0,1220,1221,
  	5,62,0,0,1221,1222,3,332,166,0,1222,1223,6,43,-1,0,1223,1229,1,0,0,0,
  	1224,1225,5,63,0,0,1225,1226,3,332,166,0,1226,1227,6,43,-1,0,1227,1229,
  	1,0,0,0,1228,1220,1,0,0,0,1228,1224,1,0,0,0,1229,87,1,0,0,0,1230,1231,
  	5,64,0,0,1231,1235,6,44,-1,0,1232,1233,3,72,36,0,1233,1234,6,44,-1,0,
  	1234,1236,1,0,0,0,1235,1232,1,0,0,0,1236,1237,1,0,0,0,1237,1235,1,0,0,
  	0,1237,1238,1,0,0,0,1238,89,1,0,0,0,1239,1241,7,12,0,0,1240,1239,1,0,
  	0,0,1240,1241,1,0,0,0,1241,1273,1,0,0,0,1242,1257,5,354,0,0,1243,1244,
  	3,34,17,0,1244,1245,6,45,-1,0,1245,1251,5,372,0,0,1246,1247,3,34,17,0,
  	1247,1248,6,45,-1,0,1248,1252,1,0,0,0,1249,1250,7,13,0,0,1250,1252,6,
  	45,-1,0,1251,1246,1,0,0,0,1251,1249,1,0,0,0,1252,1258,1,0,0,0,1253,1254,
  	5,407,0,0,1254,1258,6,45,-1,0,1255,1256,5,399,0,0,1256,1258,6,45,-1,0,
  	1257,1243,1,0,0,0,1257,1253,1,0,0,0,1257,1255,1,0,0,0,1258,1259,1,0,0,
  	0,1259,1274,5,355,0,0,1260,1261,5,350,0,0,1261,1268,3,92,46,0,1262,1264,
  	5,372,0,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,1265,1,0,0,0,1265,
  	1267,3,92,46,0,1266,1263,1,0,0,0,1267,1270,1,0,0,0,1268,1266,1,0,0,0,
  	1268,1269,1,0,0,0,1269,1271,1,0,0,0,1270,1268,1,0,0,0,1271,1272,5,351,
  	0,0,1272,1274,1,0,0,0,1273,1242,1,0,0,0,1273,1260,1,0,0,0,1274,91,1,0,
  	0,0,1275,1276,5,67,0,0,1276,1277,3,34,17,0,1277,1278,6,46,-1,0,1278,1284,
  	1,0,0,0,1279,1280,5,68,0,0,1280,1281,3,34,17,0,1281,1282,6,46,-1,0,1282,
  	1284,1,0,0,0,1283,1275,1,0,0,0,1283,1279,1,0,0,0,1284,93,1,0,0,0,1285,
  	1299,5,59,0,0,1286,1296,5,396,0,0,1287,1289,5,43,0,0,1288,1287,1,0,0,
  	0,1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,1293,3,122,61,0,1291,1292,
  	5,372,0,0,1292,1294,3,90,45,0,1293,1291,1,0,0,0,1293,1294,1,0,0,0,1294,
  	1297,1,0,0,0,1295,1297,3,90,45,0,1296,1288,1,0,0,0,1296,1295,1,0,0,0,
  	1296,1297,1,0,0,0,1297,1298,1,0,0,0,1298,1300,5,398,0,0,1299,1286,1,0,
  	0,0,1299,1300,1,0,0,0,1300,1301,1,0,0,0,1301,1302,5,432,0,0,1302,1305,
  	6,47,-1,0,1303,1304,5,434,0,0,1304,1306,6,47,-1,0,1305,1303,1,0,0,0,1305,
  	1306,1,0,0,0,1306,1308,1,0,0,0,1307,1309,3,48,24,0,1308,1307,1,0,0,0,
  	1308,1309,1,0,0,0,1309,1311,1,0,0,0,1310,1312,3,52,26,0,1311,1310,1,0,
  	0,0,1311,1312,1,0,0,0,1312,1313,1,0,0,0,1313,1314,3,96,48,0,1314,95,1,
  	0,0,0,1315,1316,5,352,0,0,1316,1317,3,98,49,0,1317,1318,5,353,0,0,1318,
  	97,1,0,0,0,1319,1321,3,38,19,0,1320,1319,1,0,0,0,1320,1321,1,0,0,0,1321,
  	1323,1,0,0,0,1322,1324,3,40,20,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,
  	1324,1328,1,0,0,0,1325,1327,3,166,83,0,1326,1325,1,0,0,0,1327,1330,1,
  	0,0,0,1328,1326,1,0,0,0,1328,1329,1,0,0,0,1329,1331,1,0,0,0,1330,1328,
  	1,0,0,0,1331,1335,6,49,-1,0,1332,1334,3,168,84,0,1333,1332,1,0,0,0,1334,
  	1337,1,0,0,0,1335,1333,1,0,0,0,1335,1336,1,0,0,0,1336,1341,1,0,0,0,1337,
  	1335,1,0,0,0,1338,1340,3,62,31,0,1339,1338,1,0,0,0,1340,1343,1,0,0,0,
  	1341,1339,1,0,0,0,1341,1342,1,0,0,0,1342,1346,1,0,0,0,1343,1341,1,0,0,
  	0,1344,1347,3,88,44,0,1345,1347,3,112,56,0,1346,1344,1,0,0,0,1346,1345,
  	1,0,0,0,1346,1347,1,0,0,0,1347,1348,1,0,0,0,1348,1354,6,49,-1,0,1349,
  	1353,3,290,145,0,1350,1353,3,306,153,0,1351,1353,3,312,156,0,1352,1349,
  	1,0,0,0,1352,1350,1,0,0,0,1352,1351,1,0,0,0,1353,1356,1,0,0,0,1354,1352,
  	1,0,0,0,1354,1355,1,0,0,0,1355,99,1,0,0,0,1356,1354,1,0,0,0,1357,1359,
  	3,172,86,0,1358,1357,1,0,0,0,1359,1362,1,0,0,0,1360,1358,1,0,0,0,1360,
  	1361,1,0,0,0,1361,1369,1,0,0,0,1362,1360,1,0,0,0,1363,1365,3,308,154,
  	0,1364,1363,1,0,0,0,1365,1366,1,0,0,0,1366,1364,1,0,0,0,1366,1367,1,0,
  	0,0,1367,1369,1,0,0,0,1368,1360,1,0,0,0,1368,1364,1,0,0,0,1369,101,1,
  	0,0,0,1370,1371,3,22,11,0,1371,1372,6,51,-1,0,1372,1374,1,0,0,0,1373,
  	1370,1,0,0,0,1373,1374,1,0,0,0,1374,1384,1,0,0,0,1375,1376,3,120,60,0,
  	1376,1377,6,51,-1,0,1377,1385,1,0,0,0,1378,1379,3,114,57,0,1379,1380,
  	6,51,-1,0,1380,1385,1,0,0,0,1381,1382,3,104,52,0,1382,1383,6,51,-1,0,
  	1383,1385,1,0,0,0,1384,1375,1,0,0,0,1384,1378,1,0,0,0,1384,1381,1,0,0,
  	0,1385,103,1,0,0,0,1386,1400,5,60,0,0,1387,1397,5,396,0,0,1388,1390,5,
  	43,0,0,1389,1388,1,0,0,0,1389,1390,1,0,0,0,1390,1391,1,0,0,0,1391,1394,
  	3,122,61,0,1392,1393,5,372,0,0,1393,1395,3,90,45,0,1394,1392,1,0,0,0,
  	1394,1395,1,0,0,0,1395,1398,1,0,0,0,1396,1398,3,90,45,0,1397,1389,1,0,
  	0,0,1397,1396,1,0,0,0,1397,1398,1,0,0,0,1398,1399,1,0,0,0,1399,1401,5,
  	398,0,0,1400,1387,1,0,0,0,1400,1401,1,0,0,0,1401,1427,1,0,0,0,1402,1403,
  	5,432,0,0,1403,1428,6,52,-1,0,1404,1405,5,354,0,0,1405,1409,6,52,-1,0,
  	1406,1407,5,356,0,0,1407,1409,6,52,-1,0,1408,1404,1,0,0,0,1408,1406,1,
  	0,0,0,1409,1410,1,0,0,0,1410,1423,6,52,-1,0,1411,1412,5,432,0,0,1412,
  	1418,6,52,-1,0,1413,1414,5,372,0,0,1414,1415,5,432,0,0,1415,1417,6,52,
  	-1,0,1416,1413,1,0,0,0,1417,1420,1,0,0,0,1418,1416,1,0,0,0,1418,1419,
  	1,0,0,0,1419,1424,1,0,0,0,1420,1418,1,0,0,0,1421,1422,5,407,0,0,1422,
  	1424,6,52,-1,0,1423,1411,1,0,0,0,1423,1421,1,0,0,0,1424,1425,1,0,0,0,
  	1425,1426,5,355,0,0,1426,1428,6,52,-1,0,1427,1402,1,0,0,0,1427,1408,1,
  	0,0,0,1428,1431,1,0,0,0,1429,1430,5,434,0,0,1430,1432,6,52,-1,0,1431,
  	1429,1,0,0,0,1431,1432,1,0,0,0,1432,1434,1,0,0,0,1433,1435,3,48,24,0,
  	1434,1433,1,0,0,0,1434,1435,1,0,0,0,1435,1437,1,0,0,0,1436,1438,3,52,
  	26,0,1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,1439,1,0,0,0,1439,1440,
  	3,106,53,0,1440,105,1,0,0,0,1441,1443,5,352,0,0,1442,1444,3,38,19,0,1443,
  	1442,1,0,0,0,1443,1444,1,0,0,0,1444,1446,1,0,0,0,1445,1447,3,40,20,0,
  	1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,1451,1,0,0,0,1448,1450,3,166,
  	83,0,1449,1448,1,0,0,0,1450,1453,1,0,0,0,1451,1449,1,0,0,0,1451,1452,
  	1,0,0,0,1452,1454,1,0,0,0,1453,1451,1,0,0,0,1454,1458,6,53,-1,0,1455,
  	1457,3,168,84,0,1456,1455,1,0,0,0,1457,1460,1,0,0,0,1458,1456,1,0,0,0,
  	1458,1459,1,0,0,0,1459,1464,1,0,0,0,1460,1458,1,0,0,0,1461,1463,3,62,
  	31,0,1462,1461,1,0,0,0,1463,1466,1,0,0,0,1464,1462,1,0,0,0,1464,1465,
  	1,0,0,0,1465,1473,1,0,0,0,1466,1464,1,0,0,0,1467,1474,3,108,54,0,1468,
  	1470,3,110,55,0,1469,1468,1,0,0,0,1470,1471,1,0,0,0,1471,1469,1,0,0,0,
  	1471,1472,1,0,0,0,1472,1474,1,0,0,0,1473,1467,1,0,0,0,1473,1469,1,0,0,
  	0,1473,1474,1,0,0,0,1474,1476,1,0,0,0,1475,1477,3,134,67,0,1476,1475,
  	1,0,0,0,1476,1477,1,0,0,0,1477,1478,1,0,0,0,1478,1484,6,53,-1,0,1479,
  	1483,3,290,145,0,1480,1483,3,306,153,0,1481,1483,3,312,156,0,1482,1479,
  	1,0,0,0,1482,1480,1,0,0,0,1482,1481,1,0,0,0,1483,1486,1,0,0,0,1484,1482,
  	1,0,0,0,1484,1485,1,0,0,0,1485,1487,1,0,0,0,1486,1484,1,0,0,0,1487,1488,
  	5,353,0,0,1488,107,1,0,0,0,1489,1490,7,14,0,0,1490,1492,6,54,-1,0,1491,
  	1493,3,102,51,0,1492,1491,1,0,0,0,1493,1494,1,0,0,0,1494,1492,1,0,0,0,
  	1494,1495,1,0,0,0,1495,109,1,0,0,0,1496,1498,5,71,0,0,1497,1499,5,72,
  	0,0,1498,1497,1,0,0,0,1498,1499,1,0,0,0,1499,1500,1,0,0,0,1500,1503,5,
  	432,0,0,1501,1502,5,434,0,0,1502,1504,6,55,-1,0,1503,1501,1,0,0,0,1503,
  	1504,1,0,0,0,1504,1505,1,0,0,0,1505,1506,5,73,0,0,1506,1508,6,55,-1,0,
  	1507,1509,3,102,51,0,1508,1507,1,0,0,0,1509,1510,1,0,0,0,1510,1508,1,
  	0,0,0,1510,1511,1,0,0,0,1511,111,1,0,0,0,1512,1513,5,74,0,0,1513,1515,
  	6,56,-1,0,1514,1516,3,102,51,0,1515,1514,1,0,0,0,1516,1517,1,0,0,0,1517,
  	1515,1,0,0,0,1517,1518,1,0,0,0,1518,113,1,0,0,0,1519,1528,5,75,0,0,1520,
  	1522,5,396,0,0,1521,1523,5,43,0,0,1522,1521,1,0,0,0,1522,1523,1,0,0,0,
  	1523,1524,1,0,0,0,1524,1525,3,122,61,0,1525,1526,5,398,0,0,1526,1527,
  	6,57,-1,0,1527,1529,1,0,0,0,1528,1520,1,0,0,0,1528,1529,1,0,0,0,1529,
  	1557,1,0,0,0,1530,1531,3,118,59,0,1531,1532,6,57,-1,0,1532,1558,1,0,0,
  	0,1533,1534,5,354,0,0,1534,1538,6,57,-1,0,1535,1536,5,356,0,0,1536,1538,
  	6,57,-1,0,1537,1533,1,0,0,0,1537,1535,1,0,0,0,1538,1539,1,0,0,0,1539,
  	1553,6,57,-1,0,1540,1541,3,118,59,0,1541,1548,6,57,-1,0,1542,1543,5,372,
  	0,0,1543,1544,3,118,59,0,1544,1545,6,57,-1,0,1545,1547,1,0,0,0,1546,1542,
  	1,0,0,0,1547,1550,1,0,0,0,1548,1546,1,0,0,0,1548,1549,1,0,0,0,1549,1554,
  	1,0,0,0,1550,1548,1,0,0,0,1551,1552,5,407,0,0,1552,1554,6,57,-1,0,1553,
  	1540,1,0,0,0,1553,1551,1,0,0,0,1554,1555,1,0,0,0,1555,1556,5,355,0,0,
  	1556,1558,6,57,-1,0,1557,1530,1,0,0,0,1557,1537,1,0,0,0,1557,1558,1,0,
  	0,0,1558,1559,1,0,0,0,1559,1562,6,57,-1,0,1560,1561,5,434,0,0,1561,1563,
  	6,57,-1,0,1562,1560,1,0,0,0,1562,1563,1,0,0,0,1563,1566,1,0,0,0,1564,
  	1567,3,128,64,0,1565,1567,5,374,0,0,1566,1564,1,0,0,0,1566,1565,1,0,0,
  	0,1567,115,1,0,0,0,1568,1569,5,76,0,0,1569,1585,6,58,-1,0,1570,1571,5,
  	77,0,0,1571,1585,6,58,-1,0,1572,1573,5,78,0,0,1573,1585,6,58,-1,0,1574,
  	1575,5,79,0,0,1575,1585,6,58,-1,0,1576,1577,5,80,0,0,1577,1585,6,58,-1,
  	0,1578,1579,5,81,0,0,1579,1585,6,58,-1,0,1580,1581,5,82,0,0,1581,1585,
  	6,58,-1,0,1582,1583,5,83,0,0,1583,1585,6,58,-1,0,1584,1568,1,0,0,0,1584,
  	1570,1,0,0,0,1584,1572,1,0,0,0,1584,1574,1,0,0,0,1584,1576,1,0,0,0,1584,
  	1578,1,0,0,0,1584,1580,1,0,0,0,1584,1582,1,0,0,0,1585,117,1,0,0,0,1586,
  	1587,3,116,58,0,1587,1588,6,59,-1,0,1588,1595,1,0,0,0,1589,1590,5,432,
  	0,0,1590,1595,6,59,-1,0,1591,1592,5,376,0,0,1592,1593,5,432,0,0,1593,
  	1595,6,59,-1,0,1594,1586,1,0,0,0,1594,1589,1,0,0,0,1594,1591,1,0,0,0,
  	1595,119,1,0,0,0,1596,1597,5,77,0,0,1597,1605,6,60,-1,0,1598,1599,5,78,
  	0,0,1599,1605,6,60,-1,0,1600,1601,5,79,0,0,1601,1605,6,60,-1,0,1602,1603,
  	5,80,0,0,1603,1605,6,60,-1,0,1604,1596,1,0,0,0,1604,1598,1,0,0,0,1604,
  	1600,1,0,0,0,1604,1602,1,0,0,0,1605,1606,1,0,0,0,1606,1607,5,352,0,0,
  	1607,1608,3,132,66,0,1608,1609,5,353,0,0,1609,1623,1,0,0,0,1610,1611,
  	5,81,0,0,1611,1612,3,332,166,0,1612,1613,6,60,-1,0,1613,1623,1,0,0,0,
  	1614,1615,5,82,0,0,1615,1616,3,332,166,0,1616,1617,6,60,-1,0,1617,1623,
  	1,0,0,0,1618,1619,5,83,0,0,1619,1620,3,332,166,0,1620,1621,6,60,-1,0,
  	1621,1623,1,0,0,0,1622,1604,1,0,0,0,1622,1610,1,0,0,0,1622,1614,1,0,0,
  	0,1622,1618,1,0,0,0,1623,121,1,0,0,0,1624,1629,3,124,62,0,1625,1626,5,
  	422,0,0,1626,1628,3,124,62,0,1627,1625,1,0,0,0,1628,1631,1,0,0,0,1629,
  	1627,1,0,0,0,1629,1630,1,0,0,0,1630,123,1,0,0,0,1631,1629,1,0,0,0,1632,
  	1633,5,432,0,0,1633,1683,6,62,-1,0,1634,1635,5,84,0,0,1635,1683,6,62,
  	-1,0,1636,1637,5,14,0,0,1637,1683,6,62,-1,0,1638,1639,5,31,0,0,1639,1683,
  	6,62,-1,0,1640,1641,5,85,0,0,1641,1683,6,62,-1,0,1642,1643,5,86,0,0,1643,
  	1683,6,62,-1,0,1644,1645,5,87,0,0,1645,1683,6,62,-1,0,1646,1647,5,88,
  	0,0,1647,1683,6,62,-1,0,1648,1649,5,89,0,0,1649,1683,6,62,-1,0,1650,1651,
  	5,90,0,0,1651,1683,6,62,-1,0,1652,1653,5,91,0,0,1653,1683,6,62,-1,0,1654,
  	1655,5,92,0,0,1655,1683,6,62,-1,0,1656,1657,5,93,0,0,1657,1683,6,62,-1,
  	0,1658,1659,5,94,0,0,1659,1683,6,62,-1,0,1660,1661,5,95,0,0,1661,1683,
  	6,62,-1,0,1662,1663,5,96,0,0,1663,1683,6,62,-1,0,1664,1665,5,97,0,0,1665,
  	1683,6,62,-1,0,1666,1667,5,98,0,0,1667,1683,6,62,-1,0,1668,1669,5,99,
  	0,0,1669,1683,6,62,-1,0,1670,1671,5,100,0,0,1671,1683,6,62,-1,0,1672,
  	1673,5,101,0,0,1673,1683,6,62,-1,0,1674,1675,5,102,0,0,1675,1683,6,62,
  	-1,0,1676,1677,5,103,0,0,1677,1683,6,62,-1,0,1678,1679,5,104,0,0,1679,
  	1683,6,62,-1,0,1680,1681,5,105,0,0,1681,1683,6,62,-1,0,1682,1632,1,0,
  	0,0,1682,1634,1,0,0,0,1682,1636,1,0,0,0,1682,1638,1,0,0,0,1682,1640,1,
  	0,0,0,1682,1642,1,0,0,0,1682,1644,1,0,0,0,1682,1646,1,0,0,0,1682,1648,
  	1,0,0,0,1682,1650,1,0,0,0,1682,1652,1,0,0,0,1682,1654,1,0,0,0,1682,1656,
  	1,0,0,0,1682,1658,1,0,0,0,1682,1660,1,0,0,0,1682,1662,1,0,0,0,1682,1664,
  	1,0,0,0,1682,1666,1,0,0,0,1682,1668,1,0,0,0,1682,1670,1,0,0,0,1682,1672,
  	1,0,0,0,1682,1674,1,0,0,0,1682,1676,1,0,0,0,1682,1678,1,0,0,0,1682,1680,
  	1,0,0,0,1683,125,1,0,0,0,1684,1685,3,32,16,0,1685,1686,6,63,-1,0,1686,
  	127,1,0,0,0,1687,1690,5,352,0,0,1688,1691,3,130,65,0,1689,1691,3,132,
  	66,0,1690,1688,1,0,0,0,1690,1689,1,0,0,0,1691,1692,1,0,0,0,1692,1693,
  	5,353,0,0,1693,129,1,0,0,0,1694,1696,3,168,84,0,1695,1694,1,0,0,0,1696,
  	1699,1,0,0,0,1697,1695,1,0,0,0,1697,1698,1,0,0,0,1698,1703,1,0,0,0,1699,
  	1697,1,0,0,0,1700,1702,3,62,31,0,1701,1700,1,0,0,0,1702,1705,1,0,0,0,
  	1703,1701,1,0,0,0,1703,1704,1,0,0,0,1704,1712,1,0,0,0,1705,1703,1,0,0,
  	0,1706,1713,3,108,54,0,1707,1709,3,110,55,0,1708,1707,1,0,0,0,1709,1710,
  	1,0,0,0,1710,1708,1,0,0,0,1710,1711,1,0,0,0,1711,1713,1,0,0,0,1712,1706,
  	1,0,0,0,1712,1708,1,0,0,0,1712,1713,1,0,0,0,1713,1715,1,0,0,0,1714,1716,
  	3,134,67,0,1715,1714,1,0,0,0,1715,1716,1,0,0,0,1716,1722,1,0,0,0,1717,
  	1721,3,290,145,0,1718,1721,3,306,153,0,1719,1721,3,312,156,0,1720,1717,
  	1,0,0,0,1720,1718,1,0,0,0,1720,1719,1,0,0,0,1721,1724,1,0,0,0,1722,1720,
  	1,0,0,0,1722,1723,1,0,0,0,1723,131,1,0,0,0,1724,1722,1,0,0,0,1725,1729,
  	6,66,-1,0,1726,1727,3,8,4,0,1727,1728,6,66,-1,0,1728,1730,1,0,0,0,1729,
  	1726,1,0,0,0,1729,1730,1,0,0,0,1730,1735,1,0,0,0,1731,1736,3,220,110,
  	0,1732,1736,3,102,51,0,1733,1736,3,136,68,0,1734,1736,3,162,81,0,1735,
  	1731,1,0,0,0,1735,1732,1,0,0,0,1735,1733,1,0,0,0,1735,1734,1,0,0,0,1736,
  	1738,1,0,0,0,1737,1725,1,0,0,0,1738,1741,1,0,0,0,1739,1737,1,0,0,0,1739,
  	1740,1,0,0,0,1740,133,1,0,0,0,1741,1739,1,0,0,0,1742,1751,5,106,0,0,1743,
  	1744,3,26,13,0,1744,1745,6,67,-1,0,1745,1747,1,0,0,0,1746,1743,1,0,0,
  	0,1746,1747,1,0,0,0,1747,1748,1,0,0,0,1748,1750,3,136,68,0,1749,1746,
  	1,0,0,0,1750,1753,1,0,0,0,1751,1749,1,0,0,0,1751,1752,1,0,0,0,1752,135,
  	1,0,0,0,1753,1751,1,0,0,0,1754,1758,5,107,0,0,1755,1756,5,433,0,0,1756,
  	1758,6,68,-1,0,1757,1754,1,0,0,0,1757,1755,1,0,0,0,1758,1759,1,0,0,0,
  	1759,1764,6,68,-1,0,1760,1761,5,396,0,0,1761,1762,3,142,71,0,1762,1763,
  	5,398,0,0,1763,1765,1,0,0,0,1764,1760,1,0,0,0,1764,1765,1,0,0,0,1765,
  	1766,1,0,0,0,1766,1786,3,146,73,0,1767,1768,5,108,0,0,1768,1773,6,68,
  	-1,0,1769,1770,5,396,0,0,1770,1771,3,142,71,0,1771,1772,5,398,0,0,1772,
  	1774,1,0,0,0,1773,1769,1,0,0,0,1773,1774,1,0,0,0,1774,1777,1,0,0,0,1775,
  	1776,5,432,0,0,1776,1778,6,68,-1,0,1777,1775,1,0,0,0,1777,1778,1,0,0,
  	0,1778,1779,1,0,0,0,1779,1782,6,68,-1,0,1780,1781,5,434,0,0,1781,1783,
  	6,68,-1,0,1782,1780,1,0,0,0,1782,1783,1,0,0,0,1783,1784,1,0,0,0,1784,
  	1786,3,146,73,0,1785,1757,1,0,0,0,1785,1767,1,0,0,0,1786,137,1,0,0,0,
  	1787,1788,5,432,0,0,1788,1798,6,69,-1,0,1789,1790,5,109,0,0,1790,1798,
  	6,69,-1,0,1791,1792,5,14,0,0,1792,1798,6,69,-1,0,1793,1794,5,110,0,0,
  	1794,1798,6,69,-1,0,1795,1796,5,92,0,0,1796,1798,6,69,-1,0,1797,1787,
  	1,0,0,0,1797,1789,1,0,0,0,1797,1791,1,0,0,0,1797,1793,1,0,0,0,1797,1795,
  	1,0,0,0,1798,139,1,0,0,0,1799,1800,3,138,69,0,1800,1804,6,70,-1,0,1801,
  	1802,5,422,0,0,1802,1803,5,110,0,0,1803,1805,6,70,-1,0,1804,1801,1,0,
  	0,0,1804,1805,1,0,0,0,1805,141,1,0,0,0,1806,1811,3,144,72,0,1807,1808,
  	5,372,0,0,1808,1810,3,144,72,0,1809,1807,1,0,0,0,1810,1813,1,0,0,0,1811,
  	1809,1,0,0,0,1811,1812,1,0,0,0,1812,143,1,0,0,0,1813,1811,1,0,0,0,1814,
  	1816,5,43,0,0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,1817,1,0,0,0,1817,
  	1818,3,140,70,0,1818,1819,6,72,-1,0,1819,1833,1,0,0,0,1820,1822,5,111,
  	0,0,1821,1820,1,0,0,0,1821,1822,1,0,0,0,1822,1823,1,0,0,0,1823,1824,3,
  	34,17,0,1824,1825,6,72,-1,0,1825,1833,1,0,0,0,1826,1828,5,112,0,0,1827,
  	1826,1,0,0,0,1827,1828,1,0,0,0,1828,1829,1,0,0,0,1829,1830,3,36,18,0,
  	1830,1831,6,72,-1,0,1831,1833,1,0,0,0,1832,1815,1,0,0,0,1832,1821,1,0,
  	0,0,1832,1827,1,0,0,0,1833,145,1,0,0,0,1834,1835,3,148,74,0,1835,1843,
  	6,73,-1,0,1836,1838,5,50,0,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,
  	1839,1,0,0,0,1839,1840,3,158,79,0,1840,1841,6,73,-1,0,1841,1842,5,374,
  	0,0,1842,1844,1,0,0,0,1843,1837,1,0,0,0,1843,1844,1,0,0,0,1844,1855,1,
  	0,0,0,1845,1846,5,50,0,0,1846,1847,3,158,79,0,1847,1852,6,73,-1,0,1848,
  	1849,3,148,74,0,1849,1850,6,73,-1,0,1850,1853,1,0,0,0,1851,1853,5,374,
  	0,0,1852,1848,1,0,0,0,1852,1851,1,0,0,0,1853,1855,1,0,0,0,1854,1834,1,
  	0,0,0,1854,1845,1,0,0,0,1855,147,1,0,0,0,1856,1860,5,352,0,0,1857,1858,
  	3,334,167,0,1858,1859,6,74,-1,0,1859,1861,1,0,0,0,1860,1857,1,0,0,0,1860,
  	1861,1,0,0,0,1861,1862,1,0,0,0,1862,1868,6,74,-1,0,1863,1864,3,330,165,
  	0,1864,1865,6,74,-1,0,1865,1867,1,0,0,0,1866,1863,1,0,0,0,1867,1870,1,
  	0,0,0,1868,1866,1,0,0,0,1868,1869,1,0,0,0,1869,1872,1,0,0,0,1870,1868,
  	1,0,0,0,1871,1873,3,150,75,0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,
  	1875,1,0,0,0,1874,1876,3,152,76,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,
  	1876,1878,1,0,0,0,1877,1879,3,154,77,0,1878,1877,1,0,0,0,1878,1879,1,
  	0,0,0,1879,1881,1,0,0,0,1880,1882,3,156,78,0,1881,1880,1,0,0,0,1881,1882,
  	1,0,0,0,1882,1883,1,0,0,0,1883,1884,5,353,0,0,1884,149,1,0,0,0,1885,1891,
  	5,113,0,0,1886,1887,3,378,189,0,1887,1888,6,75,-1,0,1888,1890,1,0,0,0,
  	1889,1886,1,0,0,0,1890,1893,1,0,0,0,1891,1889,1,0,0,0,1891,1892,1,0,0,
  	0,1892,151,1,0,0,0,1893,1891,1,0,0,0,1894,1908,5,114,0,0,1895,1896,3,
  	388,194,0,1896,1897,6,76,-1,0,1897,1907,1,0,0,0,1898,1899,3,426,213,0,
  	1899,1900,6,76,-1,0,1900,1907,1,0,0,0,1901,1902,5,354,0,0,1902,1903,3,
  	426,213,0,1903,1904,5,355,0,0,1904,1905,6,76,-1,0,1905,1907,1,0,0,0,1906,
  	1895,1,0,0,0,1906,1898,1,0,0,0,1906,1901,1,0,0,0,1907,1910,1,0,0,0,1908,
  	1906,1,0,0,0,1908,1909,1,0,0,0,1909,153,1,0,0,0,1910,1908,1,0,0,0,1911,
  	1925,5,115,0,0,1912,1913,3,390,195,0,1913,1914,6,77,-1,0,1914,1924,1,
  	0,0,0,1915,1916,3,426,213,0,1916,1917,6,77,-1,0,1917,1924,1,0,0,0,1918,
  	1919,5,352,0,0,1919,1920,3,426,213,0,1920,1921,5,353,0,0,1921,1922,6,
  	77,-1,0,1922,1924,1,0,0,0,1923,1912,1,0,0,0,1923,1915,1,0,0,0,1923,1918,
  	1,0,0,0,1924,1927,1,0,0,0,1925,1923,1,0,0,0,1925,1926,1,0,0,0,1926,155,
  	1,0,0,0,1927,1925,1,0,0,0,1928,1934,5,116,0,0,1929,1930,3,330,165,0,1930,
  	1931,6,78,-1,0,1931,1933,1,0,0,0,1932,1929,1,0,0,0,1933,1936,1,0,0,0,
  	1934,1932,1,0,0,0,1934,1935,1,0,0,0,1935,157,1,0,0,0,1936,1934,1,0,0,
  	0,1937,1938,3,160,80,0,1938,1939,6,79,-1,0,1939,1947,1,0,0,0,1940,1941,
  	3,32,16,0,1941,1942,6,79,-1,0,1942,1947,1,0,0,0,1943,1944,5,376,0,0,1944,
  	1945,5,432,0,0,1945,1947,6,79,-1,0,1946,1937,1,0,0,0,1946,1940,1,0,0,
  	0,1946,1943,1,0,0,0,1947,159,1,0,0,0,1948,1949,5,76,0,0,1949,1965,6,80,
  	-1,0,1950,1951,5,77,0,0,1951,1965,6,80,-1,0,1952,1953,5,78,0,0,1953,1965,
  	6,80,-1,0,1954,1955,5,79,0,0,1955,1965,6,80,-1,0,1956,1957,5,80,0,0,1957,
  	1965,6,80,-1,0,1958,1959,5,81,0,0,1959,1965,6,80,-1,0,1960,1961,5,82,
  	0,0,1961,1965,6,80,-1,0,1962,1963,5,83,0,0,1963,1965,6,80,-1,0,1964,1948,
  	1,0,0,0,1964,1950,1,0,0,0,1964,1952,1,0,0,0,1964,1954,1,0,0,0,1964,1956,
  	1,0,0,0,1964,1958,1,0,0,0,1964,1960,1,0,0,0,1964,1962,1,0,0,0,1965,161,
  	1,0,0,0,1966,1967,5,62,0,0,1967,1968,3,332,166,0,1968,1969,6,81,-1,0,
  	1969,2015,1,0,0,0,1970,1971,5,117,0,0,1971,1972,3,332,166,0,1972,1973,
  	6,81,-1,0,1973,2015,1,0,0,0,1974,1975,5,118,0,0,1975,1976,3,332,166,0,
  	1976,1977,6,81,-1,0,1977,2015,1,0,0,0,1978,1979,5,119,0,0,1979,1980,3,
  	332,166,0,1980,1981,6,81,-1,0,1981,2015,1,0,0,0,1982,1983,5,120,0,0,1983,
  	1984,3,332,166,0,1984,1985,6,81,-1,0,1985,2015,1,0,0,0,1986,1987,5,121,
  	0,0,1987,1988,3,332,166,0,1988,1989,6,81,-1,0,1989,2015,1,0,0,0,1990,
  	1991,5,122,0,0,1991,1992,3,332,166,0,1992,1993,6,81,-1,0,1993,2015,1,
  	0,0,0,1994,1995,5,123,0,0,1995,1996,3,332,166,0,1996,1997,6,81,-1,0,1997,
  	2015,1,0,0,0,1998,1999,5,124,0,0,1999,2000,3,332,166,0,2000,2001,6,81,
  	-1,0,2001,2015,1,0,0,0,2002,2003,5,125,0,0,2003,2004,3,332,166,0,2004,
  	2005,6,81,-1,0,2005,2015,1,0,0,0,2006,2007,5,126,0,0,2007,2008,3,332,
  	166,0,2008,2009,6,81,-1,0,2009,2015,1,0,0,0,2010,2011,5,127,0,0,2011,
  	2012,3,332,166,0,2012,2013,6,81,-1,0,2013,2015,1,0,0,0,2014,1966,1,0,
  	0,0,2014,1970,1,0,0,0,2014,1974,1,0,0,0,2014,1978,1,0,0,0,2014,1982,1,
  	0,0,0,2014,1986,1,0,0,0,2014,1990,1,0,0,0,2014,1994,1,0,0,0,2014,1998,
  	1,0,0,0,2014,2002,1,0,0,0,2014,2006,1,0,0,0,2014,2010,1,0,0,0,2015,163,
  	1,0,0,0,2016,2018,3,38,19,0,2017,2019,3,40,20,0,2018,2017,1,0,0,0,2018,
  	2019,1,0,0,0,2019,2021,1,0,0,0,2020,2022,3,166,83,0,2021,2020,1,0,0,0,
  	2021,2022,1,0,0,0,2022,2023,1,0,0,0,2023,2027,6,82,-1,0,2024,2026,3,168,
  	84,0,2025,2024,1,0,0,0,2026,2029,1,0,0,0,2027,2025,1,0,0,0,2027,2028,
  	1,0,0,0,2028,2058,1,0,0,0,2029,2027,1,0,0,0,2030,2032,3,40,20,0,2031,
  	2033,3,166,83,0,2032,2031,1,0,0,0,2032,2033,1,0,0,0,2033,2034,1,0,0,0,
  	2034,2038,6,82,-1,0,2035,2037,3,168,84,0,2036,2035,1,0,0,0,2037,2040,
  	1,0,0,0,2038,2036,1,0,0,0,2038,2039,1,0,0,0,2039,2058,1,0,0,0,2040,2038,
  	1,0,0,0,2041,2042,3,166,83,0,2042,2046,6,82,-1,0,2043,2045,3,168,84,0,
  	2044,2043,1,0,0,0,2045,2048,1,0,0,0,2046,2044,1,0,0,0,2046,2047,1,0,0,
  	0,2047,2058,1,0,0,0,2048,2046,1,0,0,0,2049,2051,6,82,-1,0,2050,2052,3,
  	168,84,0,2051,2050,1,0,0,0,2052,2053,1,0,0,0,2053,2051,1,0,0,0,2053,2054,
  	1,0,0,0,2054,2058,1,0,0,0,2055,2056,6,82,-1,0,2056,2058,3,170,85,0,2057,
  	2016,1,0,0,0,2057,2030,1,0,0,0,2057,2041,1,0,0,0,2057,2049,1,0,0,0,2057,
  	2055,1,0,0,0,2058,165,1,0,0,0,2059,2063,7,15,0,0,2060,2062,3,172,86,0,
  	2061,2060,1,0,0,0,2062,2065,1,0,0,0,2063,2061,1,0,0,0,2063,2064,1,0,0,
  	0,2064,2095,1,0,0,0,2065,2063,1,0,0,0,2066,2070,5,130,0,0,2067,2069,3,
  	172,86,0,2068,2067,1,0,0,0,2069,2072,1,0,0,0,2070,2068,1,0,0,0,2070,2071,
  	1,0,0,0,2071,2095,1,0,0,0,2072,2070,1,0,0,0,2073,2077,5,131,0,0,2074,
  	2076,3,172,86,0,2075,2074,1,0,0,0,2076,2079,1,0,0,0,2077,2075,1,0,0,0,
  	2077,2078,1,0,0,0,2078,2095,1,0,0,0,2079,2077,1,0,0,0,2080,2084,5,132,
  	0,0,2081,2083,3,172,86,0,2082,2081,1,0,0,0,2083,2086,1,0,0,0,2084,2082,
  	1,0,0,0,2084,2085,1,0,0,0,2085,2095,1,0,0,0,2086,2084,1,0,0,0,2087,2091,
  	7,16,0,0,2088,2090,3,172,86,0,2089,2088,1,0,0,0,2090,2093,1,0,0,0,2091,
  	2089,1,0,0,0,2091,2092,1,0,0,0,2092,2095,1,0,0,0,2093,2091,1,0,0,0,2094,
  	2059,1,0,0,0,2094,2066,1,0,0,0,2094,2073,1,0,0,0,2094,2080,1,0,0,0,2094,
  	2087,1,0,0,0,2095,167,1,0,0,0,2096,2100,7,17,0,0,2097,2099,3,172,86,0,
  	2098,2097,1,0,0,0,2099,2102,1,0,0,0,2100,2098,1,0,0,0,2100,2101,1,0,0,
  	0,2101,2125,1,0,0,0,2102,2100,1,0,0,0,2103,2107,5,137,0,0,2104,2106,3,
  	172,86,0,2105,2104,1,0,0,0,2106,2109,1,0,0,0,2107,2105,1,0,0,0,2107,2108,
  	1,0,0,0,2108,2125,1,0,0,0,2109,2107,1,0,0,0,2110,2114,5,138,0,0,2111,
  	2113,3,172,86,0,2112,2111,1,0,0,0,2113,2116,1,0,0,0,2114,2112,1,0,0,0,
  	2114,2115,1,0,0,0,2115,2125,1,0,0,0,2116,2114,1,0,0,0,2117,2121,7,18,
  	0,0,2118,2120,3,172,86,0,2119,2118,1,0,0,0,2120,2123,1,0,0,0,2121,2119,
  	1,0,0,0,2121,2122,1,0,0,0,2122,2125,1,0,0,0,2123,2121,1,0,0,0,2124,2096,
  	1,0,0,0,2124,2103,1,0,0,0,2124,2110,1,0,0,0,2124,2117,1,0,0,0,2125,169,
  	1,0,0,0,2126,2128,3,172,86,0,2127,2126,1,0,0,0,2128,2131,1,0,0,0,2129,
  	2127,1,0,0,0,2129,2130,1,0,0,0,2130,171,1,0,0,0,2131,2129,1,0,0,0,2132,
  	2133,3,8,4,0,2133,2134,6,86,-1,0,2134,2136,1,0,0,0,2135,2132,1,0,0,0,
  	2135,2136,1,0,0,0,2136,2137,1,0,0,0,2137,2138,3,174,87,0,2138,173,1,0,
  	0,0,2139,2151,3,220,110,0,2140,2151,3,184,92,0,2141,2151,3,188,94,0,2142,
  	2151,3,198,99,0,2143,2151,3,210,105,0,2144,2151,3,276,138,0,2145,2151,
  	3,260,130,0,2146,2151,3,272,136,0,2147,2151,3,268,134,0,2148,2151,3,264,
  	132,0,2149,2151,3,216,108,0,2150,2139,1,0,0,0,2150,2140,1,0,0,0,2150,
  	2141,1,0,0,0,2150,2142,1,0,0,0,2150,2143,1,0,0,0,2150,2144,1,0,0,0,2150,
  	2145,1,0,0,0,2150,2146,1,0,0,0,2150,2147,1,0,0,0,2150,2148,1,0,0,0,2150,
  	2149,1,0,0,0,2151,175,1,0,0,0,2152,2153,5,432,0,0,2153,2154,5,371,0,0,
  	2154,2160,6,88,-1,0,2155,2156,5,72,0,0,2156,2160,6,88,-1,0,2157,2158,
  	5,141,0,0,2158,2160,6,88,-1,0,2159,2152,1,0,0,0,2159,2155,1,0,0,0,2159,
  	2157,1,0,0,0,2160,2161,1,0,0,0,2161,2162,3,426,213,0,2162,2163,6,88,-1,
  	0,2163,2168,1,0,0,0,2164,2165,3,426,213,0,2165,2166,6,88,-1,0,2166,2168,
  	1,0,0,0,2167,2159,1,0,0,0,2167,2164,1,0,0,0,2168,177,1,0,0,0,2169,2181,
  	5,350,0,0,2170,2171,3,176,88,0,2171,2178,6,89,-1,0,2172,2173,5,372,0,
  	0,2173,2174,3,176,88,0,2174,2175,6,89,-1,0,2175,2177,1,0,0,0,2176,2172,
  	1,0,0,0,2177,2180,1,0,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,0,2179,2182,
  	1,0,0,0,2180,2178,1,0,0,0,2181,2170,1,0,0,0,2181,2182,1,0,0,0,2182,2183,
  	1,0,0,0,2183,2184,5,351,0,0,2184,179,1,0,0,0,2185,2203,7,8,0,0,2186,2187,
  	5,350,0,0,2187,2188,3,176,88,0,2188,2195,6,90,-1,0,2189,2190,5,372,0,
  	0,2190,2191,3,176,88,0,2191,2192,6,90,-1,0,2192,2194,1,0,0,0,2193,2189,
  	1,0,0,0,2194,2197,1,0,0,0,2195,2193,1,0,0,0,2195,2196,1,0,0,0,2196,2198,
  	1,0,0,0,2197,2195,1,0,0,0,2198,2199,5,351,0,0,2199,2204,1,0,0,0,2200,
  	2201,3,176,88,0,2201,2202,6,90,-1,0,2202,2204,1,0,0,0,2203,2186,1,0,0,
  	0,2203,2200,1,0,0,0,2204,181,1,0,0,0,2205,2217,5,350,0,0,2206,2207,3,
  	176,88,0,2207,2214,6,91,-1,0,2208,2209,5,372,0,0,2209,2210,3,176,88,0,
  	2210,2211,6,91,-1,0,2211,2213,1,0,0,0,2212,2208,1,0,0,0,2213,2216,1,0,
  	0,0,2214,2212,1,0,0,0,2214,2215,1,0,0,0,2215,2218,1,0,0,0,2216,2214,1,
  	0,0,0,2217,2206,1,0,0,0,2217,2218,1,0,0,0,2218,2219,1,0,0,0,2219,2240,
  	5,351,0,0,2220,2238,7,8,0,0,2221,2222,5,350,0,0,2222,2223,3,176,88,0,
  	2223,2230,6,91,-1,0,2224,2225,5,372,0,0,2225,2226,3,176,88,0,2226,2227,
  	6,91,-1,0,2227,2229,1,0,0,0,2228,2224,1,0,0,0,2229,2232,1,0,0,0,2230,
  	2228,1,0,0,0,2230,2231,1,0,0,0,2231,2233,1,0,0,0,2232,2230,1,0,0,0,2233,
  	2234,5,351,0,0,2234,2239,1,0,0,0,2235,2236,3,176,88,0,2236,2237,6,91,
  	-1,0,2237,2239,1,0,0,0,2238,2221,1,0,0,0,2238,2235,1,0,0,0,2239,2241,
  	1,0,0,0,2240,2220,1,0,0,0,2240,2241,1,0,0,0,2241,183,1,0,0,0,2242,2243,
  	5,142,0,0,2243,2244,6,92,-1,0,2244,2245,3,186,93,0,2245,185,1,0,0,0,2246,
  	2247,5,432,0,0,2247,2250,6,93,-1,0,2248,2249,5,434,0,0,2249,2251,6,93,
  	-1,0,2250,2248,1,0,0,0,2250,2251,1,0,0,0,2251,2253,1,0,0,0,2252,2254,
  	3,192,96,0,2253,2252,1,0,0,0,2253,2254,1,0,0,0,2254,2255,1,0,0,0,2255,
  	2314,5,374,0,0,2256,2283,3,14,7,0,2257,2258,5,432,0,0,2258,2261,6,93,
  	-1,0,2259,2260,5,434,0,0,2260,2262,6,93,-1,0,2261,2259,1,0,0,0,2261,2262,
  	1,0,0,0,2262,2264,1,0,0,0,2263,2265,3,192,96,0,2264,2263,1,0,0,0,2264,
  	2265,1,0,0,0,2265,2266,1,0,0,0,2266,2284,5,374,0,0,2267,2278,5,352,0,
  	0,2268,2269,5,432,0,0,2269,2272,6,93,-1,0,2270,2271,5,434,0,0,2271,2273,
  	6,93,-1,0,2272,2270,1,0,0,0,2272,2273,1,0,0,0,2273,2275,1,0,0,0,2274,
  	2276,3,192,96,0,2275,2274,1,0,0,0,2275,2276,1,0,0,0,2276,2277,1,0,0,0,
  	2277,2279,5,374,0,0,2278,2268,1,0,0,0,2279,2280,1,0,0,0,2280,2278,1,0,
  	0,0,2280,2281,1,0,0,0,2281,2282,1,0,0,0,2282,2284,5,353,0,0,2283,2257,
  	1,0,0,0,2283,2267,1,0,0,0,2284,2314,1,0,0,0,2285,2308,5,352,0,0,2286,
  	2287,5,432,0,0,2287,2290,6,93,-1,0,2288,2289,5,434,0,0,2289,2291,6,93,
  	-1,0,2290,2288,1,0,0,0,2290,2291,1,0,0,0,2291,2293,1,0,0,0,2292,2294,
  	3,192,96,0,2293,2292,1,0,0,0,2293,2294,1,0,0,0,2294,2295,1,0,0,0,2295,
  	2309,5,374,0,0,2296,2297,3,14,7,0,2297,2298,5,432,0,0,2298,2301,6,93,
  	-1,0,2299,2300,5,434,0,0,2300,2302,6,93,-1,0,2301,2299,1,0,0,0,2301,2302,
  	1,0,0,0,2302,2304,1,0,0,0,2303,2305,3,192,96,0,2304,2303,1,0,0,0,2304,
  	2305,1,0,0,0,2305,2306,1,0,0,0,2306,2307,5,374,0,0,2307,2309,1,0,0,0,
  	2308,2286,1,0,0,0,2308,2296,1,0,0,0,2309,2310,1,0,0,0,2310,2308,1,0,0,
  	0,2310,2311,1,0,0,0,2311,2312,1,0,0,0,2312,2314,5,353,0,0,2313,2246,1,
  	0,0,0,2313,2256,1,0,0,0,2313,2285,1,0,0,0,2314,187,1,0,0,0,2315,2316,
  	5,143,0,0,2316,2320,6,94,-1,0,2317,2318,5,144,0,0,2318,2320,6,94,-1,0,
  	2319,2315,1,0,0,0,2319,2317,1,0,0,0,2320,2321,1,0,0,0,2321,2322,3,190,
  	95,0,2322,189,1,0,0,0,2323,2324,5,432,0,0,2324,2327,6,95,-1,0,2325,2326,
  	5,434,0,0,2326,2328,6,95,-1,0,2327,2325,1,0,0,0,2327,2328,1,0,0,0,2328,
  	2330,1,0,0,0,2329,2331,3,192,96,0,2330,2329,1,0,0,0,2330,2331,1,0,0,0,
  	2331,2332,1,0,0,0,2332,2391,5,374,0,0,2333,2360,3,14,7,0,2334,2335,5,
  	432,0,0,2335,2338,6,95,-1,0,2336,2337,5,434,0,0,2337,2339,6,95,-1,0,2338,
  	2336,1,0,0,0,2338,2339,1,0,0,0,2339,2341,1,0,0,0,2340,2342,3,192,96,0,
  	2341,2340,1,0,0,0,2341,2342,1,0,0,0,2342,2343,1,0,0,0,2343,2361,5,374,
  	0,0,2344,2355,5,352,0,0,2345,2346,5,432,0,0,2346,2349,6,95,-1,0,2347,
  	2348,5,434,0,0,2348,2350,6,95,-1,0,2349,2347,1,0,0,0,2349,2350,1,0,0,
  	0,2350,2352,1,0,0,0,2351,2353,3,192,96,0,2352,2351,1,0,0,0,2352,2353,
  	1,0,0,0,2353,2354,1,0,0,0,2354,2356,5,374,0,0,2355,2345,1,0,0,0,2356,
  	2357,1,0,0,0,2357,2355,1,0,0,0,2357,2358,1,0,0,0,2358,2359,1,0,0,0,2359,
  	2361,5,353,0,0,2360,2334,1,0,0,0,2360,2344,1,0,0,0,2361,2391,1,0,0,0,
  	2362,2385,5,352,0,0,2363,2364,5,432,0,0,2364,2367,6,95,-1,0,2365,2366,
  	5,434,0,0,2366,2368,6,95,-1,0,2367,2365,1,0,0,0,2367,2368,1,0,0,0,2368,
  	2370,1,0,0,0,2369,2371,3,192,96,0,2370,2369,1,0,0,0,2370,2371,1,0,0,0,
  	2371,2372,1,0,0,0,2372,2386,5,374,0,0,2373,2374,3,14,7,0,2374,2375,5,
  	432,0,0,2375,2378,6,95,-1,0,2376,2377,5,434,0,0,2377,2379,6,95,-1,0,2378,
  	2376,1,0,0,0,2378,2379,1,0,0,0,2379,2381,1,0,0,0,2380,2382,3,192,96,0,
  	2381,2380,1,0,0,0,2381,2382,1,0,0,0,2382,2383,1,0,0,0,2383,2384,5,374,
  	0,0,2384,2386,1,0,0,0,2385,2363,1,0,0,0,2385,2373,1,0,0,0,2386,2387,1,
  	0,0,0,2387,2385,1,0,0,0,2387,2388,1,0,0,0,2388,2389,1,0,0,0,2389,2391,
  	5,353,0,0,2390,2323,1,0,0,0,2390,2333,1,0,0,0,2390,2362,1,0,0,0,2391,
  	191,1,0,0,0,2392,2393,5,350,0,0,2393,2398,3,196,98,0,2394,2395,5,372,
  	0,0,2395,2397,3,196,98,0,2396,2394,1,0,0,0,2397,2400,1,0,0,0,2398,2396,
  	1,0,0,0,2398,2399,1,0,0,0,2399,2401,1,0,0,0,2400,2398,1,0,0,0,2401,2402,
  	5,351,0,0,2402,193,1,0,0,0,2403,2404,5,350,0,0,2404,2409,3,196,98,0,2405,
  	2406,5,372,0,0,2406,2408,3,196,98,0,2407,2405,1,0,0,0,2408,2411,1,0,0,
  	0,2409,2407,1,0,0,0,2409,2410,1,0,0,0,2410,2412,1,0,0,0,2411,2409,1,0,
  	0,0,2412,2413,5,351,0,0,2413,2416,1,0,0,0,2414,2416,3,196,98,0,2415,2403,
  	1,0,0,0,2415,2414,1,0,0,0,2416,195,1,0,0,0,2417,2418,3,232,116,0,2418,
  	2426,6,98,-1,0,2419,2420,5,432,0,0,2420,2424,6,98,-1,0,2421,2422,3,230,
  	115,0,2422,2423,6,98,-1,0,2423,2425,1,0,0,0,2424,2421,1,0,0,0,2424,2425,
  	1,0,0,0,2425,2427,1,0,0,0,2426,2419,1,0,0,0,2426,2427,1,0,0,0,2427,2428,
  	1,0,0,0,2428,2429,6,98,-1,0,2429,2445,1,0,0,0,2430,2440,5,49,0,0,2431,
  	2432,3,232,116,0,2432,2433,5,371,0,0,2433,2434,6,98,-1,0,2434,2435,3,
  	426,213,0,2435,2436,6,98,-1,0,2436,2441,1,0,0,0,2437,2438,3,32,16,0,2438,
  	2439,6,98,-1,0,2439,2441,1,0,0,0,2440,2431,1,0,0,0,2440,2437,1,0,0,0,
  	2441,2442,1,0,0,0,2442,2443,6,98,-1,0,2443,2445,1,0,0,0,2444,2417,1,0,
  	0,0,2444,2430,1,0,0,0,2445,197,1,0,0,0,2446,2447,5,145,0,0,2447,2448,
  	3,200,100,0,2448,199,1,0,0,0,2449,2450,3,202,101,0,2450,2451,5,432,0,
  	0,2451,2453,6,100,-1,0,2452,2454,3,208,104,0,2453,2452,1,0,0,0,2453,2454,
  	1,0,0,0,2454,2455,1,0,0,0,2455,2456,5,374,0,0,2456,2469,1,0,0,0,2457,
  	2462,5,352,0,0,2458,2459,3,202,101,0,2459,2460,5,432,0,0,2460,2461,6,
  	100,-1,0,2461,2463,1,0,0,0,2462,2458,1,0,0,0,2463,2464,1,0,0,0,2464,2462,
  	1,0,0,0,2464,2465,1,0,0,0,2465,2466,1,0,0,0,2466,2467,5,353,0,0,2467,
  	2469,1,0,0,0,2468,2449,1,0,0,0,2468,2457,1,0,0,0,2469,201,1,0,0,0,2470,
  	2471,3,204,102,0,2471,2496,6,101,-1,0,2472,2474,5,396,0,0,2473,2475,5,
  	141,0,0,2474,2473,1,0,0,0,2474,2475,1,0,0,0,2475,2481,1,0,0,0,2476,2477,
  	3,34,17,0,2477,2478,6,101,-1,0,2478,2482,1,0,0,0,2479,2480,5,407,0,0,
  	2480,2482,6,101,-1,0,2481,2476,1,0,0,0,2481,2479,1,0,0,0,2482,2483,1,
  	0,0,0,2483,2497,5,398,0,0,2484,2486,5,354,0,0,2485,2487,5,141,0,0,2486,
  	2485,1,0,0,0,2486,2487,1,0,0,0,2487,2493,1,0,0,0,2488,2489,3,34,17,0,
  	2489,2490,6,101,-1,0,2490,2494,1,0,0,0,2491,2492,5,407,0,0,2492,2494,
  	6,101,-1,0,2493,2488,1,0,0,0,2493,2491,1,0,0,0,2494,2495,1,0,0,0,2495,
  	2497,5,355,0,0,2496,2472,1,0,0,0,2496,2484,1,0,0,0,2496,2497,1,0,0,0,
  	2497,2501,1,0,0,0,2498,2499,5,146,0,0,2499,2501,6,101,-1,0,2500,2470,
  	1,0,0,0,2500,2498,1,0,0,0,2501,203,1,0,0,0,2502,2503,5,147,0,0,2503,2521,
  	6,102,-1,0,2504,2505,5,148,0,0,2505,2521,6,102,-1,0,2506,2507,5,149,0,
  	0,2507,2521,6,102,-1,0,2508,2509,5,150,0,0,2509,2521,6,102,-1,0,2510,
  	2511,5,151,0,0,2511,2521,6,102,-1,0,2512,2513,5,152,0,0,2513,2521,6,102,
  	-1,0,2514,2515,5,153,0,0,2515,2521,6,102,-1,0,2516,2517,5,154,0,0,2517,
  	2521,6,102,-1,0,2518,2519,5,155,0,0,2519,2521,6,102,-1,0,2520,2502,1,
  	0,0,0,2520,2504,1,0,0,0,2520,2506,1,0,0,0,2520,2508,1,0,0,0,2520,2510,
  	1,0,0,0,2520,2512,1,0,0,0,2520,2514,1,0,0,0,2520,2516,1,0,0,0,2520,2518,
  	1,0,0,0,2521,205,1,0,0,0,2522,2523,3,32,16,0,2523,2524,6,103,-1,0,2524,
  	207,1,0,0,0,2525,2526,5,342,0,0,2526,2527,5,354,0,0,2527,2528,3,32,16,
  	0,2528,2533,6,104,-1,0,2529,2530,5,372,0,0,2530,2532,3,32,16,0,2531,2529,
  	1,0,0,0,2532,2535,1,0,0,0,2533,2531,1,0,0,0,2533,2534,1,0,0,0,2534,2536,
  	1,0,0,0,2535,2533,1,0,0,0,2536,2537,5,355,0,0,2537,209,1,0,0,0,2538,2539,
  	5,156,0,0,2539,2540,3,212,106,0,2540,211,1,0,0,0,2541,2542,5,396,0,0,
  	2542,2545,3,314,157,0,2543,2544,5,372,0,0,2544,2546,3,316,158,0,2545,
  	2543,1,0,0,0,2545,2546,1,0,0,0,2546,2547,1,0,0,0,2547,2548,5,398,0,0,
  	2548,2550,1,0,0,0,2549,2541,1,0,0,0,2549,2550,1,0,0,0,2550,2552,1,0,0,
  	0,2551,2553,3,14,7,0,2552,2551,1,0,0,0,2552,2553,1,0,0,0,2553,2554,1,
  	0,0,0,2554,2555,5,432,0,0,2555,2556,6,106,-1,0,2556,2564,5,352,0,0,2557,
  	2558,3,10,5,0,2558,2559,3,32,16,0,2559,2560,5,374,0,0,2560,2561,6,106,
  	-1,0,2561,2565,1,0,0,0,2562,2565,3,184,92,0,2563,2565,3,188,94,0,2564,
  	2557,1,0,0,0,2564,2562,1,0,0,0,2564,2563,1,0,0,0,2565,2566,1,0,0,0,2566,
  	2564,1,0,0,0,2566,2567,1,0,0,0,2567,2568,1,0,0,0,2568,2569,5,353,0,0,
  	2569,213,1,0,0,0,2570,2571,3,232,116,0,2571,2572,5,432,0,0,2572,2576,
  	6,107,-1,0,2573,2574,3,230,115,0,2574,2575,6,107,-1,0,2575,2577,1,0,0,
  	0,2576,2573,1,0,0,0,2576,2577,1,0,0,0,2577,2580,1,0,0,0,2578,2581,5,374,
  	0,0,2579,2581,3,254,127,0,2580,2578,1,0,0,0,2580,2579,1,0,0,0,2581,2602,
  	1,0,0,0,2582,2595,5,352,0,0,2583,2584,3,232,116,0,2584,2585,5,432,0,0,
  	2585,2589,6,107,-1,0,2586,2587,3,230,115,0,2587,2588,6,107,-1,0,2588,
  	2590,1,0,0,0,2589,2586,1,0,0,0,2589,2590,1,0,0,0,2590,2593,1,0,0,0,2591,
  	2594,5,374,0,0,2592,2594,3,254,127,0,2593,2591,1,0,0,0,2593,2592,1,0,
  	0,0,2594,2596,1,0,0,0,2595,2583,1,0,0,0,2596,2597,1,0,0,0,2597,2595,1,
  	0,0,0,2597,2598,1,0,0,0,2598,2599,1,0,0,0,2599,2600,5,353,0,0,2600,2602,
  	1,0,0,0,2601,2570,1,0,0,0,2601,2582,1,0,0,0,2602,215,1,0,0,0,2603,2604,
  	5,157,0,0,2604,2605,3,218,109,0,2605,217,1,0,0,0,2606,2607,5,432,0,0,
  	2607,2609,6,109,-1,0,2608,2610,3,192,96,0,2609,2608,1,0,0,0,2609,2610,
  	1,0,0,0,2610,2611,1,0,0,0,2611,2612,5,24,0,0,2612,2613,3,194,97,0,2613,
  	2614,5,374,0,0,2614,219,1,0,0,0,2615,2616,5,158,0,0,2616,2631,6,110,-1,
  	0,2617,2618,5,159,0,0,2618,2631,6,110,-1,0,2619,2620,5,32,0,0,2620,2624,
  	6,110,-1,0,2621,2622,5,33,0,0,2622,2624,6,110,-1,0,2623,2619,1,0,0,0,
  	2623,2621,1,0,0,0,2624,2625,1,0,0,0,2625,2623,1,0,0,0,2625,2626,1,0,0,
  	0,2626,2628,1,0,0,0,2627,2629,5,158,0,0,2628,2627,1,0,0,0,2628,2629,1,
  	0,0,0,2629,2631,1,0,0,0,2630,2615,1,0,0,0,2630,2617,1,0,0,0,2630,2623,
  	1,0,0,0,2631,2632,1,0,0,0,2632,2635,3,224,112,0,2633,2635,3,222,111,0,
  	2634,2630,1,0,0,0,2634,2633,1,0,0,0,2635,221,1,0,0,0,2636,2637,3,286,
  	143,0,2637,2638,3,228,114,0,2638,223,1,0,0,0,2639,2649,3,226,113,0,2640,
  	2642,5,352,0,0,2641,2643,3,226,113,0,2642,2641,1,0,0,0,2643,2644,1,0,
  	0,0,2644,2642,1,0,0,0,2644,2645,1,0,0,0,2645,2646,1,0,0,0,2646,2647,5,
  	353,0,0,2647,2649,1,0,0,0,2648,2639,1,0,0,0,2648,2640,1,0,0,0,2649,225,
  	1,0,0,0,2650,2653,3,232,116,0,2651,2652,5,422,0,0,2652,2654,6,113,-1,
  	0,2653,2651,1,0,0,0,2653,2654,1,0,0,0,2654,2655,1,0,0,0,2655,2656,3,228,
  	114,0,2656,227,1,0,0,0,2657,2658,5,432,0,0,2658,2661,6,114,-1,0,2659,
  	2660,5,434,0,0,2660,2662,6,114,-1,0,2661,2659,1,0,0,0,2661,2662,1,0,0,
  	0,2662,2666,1,0,0,0,2663,2664,3,230,115,0,2664,2665,6,114,-1,0,2665,2667,
  	1,0,0,0,2666,2663,1,0,0,0,2666,2667,1,0,0,0,2667,2670,1,0,0,0,2668,2671,
  	5,374,0,0,2669,2671,3,254,127,0,2670,2668,1,0,0,0,2670,2669,1,0,0,0,2671,
  	229,1,0,0,0,2672,2673,5,342,0,0,2673,2674,3,426,213,0,2674,2675,6,115,
  	-1,0,2675,2682,1,0,0,0,2676,2677,5,350,0,0,2677,2678,3,426,213,0,2678,
  	2679,5,351,0,0,2679,2680,6,115,-1,0,2680,2682,1,0,0,0,2681,2672,1,0,0,
  	0,2681,2676,1,0,0,0,2682,231,1,0,0,0,2683,2684,3,244,122,0,2684,2688,
  	6,116,-1,0,2685,2686,3,234,117,0,2686,2687,6,116,-1,0,2687,2689,1,0,0,
  	0,2688,2685,1,0,0,0,2688,2689,1,0,0,0,2689,2697,1,0,0,0,2690,2691,3,238,
  	119,0,2691,2692,6,116,-1,0,2692,2697,1,0,0,0,2693,2694,3,242,121,0,2694,
  	2695,6,116,-1,0,2695,2697,1,0,0,0,2696,2683,1,0,0,0,2696,2690,1,0,0,0,
  	2696,2693,1,0,0,0,2697,233,1,0,0,0,2698,2699,3,236,118,0,2699,2700,6,
  	117,-1,0,2700,2702,1,0,0,0,2701,2698,1,0,0,0,2702,2703,1,0,0,0,2703,2701,
  	1,0,0,0,2703,2704,1,0,0,0,2704,2705,1,0,0,0,2705,2706,6,117,-1,0,2706,
  	235,1,0,0,0,2707,2713,5,354,0,0,2708,2709,5,438,0,0,2709,2714,6,118,-1,
  	0,2710,2711,3,32,16,0,2711,2712,6,118,-1,0,2712,2714,1,0,0,0,2713,2708,
  	1,0,0,0,2713,2710,1,0,0,0,2714,2715,1,0,0,0,2715,2716,5,355,0,0,2716,
  	237,1,0,0,0,2717,2744,3,240,120,0,2718,2740,5,396,0,0,2719,2720,3,244,
  	122,0,2720,2732,6,119,-1,0,2721,2723,5,372,0,0,2722,2724,5,141,0,0,2723,
  	2722,1,0,0,0,2723,2724,1,0,0,0,2724,2730,1,0,0,0,2725,2726,3,34,17,0,
  	2726,2727,6,119,-1,0,2727,2731,1,0,0,0,2728,2729,5,407,0,0,2729,2731,
  	6,119,-1,0,2730,2725,1,0,0,0,2730,2728,1,0,0,0,2731,2733,1,0,0,0,2732,
  	2721,1,0,0,0,2732,2733,1,0,0,0,2733,2741,1,0,0,0,2734,2736,5,141,0,0,
  	2735,2734,1,0,0,0,2735,2736,1,0,0,0,2736,2737,1,0,0,0,2737,2738,3,34,
  	17,0,2738,2739,6,119,-1,0,2739,2741,1,0,0,0,2740,2719,1,0,0,0,2740,2735,
  	1,0,0,0,2741,2742,1,0,0,0,2742,2743,5,398,0,0,2743,2745,1,0,0,0,2744,
  	2718,1,0,0,0,2744,2745,1,0,0,0,2745,2746,1,0,0,0,2746,2747,6,119,-1,0,
  	2747,239,1,0,0,0,2748,2749,5,160,0,0,2749,2771,6,120,-1,0,2750,2751,5,
  	154,0,0,2751,2771,6,120,-1,0,2752,2753,5,155,0,0,2753,2771,6,120,-1,0,
  	2754,2755,5,161,0,0,2755,2771,6,120,-1,0,2756,2757,5,147,0,0,2757,2771,
  	6,120,-1,0,2758,2759,5,148,0,0,2759,2771,6,120,-1,0,2760,2761,5,149,0,
  	0,2761,2771,6,120,-1,0,2762,2763,5,150,0,0,2763,2771,6,120,-1,0,2764,
  	2765,5,151,0,0,2765,2771,6,120,-1,0,2766,2767,5,152,0,0,2767,2771,6,120,
  	-1,0,2768,2769,5,153,0,0,2769,2771,6,120,-1,0,2770,2748,1,0,0,0,2770,
  	2750,1,0,0,0,2770,2752,1,0,0,0,2770,2754,1,0,0,0,2770,2756,1,0,0,0,2770,
  	2758,1,0,0,0,2770,2760,1,0,0,0,2770,2762,1,0,0,0,2770,2764,1,0,0,0,2770,
  	2766,1,0,0,0,2770,2768,1,0,0,0,2771,241,1,0,0,0,2772,2773,5,162,0,0,2773,
  	2774,6,121,-1,0,2774,2778,5,396,0,0,2775,2776,3,246,123,0,2776,2777,6,
  	121,-1,0,2777,2779,1,0,0,0,2778,2775,1,0,0,0,2778,2779,1,0,0,0,2779,2783,
  	1,0,0,0,2780,2784,5,354,0,0,2781,2784,5,355,0,0,2782,2784,5,350,0,0,2783,
  	2780,1,0,0,0,2783,2781,1,0,0,0,2783,2782,1,0,0,0,2784,2785,1,0,0,0,2785,
  	2786,3,426,213,0,2786,2787,5,372,0,0,2787,2791,3,426,213,0,2788,2792,
  	5,354,0,0,2789,2792,5,355,0,0,2790,2792,5,351,0,0,2791,2788,1,0,0,0,2791,
  	2789,1,0,0,0,2791,2790,1,0,0,0,2792,2793,1,0,0,0,2793,2794,5,398,0,0,
  	2794,2795,6,121,-1,0,2795,243,1,0,0,0,2796,2797,3,246,123,0,2797,2798,
  	6,122,-1,0,2798,2803,1,0,0,0,2799,2800,3,32,16,0,2800,2801,6,122,-1,0,
  	2801,2803,1,0,0,0,2802,2796,1,0,0,0,2802,2799,1,0,0,0,2803,245,1,0,0,
  	0,2804,2805,7,19,0,0,2805,2905,6,123,-1,0,2806,2807,7,20,0,0,2807,2811,
  	6,123,-1,0,2808,2809,3,248,124,0,2809,2810,6,123,-1,0,2810,2812,1,0,0,
  	0,2811,2808,1,0,0,0,2811,2812,1,0,0,0,2812,2905,1,0,0,0,2813,2814,7,21,
  	0,0,2814,2818,6,123,-1,0,2815,2816,3,248,124,0,2816,2817,6,123,-1,0,2817,
  	2819,1,0,0,0,2818,2815,1,0,0,0,2818,2819,1,0,0,0,2819,2905,1,0,0,0,2820,
  	2821,7,22,0,0,2821,2825,6,123,-1,0,2822,2823,3,248,124,0,2823,2824,6,
  	123,-1,0,2824,2826,1,0,0,0,2825,2822,1,0,0,0,2825,2826,1,0,0,0,2826,2905,
  	1,0,0,0,2827,2828,7,23,0,0,2828,2846,6,123,-1,0,2829,2830,7,24,0,0,2830,
  	2846,6,123,-1,0,2831,2832,7,25,0,0,2832,2846,6,123,-1,0,2833,2834,5,177,
  	0,0,2834,2846,6,123,-1,0,2835,2836,5,178,0,0,2836,2846,6,123,-1,0,2837,
  	2838,5,179,0,0,2838,2846,6,123,-1,0,2839,2840,5,180,0,0,2840,2846,6,123,
  	-1,0,2841,2842,5,181,0,0,2842,2846,6,123,-1,0,2843,2844,5,182,0,0,2844,
  	2846,6,123,-1,0,2845,2827,1,0,0,0,2845,2829,1,0,0,0,2845,2831,1,0,0,0,
  	2845,2833,1,0,0,0,2845,2835,1,0,0,0,2845,2837,1,0,0,0,2845,2839,1,0,0,
  	0,2845,2841,1,0,0,0,2845,2843,1,0,0,0,2846,2850,1,0,0,0,2847,2848,3,248,
  	124,0,2848,2849,6,123,-1,0,2849,2851,1,0,0,0,2850,2847,1,0,0,0,2850,2851,
  	1,0,0,0,2851,2905,1,0,0,0,2852,2853,3,286,143,0,2853,2854,6,123,-1,0,
  	2854,2905,1,0,0,0,2855,2856,3,284,142,0,2856,2857,6,123,-1,0,2857,2905,
  	1,0,0,0,2858,2859,5,183,0,0,2859,2863,6,123,-1,0,2860,2861,3,248,124,
  	0,2861,2862,6,123,-1,0,2862,2864,1,0,0,0,2863,2860,1,0,0,0,2863,2864,
  	1,0,0,0,2864,2905,1,0,0,0,2865,2866,5,184,0,0,2866,2870,6,123,-1,0,2867,
  	2868,3,248,124,0,2868,2869,6,123,-1,0,2869,2871,1,0,0,0,2870,2867,1,0,
  	0,0,2870,2871,1,0,0,0,2871,2905,1,0,0,0,2872,2873,5,185,0,0,2873,2877,
  	6,123,-1,0,2874,2875,3,250,125,0,2875,2876,6,123,-1,0,2876,2878,1,0,0,
  	0,2877,2874,1,0,0,0,2877,2878,1,0,0,0,2878,2905,1,0,0,0,2879,2880,5,186,
  	0,0,2880,2905,6,123,-1,0,2881,2882,5,187,0,0,2882,2905,6,123,-1,0,2883,
  	2884,5,142,0,0,2884,2905,6,123,-1,0,2885,2886,5,145,0,0,2886,2905,6,123,
  	-1,0,2887,2888,5,144,0,0,2888,2905,6,123,-1,0,2889,2890,5,143,0,0,2890,
  	2905,6,123,-1,0,2891,2892,5,188,0,0,2892,2905,6,123,-1,0,2893,2894,5,
  	59,0,0,2894,2900,6,123,-1,0,2895,2896,5,396,0,0,2896,2897,3,32,16,0,2897,
  	2898,5,398,0,0,2898,2899,6,123,-1,0,2899,2901,1,0,0,0,2900,2895,1,0,0,
  	0,2900,2901,1,0,0,0,2901,2905,1,0,0,0,2902,2903,5,189,0,0,2903,2905,6,
  	123,-1,0,2904,2804,1,0,0,0,2904,2806,1,0,0,0,2904,2813,1,0,0,0,2904,2820,
  	1,0,0,0,2904,2845,1,0,0,0,2904,2852,1,0,0,0,2904,2855,1,0,0,0,2904,2858,
  	1,0,0,0,2904,2865,1,0,0,0,2904,2872,1,0,0,0,2904,2879,1,0,0,0,2904,2881,
  	1,0,0,0,2904,2883,1,0,0,0,2904,2885,1,0,0,0,2904,2887,1,0,0,0,2904,2889,
  	1,0,0,0,2904,2891,1,0,0,0,2904,2893,1,0,0,0,2904,2902,1,0,0,0,2905,247,
  	1,0,0,0,2906,2907,5,371,0,0,2907,2908,3,34,17,0,2908,2909,6,124,-1,0,
  	2909,2919,1,0,0,0,2910,2912,5,396,0,0,2911,2913,5,141,0,0,2912,2911,1,
  	0,0,0,2912,2913,1,0,0,0,2913,2914,1,0,0,0,2914,2915,3,34,17,0,2915,2916,
  	5,398,0,0,2916,2917,6,124,-1,0,2917,2919,1,0,0,0,2918,2906,1,0,0,0,2918,
  	2910,1,0,0,0,2919,249,1,0,0,0,2920,2921,5,371,0,0,2921,2922,3,252,126,
  	0,2922,2923,6,125,-1,0,2923,2933,1,0,0,0,2924,2926,5,396,0,0,2925,2927,
  	5,141,0,0,2926,2925,1,0,0,0,2926,2927,1,0,0,0,2927,2928,1,0,0,0,2928,
  	2929,3,252,126,0,2929,2930,5,398,0,0,2930,2931,6,125,-1,0,2931,2933,1,
  	0,0,0,2932,2920,1,0,0,0,2932,2924,1,0,0,0,2933,251,1,0,0,0,2934,2935,
  	3,34,17,0,2935,2940,6,126,-1,0,2936,2937,7,26,0,0,2937,2938,3,34,17,0,
  	2938,2939,6,126,-1,0,2939,2941,1,0,0,0,2940,2936,1,0,0,0,2940,2941,1,
  	0,0,0,2941,253,1,0,0,0,2942,2944,5,352,0,0,2943,2945,3,256,128,0,2944,
  	2943,1,0,0,0,2945,2946,1,0,0,0,2946,2944,1,0,0,0,2946,2947,1,0,0,0,2947,
  	2948,1,0,0,0,2948,2949,5,353,0,0,2949,255,1,0,0,0,2950,2951,7,27,0,0,
  	2951,2953,6,128,-1,0,2952,2954,3,258,129,0,2953,2952,1,0,0,0,2953,2954,
  	1,0,0,0,2954,2963,1,0,0,0,2955,2956,3,332,166,0,2956,2957,6,128,-1,0,
  	2957,2964,1,0,0,0,2958,2959,5,192,0,0,2959,2960,3,428,214,0,2960,2961,
  	5,374,0,0,2961,2962,6,128,-1,0,2962,2964,1,0,0,0,2963,2955,1,0,0,0,2963,
  	2958,1,0,0,0,2964,257,1,0,0,0,2965,2971,5,350,0,0,2966,2967,3,232,116,
  	0,2967,2968,6,129,-1,0,2968,2969,5,432,0,0,2969,2972,1,0,0,0,2970,2972,
  	5,432,0,0,2971,2966,1,0,0,0,2971,2970,1,0,0,0,2972,2976,1,0,0,0,2973,
  	2974,3,230,115,0,2974,2975,6,129,-1,0,2975,2977,1,0,0,0,2976,2973,1,0,
  	0,0,2976,2977,1,0,0,0,2977,2978,1,0,0,0,2978,2979,6,129,-1,0,2979,2980,
  	5,351,0,0,2980,259,1,0,0,0,2981,2982,5,193,0,0,2982,2983,5,432,0,0,2983,
  	2984,3,262,131,0,2984,261,1,0,0,0,2985,2986,5,352,0,0,2986,2987,5,432,
  	0,0,2987,2990,6,131,-1,0,2988,2989,5,434,0,0,2989,2991,6,131,-1,0,2990,
  	2988,1,0,0,0,2990,2991,1,0,0,0,2991,2996,1,0,0,0,2992,2993,5,342,0,0,
  	2993,2994,3,426,213,0,2994,2995,6,131,-1,0,2995,2997,1,0,0,0,2996,2992,
  	1,0,0,0,2996,2997,1,0,0,0,2997,3013,1,0,0,0,2998,2999,5,372,0,0,2999,
  	3000,5,432,0,0,3000,3003,6,131,-1,0,3001,3002,5,434,0,0,3002,3004,6,131,
  	-1,0,3003,3001,1,0,0,0,3003,3004,1,0,0,0,3004,3009,1,0,0,0,3005,3006,
  	5,342,0,0,3006,3007,3,426,213,0,3007,3008,6,131,-1,0,3008,3010,1,0,0,
  	0,3009,3005,1,0,0,0,3009,3010,1,0,0,0,3010,3012,1,0,0,0,3011,2998,1,0,
  	0,0,3012,3015,1,0,0,0,3013,3011,1,0,0,0,3013,3014,1,0,0,0,3014,3016,1,
  	0,0,0,3015,3013,1,0,0,0,3016,3037,5,353,0,0,3017,3019,5,396,0,0,3018,
  	3020,5,194,0,0,3019,3018,1,0,0,0,3019,3020,1,0,0,0,3020,3021,1,0,0,0,
  	3021,3022,5,432,0,0,3022,3023,6,131,-1,0,3023,3024,5,398,0,0,3024,3025,
  	5,352,0,0,3025,3026,5,432,0,0,3026,3032,6,131,-1,0,3027,3028,5,372,0,
  	0,3028,3029,5,432,0,0,3029,3031,6,131,-1,0,3030,3027,1,0,0,0,3031,3034,
  	1,0,0,0,3032,3030,1,0,0,0,3032,3033,1,0,0,0,3033,3035,1,0,0,0,3034,3032,
  	1,0,0,0,3035,3037,5,353,0,0,3036,2985,1,0,0,0,3036,3017,1,0,0,0,3037,
  	263,1,0,0,0,3038,3039,7,28,0,0,3039,3040,5,432,0,0,3040,3041,3,266,133,
  	0,3041,265,1,0,0,0,3042,3050,5,352,0,0,3043,3047,6,133,-1,0,3044,3045,
  	3,8,4,0,3045,3046,6,133,-1,0,3046,3048,1,0,0,0,3047,3044,1,0,0,0,3047,
  	3048,1,0,0,0,3048,3049,1,0,0,0,3049,3051,3,220,110,0,3050,3043,1,0,0,
  	0,3051,3052,1,0,0,0,3052,3050,1,0,0,0,3052,3053,1,0,0,0,3053,3054,1,0,
  	0,0,3054,3055,5,353,0,0,3055,267,1,0,0,0,3056,3057,5,85,0,0,3057,3058,
  	5,432,0,0,3058,3059,3,270,135,0,3059,269,1,0,0,0,3060,3068,5,352,0,0,
  	3061,3065,6,135,-1,0,3062,3063,3,8,4,0,3063,3064,6,135,-1,0,3064,3066,
  	1,0,0,0,3065,3062,1,0,0,0,3065,3066,1,0,0,0,3066,3067,1,0,0,0,3067,3069,
  	3,220,110,0,3068,3061,1,0,0,0,3069,3070,1,0,0,0,3070,3068,1,0,0,0,3070,
  	3071,1,0,0,0,3071,3072,1,0,0,0,3072,3073,5,353,0,0,3073,271,1,0,0,0,3074,
  	3075,5,197,0,0,3075,3076,5,432,0,0,3076,3077,3,274,137,0,3077,273,1,0,
  	0,0,3078,3086,5,352,0,0,3079,3083,6,137,-1,0,3080,3081,3,8,4,0,3081,3082,
  	6,137,-1,0,3082,3084,1,0,0,0,3083,3080,1,0,0,0,3083,3084,1,0,0,0,3084,
  	3085,1,0,0,0,3085,3087,3,220,110,0,3086,3079,1,0,0,0,3087,3088,1,0,0,
  	0,3088,3086,1,0,0,0,3088,3089,1,0,0,0,3089,3090,1,0,0,0,3090,3091,5,353,
  	0,0,3091,275,1,0,0,0,3092,3093,5,198,0,0,3093,3094,3,278,139,0,3094,277,
  	1,0,0,0,3095,3105,3,280,140,0,3096,3098,5,352,0,0,3097,3099,3,280,140,
  	0,3098,3097,1,0,0,0,3099,3100,1,0,0,0,3100,3098,1,0,0,0,3100,3101,1,0,
  	0,0,3101,3102,1,0,0,0,3102,3103,5,353,0,0,3103,3105,1,0,0,0,3104,3095,
  	1,0,0,0,3104,3096,1,0,0,0,3105,279,1,0,0,0,3106,3137,5,432,0,0,3107,3108,
  	3,244,122,0,3108,3112,6,140,-1,0,3109,3110,3,234,117,0,3110,3111,6,140,
  	-1,0,3111,3113,1,0,0,0,3112,3109,1,0,0,0,3112,3113,1,0,0,0,3113,3114,
  	1,0,0,0,3114,3117,6,140,-1,0,3115,3118,3,282,141,0,3116,3118,5,374,0,
  	0,3117,3115,1,0,0,0,3117,3116,1,0,0,0,3117,3118,1,0,0,0,3118,3138,1,0,
  	0,0,3119,3120,3,238,119,0,3120,3123,6,140,-1,0,3121,3124,3,282,141,0,
  	3122,3124,5,374,0,0,3123,3121,1,0,0,0,3123,3122,1,0,0,0,3123,3124,1,0,
  	0,0,3124,3138,1,0,0,0,3125,3126,3,242,121,0,3126,3127,5,374,0,0,3127,
  	3128,6,140,-1,0,3128,3138,1,0,0,0,3129,3130,5,193,0,0,3130,3138,3,262,
  	131,0,3131,3132,5,197,0,0,3132,3138,3,274,137,0,3133,3134,5,85,0,0,3134,
  	3138,3,270,135,0,3135,3136,7,28,0,0,3136,3138,3,266,133,0,3137,3107,1,
  	0,0,0,3137,3119,1,0,0,0,3137,3125,1,0,0,0,3137,3129,1,0,0,0,3137,3131,
  	1,0,0,0,3137,3133,1,0,0,0,3137,3135,1,0,0,0,3138,3144,1,0,0,0,3139,3144,
  	3,260,130,0,3140,3144,3,272,136,0,3141,3144,3,268,134,0,3142,3144,3,264,
  	132,0,3143,3106,1,0,0,0,3143,3139,1,0,0,0,3143,3140,1,0,0,0,3143,3141,
  	1,0,0,0,3143,3142,1,0,0,0,3144,281,1,0,0,0,3145,3146,5,352,0,0,3146,3147,
  	5,199,0,0,3147,3149,6,141,-1,0,3148,3150,3,258,129,0,3149,3148,1,0,0,
  	0,3149,3150,1,0,0,0,3150,3159,1,0,0,0,3151,3152,3,332,166,0,3152,3153,
  	6,141,-1,0,3153,3160,1,0,0,0,3154,3155,5,192,0,0,3155,3156,3,428,214,
  	0,3156,3157,5,374,0,0,3157,3158,6,141,-1,0,3158,3160,1,0,0,0,3159,3151,
  	1,0,0,0,3159,3154,1,0,0,0,3160,3161,1,0,0,0,3161,3162,5,353,0,0,3162,
  	283,1,0,0,0,3163,3164,5,200,0,0,3164,3176,6,142,-1,0,3165,3166,5,201,
  	0,0,3166,3176,6,142,-1,0,3167,3168,5,202,0,0,3168,3176,6,142,-1,0,3169,
  	3170,5,203,0,0,3170,3176,6,142,-1,0,3171,3172,5,204,0,0,3172,3176,6,142,
  	-1,0,3173,3174,5,205,0,0,3174,3176,6,142,-1,0,3175,3163,1,0,0,0,3175,
  	3165,1,0,0,0,3175,3167,1,0,0,0,3175,3169,1,0,0,0,3175,3171,1,0,0,0,3175,
  	3173,1,0,0,0,3176,3193,1,0,0,0,3177,3178,5,396,0,0,3178,3179,6,142,-1,
  	0,3179,3180,3,288,144,0,3180,3185,6,142,-1,0,3181,3182,5,372,0,0,3182,
  	3183,3,34,17,0,3183,3184,6,142,-1,0,3184,3186,1,0,0,0,3185,3181,1,0,0,
  	0,3185,3186,1,0,0,0,3186,3187,1,0,0,0,3187,3188,5,398,0,0,3188,3189,6,
  	142,-1,0,3189,3194,1,0,0,0,3190,3191,3,288,144,0,3191,3192,6,142,-1,0,
  	3192,3194,1,0,0,0,3193,3177,1,0,0,0,3193,3190,1,0,0,0,3193,3194,1,0,0,
  	0,3194,285,1,0,0,0,3195,3196,5,206,0,0,3196,3247,6,143,-1,0,3197,3213,
  	5,396,0,0,3198,3199,5,200,0,0,3199,3214,6,143,-1,0,3200,3201,5,201,0,
  	0,3201,3214,6,143,-1,0,3202,3203,5,202,0,0,3203,3214,6,143,-1,0,3204,
  	3205,5,203,0,0,3205,3214,6,143,-1,0,3206,3207,5,204,0,0,3207,3214,6,143,
  	-1,0,3208,3209,5,205,0,0,3209,3214,6,143,-1,0,3210,3211,3,288,144,0,3211,
  	3212,6,143,-1,0,3212,3214,1,0,0,0,3213,3198,1,0,0,0,3213,3200,1,0,0,0,
  	3213,3202,1,0,0,0,3213,3204,1,0,0,0,3213,3206,1,0,0,0,3213,3208,1,0,0,
  	0,3213,3210,1,0,0,0,3214,3219,1,0,0,0,3215,3216,5,372,0,0,3216,3217,3,
  	34,17,0,3217,3218,6,143,-1,0,3218,3220,1,0,0,0,3219,3215,1,0,0,0,3219,
  	3220,1,0,0,0,3220,3221,1,0,0,0,3221,3222,5,398,0,0,3222,3248,6,143,-1,
  	0,3223,3224,5,200,0,0,3224,3239,6,143,-1,0,3225,3226,5,201,0,0,3226,3239,
  	6,143,-1,0,3227,3228,5,202,0,0,3228,3239,6,143,-1,0,3229,3230,5,203,0,
  	0,3230,3239,6,143,-1,0,3231,3232,5,204,0,0,3232,3239,6,143,-1,0,3233,
  	3234,5,205,0,0,3234,3239,6,143,-1,0,3235,3236,3,288,144,0,3236,3237,6,
  	143,-1,0,3237,3239,1,0,0,0,3238,3223,1,0,0,0,3238,3225,1,0,0,0,3238,3227,
  	1,0,0,0,3238,3229,1,0,0,0,3238,3231,1,0,0,0,3238,3233,1,0,0,0,3238,3235,
  	1,0,0,0,3239,3244,1,0,0,0,3240,3241,5,372,0,0,3241,3242,3,34,17,0,3242,
  	3243,6,143,-1,0,3243,3245,1,0,0,0,3244,3240,1,0,0,0,3244,3245,1,0,0,0,
  	3245,3246,1,0,0,0,3246,3248,6,143,-1,0,3247,3197,1,0,0,0,3247,3238,1,
  	0,0,0,3247,3248,1,0,0,0,3248,287,1,0,0,0,3249,3250,7,20,0,0,3250,3256,
  	6,144,-1,0,3251,3252,5,396,0,0,3252,3253,3,34,17,0,3253,3254,6,144,-1,
  	0,3254,3255,5,398,0,0,3255,3257,1,0,0,0,3256,3251,1,0,0,0,3256,3257,1,
  	0,0,0,3257,3286,1,0,0,0,3258,3259,7,21,0,0,3259,3265,6,144,-1,0,3260,
  	3261,5,396,0,0,3261,3262,3,34,17,0,3262,3263,6,144,-1,0,3263,3264,5,398,
  	0,0,3264,3266,1,0,0,0,3265,3260,1,0,0,0,3265,3266,1,0,0,0,3266,3286,1,
  	0,0,0,3267,3268,7,23,0,0,3268,3286,6,144,-1,0,3269,3270,7,24,0,0,3270,
  	3286,6,144,-1,0,3271,3272,7,25,0,0,3272,3286,6,144,-1,0,3273,3274,5,177,
  	0,0,3274,3286,6,144,-1,0,3275,3276,5,178,0,0,3276,3286,6,144,-1,0,3277,
  	3278,5,179,0,0,3278,3286,6,144,-1,0,3279,3280,5,180,0,0,3280,3286,6,144,
  	-1,0,3281,3282,5,181,0,0,3282,3286,6,144,-1,0,3283,3284,5,182,0,0,3284,
  	3286,6,144,-1,0,3285,3249,1,0,0,0,3285,3258,1,0,0,0,3285,3267,1,0,0,0,
  	3285,3269,1,0,0,0,3285,3271,1,0,0,0,3285,3273,1,0,0,0,3285,3275,1,0,0,
  	0,3285,3277,1,0,0,0,3285,3279,1,0,0,0,3285,3281,1,0,0,0,3285,3283,1,0,
  	0,0,3286,289,1,0,0,0,3287,3288,5,207,0,0,3288,291,1,0,0,0,3289,3293,5,
  	208,0,0,3290,3291,5,209,0,0,3291,3293,6,146,-1,0,3292,3289,1,0,0,0,3292,
  	3290,1,0,0,0,3293,3297,1,0,0,0,3294,3296,3,294,147,0,3295,3294,1,0,0,
  	0,3296,3299,1,0,0,0,3297,3295,1,0,0,0,3297,3298,1,0,0,0,3298,293,1,0,
  	0,0,3299,3297,1,0,0,0,3300,3307,5,210,0,0,3301,3302,5,33,0,0,3302,3304,
  	6,147,-1,0,3303,3305,5,210,0,0,3304,3303,1,0,0,0,3304,3305,1,0,0,0,3305,
  	3307,1,0,0,0,3306,3300,1,0,0,0,3306,3301,1,0,0,0,3307,3308,1,0,0,0,3308,
  	3309,3,296,148,0,3309,295,1,0,0,0,3310,3311,5,432,0,0,3311,3313,6,148,
  	-1,0,3312,3314,3,298,149,0,3313,3312,1,0,0,0,3313,3314,1,0,0,0,3314,3317,
  	1,0,0,0,3315,3316,7,8,0,0,3316,3318,3,302,151,0,3317,3315,1,0,0,0,3317,
  	3318,1,0,0,0,3318,3319,1,0,0,0,3319,3320,3,332,166,0,3320,3321,6,148,
  	-1,0,3321,297,1,0,0,0,3322,3331,5,350,0,0,3323,3328,3,300,150,0,3324,
  	3325,5,372,0,0,3325,3327,3,300,150,0,3326,3324,1,0,0,0,3327,3330,1,0,
  	0,0,3328,3326,1,0,0,0,3328,3329,1,0,0,0,3329,3332,1,0,0,0,3330,3328,1,
  	0,0,0,3331,3323,1,0,0,0,3331,3332,1,0,0,0,3332,3333,1,0,0,0,3333,3334,
  	5,351,0,0,3334,299,1,0,0,0,3335,3336,3,18,9,0,3336,3337,6,150,-1,0,3337,
  	3339,1,0,0,0,3338,3335,1,0,0,0,3338,3339,1,0,0,0,3339,3340,1,0,0,0,3340,
  	3341,3,232,116,0,3341,3342,6,150,-1,0,3342,3343,5,432,0,0,3343,3347,1,
  	0,0,0,3344,3345,5,432,0,0,3345,3347,6,150,-1,0,3346,3338,1,0,0,0,3346,
  	3344,1,0,0,0,3347,3348,1,0,0,0,3348,3352,6,150,-1,0,3349,3350,3,230,115,
  	0,3350,3351,6,150,-1,0,3351,3353,1,0,0,0,3352,3349,1,0,0,0,3352,3353,
  	1,0,0,0,3353,301,1,0,0,0,3354,3355,5,350,0,0,3355,3360,3,304,152,0,3356,
  	3357,5,372,0,0,3357,3359,3,304,152,0,3358,3356,1,0,0,0,3359,3362,1,0,
  	0,0,3360,3358,1,0,0,0,3360,3361,1,0,0,0,3361,3363,1,0,0,0,3362,3360,1,
  	0,0,0,3363,3364,5,351,0,0,3364,3374,1,0,0,0,3365,3369,3,232,116,0,3366,
  	3367,3,230,115,0,3367,3368,6,151,-1,0,3368,3370,1,0,0,0,3369,3366,1,0,
  	0,0,3369,3370,1,0,0,0,3370,3371,1,0,0,0,3371,3372,6,151,-1,0,3372,3374,
  	1,0,0,0,3373,3354,1,0,0,0,3373,3365,1,0,0,0,3374,303,1,0,0,0,3375,3376,
  	3,18,9,0,3376,3377,6,152,-1,0,3377,3379,1,0,0,0,3378,3375,1,0,0,0,3378,
  	3379,1,0,0,0,3379,3380,1,0,0,0,3380,3381,3,232,116,0,3381,3382,6,152,
  	-1,0,3382,3383,5,432,0,0,3383,3387,1,0,0,0,3384,3385,5,432,0,0,3385,3387,
  	6,152,-1,0,3386,3378,1,0,0,0,3386,3384,1,0,0,0,3387,3388,1,0,0,0,3388,
  	3392,6,152,-1,0,3389,3390,3,230,115,0,3390,3391,6,152,-1,0,3391,3393,
  	1,0,0,0,3392,3389,1,0,0,0,3392,3393,1,0,0,0,3393,305,1,0,0,0,3394,3398,
  	5,211,0,0,3395,3397,3,308,154,0,3396,3395,1,0,0,0,3397,3400,1,0,0,0,3398,
  	3396,1,0,0,0,3398,3399,1,0,0,0,3399,307,1,0,0,0,3400,3398,1,0,0,0,3401,
  	3402,5,62,0,0,3402,3441,3,310,155,0,3403,3404,5,117,0,0,3404,3441,3,310,
  	155,0,3405,3406,5,127,0,0,3406,3441,3,310,155,0,3407,3408,5,63,0,0,3408,
  	3441,3,310,155,0,3409,3410,5,212,0,0,3410,3441,3,310,155,0,3411,3412,
  	5,118,0,0,3412,3441,3,310,155,0,3413,3414,5,119,0,0,3414,3441,3,310,155,
  	0,3415,3416,5,120,0,0,3416,3441,3,310,155,0,3417,3418,5,121,0,0,3418,
  	3441,3,310,155,0,3419,3420,5,122,0,0,3420,3441,3,310,155,0,3421,3422,
  	5,123,0,0,3422,3441,3,310,155,0,3423,3424,5,124,0,0,3424,3441,3,310,155,
  	0,3425,3426,5,125,0,0,3426,3441,3,310,155,0,3427,3428,5,126,0,0,3428,
  	3441,3,310,155,0,3429,3430,5,213,0,0,3430,3441,3,310,155,0,3431,3432,
  	5,214,0,0,3432,3441,3,310,155,0,3433,3434,5,215,0,0,3434,3441,3,310,155,
  	0,3435,3436,5,216,0,0,3436,3437,6,154,-1,0,3437,3441,3,310,155,0,3438,
  	3439,5,210,0,0,3439,3441,3,296,148,0,3440,3401,1,0,0,0,3440,3403,1,0,
  	0,0,3440,3405,1,0,0,0,3440,3407,1,0,0,0,3440,3409,1,0,0,0,3440,3411,1,
  	0,0,0,3440,3413,1,0,0,0,3440,3415,1,0,0,0,3440,3417,1,0,0,0,3440,3419,
  	1,0,0,0,3440,3421,1,0,0,0,3440,3423,1,0,0,0,3440,3425,1,0,0,0,3440,3427,
  	1,0,0,0,3440,3429,1,0,0,0,3440,3431,1,0,0,0,3440,3433,1,0,0,0,3440,3435,
  	1,0,0,0,3440,3438,1,0,0,0,3441,309,1,0,0,0,3442,3444,3,298,149,0,3443,
  	3442,1,0,0,0,3443,3444,1,0,0,0,3444,3447,1,0,0,0,3445,3446,7,8,0,0,3446,
  	3448,3,302,151,0,3447,3445,1,0,0,0,3447,3448,1,0,0,0,3448,3449,1,0,0,
  	0,3449,3450,3,332,166,0,3450,3451,6,155,-1,0,3451,311,1,0,0,0,3452,3456,
  	7,29,0,0,3453,3455,3,320,160,0,3454,3453,1,0,0,0,3455,3458,1,0,0,0,3456,
  	3454,1,0,0,0,3456,3457,1,0,0,0,3457,313,1,0,0,0,3458,3456,1,0,0,0,3459,
  	3460,5,219,0,0,3460,3479,6,157,-1,0,3461,3462,5,220,0,0,3462,3479,6,157,
  	-1,0,3463,3464,5,221,0,0,3464,3479,6,157,-1,0,3465,3466,5,92,0,0,3466,
  	3479,6,157,-1,0,3467,3468,5,222,0,0,3468,3479,6,157,-1,0,3469,3470,5,
  	223,0,0,3470,3479,6,157,-1,0,3471,3472,5,224,0,0,3472,3479,6,157,-1,0,
  	3473,3474,5,225,0,0,3474,3479,6,157,-1,0,3475,3476,3,318,159,0,3476,3477,
  	6,157,-1,0,3477,3479,1,0,0,0,3478,3459,1,0,0,0,3478,3461,1,0,0,0,3478,
  	3463,1,0,0,0,3478,3465,1,0,0,0,3478,3467,1,0,0,0,3478,3469,1,0,0,0,3478,
  	3471,1,0,0,0,3478,3473,1,0,0,0,3478,3475,1,0,0,0,3479,315,1,0,0,0,3480,
  	3481,5,222,0,0,3481,3489,6,158,-1,0,3482,3483,5,223,0,0,3483,3489,6,158,
  	-1,0,3484,3485,5,224,0,0,3485,3489,6,158,-1,0,3486,3487,5,225,0,0,3487,
  	3489,6,158,-1,0,3488,3480,1,0,0,0,3488,3482,1,0,0,0,3488,3484,1,0,0,0,
  	3488,3486,1,0,0,0,3489,317,1,0,0,0,3490,3511,5,145,0,0,3491,3498,5,371,
  	0,0,3492,3493,3,206,103,0,3493,3494,6,159,-1,0,3494,3499,1,0,0,0,3495,
  	3496,3,202,101,0,3496,3497,6,159,-1,0,3497,3499,1,0,0,0,3498,3492,1,0,
  	0,0,3498,3495,1,0,0,0,3499,3512,1,0,0,0,3500,3507,5,396,0,0,3501,3502,
  	3,206,103,0,3502,3503,6,159,-1,0,3503,3508,1,0,0,0,3504,3505,3,202,101,
  	0,3505,3506,6,159,-1,0,3506,3508,1,0,0,0,3507,3501,1,0,0,0,3507,3504,
  	1,0,0,0,3508,3509,1,0,0,0,3509,3510,5,398,0,0,3510,3512,1,0,0,0,3511,
  	3491,1,0,0,0,3511,3500,1,0,0,0,3512,3517,1,0,0,0,3513,3514,3,202,101,
  	0,3514,3515,6,159,-1,0,3515,3517,1,0,0,0,3516,3490,1,0,0,0,3516,3513,
  	1,0,0,0,3517,319,1,0,0,0,3518,3527,7,30,0,0,3519,3520,5,396,0,0,3520,
  	3523,3,314,157,0,3521,3522,5,372,0,0,3522,3524,3,316,158,0,3523,3521,
  	1,0,0,0,3523,3524,1,0,0,0,3524,3525,1,0,0,0,3525,3526,5,398,0,0,3526,
  	3528,1,0,0,0,3527,3519,1,0,0,0,3527,3528,1,0,0,0,3528,3531,1,0,0,0,3529,
  	3530,5,432,0,0,3530,3532,6,160,-1,0,3531,3529,1,0,0,0,3531,3532,1,0,0,
  	0,3532,3533,1,0,0,0,3533,3534,6,160,-1,0,3534,3536,5,352,0,0,3535,3537,
  	3,322,161,0,3536,3535,1,0,0,0,3537,3538,1,0,0,0,3538,3536,1,0,0,0,3538,
  	3539,1,0,0,0,3539,3540,1,0,0,0,3540,3541,5,353,0,0,3541,3571,1,0,0,0,
  	3542,3543,5,227,0,0,3543,3552,6,160,-1,0,3544,3545,5,396,0,0,3545,3548,
  	3,314,157,0,3546,3547,5,372,0,0,3547,3549,3,316,158,0,3548,3546,1,0,0,
  	0,3548,3549,1,0,0,0,3549,3550,1,0,0,0,3550,3551,5,398,0,0,3551,3553,1,
  	0,0,0,3552,3544,1,0,0,0,3552,3553,1,0,0,0,3553,3568,1,0,0,0,3554,3569,
  	3,322,161,0,3555,3557,5,352,0,0,3556,3558,3,322,161,0,3557,3556,1,0,0,
  	0,3558,3559,1,0,0,0,3559,3557,1,0,0,0,3559,3560,1,0,0,0,3560,3561,1,0,
  	0,0,3561,3562,5,353,0,0,3562,3569,1,0,0,0,3563,3564,5,354,0,0,3564,3565,
  	3,324,162,0,3565,3566,5,355,0,0,3566,3567,5,374,0,0,3567,3569,1,0,0,0,
  	3568,3554,1,0,0,0,3568,3555,1,0,0,0,3568,3563,1,0,0,0,3569,3571,1,0,0,
  	0,3570,3518,1,0,0,0,3570,3542,1,0,0,0,3571,321,1,0,0,0,3572,3582,3,14,
  	7,0,3573,3578,5,396,0,0,3574,3575,3,318,159,0,3575,3576,6,161,-1,0,3576,
  	3579,1,0,0,0,3577,3579,3,316,158,0,3578,3574,1,0,0,0,3578,3577,1,0,0,
  	0,3579,3580,1,0,0,0,3580,3581,5,398,0,0,3581,3583,1,0,0,0,3582,3573,1,
  	0,0,0,3582,3583,1,0,0,0,3583,3612,1,0,0,0,3584,3585,3,326,163,0,3585,
  	3586,5,374,0,0,3586,3613,1,0,0,0,3587,3591,5,352,0,0,3588,3589,3,326,
  	163,0,3589,3590,5,374,0,0,3590,3592,1,0,0,0,3591,3588,1,0,0,0,3592,3593,
  	1,0,0,0,3593,3591,1,0,0,0,3593,3594,1,0,0,0,3594,3595,1,0,0,0,3595,3596,
  	5,353,0,0,3596,3613,1,0,0,0,3597,3608,5,354,0,0,3598,3603,3,326,163,0,
  	3599,3600,5,372,0,0,3600,3602,3,326,163,0,3601,3599,1,0,0,0,3602,3605,
  	1,0,0,0,3603,3601,1,0,0,0,3603,3604,1,0,0,0,3604,3609,1,0,0,0,3605,3603,
  	1,0,0,0,3606,3607,5,407,0,0,3607,3609,6,161,-1,0,3608,3598,1,0,0,0,3608,
  	3606,1,0,0,0,3609,3610,1,0,0,0,3610,3611,5,355,0,0,3611,3613,5,374,0,
  	0,3612,3584,1,0,0,0,3612,3587,1,0,0,0,3612,3597,1,0,0,0,3613,3618,1,0,
  	0,0,3614,3615,3,326,163,0,3615,3616,5,374,0,0,3616,3618,1,0,0,0,3617,
  	3572,1,0,0,0,3617,3614,1,0,0,0,3618,323,1,0,0,0,3619,3624,3,326,163,0,
  	3620,3621,5,372,0,0,3621,3623,3,326,163,0,3622,3620,1,0,0,0,3623,3626,
  	1,0,0,0,3624,3622,1,0,0,0,3624,3625,1,0,0,0,3625,3630,1,0,0,0,3626,3624,
  	1,0,0,0,3627,3628,5,407,0,0,3628,3630,6,162,-1,0,3629,3619,1,0,0,0,3629,
  	3627,1,0,0,0,3630,325,1,0,0,0,3631,3632,3,32,16,0,3632,3633,6,163,-1,
  	0,3633,3649,5,24,0,0,3634,3650,3,328,164,0,3635,3646,5,354,0,0,3636,3641,
  	3,328,164,0,3637,3638,5,372,0,0,3638,3640,3,328,164,0,3639,3637,1,0,0,
  	0,3640,3643,1,0,0,0,3641,3639,1,0,0,0,3641,3642,1,0,0,0,3642,3647,1,0,
  	0,0,3643,3641,1,0,0,0,3644,3645,5,407,0,0,3645,3647,6,163,-1,0,3646,3636,
  	1,0,0,0,3646,3644,1,0,0,0,3647,3648,1,0,0,0,3648,3650,5,355,0,0,3649,
  	3634,1,0,0,0,3649,3635,1,0,0,0,3650,3655,1,0,0,0,3651,3652,3,32,16,0,
  	3652,3653,6,163,-1,0,3653,3655,1,0,0,0,3654,3631,1,0,0,0,3654,3651,1,
  	0,0,0,3655,327,1,0,0,0,3656,3657,3,32,16,0,3657,3658,6,164,-1,0,3658,
  	329,1,0,0,0,3659,3660,3,370,185,0,3660,3661,6,165,-1,0,3661,3708,1,0,
  	0,0,3662,3663,3,376,188,0,3663,3664,6,165,-1,0,3664,3708,1,0,0,0,3665,
  	3666,3,386,193,0,3666,3667,6,165,-1,0,3667,3708,1,0,0,0,3668,3669,3,406,
  	203,0,3669,3670,6,165,-1,0,3670,3708,1,0,0,0,3671,3672,3,414,207,0,3672,
  	3673,6,165,-1,0,3673,3708,1,0,0,0,3674,3675,3,418,209,0,3675,3676,6,165,
  	-1,0,3676,3708,1,0,0,0,3677,3678,3,424,212,0,3678,3679,6,165,-1,0,3679,
  	3708,1,0,0,0,3680,3681,3,352,176,0,3681,3682,6,165,-1,0,3682,3708,1,0,
  	0,0,3683,3684,3,350,175,0,3684,3685,6,165,-1,0,3685,3708,1,0,0,0,3686,
  	3687,3,356,178,0,3687,3688,6,165,-1,0,3688,3708,1,0,0,0,3689,3690,3,398,
  	199,0,3690,3691,6,165,-1,0,3691,3708,1,0,0,0,3692,3693,3,402,201,0,3693,
  	3694,6,165,-1,0,3694,3708,1,0,0,0,3695,3696,3,332,166,0,3696,3697,6,165,
  	-1,0,3697,3708,1,0,0,0,3698,3699,3,344,172,0,3699,3700,6,165,-1,0,3700,
  	3708,1,0,0,0,3701,3702,3,362,181,0,3702,3703,6,165,-1,0,3703,3708,1,0,
  	0,0,3704,3705,3,368,184,0,3705,3706,6,165,-1,0,3706,3708,1,0,0,0,3707,
  	3659,1,0,0,0,3707,3662,1,0,0,0,3707,3665,1,0,0,0,3707,3668,1,0,0,0,3707,
  	3671,1,0,0,0,3707,3674,1,0,0,0,3707,3677,1,0,0,0,3707,3680,1,0,0,0,3707,
  	3683,1,0,0,0,3707,3686,1,0,0,0,3707,3689,1,0,0,0,3707,3692,1,0,0,0,3707,
  	3695,1,0,0,0,3707,3698,1,0,0,0,3707,3701,1,0,0,0,3707,3704,1,0,0,0,3708,
  	331,1,0,0,0,3709,3713,5,352,0,0,3710,3711,3,334,167,0,3711,3712,6,166,
  	-1,0,3712,3714,1,0,0,0,3713,3710,1,0,0,0,3713,3714,1,0,0,0,3714,3715,
  	1,0,0,0,3715,3721,6,166,-1,0,3716,3717,3,330,165,0,3717,3718,6,166,-1,
  	0,3718,3720,1,0,0,0,3719,3716,1,0,0,0,3720,3723,1,0,0,0,3721,3719,1,0,
  	0,0,3721,3722,1,0,0,0,3722,3724,1,0,0,0,3723,3721,1,0,0,0,3724,3725,5,
  	353,0,0,3725,333,1,0,0,0,3726,3727,3,336,168,0,3727,3728,6,167,-1,0,3728,
  	3740,1,0,0,0,3729,3730,3,338,169,0,3730,3731,6,167,-1,0,3731,3740,1,0,
  	0,0,3732,3733,3,340,170,0,3733,3734,6,167,-1,0,3734,3740,1,0,0,0,3735,
  	3736,5,334,0,0,3736,3740,6,167,-1,0,3737,3738,5,335,0,0,3738,3740,6,167,
  	-1,0,3739,3726,1,0,0,0,3739,3729,1,0,0,0,3739,3732,1,0,0,0,3739,3735,
  	1,0,0,0,3739,3737,1,0,0,0,3740,335,1,0,0,0,3741,3742,5,319,0,0,3742,3750,
  	6,168,-1,0,3743,3744,5,320,0,0,3744,3750,6,168,-1,0,3745,3746,5,321,0,
  	0,3746,3750,6,168,-1,0,3747,3748,5,318,0,0,3748,3750,6,168,-1,0,3749,
  	3741,1,0,0,0,3749,3743,1,0,0,0,3749,3745,1,0,0,0,3749,3747,1,0,0,0,3750,
  	337,1,0,0,0,3751,3752,5,322,0,0,3752,3764,6,169,-1,0,3753,3754,5,323,
  	0,0,3754,3764,6,169,-1,0,3755,3756,5,324,0,0,3756,3764,6,169,-1,0,3757,
  	3758,5,325,0,0,3758,3764,6,169,-1,0,3759,3760,5,326,0,0,3760,3764,6,169,
  	-1,0,3761,3762,5,327,0,0,3762,3764,6,169,-1,0,3763,3751,1,0,0,0,3763,
  	3753,1,0,0,0,3763,3755,1,0,0,0,3763,3757,1,0,0,0,3763,3759,1,0,0,0,3763,
  	3761,1,0,0,0,3764,339,1,0,0,0,3765,3766,5,328,0,0,3766,3788,6,170,-1,
  	0,3767,3768,5,329,0,0,3768,3788,6,170,-1,0,3769,3770,5,330,0,0,3770,3788,
  	6,170,-1,0,3771,3772,5,331,0,0,3772,3788,6,170,-1,0,3773,3774,5,332,0,
  	0,3774,3788,6,170,-1,0,3775,3776,5,333,0,0,3776,3788,6,170,-1,0,3777,
  	3778,5,336,0,0,3778,3788,6,170,-1,0,3779,3780,5,337,0,0,3780,3788,6,170,
  	-1,0,3781,3782,5,338,0,0,3782,3788,6,170,-1,0,3783,3784,5,339,0,0,3784,
  	3788,6,170,-1,0,3785,3786,5,341,0,0,3786,3788,6,170,-1,0,3787,3765,1,
  	0,0,0,3787,3767,1,0,0,0,3787,3769,1,0,0,0,3787,3771,1,0,0,0,3787,3773,
  	1,0,0,0,3787,3775,1,0,0,0,3787,3777,1,0,0,0,3787,3779,1,0,0,0,3787,3781,
  	1,0,0,0,3787,3783,1,0,0,0,3787,3785,1,0,0,0,3788,341,1,0,0,0,3789,3790,
  	5,399,0,0,3790,3854,6,171,-1,0,3791,3792,5,403,0,0,3792,3854,6,171,-1,
  	0,3793,3794,5,407,0,0,3794,3854,6,171,-1,0,3795,3796,5,410,0,0,3796,3854,
  	6,171,-1,0,3797,3798,5,413,0,0,3798,3854,6,171,-1,0,3799,3800,5,391,0,
  	0,3800,3854,6,171,-1,0,3801,3802,5,392,0,0,3802,3854,6,171,-1,0,3803,
  	3804,5,393,0,0,3804,3854,6,171,-1,0,3805,3806,5,394,0,0,3806,3854,6,171,
  	-1,0,3807,3808,5,398,0,0,3808,3854,6,171,-1,0,3809,3810,5,397,0,0,3810,
  	3854,6,171,-1,0,3811,3812,5,396,0,0,3812,3854,6,171,-1,0,3813,3814,5,
  	395,0,0,3814,3854,6,171,-1,0,3815,3816,5,384,0,0,3816,3854,6,171,-1,0,
  	3817,3818,5,380,0,0,3818,3854,6,171,-1,0,3819,3820,5,381,0,0,3820,3854,
  	6,171,-1,0,3821,3822,5,385,0,0,3822,3854,6,171,-1,0,3823,3824,5,386,0,
  	0,3824,3854,6,171,-1,0,3825,3826,5,425,0,0,3826,3854,6,171,-1,0,3827,
  	3828,5,422,0,0,3828,3854,6,171,-1,0,3829,3830,5,426,0,0,3830,3854,6,171,
  	-1,0,3831,3832,5,429,0,0,3832,3854,6,171,-1,0,3833,3834,5,419,0,0,3834,
  	3854,6,171,-1,0,3835,3836,5,416,0,0,3836,3854,6,171,-1,0,3837,3838,5,
  	342,0,0,3838,3854,6,171,-1,0,3839,3840,5,343,0,0,3840,3854,6,171,-1,0,
  	3841,3842,5,344,0,0,3842,3854,6,171,-1,0,3843,3844,5,345,0,0,3844,3854,
  	6,171,-1,0,3845,3846,5,346,0,0,3846,3854,6,171,-1,0,3847,3848,5,347,0,
  	0,3848,3854,6,171,-1,0,3849,3850,5,348,0,0,3850,3854,6,171,-1,0,3851,
  	3852,5,349,0,0,3852,3854,6,171,-1,0,3853,3789,1,0,0,0,3853,3791,1,0,0,
  	0,3853,3793,1,0,0,0,3853,3795,1,0,0,0,3853,3797,1,0,0,0,3853,3799,1,0,
  	0,0,3853,3801,1,0,0,0,3853,3803,1,0,0,0,3853,3805,1,0,0,0,3853,3807,1,
  	0,0,0,3853,3809,1,0,0,0,3853,3811,1,0,0,0,3853,3813,1,0,0,0,3853,3815,
  	1,0,0,0,3853,3817,1,0,0,0,3853,3819,1,0,0,0,3853,3821,1,0,0,0,3853,3823,
  	1,0,0,0,3853,3825,1,0,0,0,3853,3827,1,0,0,0,3853,3829,1,0,0,0,3853,3831,
  	1,0,0,0,3853,3833,1,0,0,0,3853,3835,1,0,0,0,3853,3837,1,0,0,0,3853,3839,
  	1,0,0,0,3853,3841,1,0,0,0,3853,3843,1,0,0,0,3853,3845,1,0,0,0,3853,3847,
  	1,0,0,0,3853,3849,1,0,0,0,3853,3851,1,0,0,0,3854,343,1,0,0,0,3855,3856,
  	5,363,0,0,3856,3857,3,348,174,0,3857,3866,6,172,-1,0,3858,3859,3,344,
  	172,0,3859,3860,6,172,-1,0,3860,3865,1,0,0,0,3861,3862,3,460,230,0,3862,
  	3863,6,172,-1,0,3863,3865,1,0,0,0,3864,3858,1,0,0,0,3864,3861,1,0,0,0,
  	3865,3868,1,0,0,0,3866,3864,1,0,0,0,3866,3867,1,0,0,0,3867,3869,1,0,0,
  	0,3868,3866,1,0,0,0,3869,3870,5,353,0,0,3870,345,1,0,0,0,3871,3872,5,
  	363,0,0,3872,3873,3,348,174,0,3873,3882,6,173,-1,0,3874,3875,3,346,173,
  	0,3875,3876,6,173,-1,0,3876,3881,1,0,0,0,3877,3878,3,460,230,0,3878,3879,
  	6,173,-1,0,3879,3881,1,0,0,0,3880,3874,1,0,0,0,3880,3877,1,0,0,0,3881,
  	3884,1,0,0,0,3882,3880,1,0,0,0,3882,3883,1,0,0,0,3883,3885,1,0,0,0,3884,
  	3882,1,0,0,0,3885,3886,5,353,0,0,3886,347,1,0,0,0,3887,3888,3,342,171,
  	0,3888,3889,6,174,-1,0,3889,3896,1,0,0,0,3890,3891,3,412,206,0,3891,3892,
  	6,174,-1,0,3892,3896,1,0,0,0,3893,3894,4,174,0,1,3894,3896,5,432,0,0,
  	3895,3887,1,0,0,0,3895,3890,1,0,0,0,3895,3893,1,0,0,0,3896,349,1,0,0,
  	0,3897,3898,5,228,0,0,3898,3899,5,432,0,0,3899,3901,6,175,-1,0,3900,3902,
  	3,178,89,0,3901,3900,1,0,0,0,3901,3902,1,0,0,0,3902,3904,1,0,0,0,3903,
  	3905,3,180,90,0,3904,3903,1,0,0,0,3904,3905,1,0,0,0,3905,3906,1,0,0,0,
  	3906,3907,5,374,0,0,3907,351,1,0,0,0,3908,3909,5,357,0,0,3909,3910,3,
  	460,230,0,3910,3918,6,176,-1,0,3911,3912,5,432,0,0,3912,3919,6,176,-1,
  	0,3913,3914,5,25,0,0,3914,3919,6,176,-1,0,3915,3916,3,342,171,0,3916,
  	3917,6,176,-1,0,3917,3919,1,0,0,0,3918,3911,1,0,0,0,3918,3913,1,0,0,0,
  	3918,3915,1,0,0,0,3919,3925,1,0,0,0,3920,3921,3,426,213,0,3921,3922,6,
  	176,-1,0,3922,3924,1,0,0,0,3923,3920,1,0,0,0,3924,3927,1,0,0,0,3925,3923,
  	1,0,0,0,3925,3926,1,0,0,0,3926,3936,1,0,0,0,3927,3925,1,0,0,0,3928,3929,
  	5,229,0,0,3929,3937,3,426,213,0,3930,3931,5,230,0,0,3931,3937,3,460,230,
  	0,3932,3933,5,231,0,0,3933,3937,3,460,230,0,3934,3935,5,232,0,0,3935,
  	3937,3,412,206,0,3936,3928,1,0,0,0,3936,3930,1,0,0,0,3936,3932,1,0,0,
  	0,3936,3934,1,0,0,0,3936,3937,1,0,0,0,3937,3938,1,0,0,0,3938,3939,5,351,
  	0,0,3939,3940,5,374,0,0,3940,353,1,0,0,0,3941,3942,5,357,0,0,3942,3943,
  	3,460,230,0,3943,3951,6,177,-1,0,3944,3945,5,432,0,0,3945,3952,6,177,
  	-1,0,3946,3947,5,25,0,0,3947,3952,6,177,-1,0,3948,3949,3,342,171,0,3949,
  	3950,6,177,-1,0,3950,3952,1,0,0,0,3951,3944,1,0,0,0,3951,3946,1,0,0,0,
  	3951,3948,1,0,0,0,3952,3958,1,0,0,0,3953,3954,3,426,213,0,3954,3955,6,
  	177,-1,0,3955,3957,1,0,0,0,3956,3953,1,0,0,0,3957,3960,1,0,0,0,3958,3956,
  	1,0,0,0,3958,3959,1,0,0,0,3959,3961,1,0,0,0,3960,3958,1,0,0,0,3961,3962,
  	5,351,0,0,3962,355,1,0,0,0,3963,3964,5,233,0,0,3964,3965,6,178,-1,0,3965,
  	3966,3,32,16,0,3966,3967,6,178,-1,0,3967,3970,3,358,179,0,3968,3969,7,
  	8,0,0,3969,3971,3,426,213,0,3970,3968,1,0,0,0,3970,3971,1,0,0,0,3971,
  	3972,1,0,0,0,3972,3973,5,374,0,0,3973,357,1,0,0,0,3974,3976,5,350,0,0,
  	3975,3977,3,80,40,0,3976,3975,1,0,0,0,3976,3977,1,0,0,0,3977,3978,1,0,
  	0,0,3978,3980,5,351,0,0,3979,3974,1,0,0,0,3979,3980,1,0,0,0,3980,3997,
  	1,0,0,0,3981,3987,5,352,0,0,3982,3983,3,330,165,0,3983,3984,6,179,-1,
  	0,3984,3986,1,0,0,0,3985,3982,1,0,0,0,3986,3989,1,0,0,0,3987,3985,1,0,
  	0,0,3987,3988,1,0,0,0,3988,3993,1,0,0,0,3989,3987,1,0,0,0,3990,3992,3,
  	86,43,0,3991,3990,1,0,0,0,3992,3995,1,0,0,0,3993,3991,1,0,0,0,3993,3994,
  	1,0,0,0,3994,3996,1,0,0,0,3995,3993,1,0,0,0,3996,3998,5,353,0,0,3997,
  	3981,1,0,0,0,3997,3998,1,0,0,0,3998,359,1,0,0,0,3999,4000,5,233,0,0,4000,
  	4001,6,180,-1,0,4001,4002,3,32,16,0,4002,4003,6,180,-1,0,4003,4004,3,
  	182,91,0,4004,361,1,0,0,0,4005,4006,3,364,182,0,4006,4007,6,181,-1,0,
  	4007,363,1,0,0,0,4008,4015,7,31,0,0,4009,4010,5,350,0,0,4010,4011,5,236,
  	0,0,4011,4012,3,32,16,0,4012,4013,5,351,0,0,4013,4014,6,182,-1,0,4014,
  	4016,1,0,0,0,4015,4009,1,0,0,0,4015,4016,1,0,0,0,4016,4017,1,0,0,0,4017,
  	4018,5,352,0,0,4018,4019,3,366,183,0,4019,4031,5,353,0,0,4020,4021,5,
  	229,0,0,4021,4027,3,426,213,0,4022,4023,5,354,0,0,4023,4024,3,426,213,
  	0,4024,4025,5,355,0,0,4025,4027,1,0,0,0,4026,4020,1,0,0,0,4026,4022,1,
  	0,0,0,4027,4028,1,0,0,0,4028,4029,6,182,-1,0,4029,4030,5,374,0,0,4030,
  	4032,1,0,0,0,4031,4026,1,0,0,0,4031,4032,1,0,0,0,4032,4033,1,0,0,0,4033,
  	4034,6,182,-1,0,4034,365,1,0,0,0,4035,4036,3,376,188,0,4036,4037,6,183,
  	-1,0,4037,367,1,0,0,0,4038,4039,5,237,0,0,4039,4047,6,184,-1,0,4040,4041,
  	5,238,0,0,4041,4047,6,184,-1,0,4042,4043,5,239,0,0,4043,4047,6,184,-1,
  	0,4044,4045,5,240,0,0,4045,4047,6,184,-1,0,4046,4038,1,0,0,0,4046,4040,
  	1,0,0,0,4046,4042,1,0,0,0,4046,4044,1,0,0,0,4047,4048,1,0,0,0,4048,4063,
  	5,352,0,0,4049,4050,3,330,165,0,4050,4051,6,184,-1,0,4051,4053,1,0,0,
  	0,4052,4049,1,0,0,0,4053,4054,1,0,0,0,4054,4052,1,0,0,0,4054,4055,1,0,
  	0,0,4055,4064,1,0,0,0,4056,4057,3,426,213,0,4057,4058,6,184,-1,0,4058,
  	4060,1,0,0,0,4059,4056,1,0,0,0,4060,4061,1,0,0,0,4061,4059,1,0,0,0,4061,
  	4062,1,0,0,0,4062,4064,1,0,0,0,4063,4052,1,0,0,0,4063,4059,1,0,0,0,4064,
  	4065,1,0,0,0,4065,4066,5,353,0,0,4066,369,1,0,0,0,4067,4184,3,372,186,
  	0,4068,4069,7,32,0,0,4069,4070,3,426,213,0,4070,4071,5,374,0,0,4071,4072,
  	6,185,-1,0,4072,4185,1,0,0,0,4073,4074,5,344,0,0,4074,4075,3,372,186,
  	0,4075,4076,5,374,0,0,4076,4077,6,185,-1,0,4077,4185,1,0,0,0,4078,4079,
  	5,345,0,0,4079,4080,3,426,213,0,4080,4081,5,374,0,0,4081,4082,6,185,-1,
  	0,4082,4185,1,0,0,0,4083,4084,7,33,0,0,4084,4085,3,426,213,0,4085,4086,
  	5,374,0,0,4086,4087,6,185,-1,0,4087,4185,1,0,0,0,4088,4089,7,34,0,0,4089,
  	4090,3,426,213,0,4090,4091,5,374,0,0,4091,4092,6,185,-1,0,4092,4185,1,
  	0,0,0,4093,4094,7,35,0,0,4094,4095,3,426,213,0,4095,4096,5,374,0,0,4096,
  	4097,6,185,-1,0,4097,4185,1,0,0,0,4098,4099,7,36,0,0,4099,4100,3,426,
  	213,0,4100,4101,5,374,0,0,4101,4102,6,185,-1,0,4102,4185,1,0,0,0,4103,
  	4104,7,37,0,0,4104,4105,3,426,213,0,4105,4106,5,374,0,0,4106,4107,6,185,
  	-1,0,4107,4185,1,0,0,0,4108,4109,7,38,0,0,4109,4110,3,426,213,0,4110,
  	4111,5,374,0,0,4111,4112,6,185,-1,0,4112,4185,1,0,0,0,4113,4114,7,39,
  	0,0,4114,4115,3,426,213,0,4115,4116,5,374,0,0,4116,4117,6,185,-1,0,4117,
  	4185,1,0,0,0,4118,4119,7,40,0,0,4119,4120,3,426,213,0,4120,4121,5,374,
  	0,0,4121,4122,6,185,-1,0,4122,4185,1,0,0,0,4123,4124,7,41,0,0,4124,4125,
  	3,426,213,0,4125,4126,5,374,0,0,4126,4127,6,185,-1,0,4127,4185,1,0,0,
  	0,4128,4129,7,42,0,0,4129,4130,3,426,213,0,4130,4131,5,374,0,0,4131,4132,
  	6,185,-1,0,4132,4185,1,0,0,0,4133,4134,7,43,0,0,4134,4135,3,426,213,0,
  	4135,4136,5,374,0,0,4136,4137,6,185,-1,0,4137,4185,1,0,0,0,4138,4139,
  	7,44,0,0,4139,4140,3,426,213,0,4140,4141,5,374,0,0,4141,4142,6,185,-1,
  	0,4142,4185,1,0,0,0,4143,4144,5,346,0,0,4144,4145,3,426,213,0,4145,4152,
  	6,185,-1,0,4146,4147,5,346,0,0,4147,4148,3,426,213,0,4148,4149,6,185,
  	-1,0,4149,4151,1,0,0,0,4150,4146,1,0,0,0,4151,4154,1,0,0,0,4152,4150,
  	1,0,0,0,4152,4153,1,0,0,0,4153,4155,1,0,0,0,4154,4152,1,0,0,0,4155,4156,
  	5,374,0,0,4156,4185,1,0,0,0,4157,4158,5,347,0,0,4158,4159,3,426,213,0,
  	4159,4160,5,374,0,0,4160,4161,6,185,-1,0,4161,4185,1,0,0,0,4162,4163,
  	5,348,0,0,4163,4164,3,372,186,0,4164,4165,5,374,0,0,4165,4166,6,185,-1,
  	0,4166,4185,1,0,0,0,4167,4168,5,349,0,0,4168,4174,6,185,-1,0,4169,4170,
  	3,372,186,0,4170,4171,6,185,-1,0,4171,4173,1,0,0,0,4172,4169,1,0,0,0,
  	4173,4176,1,0,0,0,4174,4172,1,0,0,0,4174,4175,1,0,0,0,4175,4177,1,0,0,
  	0,4176,4174,1,0,0,0,4177,4185,5,374,0,0,4178,4179,5,402,0,0,4179,4180,
  	5,374,0,0,4180,4185,6,185,-1,0,4181,4182,5,406,0,0,4182,4183,5,374,0,
  	0,4183,4185,6,185,-1,0,4184,4068,1,0,0,0,4184,4073,1,0,0,0,4184,4078,
  	1,0,0,0,4184,4083,1,0,0,0,4184,4088,1,0,0,0,4184,4093,1,0,0,0,4184,4098,
  	1,0,0,0,4184,4103,1,0,0,0,4184,4108,1,0,0,0,4184,4113,1,0,0,0,4184,4118,
  	1,0,0,0,4184,4123,1,0,0,0,4184,4128,1,0,0,0,4184,4133,1,0,0,0,4184,4138,
  	1,0,0,0,4184,4143,1,0,0,0,4184,4157,1,0,0,0,4184,4162,1,0,0,0,4184,4167,
  	1,0,0,0,4184,4178,1,0,0,0,4184,4181,1,0,0,0,4185,4197,1,0,0,0,4186,4187,
  	5,402,0,0,4187,4188,3,372,186,0,4188,4189,5,374,0,0,4189,4190,6,185,-1,
  	0,4190,4197,1,0,0,0,4191,4192,5,406,0,0,4192,4193,3,372,186,0,4193,4194,
  	5,374,0,0,4194,4195,6,185,-1,0,4195,4197,1,0,0,0,4196,4067,1,0,0,0,4196,
  	4186,1,0,0,0,4196,4191,1,0,0,0,4197,371,1,0,0,0,4198,4199,5,379,0,0,4199,
  	4201,6,186,-1,0,4200,4198,1,0,0,0,4200,4201,1,0,0,0,4201,4202,1,0,0,0,
  	4202,4203,5,432,0,0,4203,4214,6,186,-1,0,4204,4205,5,377,0,0,4205,4206,
  	5,432,0,0,4206,4213,6,186,-1,0,4207,4208,5,354,0,0,4208,4209,3,426,213,
  	0,4209,4210,5,355,0,0,4210,4211,6,186,-1,0,4211,4213,1,0,0,0,4212,4204,
  	1,0,0,0,4212,4207,1,0,0,0,4213,4216,1,0,0,0,4214,4212,1,0,0,0,4214,4215,
  	1,0,0,0,4215,4217,1,0,0,0,4216,4214,1,0,0,0,4217,4218,6,186,-1,0,4218,
  	373,1,0,0,0,4219,4220,5,350,0,0,4220,4221,3,426,213,0,4221,4228,6,187,
  	-1,0,4222,4223,5,372,0,0,4223,4224,3,426,213,0,4224,4225,6,187,-1,0,4225,
  	4227,1,0,0,0,4226,4222,1,0,0,0,4227,4230,1,0,0,0,4228,4226,1,0,0,0,4228,
  	4229,1,0,0,0,4229,4231,1,0,0,0,4230,4228,1,0,0,0,4231,4232,5,351,0,0,
  	4232,375,1,0,0,0,4233,4234,3,378,189,0,4234,4235,6,188,-1,0,4235,4240,
  	1,0,0,0,4236,4237,3,380,190,0,4237,4238,6,188,-1,0,4238,4240,1,0,0,0,
  	4239,4233,1,0,0,0,4239,4236,1,0,0,0,4240,377,1,0,0,0,4241,4242,5,26,0,
  	0,4242,4256,6,189,-1,0,4243,4244,5,241,0,0,4244,4256,6,189,-1,0,4245,
  	4246,5,242,0,0,4246,4256,6,189,-1,0,4247,4248,5,243,0,0,4248,4256,6,189,
  	-1,0,4249,4250,5,244,0,0,4250,4256,6,189,-1,0,4251,4252,5,245,0,0,4252,
  	4256,6,189,-1,0,4253,4254,5,246,0,0,4254,4256,6,189,-1,0,4255,4241,1,
  	0,0,0,4255,4243,1,0,0,0,4255,4245,1,0,0,0,4255,4247,1,0,0,0,4255,4249,
  	1,0,0,0,4255,4251,1,0,0,0,4255,4253,1,0,0,0,4256,4257,1,0,0,0,4257,4258,
  	3,32,16,0,4258,4260,6,189,-1,0,4259,4261,3,382,191,0,4260,4259,1,0,0,
  	0,4260,4261,1,0,0,0,4261,4276,1,0,0,0,4262,4268,5,247,0,0,4263,4264,5,
  	219,0,0,4264,4269,6,189,-1,0,4265,4266,3,426,213,0,4266,4267,6,189,-1,
  	0,4267,4269,1,0,0,0,4268,4263,1,0,0,0,4268,4265,1,0,0,0,4269,4274,1,0,
  	0,0,4270,4271,5,344,0,0,4271,4272,3,32,16,0,4272,4273,6,189,-1,0,4273,
  	4275,1,0,0,0,4274,4270,1,0,0,0,4274,4275,1,0,0,0,4275,4277,1,0,0,0,4276,
  	4262,1,0,0,0,4276,4277,1,0,0,0,4277,4282,1,0,0,0,4278,4279,7,45,0,0,4279,
  	4280,3,32,16,0,4280,4281,6,189,-1,0,4281,4283,1,0,0,0,4282,4278,1,0,0,
  	0,4282,4283,1,0,0,0,4283,4284,1,0,0,0,4284,4285,5,374,0,0,4285,379,1,
  	0,0,0,4286,4287,5,28,0,0,4287,4299,6,190,-1,0,4288,4289,5,250,0,0,4289,
  	4299,6,190,-1,0,4290,4291,5,251,0,0,4291,4299,6,190,-1,0,4292,4293,5,
  	252,0,0,4293,4299,6,190,-1,0,4294,4295,5,253,0,0,4295,4299,6,190,-1,0,
  	4296,4297,5,254,0,0,4297,4299,6,190,-1,0,4298,4286,1,0,0,0,4298,4288,
  	1,0,0,0,4298,4290,1,0,0,0,4298,4292,1,0,0,0,4298,4294,1,0,0,0,4298,4296,
  	1,0,0,0,4299,4300,1,0,0,0,4300,4301,3,32,16,0,4301,4303,6,190,-1,0,4302,
  	4304,3,382,191,0,4303,4302,1,0,0,0,4303,4304,1,0,0,0,4304,4319,1,0,0,
  	0,4305,4311,5,50,0,0,4306,4307,5,219,0,0,4307,4312,6,190,-1,0,4308,4309,
  	3,426,213,0,4309,4310,6,190,-1,0,4310,4312,1,0,0,0,4311,4306,1,0,0,0,
  	4311,4308,1,0,0,0,4312,4317,1,0,0,0,4313,4314,5,24,0,0,4314,4315,3,32,
  	16,0,4315,4316,6,190,-1,0,4316,4318,1,0,0,0,4317,4313,1,0,0,0,4317,4318,
  	1,0,0,0,4318,4320,1,0,0,0,4319,4305,1,0,0,0,4319,4320,1,0,0,0,4320,4325,
  	1,0,0,0,4321,4322,7,46,0,0,4322,4323,3,32,16,0,4323,4324,6,190,-1,0,4324,
  	4326,1,0,0,0,4325,4321,1,0,0,0,4325,4326,1,0,0,0,4326,4327,1,0,0,0,4327,
  	4328,5,374,0,0,4328,381,1,0,0,0,4329,4330,5,350,0,0,4330,4331,3,176,88,
  	0,4331,4338,6,191,-1,0,4332,4333,5,372,0,0,4333,4334,3,176,88,0,4334,
  	4335,6,191,-1,0,4335,4337,1,0,0,0,4336,4332,1,0,0,0,4337,4340,1,0,0,0,
  	4338,4336,1,0,0,0,4338,4339,1,0,0,0,4339,4341,1,0,0,0,4340,4338,1,0,0,
  	0,4341,4342,5,351,0,0,4342,383,1,0,0,0,4343,4344,5,256,0,0,4344,4345,
  	3,32,16,0,4345,4346,6,192,-1,0,4346,4352,1,0,0,0,4347,4348,5,257,0,0,
  	4348,4349,3,32,16,0,4349,4350,6,192,-1,0,4350,4352,1,0,0,0,4351,4343,
  	1,0,0,0,4351,4347,1,0,0,0,4352,385,1,0,0,0,4353,4354,3,388,194,0,4354,
  	4355,6,193,-1,0,4355,4363,1,0,0,0,4356,4357,3,390,195,0,4357,4358,6,193,
  	-1,0,4358,4363,1,0,0,0,4359,4360,3,392,196,0,4360,4361,6,193,-1,0,4361,
  	4363,1,0,0,0,4362,4353,1,0,0,0,4362,4356,1,0,0,0,4362,4359,1,0,0,0,4363,
  	387,1,0,0,0,4364,4365,5,258,0,0,4365,4366,3,426,213,0,4366,4367,5,374,
  	0,0,4367,4368,6,194,-1,0,4368,4375,1,0,0,0,4369,4370,5,259,0,0,4370,4371,
  	3,426,213,0,4371,4372,5,374,0,0,4372,4373,6,194,-1,0,4373,4375,1,0,0,
  	0,4374,4364,1,0,0,0,4374,4369,1,0,0,0,4375,389,1,0,0,0,4376,4377,5,260,
  	0,0,4377,4378,3,426,213,0,4378,4379,5,374,0,0,4379,4380,6,195,-1,0,4380,
  	391,1,0,0,0,4381,4395,5,261,0,0,4382,4385,5,396,0,0,4383,4386,5,434,0,
  	0,4384,4386,5,432,0,0,4385,4383,1,0,0,0,4385,4384,1,0,0,0,4386,4387,1,
  	0,0,0,4387,4388,5,398,0,0,4388,4396,6,196,-1,0,4389,4392,5,262,0,0,4390,
  	4393,5,434,0,0,4391,4393,5,432,0,0,4392,4390,1,0,0,0,4392,4391,1,0,0,
  	0,4393,4394,1,0,0,0,4394,4396,6,196,-1,0,4395,4382,1,0,0,0,4395,4389,
  	1,0,0,0,4395,4396,1,0,0,0,4396,4397,1,0,0,0,4397,4398,3,426,213,0,4398,
  	4399,5,374,0,0,4399,4400,6,196,-1,0,4400,393,1,0,0,0,4401,4415,5,261,
  	0,0,4402,4405,5,396,0,0,4403,4406,5,434,0,0,4404,4406,5,432,0,0,4405,
  	4403,1,0,0,0,4405,4404,1,0,0,0,4406,4407,1,0,0,0,4407,4408,5,398,0,0,
  	4408,4416,6,197,-1,0,4409,4412,5,262,0,0,4410,4413,5,434,0,0,4411,4413,
  	5,432,0,0,4412,4410,1,0,0,0,4412,4411,1,0,0,0,4413,4414,1,0,0,0,4414,
  	4416,6,197,-1,0,4415,4402,1,0,0,0,4415,4409,1,0,0,0,4415,4416,1,0,0,0,
  	4416,4417,1,0,0,0,4417,4418,3,426,213,0,4418,4419,6,197,-1,0,4419,395,
  	1,0,0,0,4420,4421,5,263,0,0,4421,4425,6,198,-1,0,4422,4423,5,264,0,0,
  	4423,4425,6,198,-1,0,4424,4420,1,0,0,0,4424,4422,1,0,0,0,4425,4426,1,
  	0,0,0,4426,4427,5,396,0,0,4427,4428,5,432,0,0,4428,4429,5,371,0,0,4429,
  	4430,3,232,116,0,4430,4431,1,0,0,0,4431,4440,6,198,-1,0,4432,4433,5,372,
  	0,0,4433,4434,5,432,0,0,4434,4435,5,371,0,0,4435,4436,3,232,116,0,4436,
  	4437,6,198,-1,0,4437,4439,1,0,0,0,4438,4432,1,0,0,0,4439,4442,1,0,0,0,
  	4440,4438,1,0,0,0,4440,4441,1,0,0,0,4441,4443,1,0,0,0,4442,4440,1,0,0,
  	0,4443,4444,5,398,0,0,4444,4445,3,426,213,0,4445,4446,6,198,-1,0,4446,
  	397,1,0,0,0,4447,4448,5,265,0,0,4448,4449,3,426,213,0,4449,4450,3,332,
  	166,0,4450,4462,6,199,-1,0,4451,4455,5,266,0,0,4452,4453,5,110,0,0,4453,
  	4455,5,265,0,0,4454,4451,1,0,0,0,4454,4452,1,0,0,0,4455,4456,1,0,0,0,
  	4456,4457,3,426,213,0,4457,4458,3,332,166,0,4458,4459,6,199,-1,0,4459,
  	4461,1,0,0,0,4460,4454,1,0,0,0,4461,4464,1,0,0,0,4462,4460,1,0,0,0,4462,
  	4463,1,0,0,0,4463,4469,1,0,0,0,4464,4462,1,0,0,0,4465,4466,5,110,0,0,
  	4466,4467,3,332,166,0,4467,4468,6,199,-1,0,4468,4470,1,0,0,0,4469,4465,
  	1,0,0,0,4469,4470,1,0,0,0,4470,399,1,0,0,0,4471,4472,5,265,0,0,4472,4473,
  	3,426,213,0,4473,4474,5,352,0,0,4474,4475,3,426,213,0,4475,4476,5,353,
  	0,0,4476,4490,6,200,-1,0,4477,4481,5,266,0,0,4478,4479,5,110,0,0,4479,
  	4481,5,265,0,0,4480,4477,1,0,0,0,4480,4478,1,0,0,0,4481,4482,1,0,0,0,
  	4482,4483,3,426,213,0,4483,4484,5,352,0,0,4484,4485,3,426,213,0,4485,
  	4486,5,353,0,0,4486,4487,6,200,-1,0,4487,4489,1,0,0,0,4488,4480,1,0,0,
  	0,4489,4492,1,0,0,0,4490,4488,1,0,0,0,4490,4491,1,0,0,0,4491,4499,1,0,
  	0,0,4492,4490,1,0,0,0,4493,4494,5,110,0,0,4494,4495,5,352,0,0,4495,4496,
  	3,426,213,0,4496,4497,5,353,0,0,4497,4498,6,200,-1,0,4498,4500,1,0,0,
  	0,4499,4493,1,0,0,0,4499,4500,1,0,0,0,4500,401,1,0,0,0,4501,4530,5,267,
  	0,0,4502,4503,3,404,202,0,4503,4504,5,374,0,0,4504,4505,3,426,213,0,4505,
  	4506,5,374,0,0,4506,4507,3,404,202,0,4507,4508,6,201,-1,0,4508,4531,1,
  	0,0,0,4509,4510,5,350,0,0,4510,4511,3,404,202,0,4511,4512,5,374,0,0,4512,
  	4513,3,426,213,0,4513,4514,5,374,0,0,4514,4515,3,404,202,0,4515,4516,
  	5,351,0,0,4516,4517,6,201,-1,0,4517,4531,1,0,0,0,4518,4519,3,372,186,
  	0,4519,4520,5,371,0,0,4520,4521,3,426,213,0,4521,4522,6,201,-1,0,4522,
  	4531,1,0,0,0,4523,4524,5,350,0,0,4524,4525,3,372,186,0,4525,4526,5,371,
  	0,0,4526,4527,3,426,213,0,4527,4528,5,351,0,0,4528,4529,6,201,-1,0,4529,
  	4531,1,0,0,0,4530,4502,1,0,0,0,4530,4509,1,0,0,0,4530,4518,1,0,0,0,4530,
  	4523,1,0,0,0,4531,4532,1,0,0,0,4532,4533,3,332,166,0,4533,4534,6,201,
  	-1,0,4534,4548,1,0,0,0,4535,4536,5,268,0,0,4536,4537,3,426,213,0,4537,
  	4538,3,332,166,0,4538,4539,6,201,-1,0,4539,4548,1,0,0,0,4540,4541,5,269,
  	0,0,4541,4542,3,332,166,0,4542,4543,5,268,0,0,4543,4544,3,426,213,0,4544,
  	4545,5,374,0,0,4545,4546,6,201,-1,0,4546,4548,1,0,0,0,4547,4501,1,0,0,
  	0,4547,4535,1,0,0,0,4547,4540,1,0,0,0,4548,403,1,0,0,0,4549,4558,3,372,
  	186,0,4550,4551,5,342,0,0,4551,4552,3,426,213,0,4552,4553,6,202,-1,0,
  	4553,4559,1,0,0,0,4554,4555,5,402,0,0,4555,4559,6,202,-1,0,4556,4557,
  	5,406,0,0,4557,4559,6,202,-1,0,4558,4550,1,0,0,0,4558,4554,1,0,0,0,4558,
  	4556,1,0,0,0,4559,4569,1,0,0,0,4560,4561,5,402,0,0,4561,4562,3,372,186,
  	0,4562,4563,6,202,-1,0,4563,4569,1,0,0,0,4564,4565,5,406,0,0,4565,4566,
  	3,372,186,0,4566,4567,6,202,-1,0,4567,4569,1,0,0,0,4568,4549,1,0,0,0,
  	4568,4560,1,0,0,0,4568,4564,1,0,0,0,4569,405,1,0,0,0,4570,4571,5,270,
  	0,0,4571,4575,6,203,-1,0,4572,4573,3,426,213,0,4573,4574,6,203,-1,0,4574,
  	4576,1,0,0,0,4575,4572,1,0,0,0,4575,4576,1,0,0,0,4576,4577,1,0,0,0,4577,
  	4611,5,374,0,0,4578,4579,5,271,0,0,4579,4583,6,203,-1,0,4580,4581,3,426,
  	213,0,4581,4582,6,203,-1,0,4582,4584,1,0,0,0,4583,4580,1,0,0,0,4583,4584,
  	1,0,0,0,4584,4585,1,0,0,0,4585,4611,5,374,0,0,4586,4587,5,31,0,0,4587,
  	4599,6,203,-1,0,4588,4589,3,426,213,0,4589,4596,6,203,-1,0,4590,4591,
  	5,372,0,0,4591,4592,3,426,213,0,4592,4593,6,203,-1,0,4593,4595,1,0,0,
  	0,4594,4590,1,0,0,0,4595,4598,1,0,0,0,4596,4594,1,0,0,0,4596,4597,1,0,
  	0,0,4597,4600,1,0,0,0,4598,4596,1,0,0,0,4599,4588,1,0,0,0,4599,4600,1,
  	0,0,0,4600,4601,1,0,0,0,4601,4611,5,374,0,0,4602,4603,5,272,0,0,4603,
  	4607,6,203,-1,0,4604,4605,3,426,213,0,4605,4606,6,203,-1,0,4606,4608,
  	1,0,0,0,4607,4604,1,0,0,0,4607,4608,1,0,0,0,4608,4609,1,0,0,0,4609,4611,
  	5,374,0,0,4610,4570,1,0,0,0,4610,4578,1,0,0,0,4610,4586,1,0,0,0,4610,
  	4602,1,0,0,0,4611,407,1,0,0,0,4612,4613,5,273,0,0,4613,4618,6,204,-1,
  	0,4614,4615,5,432,0,0,4615,4617,6,204,-1,0,4616,4614,1,0,0,0,4617,4620,
  	1,0,0,0,4618,4616,1,0,0,0,4618,4619,1,0,0,0,4619,4621,1,0,0,0,4620,4618,
  	1,0,0,0,4621,4622,5,24,0,0,4622,4623,3,426,213,0,4623,4624,6,204,-1,0,
  	4624,409,1,0,0,0,4625,4626,5,274,0,0,4626,4627,3,412,206,0,4627,4628,
  	3,32,16,0,4628,4629,6,205,-1,0,4629,4654,1,0,0,0,4630,4631,5,275,0,0,
  	4631,4632,3,412,206,0,4632,4633,3,32,16,0,4633,4634,6,205,-1,0,4634,4654,
  	1,0,0,0,4635,4636,5,276,0,0,4636,4637,3,412,206,0,4637,4638,3,32,16,0,
  	4638,4639,6,205,-1,0,4639,4654,1,0,0,0,4640,4641,5,277,0,0,4641,4642,
  	3,412,206,0,4642,4643,3,32,16,0,4643,4644,6,205,-1,0,4644,4654,1,0,0,
  	0,4645,4646,5,278,0,0,4646,4647,3,372,186,0,4647,4648,6,205,-1,0,4648,
  	4654,1,0,0,0,4649,4650,5,279,0,0,4650,4651,3,372,186,0,4651,4652,6,205,
  	-1,0,4652,4654,1,0,0,0,4653,4625,1,0,0,0,4653,4630,1,0,0,0,4653,4635,
  	1,0,0,0,4653,4640,1,0,0,0,4653,4645,1,0,0,0,4653,4649,1,0,0,0,4654,411,
  	1,0,0,0,4655,4656,5,280,0,0,4656,4692,6,206,-1,0,4657,4658,5,14,0,0,4658,
  	4692,6,206,-1,0,4659,4660,5,281,0,0,4660,4692,6,206,-1,0,4661,4662,5,
  	84,0,0,4662,4692,6,206,-1,0,4663,4664,5,282,0,0,4664,4692,6,206,-1,0,
  	4665,4666,5,283,0,0,4666,4692,6,206,-1,0,4667,4668,5,284,0,0,4668,4692,
  	6,206,-1,0,4669,4670,5,285,0,0,4670,4692,6,206,-1,0,4671,4672,5,286,0,
  	0,4672,4692,6,206,-1,0,4673,4674,5,287,0,0,4674,4692,6,206,-1,0,4675,
  	4676,5,288,0,0,4676,4692,6,206,-1,0,4677,4678,5,109,0,0,4678,4692,6,206,
  	-1,0,4679,4680,5,289,0,0,4680,4692,6,206,-1,0,4681,4682,5,290,0,0,4682,
  	4692,6,206,-1,0,4683,4684,5,291,0,0,4684,4692,6,206,-1,0,4685,4686,5,
  	292,0,0,4686,4692,6,206,-1,0,4687,4688,5,293,0,0,4688,4692,6,206,-1,0,
  	4689,4690,5,294,0,0,4690,4692,6,206,-1,0,4691,4655,1,0,0,0,4691,4657,
  	1,0,0,0,4691,4659,1,0,0,0,4691,4661,1,0,0,0,4691,4663,1,0,0,0,4691,4665,
  	1,0,0,0,4691,4667,1,0,0,0,4691,4669,1,0,0,0,4691,4671,1,0,0,0,4691,4673,
  	1,0,0,0,4691,4675,1,0,0,0,4691,4677,1,0,0,0,4691,4679,1,0,0,0,4691,4681,
  	1,0,0,0,4691,4683,1,0,0,0,4691,4685,1,0,0,0,4691,4687,1,0,0,0,4691,4689,
  	1,0,0,0,4692,413,1,0,0,0,4693,4694,3,412,206,0,4694,4723,6,207,-1,0,4695,
  	4696,3,32,16,0,4696,4697,6,207,-1,0,4697,4724,1,0,0,0,4698,4699,7,47,
  	0,0,4699,4712,6,207,-1,0,4700,4701,5,350,0,0,4701,4702,3,32,16,0,4702,
  	4703,5,351,0,0,4703,4709,1,0,0,0,4704,4705,5,396,0,0,4705,4706,3,32,16,
  	0,4706,4707,5,398,0,0,4707,4709,1,0,0,0,4708,4700,1,0,0,0,4708,4704,1,
  	0,0,0,4709,4710,1,0,0,0,4710,4711,6,207,-1,0,4711,4713,1,0,0,0,4712,4708,
  	1,0,0,0,4712,4713,1,0,0,0,4713,4714,1,0,0,0,4714,4724,6,207,-1,0,4715,
  	4716,7,48,0,0,4716,4724,6,207,-1,0,4717,4718,5,299,0,0,4718,4724,6,207,
  	-1,0,4719,4720,5,300,0,0,4720,4724,6,207,-1,0,4721,4722,5,301,0,0,4722,
  	4724,6,207,-1,0,4723,4695,1,0,0,0,4723,4698,1,0,0,0,4723,4715,1,0,0,0,
  	4723,4717,1,0,0,0,4723,4719,1,0,0,0,4723,4721,1,0,0,0,4723,4724,1,0,0,
  	0,4724,4726,1,0,0,0,4725,4727,3,182,91,0,4726,4725,1,0,0,0,4726,4727,
  	1,0,0,0,4727,4728,1,0,0,0,4728,4729,5,374,0,0,4729,4745,1,0,0,0,4730,
  	4731,5,302,0,0,4731,4732,3,426,213,0,4732,4737,6,207,-1,0,4733,4734,3,
  	416,208,0,4734,4735,6,207,-1,0,4735,4738,1,0,0,0,4736,4738,5,374,0,0,
  	4737,4733,1,0,0,0,4737,4736,1,0,0,0,4738,4745,1,0,0,0,4739,4740,5,87,
  	0,0,4740,4741,3,426,213,0,4741,4742,5,374,0,0,4742,4743,6,207,-1,0,4743,
  	4745,1,0,0,0,4744,4693,1,0,0,0,4744,4730,1,0,0,0,4744,4739,1,0,0,0,4745,
  	415,1,0,0,0,4746,4747,5,92,0,0,4747,4748,3,332,166,0,4748,4749,6,208,
  	-1,0,4749,417,1,0,0,0,4750,4751,5,432,0,0,4751,4752,6,209,-1,0,4752,4754,
  	3,420,210,0,4753,4755,3,422,211,0,4754,4753,1,0,0,0,4754,4755,1,0,0,0,
  	4755,4756,1,0,0,0,4756,4757,5,374,0,0,4757,4758,6,209,-1,0,4758,419,1,
  	0,0,0,4759,4771,5,350,0,0,4760,4761,3,176,88,0,4761,4768,6,210,-1,0,4762,
  	4763,5,372,0,0,4763,4764,3,176,88,0,4764,4765,6,210,-1,0,4765,4767,1,
  	0,0,0,4766,4762,1,0,0,0,4767,4770,1,0,0,0,4768,4766,1,0,0,0,4768,4769,
  	1,0,0,0,4769,4772,1,0,0,0,4770,4768,1,0,0,0,4771,4760,1,0,0,0,4771,4772,
  	1,0,0,0,4772,4773,1,0,0,0,4773,4774,5,351,0,0,4774,421,1,0,0,0,4775,4793,
  	7,8,0,0,4776,4777,5,350,0,0,4777,4778,3,176,88,0,4778,4785,6,211,-1,0,
  	4779,4780,5,372,0,0,4780,4781,3,176,88,0,4781,4782,6,211,-1,0,4782,4784,
  	1,0,0,0,4783,4779,1,0,0,0,4784,4787,1,0,0,0,4785,4783,1,0,0,0,4785,4786,
  	1,0,0,0,4786,4788,1,0,0,0,4787,4785,1,0,0,0,4788,4789,5,351,0,0,4789,
  	4794,1,0,0,0,4790,4791,3,176,88,0,4791,4792,6,211,-1,0,4792,4794,1,0,
  	0,0,4793,4776,1,0,0,0,4793,4790,1,0,0,0,4794,423,1,0,0,0,4795,4796,5,
  	303,0,0,4796,4797,5,434,0,0,4797,4798,5,374,0,0,4798,4799,6,212,-1,0,
  	4799,425,1,0,0,0,4800,4801,3,428,214,0,4801,4922,6,213,-1,0,4802,4803,
  	5,342,0,0,4803,4804,3,426,213,0,4804,4805,6,213,-1,0,4805,4923,1,0,0,
  	0,4806,4807,5,345,0,0,4807,4808,3,426,213,0,4808,4809,6,213,-1,0,4809,
  	4923,1,0,0,0,4810,4811,5,343,0,0,4811,4812,3,426,213,0,4812,4813,6,213,
  	-1,0,4813,4923,1,0,0,0,4814,4815,5,400,0,0,4815,4816,3,426,213,0,4816,
  	4817,6,213,-1,0,4817,4923,1,0,0,0,4818,4819,5,401,0,0,4819,4820,3,426,
  	213,0,4820,4821,6,213,-1,0,4821,4923,1,0,0,0,4822,4823,5,404,0,0,4823,
  	4824,3,426,213,0,4824,4825,6,213,-1,0,4825,4923,1,0,0,0,4826,4827,5,405,
  	0,0,4827,4828,3,426,213,0,4828,4829,6,213,-1,0,4829,4923,1,0,0,0,4830,
  	4831,5,408,0,0,4831,4832,3,426,213,0,4832,4833,6,213,-1,0,4833,4923,1,
  	0,0,0,4834,4835,5,409,0,0,4835,4836,3,426,213,0,4836,4837,6,213,-1,0,
  	4837,4923,1,0,0,0,4838,4839,5,411,0,0,4839,4840,3,426,213,0,4840,4841,
  	6,213,-1,0,4841,4923,1,0,0,0,4842,4843,5,412,0,0,4843,4844,3,426,213,
  	0,4844,4845,6,213,-1,0,4845,4923,1,0,0,0,4846,4847,5,414,0,0,4847,4848,
  	3,426,213,0,4848,4849,6,213,-1,0,4849,4923,1,0,0,0,4850,4851,5,415,0,
  	0,4851,4852,3,426,213,0,4852,4853,6,213,-1,0,4853,4923,1,0,0,0,4854,4855,
  	5,382,0,0,4855,4856,3,426,213,0,4856,4857,6,213,-1,0,4857,4923,1,0,0,
  	0,4858,4859,5,383,0,0,4859,4860,3,426,213,0,4860,4861,6,213,-1,0,4861,
  	4923,1,0,0,0,4862,4863,5,387,0,0,4863,4864,3,426,213,0,4864,4865,6,213,
  	-1,0,4865,4923,1,0,0,0,4866,4867,5,388,0,0,4867,4868,3,426,213,0,4868,
  	4869,6,213,-1,0,4869,4923,1,0,0,0,4870,4871,5,423,0,0,4871,4872,3,426,
  	213,0,4872,4873,6,213,-1,0,4873,4923,1,0,0,0,4874,4875,5,424,0,0,4875,
  	4876,3,426,213,0,4876,4877,6,213,-1,0,4877,4923,1,0,0,0,4878,4879,5,427,
  	0,0,4879,4880,3,426,213,0,4880,4881,6,213,-1,0,4881,4923,1,0,0,0,4882,
  	4883,5,428,0,0,4883,4884,3,426,213,0,4884,4885,6,213,-1,0,4885,4923,1,
  	0,0,0,4886,4887,5,430,0,0,4887,4888,3,426,213,0,4888,4889,6,213,-1,0,
  	4889,4923,1,0,0,0,4890,4891,5,431,0,0,4891,4892,3,426,213,0,4892,4893,
  	6,213,-1,0,4893,4923,1,0,0,0,4894,4895,5,420,0,0,4895,4896,3,426,213,
  	0,4896,4897,6,213,-1,0,4897,4923,1,0,0,0,4898,4899,5,421,0,0,4899,4900,
  	3,426,213,0,4900,4901,6,213,-1,0,4901,4923,1,0,0,0,4902,4903,5,417,0,
  	0,4903,4904,3,426,213,0,4904,4905,6,213,-1,0,4905,4923,1,0,0,0,4906,4907,
  	5,418,0,0,4907,4908,3,426,213,0,4908,4909,6,213,-1,0,4909,4923,1,0,0,
  	0,4910,4911,5,346,0,0,4911,4912,3,426,213,0,4912,4913,6,213,-1,0,4913,
  	4923,1,0,0,0,4914,4915,5,347,0,0,4915,4916,3,426,213,0,4916,4917,6,213,
  	-1,0,4917,4923,1,0,0,0,4918,4919,5,349,0,0,4919,4920,3,426,213,0,4920,
  	4921,6,213,-1,0,4921,4923,1,0,0,0,4922,4802,1,0,0,0,4922,4806,1,0,0,0,
  	4922,4810,1,0,0,0,4922,4814,1,0,0,0,4922,4818,1,0,0,0,4922,4822,1,0,0,
  	0,4922,4826,1,0,0,0,4922,4830,1,0,0,0,4922,4834,1,0,0,0,4922,4838,1,0,
  	0,0,4922,4842,1,0,0,0,4922,4846,1,0,0,0,4922,4850,1,0,0,0,4922,4854,1,
  	0,0,0,4922,4858,1,0,0,0,4922,4862,1,0,0,0,4922,4866,1,0,0,0,4922,4870,
  	1,0,0,0,4922,4874,1,0,0,0,4922,4878,1,0,0,0,4922,4882,1,0,0,0,4922,4886,
  	1,0,0,0,4922,4890,1,0,0,0,4922,4894,1,0,0,0,4922,4898,1,0,0,0,4922,4902,
  	1,0,0,0,4922,4906,1,0,0,0,4922,4910,1,0,0,0,4922,4914,1,0,0,0,4922,4918,
  	1,0,0,0,4922,4923,1,0,0,0,4923,427,1,0,0,0,4924,4925,3,430,215,0,4925,
  	4932,6,214,-1,0,4926,4927,5,373,0,0,4927,4928,3,426,213,0,4928,4929,5,
  	371,0,0,4929,4930,3,426,213,0,4930,4931,6,214,-1,0,4931,4933,1,0,0,0,
  	4932,4926,1,0,0,0,4932,4933,1,0,0,0,4933,429,1,0,0,0,4934,4935,3,432,
  	216,0,4935,4952,6,215,-1,0,4936,4937,3,336,168,0,4937,4938,6,215,-1,0,
  	4938,4946,1,0,0,0,4939,4940,3,338,169,0,4940,4941,6,215,-1,0,4941,4946,
  	1,0,0,0,4942,4943,3,340,170,0,4943,4944,6,215,-1,0,4944,4946,1,0,0,0,
  	4945,4936,1,0,0,0,4945,4939,1,0,0,0,4945,4942,1,0,0,0,4946,4947,1,0,0,
  	0,4947,4948,3,432,216,0,4948,4949,6,215,-1,0,4949,4951,1,0,0,0,4950,4945,
  	1,0,0,0,4951,4954,1,0,0,0,4952,4950,1,0,0,0,4952,4953,1,0,0,0,4953,431,
  	1,0,0,0,4954,4952,1,0,0,0,4955,4956,3,434,217,0,4956,4963,6,216,-1,0,
  	4957,4958,5,385,0,0,4958,4959,3,434,217,0,4959,4960,6,216,-1,0,4960,4962,
  	1,0,0,0,4961,4957,1,0,0,0,4962,4965,1,0,0,0,4963,4961,1,0,0,0,4963,4964,
  	1,0,0,0,4964,433,1,0,0,0,4965,4963,1,0,0,0,4966,4967,3,436,218,0,4967,
  	4974,6,217,-1,0,4968,4969,5,390,0,0,4969,4970,3,436,218,0,4970,4971,6,
  	217,-1,0,4971,4973,1,0,0,0,4972,4968,1,0,0,0,4973,4976,1,0,0,0,4974,4972,
  	1,0,0,0,4974,4975,1,0,0,0,4975,435,1,0,0,0,4976,4974,1,0,0,0,4977,4978,
  	3,438,219,0,4978,4985,6,218,-1,0,4979,4980,5,380,0,0,4980,4981,3,438,
  	219,0,4981,4982,6,218,-1,0,4982,4984,1,0,0,0,4983,4979,1,0,0,0,4984,4987,
  	1,0,0,0,4985,4983,1,0,0,0,4985,4986,1,0,0,0,4986,437,1,0,0,0,4987,4985,
  	1,0,0,0,4988,4989,3,440,220,0,4989,4996,6,219,-1,0,4990,4991,5,426,0,
  	0,4991,4992,3,440,220,0,4992,4993,6,219,-1,0,4993,4995,1,0,0,0,4994,4990,
  	1,0,0,0,4995,4998,1,0,0,0,4996,4994,1,0,0,0,4996,4997,1,0,0,0,4997,439,
  	1,0,0,0,4998,4996,1,0,0,0,4999,5000,3,442,221,0,5000,5007,6,220,-1,0,
  	5001,5002,5,429,0,0,5002,5003,3,442,221,0,5003,5004,6,220,-1,0,5004,5006,
  	1,0,0,0,5005,5001,1,0,0,0,5006,5009,1,0,0,0,5007,5005,1,0,0,0,5007,5008,
  	1,0,0,0,5008,441,1,0,0,0,5009,5007,1,0,0,0,5010,5011,3,444,222,0,5011,
  	5018,6,221,-1,0,5012,5013,5,422,0,0,5013,5014,3,444,222,0,5014,5015,6,
  	221,-1,0,5015,5017,1,0,0,0,5016,5012,1,0,0,0,5017,5020,1,0,0,0,5018,5016,
  	1,0,0,0,5018,5019,1,0,0,0,5019,443,1,0,0,0,5020,5018,1,0,0,0,5021,5022,
  	3,448,224,0,5022,5037,6,222,-1,0,5023,5024,3,446,223,0,5024,5025,3,448,
  	224,0,5025,5032,6,222,-1,0,5026,5027,3,446,223,0,5027,5028,3,448,224,
  	0,5028,5029,6,222,-1,0,5029,5031,1,0,0,0,5030,5026,1,0,0,0,5031,5034,
  	1,0,0,0,5032,5030,1,0,0,0,5032,5033,1,0,0,0,5033,5035,1,0,0,0,5034,5032,
  	1,0,0,0,5035,5036,6,222,-1,0,5036,5038,1,0,0,0,5037,5023,1,0,0,0,5037,
  	5038,1,0,0,0,5038,445,1,0,0,0,5039,5040,5,391,0,0,5040,5048,6,223,-1,
  	0,5041,5042,5,392,0,0,5042,5048,6,223,-1,0,5043,5044,5,393,0,0,5044,5048,
  	6,223,-1,0,5045,5046,5,394,0,0,5046,5048,6,223,-1,0,5047,5039,1,0,0,0,
  	5047,5041,1,0,0,0,5047,5043,1,0,0,0,5047,5045,1,0,0,0,5048,447,1,0,0,
  	0,5049,5050,3,452,226,0,5050,5065,6,224,-1,0,5051,5052,3,450,225,0,5052,
  	5053,3,452,226,0,5053,5060,6,224,-1,0,5054,5055,3,450,225,0,5055,5056,
  	3,452,226,0,5056,5057,6,224,-1,0,5057,5059,1,0,0,0,5058,5054,1,0,0,0,
  	5059,5062,1,0,0,0,5060,5058,1,0,0,0,5060,5061,1,0,0,0,5061,5063,1,0,0,
  	0,5062,5060,1,0,0,0,5063,5064,6,224,-1,0,5064,5066,1,0,0,0,5065,5051,
  	1,0,0,0,5065,5066,1,0,0,0,5066,449,1,0,0,0,5067,5068,5,395,0,0,5068,5078,
  	6,225,-1,0,5069,5070,5,397,0,0,5070,5078,6,225,-1,0,5071,5072,5,396,0,
  	0,5072,5078,6,225,-1,0,5073,5074,5,398,0,0,5074,5078,6,225,-1,0,5075,
  	5076,5,25,0,0,5076,5078,6,225,-1,0,5077,5067,1,0,0,0,5077,5069,1,0,0,
  	0,5077,5071,1,0,0,0,5077,5073,1,0,0,0,5077,5075,1,0,0,0,5078,451,1,0,
  	0,0,5079,5080,3,456,228,0,5080,5087,6,226,-1,0,5081,5082,3,454,227,0,
  	5082,5083,3,456,228,0,5083,5084,6,226,-1,0,5084,5086,1,0,0,0,5085,5081,
  	1,0,0,0,5086,5089,1,0,0,0,5087,5085,1,0,0,0,5087,5088,1,0,0,0,5088,453,
  	1,0,0,0,5089,5087,1,0,0,0,5090,5091,5,419,0,0,5091,5095,6,227,-1,0,5092,
  	5093,5,416,0,0,5093,5095,6,227,-1,0,5094,5090,1,0,0,0,5094,5092,1,0,0,
  	0,5095,455,1,0,0,0,5096,5097,3,458,229,0,5097,5109,6,228,-1,0,5098,5099,
  	5,399,0,0,5099,5103,6,228,-1,0,5100,5101,5,403,0,0,5101,5103,6,228,-1,
  	0,5102,5098,1,0,0,0,5102,5100,1,0,0,0,5103,5104,1,0,0,0,5104,5105,3,458,
  	229,0,5105,5106,6,228,-1,0,5106,5108,1,0,0,0,5107,5102,1,0,0,0,5108,5111,
  	1,0,0,0,5109,5107,1,0,0,0,5109,5110,1,0,0,0,5110,457,1,0,0,0,5111,5109,
  	1,0,0,0,5112,5113,3,460,230,0,5113,5127,6,229,-1,0,5114,5115,5,407,0,
  	0,5115,5121,6,229,-1,0,5116,5117,5,410,0,0,5117,5121,6,229,-1,0,5118,
  	5119,5,413,0,0,5119,5121,6,229,-1,0,5120,5114,1,0,0,0,5120,5116,1,0,0,
  	0,5120,5118,1,0,0,0,5121,5122,1,0,0,0,5122,5123,3,460,230,0,5123,5124,
  	6,229,-1,0,5124,5126,1,0,0,0,5125,5120,1,0,0,0,5126,5129,1,0,0,0,5127,
  	5125,1,0,0,0,5127,5128,1,0,0,0,5128,459,1,0,0,0,5129,5127,1,0,0,0,5130,
  	5131,5,399,0,0,5131,5132,3,460,230,0,5132,5133,6,230,-1,0,5133,5215,1,
  	0,0,0,5134,5135,5,403,0,0,5135,5136,3,460,230,0,5136,5137,6,230,-1,0,
  	5137,5215,1,0,0,0,5138,5139,5,402,0,0,5139,5140,3,460,230,0,5140,5141,
  	6,230,-1,0,5141,5215,1,0,0,0,5142,5143,5,406,0,0,5143,5144,3,460,230,
  	0,5144,5145,6,230,-1,0,5145,5215,1,0,0,0,5146,5147,5,384,0,0,5147,5148,
  	3,460,230,0,5148,5149,6,230,-1,0,5149,5215,1,0,0,0,5150,5151,5,425,0,
  	0,5151,5152,3,460,230,0,5152,5153,6,230,-1,0,5153,5215,1,0,0,0,5154,5155,
  	5,349,0,0,5155,5156,3,460,230,0,5156,5157,6,230,-1,0,5157,5215,1,0,0,
  	0,5158,5159,5,348,0,0,5159,5160,3,460,230,0,5160,5161,6,230,-1,0,5161,
  	5215,1,0,0,0,5162,5163,3,346,173,0,5163,5164,6,230,-1,0,5164,5215,1,0,
  	0,0,5165,5166,3,354,177,0,5166,5167,6,230,-1,0,5167,5215,1,0,0,0,5168,
  	5169,3,360,180,0,5169,5170,6,230,-1,0,5170,5215,1,0,0,0,5171,5172,3,384,
  	192,0,5172,5173,6,230,-1,0,5173,5215,1,0,0,0,5174,5175,3,394,197,0,5175,
  	5176,6,230,-1,0,5176,5215,1,0,0,0,5177,5178,3,396,198,0,5178,5179,6,230,
  	-1,0,5179,5215,1,0,0,0,5180,5181,3,400,200,0,5181,5182,6,230,-1,0,5182,
  	5215,1,0,0,0,5183,5184,3,408,204,0,5184,5185,6,230,-1,0,5185,5215,1,0,
  	0,0,5186,5187,3,462,231,0,5187,5188,6,230,-1,0,5188,5215,1,0,0,0,5189,
  	5190,3,468,234,0,5190,5195,6,230,-1,0,5191,5192,5,402,0,0,5192,5196,6,
  	230,-1,0,5193,5194,5,406,0,0,5194,5196,6,230,-1,0,5195,5191,1,0,0,0,5195,
  	5193,1,0,0,0,5195,5196,1,0,0,0,5196,5215,1,0,0,0,5197,5198,3,476,238,
  	0,5198,5199,6,230,-1,0,5199,5215,1,0,0,0,5200,5201,3,464,232,0,5201,5202,
  	6,230,-1,0,5202,5215,1,0,0,0,5203,5204,3,466,233,0,5204,5205,6,230,-1,
  	0,5205,5215,1,0,0,0,5206,5207,5,350,0,0,5207,5208,3,426,213,0,5208,5209,
  	5,351,0,0,5209,5210,6,230,-1,0,5210,5215,1,0,0,0,5211,5212,3,478,239,
  	0,5212,5213,6,230,-1,0,5213,5215,1,0,0,0,5214,5130,1,0,0,0,5214,5134,
  	1,0,0,0,5214,5138,1,0,0,0,5214,5142,1,0,0,0,5214,5146,1,0,0,0,5214,5150,
  	1,0,0,0,5214,5154,1,0,0,0,5214,5158,1,0,0,0,5214,5162,1,0,0,0,5214,5165,
  	1,0,0,0,5214,5168,1,0,0,0,5214,5171,1,0,0,0,5214,5174,1,0,0,0,5214,5177,
  	1,0,0,0,5214,5180,1,0,0,0,5214,5183,1,0,0,0,5214,5186,1,0,0,0,5214,5189,
  	1,0,0,0,5214,5197,1,0,0,0,5214,5200,1,0,0,0,5214,5203,1,0,0,0,5214,5206,
  	1,0,0,0,5214,5211,1,0,0,0,5215,461,1,0,0,0,5216,5217,5,304,0,0,5217,5218,
  	5,396,0,0,5218,5219,3,232,116,0,5219,5220,5,398,0,0,5220,5221,5,350,0,
  	0,5221,5222,3,426,213,0,5222,5223,5,351,0,0,5223,5224,6,231,-1,0,5224,
  	463,1,0,0,0,5225,5226,5,365,0,0,5226,5227,3,426,213,0,5227,5228,5,366,
  	0,0,5228,5229,6,232,-1,0,5229,465,1,0,0,0,5230,5231,5,367,0,0,5231,5232,
  	3,426,213,0,5232,5233,5,368,0,0,5233,5234,6,233,-1,0,5234,467,1,0,0,0,
  	5235,5248,5,432,0,0,5236,5237,3,474,237,0,5237,5238,6,234,-1,0,5238,5249,
  	1,0,0,0,5239,5240,3,470,235,0,5240,5241,6,234,-1,0,5241,5249,1,0,0,0,
  	5242,5243,3,472,236,0,5243,5244,6,234,-1,0,5244,5249,1,0,0,0,5245,5246,
  	3,472,236,0,5246,5247,6,234,-1,0,5247,5249,1,0,0,0,5248,5236,1,0,0,0,
  	5248,5239,1,0,0,0,5248,5242,1,0,0,0,5248,5245,1,0,0,0,5248,5249,1,0,0,
  	0,5249,5250,1,0,0,0,5250,5255,6,234,-1,0,5251,5252,3,472,236,0,5252,5253,
  	6,234,-1,0,5253,5255,1,0,0,0,5254,5235,1,0,0,0,5254,5251,1,0,0,0,5255,
  	469,1,0,0,0,5256,5257,5,377,0,0,5257,5258,5,432,0,0,5258,5265,6,235,-1,
  	0,5259,5260,5,354,0,0,5260,5261,3,426,213,0,5261,5262,5,355,0,0,5262,
  	5263,6,235,-1,0,5263,5265,1,0,0,0,5264,5256,1,0,0,0,5264,5259,1,0,0,0,
  	5265,5266,1,0,0,0,5266,5264,1,0,0,0,5266,5267,1,0,0,0,5267,5268,1,0,0,
  	0,5268,5269,6,235,-1,0,5269,471,1,0,0,0,5270,5271,5,379,0,0,5271,5272,
  	5,432,0,0,5272,5281,6,236,-1,0,5273,5274,5,377,0,0,5274,5275,5,432,0,
  	0,5275,5282,6,236,-1,0,5276,5277,5,354,0,0,5277,5278,3,426,213,0,5278,
  	5279,5,355,0,0,5279,5280,6,236,-1,0,5280,5282,1,0,0,0,5281,5273,1,0,0,
  	0,5281,5276,1,0,0,0,5282,5283,1,0,0,0,5283,5281,1,0,0,0,5283,5284,1,0,
  	0,0,5284,5285,1,0,0,0,5285,5286,6,236,-1,0,5286,473,1,0,0,0,5287,5299,
  	5,350,0,0,5288,5289,3,176,88,0,5289,5296,6,237,-1,0,5290,5291,5,372,0,
  	0,5291,5292,3,176,88,0,5292,5293,6,237,-1,0,5293,5295,1,0,0,0,5294,5290,
  	1,0,0,0,5295,5298,1,0,0,0,5296,5294,1,0,0,0,5296,5297,1,0,0,0,5297,5300,
  	1,0,0,0,5298,5296,1,0,0,0,5299,5288,1,0,0,0,5299,5300,1,0,0,0,5300,5301,
  	1,0,0,0,5301,5302,5,351,0,0,5302,5303,6,237,-1,0,5303,475,1,0,0,0,5304,
  	5305,5,438,0,0,5305,5380,6,238,-1,0,5306,5307,5,437,0,0,5307,5380,6,238,
  	-1,0,5308,5309,5,436,0,0,5309,5380,6,238,-1,0,5310,5311,5,435,0,0,5311,
  	5380,6,238,-1,0,5312,5313,5,434,0,0,5313,5380,6,238,-1,0,5314,5315,5,
  	305,0,0,5315,5380,6,238,-1,0,5316,5317,5,306,0,0,5317,5380,6,238,-1,0,
  	5318,5319,5,307,0,0,5319,5380,6,238,-1,0,5320,5321,5,308,0,0,5321,5380,
  	6,238,-1,0,5322,5323,5,309,0,0,5323,5380,6,238,-1,0,5324,5325,7,47,0,
  	0,5325,5338,6,238,-1,0,5326,5327,5,350,0,0,5327,5328,3,32,16,0,5328,5329,
  	5,351,0,0,5329,5335,1,0,0,0,5330,5331,5,396,0,0,5331,5332,3,32,16,0,5332,
  	5333,5,398,0,0,5333,5335,1,0,0,0,5334,5326,1,0,0,0,5334,5330,1,0,0,0,
  	5335,5336,1,0,0,0,5336,5337,6,238,-1,0,5337,5339,1,0,0,0,5338,5334,1,
  	0,0,0,5338,5339,1,0,0,0,5339,5380,1,0,0,0,5340,5341,7,48,0,0,5341,5380,
  	6,238,-1,0,5342,5343,7,49,0,0,5343,5380,6,238,-1,0,5344,5345,5,299,0,
  	0,5345,5380,6,238,-1,0,5346,5347,5,300,0,0,5347,5380,6,238,-1,0,5348,
  	5349,5,301,0,0,5349,5380,6,238,-1,0,5350,5351,5,311,0,0,5351,5364,5,396,
  	0,0,5352,5353,5,59,0,0,5353,5365,6,238,-1,0,5354,5355,5,156,0,0,5355,
  	5365,6,238,-1,0,5356,5357,5,142,0,0,5357,5365,6,238,-1,0,5358,5359,5,
  	143,0,0,5359,5365,6,238,-1,0,5360,5361,5,144,0,0,5361,5365,6,238,-1,0,
  	5362,5363,5,145,0,0,5363,5365,6,238,-1,0,5364,5352,1,0,0,0,5364,5354,
  	1,0,0,0,5364,5356,1,0,0,0,5364,5358,1,0,0,0,5364,5360,1,0,0,0,5364,5362,
  	1,0,0,0,5365,5366,1,0,0,0,5366,5380,5,398,0,0,5367,5368,5,312,0,0,5368,
  	5380,6,238,-1,0,5369,5370,5,313,0,0,5370,5380,6,238,-1,0,5371,5372,5,
  	314,0,0,5372,5380,6,238,-1,0,5373,5374,5,315,0,0,5374,5380,6,238,-1,0,
  	5375,5376,5,316,0,0,5376,5380,6,238,-1,0,5377,5378,5,317,0,0,5378,5380,
  	6,238,-1,0,5379,5304,1,0,0,0,5379,5306,1,0,0,0,5379,5308,1,0,0,0,5379,
  	5310,1,0,0,0,5379,5312,1,0,0,0,5379,5314,1,0,0,0,5379,5316,1,0,0,0,5379,
  	5318,1,0,0,0,5379,5320,1,0,0,0,5379,5322,1,0,0,0,5379,5324,1,0,0,0,5379,
  	5340,1,0,0,0,5379,5342,1,0,0,0,5379,5344,1,0,0,0,5379,5346,1,0,0,0,5379,
  	5348,1,0,0,0,5379,5350,1,0,0,0,5379,5367,1,0,0,0,5379,5369,1,0,0,0,5379,
  	5371,1,0,0,0,5379,5373,1,0,0,0,5379,5375,1,0,0,0,5379,5377,1,0,0,0,5380,
  	477,1,0,0,0,5381,5382,5,352,0,0,5382,5383,3,426,213,0,5383,5390,6,239,
  	-1,0,5384,5385,5,372,0,0,5385,5386,3,426,213,0,5386,5387,6,239,-1,0,5387,
  	5389,1,0,0,0,5388,5384,1,0,0,0,5389,5392,1,0,0,0,5390,5388,1,0,0,0,5390,
  	5391,1,0,0,0,5391,5393,1,0,0,0,5392,5390,1,0,0,0,5393,5394,5,353,0,0,
  	5394,5395,6,239,-1,0,5395,5412,1,0,0,0,5396,5397,5,354,0,0,5397,5398,
  	3,426,213,0,5398,5405,6,239,-1,0,5399,5400,5,372,0,0,5400,5401,3,426,
  	213,0,5401,5402,6,239,-1,0,5402,5404,1,0,0,0,5403,5399,1,0,0,0,5404,5407,
  	1,0,0,0,5405,5403,1,0,0,0,5405,5406,1,0,0,0,5406,5408,1,0,0,0,5407,5405,
  	1,0,0,0,5408,5409,5,355,0,0,5409,5410,6,239,-1,0,5410,5412,1,0,0,0,5411,
  	5381,1,0,0,0,5411,5396,1,0,0,0,5412,479,1,0,0,0,580,498,508,513,517,522,
  	528,531,543,555,581,583,593,603,613,623,638,650,652,672,674,698,700,712,
  	714,721,725,728,733,739,747,752,757,763,767,770,775,782,788,793,799,801,
  	812,818,826,833,841,850,853,859,865,870,875,881,884,887,897,908,913,918,
  	927,929,943,947,956,967,976,980,985,994,996,1010,1014,1019,1024,1027,
  	1032,1038,1044,1049,1054,1056,1063,1068,1072,1080,1086,1093,1100,1107,
  	1113,1124,1129,1137,1142,1149,1153,1159,1166,1170,1173,1182,1188,1192,
  	1199,1210,1218,1228,1237,1240,1251,1257,1263,1268,1273,1283,1288,1293,
  	1296,1299,1305,1308,1311,1320,1323,1328,1335,1341,1346,1352,1354,1360,
  	1366,1368,1373,1384,1389,1394,1397,1400,1408,1418,1423,1427,1431,1434,
  	1437,1443,1446,1451,1458,1464,1471,1473,1476,1482,1484,1494,1498,1503,
  	1510,1517,1522,1528,1537,1548,1553,1557,1562,1566,1584,1594,1604,1622,
  	1629,1682,1690,1697,1703,1710,1712,1715,1720,1722,1729,1735,1739,1746,
  	1751,1757,1764,1773,1777,1782,1785,1797,1804,1811,1815,1821,1827,1832,
  	1837,1843,1852,1854,1860,1868,1872,1875,1878,1881,1891,1906,1908,1923,
  	1925,1934,1946,1964,2014,2018,2021,2027,2032,2038,2046,2053,2057,2063,
  	2070,2077,2084,2091,2094,2100,2107,2114,2121,2124,2129,2135,2150,2159,
  	2167,2178,2181,2195,2203,2214,2217,2230,2238,2240,2250,2253,2261,2264,
  	2272,2275,2280,2283,2290,2293,2301,2304,2308,2310,2313,2319,2327,2330,
  	2338,2341,2349,2352,2357,2360,2367,2370,2378,2381,2385,2387,2390,2398,
  	2409,2415,2424,2426,2440,2444,2453,2464,2468,2474,2481,2486,2493,2496,
  	2500,2520,2533,2545,2549,2552,2564,2566,2576,2580,2589,2593,2597,2601,
  	2609,2623,2625,2628,2630,2634,2644,2648,2653,2661,2666,2670,2681,2688,
  	2696,2703,2713,2723,2730,2732,2735,2740,2744,2770,2778,2783,2791,2802,
  	2811,2818,2825,2845,2850,2863,2870,2877,2900,2904,2912,2918,2926,2932,
  	2940,2946,2953,2963,2971,2976,2990,2996,3003,3009,3013,3019,3032,3036,
  	3047,3052,3065,3070,3083,3088,3100,3104,3112,3117,3123,3137,3143,3149,
  	3159,3175,3185,3193,3213,3219,3238,3244,3247,3256,3265,3285,3292,3297,
  	3304,3306,3313,3317,3328,3331,3338,3346,3352,3360,3369,3373,3378,3386,
  	3392,3398,3440,3443,3447,3456,3478,3488,3498,3507,3511,3516,3523,3527,
  	3531,3538,3548,3552,3559,3568,3570,3578,3582,3593,3603,3608,3612,3617,
  	3624,3629,3641,3646,3649,3654,3707,3713,3721,3739,3749,3763,3787,3853,
  	3864,3866,3880,3882,3895,3901,3904,3918,3925,3936,3951,3958,3970,3976,
  	3979,3987,3993,3997,4015,4026,4031,4046,4054,4061,4063,4152,4174,4184,
  	4196,4200,4212,4214,4228,4239,4255,4260,4268,4274,4276,4282,4298,4303,
  	4311,4317,4319,4325,4338,4351,4362,4374,4385,4392,4395,4405,4412,4415,
  	4424,4440,4454,4462,4469,4480,4490,4499,4530,4547,4558,4568,4575,4583,
  	4596,4599,4607,4610,4618,4653,4691,4708,4712,4723,4726,4737,4744,4754,
  	4768,4771,4785,4793,4922,4932,4945,4952,4963,4974,4985,4996,5007,5018,
  	5032,5037,5047,5060,5065,5077,5087,5094,5102,5109,5120,5127,5195,5214,
  	5248,5254,5264,5266,5281,5283,5296,5299,5334,5338,5364,5379,5390,5405,
  	5411
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  fmlParserStaticData = staticData.release();
}

}

FMLParser::FMLParser(TokenStream *input) : FMLParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

FMLParser::FMLParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  FMLParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *fmlParserStaticData->atn, fmlParserStaticData->decisionToDFA, fmlParserStaticData->sharedContextCache, options);
}

FMLParser::~FMLParser() {
  delete _interpreter;
}

const atn::ATN& FMLParser::getATN() const {
  return *fmlParserStaticData->atn;
}

std::string FMLParser::getGrammarFileName() const {
  return "FML.g4";
}

const std::vector<std::string>& FMLParser::getRuleNames() const {
  return fmlParserStaticData->ruleNames;
}

const dfa::Vocabulary& FMLParser::getVocabulary() const {
  return fmlParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView FMLParser::getSerializedATN() const {
  return fmlParserStaticData->serializedATN;
}


	/* BEGIN parser definitions section */
	
	////////////////////////////////////////////////////////////////////////////
	// SET LOCATION IN TRACEABLE FORM
	////////////////////////////////////////////////////////////////////////////
	
	#define SAVE_RULE_BEGIN_LOCATION  std::size_t bLine = getCurrentToken()->getLine()
	
	#define SET_RULE_LOCATION(form)   \
			sep::ParserUtil::setLocation(form, bLine, _input->LT(-1)->getLine())
	
	
	
	////////////////////////////////////////////////////////////////////////////
	// XLIA or XFSP MACRO
	////////////////////////////////////////////////////////////////////////////
	
	#define OP(op)            sep::OperatorManager::OPERATOR_##op
	
	#define NEW_EXPR(e)       sep::ExpressionConstructor::newExpr(e)
	
	#define NEW_BOOLEAN(b)    sep::ExpressionConstructor::newBoolean(b)
	#define NEW_INTEGER(i)    sep::ExpressionConstructor::newInteger(i)
	#define NEW_RATIONAL(q)   sep::ExpressionConstructor::newRational(q)
	#define NEW_FLOAT(f)      sep::ExpressionConstructor::newFloat(f)
	#define NEW_CHAR(c)       sep::ExpressionConstructor::newChar(c)
	#define NEW_STRING(s)     sep::ExpressionConstructor::newString(s)
	
	#define NEW_ID(id)        sep::ExpressionConstructor::newIdentifier(id)
	#define NEW_QID(id)       sep::ExpressionConstructor::newQualifiedIdentifier(id)
	#define NEW_QNID(id, nb)  ( (nb > 1)? NEW_QID(id) : NEW_ID(id) )
	
	
	#define NEW_INSTANCE_UFID(machine, var)  \
			sep::ExpressionConstructor::newQualifiedIdentifier(  \
				sep::OSS() << machine->getNameID() << '.' << var->getNameID() )
	
	
	#define NEW_CODE(op)               sep::ExpressionConstructor::newCode(op)
	#define NEW_CODE1(op, e)           sep::ExpressionConstructor::newCode(op, e)
	#define NEW_CODE2(op, e1, e2)      sep::ExpressionConstructor::newCode(op, e1, e2)
	#define NEW_CODE3(op, e1, e2, e3)  sep::ExpressionConstructor::newCode(op, e1, e2, e3)
	
	#define NEW_CODE_FLAT(op, e1, e2)  sep::ExpressionConstructor::newCodeFlat(op, e1, e2)
	
	#define NEW_STMT(op)               sep::StatementConstructor::newCode(op)
	#define NEW_STMT1(op, s)           sep::StatementConstructor::newCode(op, s)
	#define NEW_STMT2(op, s1, s2)      sep::StatementConstructor::newCode(op, s1, s2)
	#define NEW_STMT3(op, s1, s2, s3)  sep::StatementConstructor::newCode(op, s1, s2, s3)
	
	
	#define NEW_STMT_ASSIGN_OP(op, lv, e)  \
						NEW_STMT2(OP(ASSIGN_OP), lv, NEW_CODE1(op, e))
	
	#define NEW_STMT_ASSIGN_OP_AFTER(op, lv, e)  \
						NEW_STMT2(OP(ASSIGN_OP_AFTER), lv, NEW_CODE1(op, e))
	
	
	#define  NUM_INT(s)    std::atoi( s.c_str() )
	#define  NUM_FLOAT(s)  std::atof( s.c_str() )
		
	////////////////////////////////////////////////////////////////////////////
	// PARSER MACRO FOR SEMANTIC PREDICATE FOR KEYWORD DETECTION
	////////////////////////////////////////////////////////////////////////////
	
	#define IS_KEYWORD(kw)     ( getCurrentToken()->getText() == kw )

	


//----------------- FormalMLContext ------------------------------------------------------------------

FMLParser::FormalMLContext::FormalMLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::FormalMLContext::FormalMLContext(ParserRuleContext *parent, size_t invokingState, sep::WObjectManager * aWObjectManager)
  : ParserRuleContext(parent, invokingState) {
  this->aWObjectManager = aWObjectManager;
}

FMLParser::Prologue_fmlContext* FMLParser::FormalMLContext::prologue_fml() {
  return getRuleContext<FMLParser::Prologue_fmlContext>(0);
}

FMLParser::Def_systemContext* FMLParser::FormalMLContext::def_system() {
  return getRuleContext<FMLParser::Def_systemContext>(0);
}


size_t FMLParser::FormalMLContext::getRuleIndex() const {
  return FMLParser::RuleFormalML;
}


FMLParser::FormalMLContext* FMLParser::formalML(sep::WObjectManager * aWObjectManager) {
  FormalMLContext *_localctx = _tracker.createInstance<FormalMLContext>(_ctx, getState(), aWObjectManager);
  enterRule(_localctx, 0, FMLParser::RuleFormalML);

  	mWObjectManager = aWObjectManager;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(480);
    antlrcpp::downCast<FormalMLContext *>(_localctx)->pfml = prologue_fml();

    setState(481);
    antlrcpp::downCast<FormalMLContext *>(_localctx)->s = def_system();
     antlrcpp::downCast<FormalMLContext *>(_localctx)->spec =  antlrcpp::downCast<FormalMLContext *>(_localctx)->s->sys;  _localctx->spec->setWObject(antlrcpp::downCast<FormalMLContext *>(_localctx)->pfml->fmlProlog); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prologue_fmlContext ------------------------------------------------------------------

FMLParser::Prologue_fmlContext::Prologue_fmlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Prologue_fmlContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Prologue_fmlContext::GT() {
  return getToken(FMLParser::GT, 0);
}

tree::TerminalNode* FMLParser::Prologue_fmlContext::COLON() {
  return getToken(FMLParser::COLON, 0);
}

std::vector<tree::TerminalNode *> FMLParser::Prologue_fmlContext::ID() {
  return getTokens(FMLParser::ID);
}

tree::TerminalNode* FMLParser::Prologue_fmlContext::ID(size_t i) {
  return getToken(FMLParser::ID, i);
}

tree::TerminalNode* FMLParser::Prologue_fmlContext::ASSIGN() {
  return getToken(FMLParser::ASSIGN, 0);
}

std::vector<tree::TerminalNode *> FMLParser::Prologue_fmlContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Prologue_fmlContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}

FMLParser::Prologue_attributeContext* FMLParser::Prologue_fmlContext::prologue_attribute() {
  return getRuleContext<FMLParser::Prologue_attributeContext>(0);
}

FMLParser::Prologue_optionsContext* FMLParser::Prologue_fmlContext::prologue_options() {
  return getRuleContext<FMLParser::Prologue_optionsContext>(0);
}

std::vector<tree::TerminalNode *> FMLParser::Prologue_fmlContext::FloatLiteral() {
  return getTokens(FMLParser::FloatLiteral);
}

tree::TerminalNode* FMLParser::Prologue_fmlContext::FloatLiteral(size_t i) {
  return getToken(FMLParser::FloatLiteral, i);
}

std::vector<tree::TerminalNode *> FMLParser::Prologue_fmlContext::StringLiteral() {
  return getTokens(FMLParser::StringLiteral);
}

tree::TerminalNode* FMLParser::Prologue_fmlContext::StringLiteral(size_t i) {
  return getToken(FMLParser::StringLiteral, i);
}


size_t FMLParser::Prologue_fmlContext::getRuleIndex() const {
  return FMLParser::RulePrologue_fml;
}


FMLParser::Prologue_fmlContext* FMLParser::prologue_fml() {
  Prologue_fmlContext *_localctx = _tracker.createInstance<Prologue_fmlContext>(_ctx, getState());
  enterRule(_localctx, 2, FMLParser::RulePrologue_fml);

  	std::string attrID;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(498);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__0: {
        setState(484);
        match(FMLParser::T__0);
         antlrcpp::downCast<Prologue_fmlContext *>(_localctx)->fmlProlog =  mWObjectManager->newWSequence(sep::WObject::_NULL_, "formalml" ); 
        break;
      }

      case FMLParser::T__1: {
        setState(486);
        match(FMLParser::T__1);
         antlrcpp::downCast<Prologue_fmlContext *>(_localctx)->fmlProlog =  mWObjectManager->newWSequence(sep::WObject::_NULL_, "formalml" ); 
        break;
      }

      case FMLParser::T__2: {
        setState(488);
        match(FMLParser::T__2);
         antlrcpp::downCast<Prologue_fmlContext *>(_localctx)->fmlProlog =  mWObjectManager->newWSequence(sep::WObject::_NULL_, "xfml"     ); 
        break;
      }

      case FMLParser::T__3: {
        setState(490);
        match(FMLParser::T__3);
         antlrcpp::downCast<Prologue_fmlContext *>(_localctx)->fmlProlog =  mWObjectManager->newWSequence(sep::WObject::_NULL_, "fml"      ); 
        break;
      }

      case FMLParser::T__4: {
        setState(492);
        match(FMLParser::T__4);
         antlrcpp::downCast<Prologue_fmlContext *>(_localctx)->fmlProlog =  mWObjectManager->newWSequence(sep::WObject::_NULL_, "diversity"); 
        break;
      }

      case FMLParser::T__5: {
        setState(494);
        match(FMLParser::T__5);
         antlrcpp::downCast<Prologue_fmlContext *>(_localctx)->fmlProlog =  mWObjectManager->newWSequence(sep::WObject::_NULL_, "xlia"     ); 
        break;
      }

      case FMLParser::T__6: {
        setState(496);
        match(FMLParser::T__6);
         antlrcpp::downCast<Prologue_fmlContext *>(_localctx)->fmlProlog =  mWObjectManager->newWSequence(sep::WObject::_NULL_, "xfsp"     ); 
        break;
      }

      case FMLParser::LT_: {
        break;
      }

    default:
      break;
    }

    		if( _localctx->fmlProlog == sep::WObject::_NULL_ )
    		{ antlrcpp::downCast<Prologue_fmlContext *>(_localctx)->fmlProlog =  mWObjectManager->newWSequence(sep::WObject::_NULL_, "symbex"); }
    	  
    setState(501);
    match(FMLParser::LT_);
    setState(508);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__7: {
        setState(502);
        match(FMLParser::T__7);
         attrID = "system";  
        break;
      }

      case FMLParser::T__8: {
        setState(504);
        match(FMLParser::T__8);
         attrID = "package"; 
        break;
      }

      case FMLParser::ID: {
        setState(506);
        antlrcpp::downCast<Prologue_fmlContext *>(_localctx)->id = match(FMLParser::ID);
         attrID = antlrcpp::downCast<Prologue_fmlContext *>(_localctx)->id->getText(); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(513);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::ASSIGN) {
      setState(510);
      match(FMLParser::ASSIGN);
      setState(511);
      antlrcpp::downCast<Prologue_fmlContext *>(_localctx)->id = match(FMLParser::ID);

      			_localctx->fmlProlog->append( 
      					mWObjectManager->newWPropertyIdentifier(
      							_localctx->fmlProlog, attrID, antlrcpp::downCast<Prologue_fmlContext *>(_localctx)->id->getText() ) );
      		
    }
    setState(522);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::COMMA) {
      setState(515);
      match(FMLParser::COMMA);
      setState(517);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FMLParser::T__9) {
        setState(516);
        match(FMLParser::T__9);
      }
      setState(519);
      _la = _input->LA(1);
      if (!(((((_la - 432) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 432)) & 21) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(524);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(525);
    match(FMLParser::GT);
    setState(526);
    match(FMLParser::COLON);
    setState(528);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__10

    || _la == FMLParser::T__11) {
      setState(527);
      prologue_attribute( _localctx->fmlProlog );
    }
    setState(531);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__12) {
      setState(530);
      prologue_options();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prologue_attributeContext ------------------------------------------------------------------

FMLParser::Prologue_attributeContext::Prologue_attributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Prologue_attributeContext::Prologue_attributeContext(ParserRuleContext *parent, size_t invokingState, sep::WObject * fmlProlog)
  : ParserRuleContext(parent, invokingState) {
  this->fmlProlog = fmlProlog;
}

tree::TerminalNode* FMLParser::Prologue_attributeContext::ASSIGN() {
  return getToken(FMLParser::ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Prologue_attributeContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

tree::TerminalNode* FMLParser::Prologue_attributeContext::ID() {
  return getToken(FMLParser::ID, 0);
}


size_t FMLParser::Prologue_attributeContext::getRuleIndex() const {
  return FMLParser::RulePrologue_attribute;
}


FMLParser::Prologue_attributeContext* FMLParser::prologue_attribute(sep::WObject * fmlProlog) {
  Prologue_attributeContext *_localctx = _tracker.createInstance<Prologue_attributeContext>(_ctx, getState(), fmlProlog);
  enterRule(_localctx, 4, FMLParser::RulePrologue_attribute);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(543);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__10: {
        enterOuterAlt(_localctx, 1);
        setState(533);
        match(FMLParser::T__10);
        setState(534);
        match(FMLParser::ASSIGN);
        setState(535);
        antlrcpp::downCast<Prologue_attributeContext *>(_localctx)->id = match(FMLParser::ID);
        setState(536);
        match(FMLParser::SEMI);

        		fmlProlog->append( mWObjectManager->newWPropertyIdentifier(
        				fmlProlog, "package", antlrcpp::downCast<Prologue_attributeContext *>(_localctx)->id->getText() ) );
        	
        break;
      }

      case FMLParser::T__11: {
        enterOuterAlt(_localctx, 2);
        setState(538);
        match(FMLParser::T__11);
        setState(539);
        match(FMLParser::ASSIGN);
        setState(540);
        antlrcpp::downCast<Prologue_attributeContext *>(_localctx)->id = match(FMLParser::ID);
        setState(541);
        match(FMLParser::SEMI);

        		fmlProlog->append( mWObjectManager->newWPropertyIdentifier(
        				fmlProlog, "system", antlrcpp::downCast<Prologue_attributeContext *>(_localctx)->id->getText() ) );
        	
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prologue_optionsContext ------------------------------------------------------------------

FMLParser::Prologue_optionsContext::Prologue_optionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Prologue_optionsContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Prologue_optionsContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

std::vector<tree::TerminalNode *> FMLParser::Prologue_optionsContext::ASSIGN() {
  return getTokens(FMLParser::ASSIGN);
}

tree::TerminalNode* FMLParser::Prologue_optionsContext::ASSIGN(size_t i) {
  return getToken(FMLParser::ASSIGN, i);
}

std::vector<tree::TerminalNode *> FMLParser::Prologue_optionsContext::SEMI() {
  return getTokens(FMLParser::SEMI);
}

tree::TerminalNode* FMLParser::Prologue_optionsContext::SEMI(size_t i) {
  return getToken(FMLParser::SEMI, i);
}

std::vector<tree::TerminalNode *> FMLParser::Prologue_optionsContext::ID() {
  return getTokens(FMLParser::ID);
}

tree::TerminalNode* FMLParser::Prologue_optionsContext::ID(size_t i) {
  return getToken(FMLParser::ID, i);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Prologue_optionsContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Prologue_optionsContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}


size_t FMLParser::Prologue_optionsContext::getRuleIndex() const {
  return FMLParser::RulePrologue_options;
}


FMLParser::Prologue_optionsContext* FMLParser::prologue_options() {
  Prologue_optionsContext *_localctx = _tracker.createInstance<Prologue_optionsContext>(_ctx, getState());
  enterRule(_localctx, 6, FMLParser::RulePrologue_options);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(545);
    match(FMLParser::T__12);
    setState(546);
    match(FMLParser::LCURLY);
    setState(555);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::ID) {
      setState(547);
      antlrcpp::downCast<Prologue_optionsContext *>(_localctx)->id = match(FMLParser::ID);
      setState(548);
      match(FMLParser::ASSIGN);
      setState(549);
      antlrcpp::downCast<Prologue_optionsContext *>(_localctx)->e = expression();
      setState(550);
      match(FMLParser::SEMI);
       sep::ParserUtil::setPrologueOption(antlrcpp::downCast<Prologue_optionsContext *>(_localctx)->id->getText(), antlrcpp::downCast<Prologue_optionsContext *>(_localctx)->e->bf); 
      setState(557);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(558);
    match(FMLParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Modifier_declarationContext ------------------------------------------------------------------

FMLParser::Modifier_declarationContext::Modifier_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::Modifier_set_direction_strict_textContext *> FMLParser::Modifier_declarationContext::modifier_set_direction_strict_text() {
  return getRuleContexts<FMLParser::Modifier_set_direction_strict_textContext>();
}

FMLParser::Modifier_set_direction_strict_textContext* FMLParser::Modifier_declarationContext::modifier_set_direction_strict_text(size_t i) {
  return getRuleContext<FMLParser::Modifier_set_direction_strict_textContext>(i);
}


size_t FMLParser::Modifier_declarationContext::getRuleIndex() const {
  return FMLParser::RuleModifier_declaration;
}


FMLParser::Modifier_declarationContext* FMLParser::modifier_declaration() {
  Modifier_declarationContext *_localctx = _tracker.createInstance<Modifier_declarationContext>(_ctx, getState());
  enterRule(_localctx, 8, FMLParser::RuleModifier_declaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(581); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(581);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case FMLParser::T__13: {
                  setState(560);
                  match(FMLParser::T__13);
                   _localctx->mdfr.setFeatureFinal();        
                  break;
                }

                case FMLParser::T__14: {
                  setState(562);
                  match(FMLParser::T__14);
                   _localctx->mdfr.setFeatureStatic();       
                  break;
                }

                case FMLParser::T__15: {
                  setState(564);
                  match(FMLParser::T__15);
                   _localctx->mdfr.setFeatureVolatile();     
                  break;
                }

                case FMLParser::T__16: {
                  setState(566);
                  match(FMLParser::T__16);
                   _localctx->mdfr.setFeatureTransient();    
                  break;
                }

                case FMLParser::T__17: {
                  setState(568);
                  match(FMLParser::T__17);
                   _localctx->mdfr.setFeatureUnsafe();       
                  break;
                }

                case FMLParser::T__18: {
                  setState(570);
                  match(FMLParser::T__18);
                   _localctx->mdfr.setFeatureOptional();     
                  break;
                }

                case FMLParser::T__19: {
                  setState(572);
                  match(FMLParser::T__19);
                   _localctx->mdfr.setNatureReference();     
                  break;
                }

                case FMLParser::T__20: {
                  setState(574);
                  match(FMLParser::T__20);
                   _localctx->mdfr.setNatureBind();          
                  break;
                }

                case FMLParser::T__21: {
                  setState(576);
                  match(FMLParser::T__21);
                   _localctx->mdfr.setVisibilityPublic();    
                  break;
                }

                case FMLParser::T__22: {
                  setState(578);
                  match(FMLParser::T__22);
                   _localctx->mdfr.setVisibilityPrivate();   
                  break;
                }

                case FMLParser::T__25:
                case FMLParser::T__27:
                case FMLParser::T__29:
                case FMLParser::T__30: {
                  setState(580);
                  modifier_set_direction_strict_text( &( _localctx->mdfr ) );
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(583); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Modifier_directionContext ------------------------------------------------------------------

FMLParser::Modifier_directionContext::Modifier_directionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Modifier_directionContext::ASSIGN_REF() {
  return getToken(FMLParser::ASSIGN_REF, 0);
}

tree::TerminalNode* FMLParser::Modifier_directionContext::LTE() {
  return getToken(FMLParser::LTE, 0);
}


size_t FMLParser::Modifier_directionContext::getRuleIndex() const {
  return FMLParser::RuleModifier_direction;
}


FMLParser::Modifier_directionContext* FMLParser::modifier_direction() {
  Modifier_directionContext *_localctx = _tracker.createInstance<Modifier_directionContext>(_ctx, getState());
  enterRule(_localctx, 10, FMLParser::RuleModifier_direction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(593);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__23:
      case FMLParser::T__24:
      case FMLParser::T__25: {
        enterOuterAlt(_localctx, 1);
        setState(585);
        _la = _input->LA(1);
        if (!((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 117440512) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         _localctx->mdfr.setDirectionInput();  
        break;
      }

      case FMLParser::T__26:
      case FMLParser::T__27:
      case FMLParser::ASSIGN_REF: {
        enterOuterAlt(_localctx, 2);
        setState(587);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__26

        || _la == FMLParser::T__27 || _la == FMLParser::ASSIGN_REF)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         _localctx->mdfr.setDirectionOutput(); 
        break;
      }

      case FMLParser::T__28:
      case FMLParser::T__29: {
        enterOuterAlt(_localctx, 3);
        setState(589);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__28

        || _la == FMLParser::T__29)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         _localctx->mdfr.setDirectionInout();  
        break;
      }

      case FMLParser::T__30:
      case FMLParser::LTE: {
        enterOuterAlt(_localctx, 4);
        setState(591);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__30 || _la == FMLParser::LTE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         _localctx->mdfr.setDirectionReturn(); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Modifier_direction_textContext ------------------------------------------------------------------

FMLParser::Modifier_direction_textContext::Modifier_direction_textContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t FMLParser::Modifier_direction_textContext::getRuleIndex() const {
  return FMLParser::RuleModifier_direction_text;
}


FMLParser::Modifier_direction_textContext* FMLParser::modifier_direction_text() {
  Modifier_direction_textContext *_localctx = _tracker.createInstance<Modifier_direction_textContext>(_ctx, getState());
  enterRule(_localctx, 12, FMLParser::RuleModifier_direction_text);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(603);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__24:
      case FMLParser::T__25: {
        enterOuterAlt(_localctx, 1);
        setState(595);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__24

        || _la == FMLParser::T__25)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         _localctx->mdfr.setDirectionInput();  
        break;
      }

      case FMLParser::T__26:
      case FMLParser::T__27: {
        enterOuterAlt(_localctx, 2);
        setState(597);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__26

        || _la == FMLParser::T__27)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         _localctx->mdfr.setDirectionOutput(); 
        break;
      }

      case FMLParser::T__29: {
        enterOuterAlt(_localctx, 3);
        setState(599);
        match(FMLParser::T__29);
         _localctx->mdfr.setDirectionInout();  
        break;
      }

      case FMLParser::T__30: {
        enterOuterAlt(_localctx, 4);
        setState(601);
        match(FMLParser::T__30);
         _localctx->mdfr.setDirectionReturn(); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Modifier_set_direction_strict_textContext ------------------------------------------------------------------

FMLParser::Modifier_set_direction_strict_textContext::Modifier_set_direction_strict_textContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Modifier_set_direction_strict_textContext::Modifier_set_direction_strict_textContext(ParserRuleContext *parent, size_t invokingState, sep::Modifier * mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->mdfr = mdfr;
}


size_t FMLParser::Modifier_set_direction_strict_textContext::getRuleIndex() const {
  return FMLParser::RuleModifier_set_direction_strict_text;
}


FMLParser::Modifier_set_direction_strict_textContext* FMLParser::modifier_set_direction_strict_text(sep::Modifier * mdfr) {
  Modifier_set_direction_strict_textContext *_localctx = _tracker.createInstance<Modifier_set_direction_strict_textContext>(_ctx, getState(), mdfr);
  enterRule(_localctx, 14, FMLParser::RuleModifier_set_direction_strict_text);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(613);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__25: {
        enterOuterAlt(_localctx, 1);
        setState(605);
        match(FMLParser::T__25);
         _localctx->mdfr->setDirectionInput();  
        break;
      }

      case FMLParser::T__27: {
        enterOuterAlt(_localctx, 2);
        setState(607);
        match(FMLParser::T__27);
         _localctx->mdfr->setDirectionOutput(); 
        break;
      }

      case FMLParser::T__29: {
        enterOuterAlt(_localctx, 3);
        setState(609);
        match(FMLParser::T__29);
         _localctx->mdfr->setDirectionInout();  
        break;
      }

      case FMLParser::T__30: {
        enterOuterAlt(_localctx, 4);
        setState(611);
        match(FMLParser::T__30);
         _localctx->mdfr->setDirectionReturn(); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Modifier_direction_symbolContext ------------------------------------------------------------------

FMLParser::Modifier_direction_symbolContext::Modifier_direction_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Modifier_direction_symbolContext::ASSIGN_REF() {
  return getToken(FMLParser::ASSIGN_REF, 0);
}

tree::TerminalNode* FMLParser::Modifier_direction_symbolContext::LTE() {
  return getToken(FMLParser::LTE, 0);
}


size_t FMLParser::Modifier_direction_symbolContext::getRuleIndex() const {
  return FMLParser::RuleModifier_direction_symbol;
}


FMLParser::Modifier_direction_symbolContext* FMLParser::modifier_direction_symbol() {
  Modifier_direction_symbolContext *_localctx = _tracker.createInstance<Modifier_direction_symbolContext>(_ctx, getState());
  enterRule(_localctx, 16, FMLParser::RuleModifier_direction_symbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(623);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__23: {
        enterOuterAlt(_localctx, 1);
        setState(615);
        match(FMLParser::T__23);
         _localctx->mdfr.setDirectionInput();  
        break;
      }

      case FMLParser::ASSIGN_REF: {
        enterOuterAlt(_localctx, 2);
        setState(617);
        match(FMLParser::ASSIGN_REF);
         _localctx->mdfr.setDirectionOutput(); 
        break;
      }

      case FMLParser::T__28: {
        enterOuterAlt(_localctx, 3);
        setState(619);
        match(FMLParser::T__28);
         _localctx->mdfr.setDirectionInout();  
        break;
      }

      case FMLParser::LTE: {
        enterOuterAlt(_localctx, 4);
        setState(621);
        match(FMLParser::LTE);
         _localctx->mdfr.setDirectionReturn(); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Modifier_paramContext ------------------------------------------------------------------

FMLParser::Modifier_paramContext::Modifier_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Modifier_directionContext* FMLParser::Modifier_paramContext::modifier_direction() {
  return getRuleContext<FMLParser::Modifier_directionContext>(0);
}

tree::TerminalNode* FMLParser::Modifier_paramContext::BAND() {
  return getToken(FMLParser::BAND, 0);
}


size_t FMLParser::Modifier_paramContext::getRuleIndex() const {
  return FMLParser::RuleModifier_param;
}


FMLParser::Modifier_paramContext* FMLParser::modifier_param() {
  Modifier_paramContext *_localctx = _tracker.createInstance<Modifier_paramContext>(_ctx, getState());
  enterRule(_localctx, 18, FMLParser::RuleModifier_param);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(638);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__23:
      case FMLParser::T__24:
      case FMLParser::T__25:
      case FMLParser::T__26:
      case FMLParser::T__27:
      case FMLParser::T__28:
      case FMLParser::T__29:
      case FMLParser::T__30:
      case FMLParser::ASSIGN_REF:
      case FMLParser::LTE: {
        enterOuterAlt(_localctx, 1);
        setState(625);
        antlrcpp::downCast<Modifier_paramContext *>(_localctx)->m = modifier_direction();
         antlrcpp::downCast<Modifier_paramContext *>(_localctx)->mdfr =  antlrcpp::downCast<Modifier_paramContext *>(_localctx)->m->mdfr; 
        break;
      }

      case FMLParser::T__13: {
        enterOuterAlt(_localctx, 2);
        setState(628);
        match(FMLParser::T__13);
         _localctx->mdfr.setFeatureFinal();    
        break;
      }

      case FMLParser::T__31: {
        enterOuterAlt(_localctx, 3);
        setState(630);
        match(FMLParser::T__31);
         _localctx->mdfr.setFeatureConst();    
        break;
      }

      case FMLParser::T__19:
      case FMLParser::BAND: {
        enterOuterAlt(_localctx, 4);
        setState(632);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__19 || _la == FMLParser::BAND)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         _localctx->mdfr.setNatureReference(); 
        break;
      }

      case FMLParser::T__32: {
        enterOuterAlt(_localctx, 5);
        setState(634);
        match(FMLParser::T__32);
         _localctx->mdfr.setNatureMacro();     
        break;
      }

      case FMLParser::T__20: {
        enterOuterAlt(_localctx, 6);
        setState(636);
        match(FMLParser::T__20);
         _localctx->mdfr.setNatureBind();      
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Procedure_modifier_specifierContext ------------------------------------------------------------------

FMLParser::Procedure_modifier_specifierContext::Procedure_modifier_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t FMLParser::Procedure_modifier_specifierContext::getRuleIndex() const {
  return FMLParser::RuleProcedure_modifier_specifier;
}


FMLParser::Procedure_modifier_specifierContext* FMLParser::procedure_modifier_specifier() {
  Procedure_modifier_specifierContext *_localctx = _tracker.createInstance<Procedure_modifier_specifierContext>(_ctx, getState());
  enterRule(_localctx, 20, FMLParser::RuleProcedure_modifier_specifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(650); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(650);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::T__33: {
          setState(640);
          match(FMLParser::T__33);
           _localctx->spcfr.setFeatureTimed();          
          break;
        }

        case FMLParser::T__34: {
          setState(642);
          match(FMLParser::T__34);
           _localctx->spcfr.setFeatureDenseTimed();     
          break;
        }

        case FMLParser::T__35: {
          setState(644);
          match(FMLParser::T__35);
           _localctx->spcfr.setFeatureDiscreteTimed();  
          break;
        }

        case FMLParser::T__36: {
          setState(646);
          match(FMLParser::T__36);
           _localctx->spcfr.setFeatureInputEnabled();   
          break;
        }

        case FMLParser::T__17: {
          setState(648);
          match(FMLParser::T__17);
           _localctx->mdfr.setFeatureUnsafe();          
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(652); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 257698299904) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Executable_modifier_specifierContext ------------------------------------------------------------------

FMLParser::Executable_modifier_specifierContext::Executable_modifier_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t FMLParser::Executable_modifier_specifierContext::getRuleIndex() const {
  return FMLParser::RuleExecutable_modifier_specifier;
}


FMLParser::Executable_modifier_specifierContext* FMLParser::executable_modifier_specifier() {
  Executable_modifier_specifierContext *_localctx = _tracker.createInstance<Executable_modifier_specifierContext>(_ctx, getState());
  enterRule(_localctx, 22, FMLParser::RuleExecutable_modifier_specifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(672); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(672);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case FMLParser::T__37: {
                  setState(654);
                  match(FMLParser::T__37);
                   _localctx->spcfr.setDesignModel();           
                  break;
                }

                case FMLParser::T__38: {
                  setState(656);
                  match(FMLParser::T__38);
                   _localctx->spcfr.setDesignPrototypeStatic(); 
                  break;
                }

                case FMLParser::T__39: {
                  setState(658);
                  match(FMLParser::T__39);
                   _localctx->spcfr.setDesignInstanceDynamic(); 
                  break;
                }

                case FMLParser::T__17: {
                  setState(660);
                  match(FMLParser::T__17);
                   _localctx->mdfr.setFeatureUnsafe();          
                  break;
                }

                case FMLParser::T__33: {
                  setState(662);
                  match(FMLParser::T__33);
                   _localctx->spcfr.setFeatureTimed();          
                  break;
                }

                case FMLParser::T__34: {
                  setState(664);
                  match(FMLParser::T__34);
                   _localctx->spcfr.setFeatureDenseTimed();     
                  break;
                }

                case FMLParser::T__35: {
                  setState(666);
                  match(FMLParser::T__35);
                   _localctx->spcfr.setFeatureDiscreteTimed();  
                  break;
                }

                case FMLParser::T__36: {
                  setState(668);
                  match(FMLParser::T__36);
                   _localctx->spcfr.setFeatureInputEnabled();   
                  break;
                }

                case FMLParser::T__40: {
                  setState(670);
                  match(FMLParser::T__40);
                   _localctx->spcfr.setFeatureLifeline();       
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(674); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Instance_modifier_specifierContext ------------------------------------------------------------------

FMLParser::Instance_modifier_specifierContext::Instance_modifier_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t FMLParser::Instance_modifier_specifierContext::getRuleIndex() const {
  return FMLParser::RuleInstance_modifier_specifier;
}


FMLParser::Instance_modifier_specifierContext* FMLParser::instance_modifier_specifier() {
  Instance_modifier_specifierContext *_localctx = _tracker.createInstance<Instance_modifier_specifierContext>(_ctx, getState());
  enterRule(_localctx, 24, FMLParser::RuleInstance_modifier_specifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(698); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(698);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::T__13: {
          setState(676);
          match(FMLParser::T__13);
           _localctx->mdfr.setFeatureFinal();           
          break;
        }

        case FMLParser::T__39: {
          setState(678);
          match(FMLParser::T__39);
           _localctx->spcfr.setDesignInstanceDynamic(); 
          break;
        }

        case FMLParser::T__21: {
          setState(680);
          match(FMLParser::T__21);
           _localctx->mdfr.setVisibilityPublic();       
          break;
        }

        case FMLParser::T__41: {
          setState(682);
          match(FMLParser::T__41);
           _localctx->mdfr.setVisibilityProtected();    
          break;
        }

        case FMLParser::T__22: {
          setState(684);
          match(FMLParser::T__22);
           _localctx->mdfr.setVisibilityPrivate();      
          break;
        }

        case FMLParser::T__17: {
          setState(686);
          match(FMLParser::T__17);
           _localctx->mdfr.setFeatureUnsafe();          
          break;
        }

        case FMLParser::T__33: {
          setState(688);
          match(FMLParser::T__33);
           _localctx->spcfr.setFeatureTimed();          
          break;
        }

        case FMLParser::T__34: {
          setState(690);
          match(FMLParser::T__34);
           _localctx->spcfr.setFeatureDenseTimed();     
          break;
        }

        case FMLParser::T__35: {
          setState(692);
          match(FMLParser::T__35);
           _localctx->spcfr.setFeatureDiscreteTimed();  
          break;
        }

        case FMLParser::T__36: {
          setState(694);
          match(FMLParser::T__36);
           _localctx->spcfr.setFeatureInputEnabled();   
          break;
        }

        case FMLParser::T__40: {
          setState(696);
          match(FMLParser::T__40);
           _localctx->spcfr.setFeatureLifeline();       
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(700); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 7954292293632) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Modifier_transitionContext ------------------------------------------------------------------

FMLParser::Modifier_transitionContext::Modifier_transitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t FMLParser::Modifier_transitionContext::getRuleIndex() const {
  return FMLParser::RuleModifier_transition;
}


FMLParser::Modifier_transitionContext* FMLParser::modifier_transition() {
  Modifier_transitionContext *_localctx = _tracker.createInstance<Modifier_transitionContext>(_ctx, getState());
  enterRule(_localctx, 26, FMLParser::RuleModifier_transition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(712); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(712);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::T__16: {
          setState(702);
          match(FMLParser::T__16);
           _localctx->mdfr.setFeatureTransient();      
          break;
        }

        case FMLParser::T__33: {
          setState(704);
          match(FMLParser::T__33);
           _localctx->spcfr.setFeatureTimed();         
          break;
        }

        case FMLParser::T__34: {
          setState(706);
          match(FMLParser::T__34);
           _localctx->spcfr.setFeatureDenseTimed();    
          break;
        }

        case FMLParser::T__35: {
          setState(708);
          match(FMLParser::T__35);
           _localctx->spcfr.setFeatureDiscreteTimed(); 
          break;
        }

        case FMLParser::T__36: {
          setState(710);
          match(FMLParser::T__36);
           _localctx->spcfr.setFeatureInputEnabled();  
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(714); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 257698168832) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_packageContext ------------------------------------------------------------------

FMLParser::Def_packageContext::Def_packageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Def_packageContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Def_packageContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

tree::TerminalNode* FMLParser::Def_packageContext::ID() {
  return getToken(FMLParser::ID, 0);
}

tree::TerminalNode* FMLParser::Def_packageContext::StringLiteral() {
  return getToken(FMLParser::StringLiteral, 0);
}

FMLParser::Section_headerContext* FMLParser::Def_packageContext::section_header() {
  return getRuleContext<FMLParser::Section_headerContext>(0);
}

FMLParser::Section_importContext* FMLParser::Def_packageContext::section_import() {
  return getRuleContext<FMLParser::Section_importContext>(0);
}

std::vector<FMLParser::Section_propertyContext *> FMLParser::Def_packageContext::section_property() {
  return getRuleContexts<FMLParser::Section_propertyContext>();
}

FMLParser::Section_propertyContext* FMLParser::Def_packageContext::section_property(size_t i) {
  return getRuleContext<FMLParser::Section_propertyContext>(i);
}

std::vector<FMLParser::Section_composite_structureContext *> FMLParser::Def_packageContext::section_composite_structure() {
  return getRuleContexts<FMLParser::Section_composite_structureContext>();
}

FMLParser::Section_composite_structureContext* FMLParser::Def_packageContext::section_composite_structure(size_t i) {
  return getRuleContext<FMLParser::Section_composite_structureContext>(i);
}


size_t FMLParser::Def_packageContext::getRuleIndex() const {
  return FMLParser::RuleDef_package;
}


FMLParser::Def_packageContext* FMLParser::def_package() {
  Def_packageContext *_localctx = _tracker.createInstance<Def_packageContext>(_ctx, getState());
  enterRule(_localctx, 28, FMLParser::RuleDef_package);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(716);
    match(FMLParser::T__8);
    setState(717);
    antlrcpp::downCast<Def_packageContext *>(_localctx)->id = match(FMLParser::ID);
     PUSH_CTX_CPM( antlrcpp::downCast<Def_packageContext *>(_localctx)->pack =  new sep::Package(antlrcpp::downCast<Def_packageContext *>(_localctx)->id->getText()) ); 
    setState(721);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::StringLiteral) {
      setState(719);
      antlrcpp::downCast<Def_packageContext *>(_localctx)->stringliteralToken = match(FMLParser::StringLiteral);
       _localctx->pack->setUnrestrictedName(antlrcpp::downCast<Def_packageContext *>(_localctx)->stringliteralToken->getText());    
    }
    setState(723);
    match(FMLParser::LCURLY);
    setState(725);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__43) {
      setState(724);
      section_header( _localctx->pack );
    }
    setState(728);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__44) {
      setState(727);
      section_import( _localctx->pack );
    }
    setState(733);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 135) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 135)) & 63) != 0)) {
      setState(730);
      section_property( _localctx->pack );
      setState(735);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(739);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 283867514012696576) != 0) || _la == FMLParser::T__207

    || _la == FMLParser::T__208) {
      setState(736);
      section_composite_structure( _localctx->pack );
      setState(741);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(742);
    match(FMLParser::RCURLY);
   _ctx->stop = _input->LT(-1);

    	POP_CTX;

    	sep::ParserUtil::declareDefaultEndingStateIfNeed(needDefaultStateFinal,
    			needDefaultStateTerminal, needDefaultStateReturn);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_systemContext ------------------------------------------------------------------

FMLParser::Def_systemContext::Def_systemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Def_systemContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Def_systemContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

tree::TerminalNode* FMLParser::Def_systemContext::ID() {
  return getToken(FMLParser::ID, 0);
}

tree::TerminalNode* FMLParser::Def_systemContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

FMLParser::Executable_specifierContext* FMLParser::Def_systemContext::executable_specifier() {
  return getRuleContext<FMLParser::Executable_specifierContext>(0);
}

tree::TerminalNode* FMLParser::Def_systemContext::GT() {
  return getToken(FMLParser::GT, 0);
}

tree::TerminalNode* FMLParser::Def_systemContext::StringLiteral() {
  return getToken(FMLParser::StringLiteral, 0);
}

FMLParser::Section_headerContext* FMLParser::Def_systemContext::section_header() {
  return getRuleContext<FMLParser::Section_headerContext>(0);
}

FMLParser::Section_importContext* FMLParser::Def_systemContext::section_import() {
  return getRuleContext<FMLParser::Section_importContext>(0);
}

std::vector<FMLParser::Section_parameterContext *> FMLParser::Def_systemContext::section_parameter() {
  return getRuleContexts<FMLParser::Section_parameterContext>();
}

FMLParser::Section_parameterContext* FMLParser::Def_systemContext::section_parameter(size_t i) {
  return getRuleContext<FMLParser::Section_parameterContext>(i);
}

std::vector<FMLParser::Section_propertyContext *> FMLParser::Def_systemContext::section_property() {
  return getRuleContexts<FMLParser::Section_propertyContext>();
}

FMLParser::Section_propertyContext* FMLParser::Def_systemContext::section_property(size_t i) {
  return getRuleContext<FMLParser::Section_propertyContext>(i);
}

std::vector<FMLParser::Section_composite_structureContext *> FMLParser::Def_systemContext::section_composite_structure() {
  return getRuleContexts<FMLParser::Section_composite_structureContext>();
}

FMLParser::Section_composite_structureContext* FMLParser::Def_systemContext::section_composite_structure(size_t i) {
  return getRuleContext<FMLParser::Section_composite_structureContext>(i);
}

FMLParser::Section_behaviorContext* FMLParser::Def_systemContext::section_behavior() {
  return getRuleContext<FMLParser::Section_behaviorContext>(0);
}

FMLParser::Section_statemachineContext* FMLParser::Def_systemContext::section_statemachine() {
  return getRuleContext<FMLParser::Section_statemachineContext>(0);
}

std::vector<FMLParser::Section_model_of_computationContext *> FMLParser::Def_systemContext::section_model_of_computation() {
  return getRuleContexts<FMLParser::Section_model_of_computationContext>();
}

FMLParser::Section_model_of_computationContext* FMLParser::Def_systemContext::section_model_of_computation(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_computationContext>(i);
}

std::vector<FMLParser::Section_model_of_interactionContext *> FMLParser::Def_systemContext::section_model_of_interaction() {
  return getRuleContexts<FMLParser::Section_model_of_interactionContext>();
}

FMLParser::Section_model_of_interactionContext* FMLParser::Def_systemContext::section_model_of_interaction(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_interactionContext>(i);
}

std::vector<FMLParser::Section_model_of_executionContext *> FMLParser::Def_systemContext::section_model_of_execution() {
  return getRuleContexts<FMLParser::Section_model_of_executionContext>();
}

FMLParser::Section_model_of_executionContext* FMLParser::Def_systemContext::section_model_of_execution(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_executionContext>(i);
}

FMLParser::Executable_modifier_specifierContext* FMLParser::Def_systemContext::executable_modifier_specifier() {
  return getRuleContext<FMLParser::Executable_modifier_specifierContext>(0);
}


size_t FMLParser::Def_systemContext::getRuleIndex() const {
  return FMLParser::RuleDef_system;
}


FMLParser::Def_systemContext* FMLParser::def_system() {
  Def_systemContext *_localctx = _tracker.createInstance<Def_systemContext>(_ctx, getState());
  enterRule(_localctx, 30, FMLParser::RuleDef_system);

  	sep::Modifier mdfr;

  	sep::Specifier spcfr(sep::Specifier::COMPONENT_SYSTEM_KIND,
  			sep::Specifier::MOC_COMPOSITE_STRUCTURE_KIND );

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(747);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4380866904064) != 0)) {
      setState(744);
      antlrcpp::downCast<Def_systemContext *>(_localctx)->ms = executable_modifier_specifier();
       mdfr = antlrcpp::downCast<Def_systemContext *>(_localctx)->ms->mdfr; spcfr.ifnot_define( antlrcpp::downCast<Def_systemContext *>(_localctx)->ms->spcfr ); 
    }
    setState(749);
    match(FMLParser::T__7);
    setState(757);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LT_) {
      setState(750);
      match(FMLParser::LT_);
      setState(752);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FMLParser::T__42) {
        setState(751);
        match(FMLParser::T__42);
      }
      setState(754);
      executable_specifier( & spcfr );
      setState(755);
      match(FMLParser::GT);
    }
    setState(759);
    antlrcpp::downCast<Def_systemContext *>(_localctx)->id = match(FMLParser::ID);

    		PUSH_CTX_CPM( _SYSTEM_ = antlrcpp::downCast<Def_systemContext *>(_localctx)->sys =  new sep::System(antlrcpp::downCast<Def_systemContext *>(_localctx)->id->getText()) );

    		_localctx->sys->getwModifier().override_ifdef( mdfr );

    		_localctx->sys->getwSpecifier().ifnot_define( spcfr );
    	  
    setState(763);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::StringLiteral) {
      setState(761);
      antlrcpp::downCast<Def_systemContext *>(_localctx)->stringliteralToken = match(FMLParser::StringLiteral);
       _localctx->sys->setUnrestrictedName(antlrcpp::downCast<Def_systemContext *>(_localctx)->stringliteralToken->getText()); 
    }
    setState(765);
    match(FMLParser::LCURLY);
    setState(767);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__43) {
      setState(766);
      section_header( _localctx->sys );
    }
    setState(770);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__44) {
      setState(769);
      section_import( _localctx->sys );
    }
    setState(775);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 127) != 0)) {
      setState(772);
      section_parameter( _localctx->sys );
      setState(777);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
      sep::TemplateFactory::genProperty(_localctx->sys); 
    setState(782);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 135) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 135)) & 63) != 0)) {
      setState(779);
      section_property( _localctx->sys );
      setState(784);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(788);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 283867514012696576) != 0) || _la == FMLParser::T__207

    || _la == FMLParser::T__208) {
      setState(785);
      section_composite_structure( _localctx->sys );
      setState(790);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(793);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__63: {
        setState(791);
        section_behavior( _localctx->sys );
        break;
      }

      case FMLParser::T__73: {
        setState(792);
        section_statemachine( _localctx->sys );
        break;
      }

      case FMLParser::T__206:
      case FMLParser::T__210:
      case FMLParser::T__216:
      case FMLParser::T__217:
      case FMLParser::RCURLY: {
        break;
      }

    default:
      break;
    }
      sep::TemplateFactory::genBehavior(_localctx->sys); 
    setState(801);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 3089) != 0)) {
      setState(799);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::T__206: {
          setState(796);
          section_model_of_computation( _localctx->sys );
          break;
        }

        case FMLParser::T__216:
        case FMLParser::T__217: {
          setState(797);
          section_model_of_interaction( _localctx->sys );
          break;
        }

        case FMLParser::T__210: {
          setState(798);
          section_model_of_execution( _localctx->sys );
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(803);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(804);
    match(FMLParser::RCURLY);
   _ctx->stop = _input->LT(-1);

    	POP_CTX;

    	sep::ParserUtil::declareDefaultEndingStateIfNeed(needDefaultStateFinal,
    			needDefaultStateTerminal, needDefaultStateReturn);

    	SET_RULE_LOCATION(_localctx->sys);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedNameIDContext ------------------------------------------------------------------

FMLParser::QualifiedNameIDContext::QualifiedNameIDContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FMLParser::QualifiedNameIDContext::ID() {
  return getTokens(FMLParser::ID);
}

tree::TerminalNode* FMLParser::QualifiedNameIDContext::ID(size_t i) {
  return getToken(FMLParser::ID, i);
}

std::vector<tree::TerminalNode *> FMLParser::QualifiedNameIDContext::DOT() {
  return getTokens(FMLParser::DOT);
}

tree::TerminalNode* FMLParser::QualifiedNameIDContext::DOT(size_t i) {
  return getToken(FMLParser::DOT, i);
}

std::vector<tree::TerminalNode *> FMLParser::QualifiedNameIDContext::COLONx2() {
  return getTokens(FMLParser::COLONx2);
}

tree::TerminalNode* FMLParser::QualifiedNameIDContext::COLONx2(size_t i) {
  return getToken(FMLParser::COLONx2, i);
}


size_t FMLParser::QualifiedNameIDContext::getRuleIndex() const {
  return FMLParser::RuleQualifiedNameID;
}


FMLParser::QualifiedNameIDContext* FMLParser::qualifiedNameID() {
  QualifiedNameIDContext *_localctx = _tracker.createInstance<QualifiedNameIDContext>(_ctx, getState());
  enterRule(_localctx, 32, FMLParser::RuleQualifiedNameID);

  	cpLOCATOR.clear();
  	cpQNID.clear();


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(806);
    antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->id = match(FMLParser::ID);
     antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->s =  antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->id->getText(); 
    setState(818);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(812);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::DOT: {
            setState(808);
            match(FMLParser::DOT);
             cpQNID.push_back(_localctx->s); antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->s =  _localctx->s + "." ;  ++_localctx->nb; 
            break;
          }

          case FMLParser::COLONx2: {
            setState(810);
            match(FMLParser::COLONx2);
             cpLOCATOR = _localctx->s; cpQNID.clear(); antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->s =  _localctx->s + "::"; 
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(814);
        antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->id = match(FMLParser::ID);
         cpQNID.push_back(antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->id->getText());  antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->s =  _localctx->s + antlrcpp::downCast<QualifiedNameIDContext *>(_localctx)->id->getText();  
      }
      setState(820);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Integer_constantContext ------------------------------------------------------------------

FMLParser::Integer_constantContext::Integer_constantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Integer_constantContext::IntegerLiteral() {
  return getToken(FMLParser::IntegerLiteral, 0);
}

FMLParser::QualifiedNameIDContext* FMLParser::Integer_constantContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}


size_t FMLParser::Integer_constantContext::getRuleIndex() const {
  return FMLParser::RuleInteger_constant;
}


FMLParser::Integer_constantContext* FMLParser::integer_constant() {
  Integer_constantContext *_localctx = _tracker.createInstance<Integer_constantContext>(_ctx, getState());
  enterRule(_localctx, 34, FMLParser::RuleInteger_constant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(826);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::IntegerLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(821);
        antlrcpp::downCast<Integer_constantContext *>(_localctx)->n = match(FMLParser::IntegerLiteral);
         antlrcpp::downCast<Integer_constantContext *>(_localctx)->val =  NUM_INT(antlrcpp::downCast<Integer_constantContext *>(_localctx)->n->getText()); 
        break;
      }

      case FMLParser::ID: {
        enterOuterAlt(_localctx, 2);
        setState(823);
        antlrcpp::downCast<Integer_constantContext *>(_localctx)->cid = qualifiedNameID();
         antlrcpp::downCast<Integer_constantContext *>(_localctx)->val =  sep::ParserUtil::getIntegerConstant(antlrcpp::downCast<Integer_constantContext *>(_localctx)->cid->s, antlrcpp::downCast<Integer_constantContext *>(_localctx)->cid->nb); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Float_constantContext ------------------------------------------------------------------

FMLParser::Float_constantContext::Float_constantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Float_constantContext::FloatLiteral() {
  return getToken(FMLParser::FloatLiteral, 0);
}

FMLParser::QualifiedNameIDContext* FMLParser::Float_constantContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}


size_t FMLParser::Float_constantContext::getRuleIndex() const {
  return FMLParser::RuleFloat_constant;
}


FMLParser::Float_constantContext* FMLParser::float_constant() {
  Float_constantContext *_localctx = _tracker.createInstance<Float_constantContext>(_ctx, getState());
  enterRule(_localctx, 36, FMLParser::RuleFloat_constant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(833);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::FloatLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(828);
        antlrcpp::downCast<Float_constantContext *>(_localctx)->f = match(FMLParser::FloatLiteral);
         antlrcpp::downCast<Float_constantContext *>(_localctx)->val =  NUM_FLOAT(antlrcpp::downCast<Float_constantContext *>(_localctx)->f->getText()); 
        break;
      }

      case FMLParser::ID: {
        enterOuterAlt(_localctx, 2);
        setState(830);
        antlrcpp::downCast<Float_constantContext *>(_localctx)->cid = qualifiedNameID();
         antlrcpp::downCast<Float_constantContext *>(_localctx)->val =  sep::ParserUtil::getFloatConstant(antlrcpp::downCast<Float_constantContext *>(_localctx)->cid->s, antlrcpp::downCast<Float_constantContext *>(_localctx)->cid->nb); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_headerContext ------------------------------------------------------------------

FMLParser::Section_headerContext::Section_headerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_headerContext::Section_headerContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}


size_t FMLParser::Section_headerContext::getRuleIndex() const {
  return FMLParser::RuleSection_header;
}


FMLParser::Section_headerContext* FMLParser::section_header(sep::Machine * container) {
  Section_headerContext *_localctx = _tracker.createInstance<Section_headerContext>(_ctx, getState(), container);
  enterRule(_localctx, 38, FMLParser::RuleSection_header);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(835);
    match(FMLParser::T__43);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_importContext ------------------------------------------------------------------

FMLParser::Section_importContext::Section_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_importContext::Section_importContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

std::vector<FMLParser::Include_packageContext *> FMLParser::Section_importContext::include_package() {
  return getRuleContexts<FMLParser::Include_packageContext>();
}

FMLParser::Include_packageContext* FMLParser::Section_importContext::include_package(size_t i) {
  return getRuleContext<FMLParser::Include_packageContext>(i);
}


size_t FMLParser::Section_importContext::getRuleIndex() const {
  return FMLParser::RuleSection_import;
}


FMLParser::Section_importContext* FMLParser::section_import(sep::Machine * container) {
  Section_importContext *_localctx = _tracker.createInstance<Section_importContext>(_ctx, getState(), container);
  enterRule(_localctx, 40, FMLParser::RuleSection_import);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(837);
    match(FMLParser::T__44);
    setState(839); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(838);
      include_package();
      setState(841); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FMLParser::T__45);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Include_packageContext ------------------------------------------------------------------

FMLParser::Include_packageContext::Include_packageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FMLParser::Include_packageContext::StringLiteral() {
  return getTokens(FMLParser::StringLiteral);
}

tree::TerminalNode* FMLParser::Include_packageContext::StringLiteral(size_t i) {
  return getToken(FMLParser::StringLiteral, i);
}

tree::TerminalNode* FMLParser::Include_packageContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

tree::TerminalNode* FMLParser::Include_packageContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Include_packageContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}


size_t FMLParser::Include_packageContext::getRuleIndex() const {
  return FMLParser::RuleInclude_package;
}


FMLParser::Include_packageContext* FMLParser::include_package() {
  Include_packageContext *_localctx = _tracker.createInstance<Include_packageContext>(_ctx, getState());
  enterRule(_localctx, 42, FMLParser::RuleInclude_package);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(843);
    match(FMLParser::T__45);
    setState(853);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::StringLiteral: {
        setState(844);
        match(FMLParser::StringLiteral);
        setState(845);
        match(FMLParser::SEMI);
        break;
      }

      case FMLParser::LCURLY: {
        setState(846);
        match(FMLParser::LCURLY);
        setState(848); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(847);
          match(FMLParser::StringLiteral);
          setState(850); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FMLParser::StringLiteral);
        setState(852);
        match(FMLParser::RCURLY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_procedureContext ------------------------------------------------------------------

FMLParser::Section_procedureContext::Section_procedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_procedureContext::Section_procedureContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

std::vector<FMLParser::Def_procedureContext *> FMLParser::Section_procedureContext::def_procedure() {
  return getRuleContexts<FMLParser::Def_procedureContext>();
}

FMLParser::Def_procedureContext* FMLParser::Section_procedureContext::def_procedure(size_t i) {
  return getRuleContext<FMLParser::Def_procedureContext>(i);
}


size_t FMLParser::Section_procedureContext::getRuleIndex() const {
  return FMLParser::RuleSection_procedure;
}


FMLParser::Section_procedureContext* FMLParser::section_procedure(sep::Machine * container) {
  Section_procedureContext *_localctx = _tracker.createInstance<Section_procedureContext>(_ctx, getState(), container);
  enterRule(_localctx, 44, FMLParser::RuleSection_procedure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(855);
    match(FMLParser::T__46);
    setState(859);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 281732675010560) != 0)) {
      setState(856);
      antlrcpp::downCast<Section_procedureContext *>(_localctx)->p = def_procedure( container );
      setState(861);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_procedureContext ------------------------------------------------------------------

FMLParser::Def_procedureContext::Def_procedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_procedureContext::Def_procedureContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

FMLParser::Def_body_procedureContext* FMLParser::Def_procedureContext::def_body_procedure() {
  return getRuleContext<FMLParser::Def_body_procedureContext>(0);
}

tree::TerminalNode* FMLParser::Def_procedureContext::ID() {
  return getToken(FMLParser::ID, 0);
}

tree::TerminalNode* FMLParser::Def_procedureContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

FMLParser::Executable_specifierContext* FMLParser::Def_procedureContext::executable_specifier() {
  return getRuleContext<FMLParser::Executable_specifierContext>(0);
}

tree::TerminalNode* FMLParser::Def_procedureContext::GT() {
  return getToken(FMLParser::GT, 0);
}

tree::TerminalNode* FMLParser::Def_procedureContext::StringLiteral() {
  return getToken(FMLParser::StringLiteral, 0);
}

FMLParser::Def_machine_parametersContext* FMLParser::Def_procedureContext::def_machine_parameters() {
  return getRuleContext<FMLParser::Def_machine_parametersContext>(0);
}

FMLParser::Def_machine_returnsContext* FMLParser::Def_procedureContext::def_machine_returns() {
  return getRuleContext<FMLParser::Def_machine_returnsContext>(0);
}

FMLParser::Procedure_modifier_specifierContext* FMLParser::Def_procedureContext::procedure_modifier_specifier() {
  return getRuleContext<FMLParser::Procedure_modifier_specifierContext>(0);
}


size_t FMLParser::Def_procedureContext::getRuleIndex() const {
  return FMLParser::RuleDef_procedure;
}


FMLParser::Def_procedureContext* FMLParser::def_procedure(sep::Machine * container) {
  Def_procedureContext *_localctx = _tracker.createInstance<Def_procedureContext>(_ctx, getState(), container);
  enterRule(_localctx, 46, FMLParser::RuleDef_procedure);

  	sep::Modifier mdfr;

  	sep::Specifier spcfr( sep::Specifier::EXECUTABLE_PROCEDURE_MODEL_SPECIFIER );

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(865);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 257698299904) != 0)) {
      setState(862);
      antlrcpp::downCast<Def_procedureContext *>(_localctx)->ms = procedure_modifier_specifier();
       mdfr.override_ifdef( antlrcpp::downCast<Def_procedureContext *>(_localctx)->ms->mdfr ); spcfr.override_ifdef( antlrcpp::downCast<Def_procedureContext *>(_localctx)->ms->spcfr ); 
    }
    setState(867);
    match(FMLParser::T__47);
    setState(875);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LT_) {
      setState(868);
      match(FMLParser::LT_);
      setState(870);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FMLParser::T__42) {
        setState(869);
        match(FMLParser::T__42);
      }
      setState(872);
      executable_specifier( & spcfr );
      setState(873);
      match(FMLParser::GT);
    }
    setState(877);
    antlrcpp::downCast<Def_procedureContext *>(_localctx)->id = match(FMLParser::ID);

    		PUSH_CTX_CPM( antlrcpp::downCast<Def_procedureContext *>(_localctx)->procedure =  sep::Machine::newProcedure(
    				container, antlrcpp::downCast<Def_procedureContext *>(_localctx)->id->getText(), spcfr) );

    		_localctx->procedure->getwModifier().override_ifdef( mdfr );

    		_localctx->container->saveOwnedElement( _localctx->procedure );
    	  
    setState(881);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::StringLiteral) {
      setState(879);
      antlrcpp::downCast<Def_procedureContext *>(_localctx)->stringliteralToken = match(FMLParser::StringLiteral);
       _localctx->procedure->setUnrestrictedName(antlrcpp::downCast<Def_procedureContext *>(_localctx)->stringliteralToken->getText()); 
    }
    setState(884);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LPAREN

    || _la == FMLParser::LBRACKET) {
      setState(883);
      def_machine_parameters( _localctx->procedure );
    }
    setState(887);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__49

    || _la == FMLParser::T__50) {
      setState(886);
      def_machine_returns( _localctx->procedure ,
      			sep::Modifier::PROPERTY_RETURN_PARAMETER_MODIFIER );
    }
    setState(889);
    def_body_procedure( _localctx->procedure );
   _ctx->stop = _input->LT(-1);

    	POP_CTX;

    	sep::ParserUtil::checkProcedureCompositeMocKind(_localctx->procedure);

    	SET_RULE_LOCATION(_localctx->procedure);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_machine_parametersContext ------------------------------------------------------------------

FMLParser::Def_machine_parametersContext::Def_machine_parametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_machine_parametersContext::Def_machine_parametersContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
}

tree::TerminalNode* FMLParser::Def_machine_parametersContext::LBRACKET() {
  return getToken(FMLParser::LBRACKET, 0);
}

std::vector<FMLParser::Def_machine_variable_parameter_atomContext *> FMLParser::Def_machine_parametersContext::def_machine_variable_parameter_atom() {
  return getRuleContexts<FMLParser::Def_machine_variable_parameter_atomContext>();
}

FMLParser::Def_machine_variable_parameter_atomContext* FMLParser::Def_machine_parametersContext::def_machine_variable_parameter_atom(size_t i) {
  return getRuleContext<FMLParser::Def_machine_variable_parameter_atomContext>(i);
}

tree::TerminalNode* FMLParser::Def_machine_parametersContext::RBRACKET() {
  return getToken(FMLParser::RBRACKET, 0);
}

std::vector<tree::TerminalNode *> FMLParser::Def_machine_parametersContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Def_machine_parametersContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}

tree::TerminalNode* FMLParser::Def_machine_parametersContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Def_machine_parametersContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}


size_t FMLParser::Def_machine_parametersContext::getRuleIndex() const {
  return FMLParser::RuleDef_machine_parameters;
}


FMLParser::Def_machine_parametersContext* FMLParser::def_machine_parameters(sep::Machine * machine) {
  Def_machine_parametersContext *_localctx = _tracker.createInstance<Def_machine_parametersContext>(_ctx, getState(), machine);
  enterRule(_localctx, 48, FMLParser::RuleDef_machine_parameters);

  	sep::avm_offset_t offset = 0;
  	sep::Modifier mdfr = sep::Modifier::PROPERTY_PARAMETER_MODIFIER;

  	sep::PropertyPart * declPropertyPart = &( _localctx->machine->getPropertyPart() );

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(913);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LBRACKET: {
        enterOuterAlt(_localctx, 1);
        setState(891);
        match(FMLParser::LBRACKET);
        setState(892);
        def_machine_variable_parameter_atom( declPropertyPart , mdfr , offset );
        setState(897);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FMLParser::COMMA) {
          setState(893);
          match(FMLParser::COMMA);
          setState(894);
          def_machine_variable_parameter_atom( declPropertyPart , mdfr , ++offset );
          setState(899);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(900);
        match(FMLParser::RBRACKET);
        break;
      }

      case FMLParser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(902);
        match(FMLParser::LPAREN);
        setState(903);
        def_machine_variable_parameter_atom( declPropertyPart , mdfr , offset );
        setState(908);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FMLParser::COMMA) {
          setState(904);
          match(FMLParser::COMMA);
          setState(905);
          def_machine_variable_parameter_atom( declPropertyPart , mdfr , ++offset );
          setState(910);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(911);
        match(FMLParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_machine_variable_parameter_atomContext ------------------------------------------------------------------

FMLParser::Def_machine_variable_parameter_atomContext::Def_machine_variable_parameter_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_machine_variable_parameter_atomContext::Def_machine_variable_parameter_atomContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * paramDecl, sep::Modifier mdfr, sep::avm_offset_t offset)
  : ParserRuleContext(parent, invokingState) {
  this->paramDecl = paramDecl;
  this->mdfr = mdfr;
  this->offset = offset;
}

FMLParser::Type_varContext* FMLParser::Def_machine_variable_parameter_atomContext::type_var() {
  return getRuleContext<FMLParser::Type_varContext>(0);
}

FMLParser::Modifier_paramContext* FMLParser::Def_machine_variable_parameter_atomContext::modifier_param() {
  return getRuleContext<FMLParser::Modifier_paramContext>(0);
}

tree::TerminalNode* FMLParser::Def_machine_variable_parameter_atomContext::ID() {
  return getToken(FMLParser::ID, 0);
}

FMLParser::Initial_valueContext* FMLParser::Def_machine_variable_parameter_atomContext::initial_value() {
  return getRuleContext<FMLParser::Initial_valueContext>(0);
}

tree::TerminalNode* FMLParser::Def_machine_variable_parameter_atomContext::COLON() {
  return getToken(FMLParser::COLON, 0);
}

FMLParser::ExpressionContext* FMLParser::Def_machine_variable_parameter_atomContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}

FMLParser::QualifiedNameIDContext* FMLParser::Def_machine_variable_parameter_atomContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}


size_t FMLParser::Def_machine_variable_parameter_atomContext::getRuleIndex() const {
  return FMLParser::RuleDef_machine_variable_parameter_atom;
}


FMLParser::Def_machine_variable_parameter_atomContext* FMLParser::def_machine_variable_parameter_atom(sep::PropertyPart * paramDecl,sep::Modifier mdfr,sep::avm_offset_t offset) {
  Def_machine_variable_parameter_atomContext *_localctx = _tracker.createInstance<Def_machine_variable_parameter_atomContext>(_ctx, getState(), paramDecl, mdfr, offset);
  enterRule(_localctx, 50, FMLParser::RuleDef_machine_variable_parameter_atom);

  	sep::Variable * variable;
  	sep::Machine * machine = _localctx->paramDecl->getContainer()->as_ptr< sep::Machine >();
  	sep::BF paramT = sep::TypeManager::UNIVERSAL;
  	std::string paramID;
  	sep::BF value;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(947);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__13:
      case FMLParser::T__19:
      case FMLParser::T__20:
      case FMLParser::T__23:
      case FMLParser::T__24:
      case FMLParser::T__25:
      case FMLParser::T__26:
      case FMLParser::T__27:
      case FMLParser::T__28:
      case FMLParser::T__29:
      case FMLParser::T__30:
      case FMLParser::T__31:
      case FMLParser::T__32:
      case FMLParser::T__58:
      case FMLParser::T__141:
      case FMLParser::T__142:
      case FMLParser::T__143:
      case FMLParser::T__144:
      case FMLParser::T__146:
      case FMLParser::T__147:
      case FMLParser::T__148:
      case FMLParser::T__149:
      case FMLParser::T__150:
      case FMLParser::T__151:
      case FMLParser::T__152:
      case FMLParser::T__153:
      case FMLParser::T__154:
      case FMLParser::T__159:
      case FMLParser::T__160:
      case FMLParser::T__161:
      case FMLParser::T__162:
      case FMLParser::T__163:
      case FMLParser::T__164:
      case FMLParser::T__165:
      case FMLParser::T__166:
      case FMLParser::T__167:
      case FMLParser::T__168:
      case FMLParser::T__169:
      case FMLParser::T__170:
      case FMLParser::T__171:
      case FMLParser::T__172:
      case FMLParser::T__173:
      case FMLParser::T__174:
      case FMLParser::T__175:
      case FMLParser::T__176:
      case FMLParser::T__177:
      case FMLParser::T__178:
      case FMLParser::T__179:
      case FMLParser::T__180:
      case FMLParser::T__181:
      case FMLParser::T__182:
      case FMLParser::T__183:
      case FMLParser::T__184:
      case FMLParser::T__185:
      case FMLParser::T__186:
      case FMLParser::T__187:
      case FMLParser::T__188:
      case FMLParser::T__199:
      case FMLParser::T__200:
      case FMLParser::T__201:
      case FMLParser::T__202:
      case FMLParser::T__203:
      case FMLParser::T__204:
      case FMLParser::T__205:
      case FMLParser::ASSIGN_REF:
      case FMLParser::LTE:
      case FMLParser::BAND:
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(918);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 17166254080) != 0) || _la == FMLParser::ASSIGN_REF

        || _la == FMLParser::LTE || _la == FMLParser::BAND) {
          setState(915);
          antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->m = modifier_param();
           _localctx->mdfr.override_ifdef( antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->m->mdfr ); 
        }
        setState(920);
        antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->tv = type_var();
         paramT = antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->tv->type; 
        setState(929);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::ID) {
          setState(922);
          antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->id = match(FMLParser::ID);
           paramID = antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->id->getText(); 
          setState(927);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::ASSIGN

          || _la == FMLParser::LPAREN) {
            setState(924);
            antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->iv = initial_value();
             value = antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->iv->bf; 
          }
        }

        		_localctx->paramDecl->saveOwnedVariable( variable = new sep::Variable(
        				machine, _localctx->mdfr, paramT, paramID, value ) );
        	  
        break;
      }

      case FMLParser::T__48: {
        enterOuterAlt(_localctx, 2);
        setState(933);
        match(FMLParser::T__48);
        setState(943);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
        case 1: {
          setState(934);
          antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->tv = type_var();
          setState(935);
          match(FMLParser::COLON);
           paramT = antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->tv->type; 
          setState(937);
          antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->e = expression();
           value = antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->e->bf; 
          break;
        }

        case 2: {
          setState(940);
          antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->vid = qualifiedNameID();

          		value = sep::ParserUtil::getVariable(antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->vid->s, antlrcpp::downCast<Def_machine_variable_parameter_atomContext *>(_localctx)->vid->nb);
          		if( value.valid() ) { paramT = value.to_ptr< sep::Variable >()->getType(); }
          	  
          break;
        }

        default:
          break;
        }

        		paramID = sep::OSS() << '#' << offset;
        		_localctx->paramDecl->saveOwnedVariable( variable = new sep::Variable(machine,
        						_localctx->mdfr.addNatureKind( sep::Modifier::NATURE_BIND_KIND ),
        						paramT, paramID, value ) );

        		variable->setOwnedOffset( offset );
        	  
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_machine_returnsContext ------------------------------------------------------------------

FMLParser::Def_machine_returnsContext::Def_machine_returnsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_machine_returnsContext::Def_machine_returnsContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
  this->mdfr = mdfr;
}

FMLParser::Type_varContext* FMLParser::Def_machine_returnsContext::type_var() {
  return getRuleContext<FMLParser::Type_varContext>(0);
}

tree::TerminalNode* FMLParser::Def_machine_returnsContext::LBRACKET() {
  return getToken(FMLParser::LBRACKET, 0);
}

std::vector<FMLParser::Def_machine_variable_return_atomContext *> FMLParser::Def_machine_returnsContext::def_machine_variable_return_atom() {
  return getRuleContexts<FMLParser::Def_machine_variable_return_atomContext>();
}

FMLParser::Def_machine_variable_return_atomContext* FMLParser::Def_machine_returnsContext::def_machine_variable_return_atom(size_t i) {
  return getRuleContext<FMLParser::Def_machine_variable_return_atomContext>(i);
}

tree::TerminalNode* FMLParser::Def_machine_returnsContext::RBRACKET() {
  return getToken(FMLParser::RBRACKET, 0);
}

tree::TerminalNode* FMLParser::Def_machine_returnsContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Def_machine_returnsContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

FMLParser::Initial_valueContext* FMLParser::Def_machine_returnsContext::initial_value() {
  return getRuleContext<FMLParser::Initial_valueContext>(0);
}

std::vector<tree::TerminalNode *> FMLParser::Def_machine_returnsContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Def_machine_returnsContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Def_machine_returnsContext::getRuleIndex() const {
  return FMLParser::RuleDef_machine_returns;
}


FMLParser::Def_machine_returnsContext* FMLParser::def_machine_returns(sep::Machine * machine,sep::Modifier mdfr) {
  Def_machine_returnsContext *_localctx = _tracker.createInstance<Def_machine_returnsContext>(_ctx, getState(), machine, mdfr);
  enterRule(_localctx, 52, FMLParser::RuleDef_machine_returns);

  	sep::avm_offset_t offset = 0;
  	_localctx->mdfr.setDirectionKind( sep::Modifier::DIRECTION_RETURN_KIND );
  	sep::BF value;

  	sep::PropertyPart * declPropertyPart = &( machine->getPropertyPart() );

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(949);
    _la = _input->LA(1);
    if (!(_la == FMLParser::T__49

    || _la == FMLParser::T__50)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(980);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LBRACKET: {
        setState(950);
        match(FMLParser::LBRACKET);
        setState(951);
        def_machine_variable_return_atom( declPropertyPart , _localctx->mdfr , offset);
        setState(956);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FMLParser::COMMA) {
          setState(952);
          match(FMLParser::COMMA);
          setState(953);
          def_machine_variable_return_atom( declPropertyPart , _localctx->mdfr , ++offset );
          setState(958);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(959);
        match(FMLParser::RBRACKET);
        break;
      }

      case FMLParser::LPAREN: {
        setState(961);
        match(FMLParser::LPAREN);
        setState(962);
        def_machine_variable_return_atom( declPropertyPart , _localctx->mdfr , offset);
        setState(967);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FMLParser::COMMA) {
          setState(963);
          match(FMLParser::COMMA);
          setState(964);
          def_machine_variable_return_atom( declPropertyPart , _localctx->mdfr , ++offset );
          setState(969);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(970);
        match(FMLParser::RPAREN);
        break;
      }

      case FMLParser::T__58:
      case FMLParser::T__141:
      case FMLParser::T__142:
      case FMLParser::T__143:
      case FMLParser::T__144:
      case FMLParser::T__146:
      case FMLParser::T__147:
      case FMLParser::T__148:
      case FMLParser::T__149:
      case FMLParser::T__150:
      case FMLParser::T__151:
      case FMLParser::T__152:
      case FMLParser::T__153:
      case FMLParser::T__154:
      case FMLParser::T__159:
      case FMLParser::T__160:
      case FMLParser::T__161:
      case FMLParser::T__162:
      case FMLParser::T__163:
      case FMLParser::T__164:
      case FMLParser::T__165:
      case FMLParser::T__166:
      case FMLParser::T__167:
      case FMLParser::T__168:
      case FMLParser::T__169:
      case FMLParser::T__170:
      case FMLParser::T__171:
      case FMLParser::T__172:
      case FMLParser::T__173:
      case FMLParser::T__174:
      case FMLParser::T__175:
      case FMLParser::T__176:
      case FMLParser::T__177:
      case FMLParser::T__178:
      case FMLParser::T__179:
      case FMLParser::T__180:
      case FMLParser::T__181:
      case FMLParser::T__182:
      case FMLParser::T__183:
      case FMLParser::T__184:
      case FMLParser::T__185:
      case FMLParser::T__186:
      case FMLParser::T__187:
      case FMLParser::T__188:
      case FMLParser::T__199:
      case FMLParser::T__200:
      case FMLParser::T__201:
      case FMLParser::T__202:
      case FMLParser::T__203:
      case FMLParser::T__204:
      case FMLParser::T__205:
      case FMLParser::ID: {
        setState(972);
        antlrcpp::downCast<Def_machine_returnsContext *>(_localctx)->tv = type_var();
        setState(976);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::ASSIGN

        || _la == FMLParser::LPAREN) {
          setState(973);
          antlrcpp::downCast<Def_machine_returnsContext *>(_localctx)->iv = initial_value();
           value = antlrcpp::downCast<Def_machine_returnsContext *>(_localctx)->iv->bf; 
        }

        		sep::Variable * variable =
        				new sep::Variable(machine, _localctx->mdfr, antlrcpp::downCast<Def_machine_returnsContext *>(_localctx)->tv->type, "#0", value);

        		declPropertyPart->saveOwnedVariable( variable );
        	  
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_machine_variable_return_atomContext ------------------------------------------------------------------

FMLParser::Def_machine_variable_return_atomContext::Def_machine_variable_return_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_machine_variable_return_atomContext::Def_machine_variable_return_atomContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * paramDecl, sep::Modifier mdfr, sep::avm_offset_t offset)
  : ParserRuleContext(parent, invokingState) {
  this->paramDecl = paramDecl;
  this->mdfr = mdfr;
  this->offset = offset;
}

FMLParser::Type_varContext* FMLParser::Def_machine_variable_return_atomContext::type_var() {
  return getRuleContext<FMLParser::Type_varContext>(0);
}

FMLParser::Modifier_paramContext* FMLParser::Def_machine_variable_return_atomContext::modifier_param() {
  return getRuleContext<FMLParser::Modifier_paramContext>(0);
}

tree::TerminalNode* FMLParser::Def_machine_variable_return_atomContext::ID() {
  return getToken(FMLParser::ID, 0);
}

FMLParser::Initial_valueContext* FMLParser::Def_machine_variable_return_atomContext::initial_value() {
  return getRuleContext<FMLParser::Initial_valueContext>(0);
}

tree::TerminalNode* FMLParser::Def_machine_variable_return_atomContext::COLON() {
  return getToken(FMLParser::COLON, 0);
}

FMLParser::ExpressionContext* FMLParser::Def_machine_variable_return_atomContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}

FMLParser::QualifiedNameIDContext* FMLParser::Def_machine_variable_return_atomContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}


size_t FMLParser::Def_machine_variable_return_atomContext::getRuleIndex() const {
  return FMLParser::RuleDef_machine_variable_return_atom;
}


FMLParser::Def_machine_variable_return_atomContext* FMLParser::def_machine_variable_return_atom(sep::PropertyPart * paramDecl,sep::Modifier mdfr,sep::avm_offset_t offset) {
  Def_machine_variable_return_atomContext *_localctx = _tracker.createInstance<Def_machine_variable_return_atomContext>(_ctx, getState(), paramDecl, mdfr, offset);
  enterRule(_localctx, 54, FMLParser::RuleDef_machine_variable_return_atom);

  	sep::Variable * variable;
  	sep::Machine * machine = _localctx->paramDecl->getContainer()->as_ptr< sep::Machine >();
  	sep::BF paramT = sep::TypeManager::UNIVERSAL;
  	std::string paramID;
  	sep::BF value;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1014);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__13:
      case FMLParser::T__19:
      case FMLParser::T__20:
      case FMLParser::T__23:
      case FMLParser::T__24:
      case FMLParser::T__25:
      case FMLParser::T__26:
      case FMLParser::T__27:
      case FMLParser::T__28:
      case FMLParser::T__29:
      case FMLParser::T__30:
      case FMLParser::T__31:
      case FMLParser::T__32:
      case FMLParser::T__58:
      case FMLParser::T__141:
      case FMLParser::T__142:
      case FMLParser::T__143:
      case FMLParser::T__144:
      case FMLParser::T__146:
      case FMLParser::T__147:
      case FMLParser::T__148:
      case FMLParser::T__149:
      case FMLParser::T__150:
      case FMLParser::T__151:
      case FMLParser::T__152:
      case FMLParser::T__153:
      case FMLParser::T__154:
      case FMLParser::T__159:
      case FMLParser::T__160:
      case FMLParser::T__161:
      case FMLParser::T__162:
      case FMLParser::T__163:
      case FMLParser::T__164:
      case FMLParser::T__165:
      case FMLParser::T__166:
      case FMLParser::T__167:
      case FMLParser::T__168:
      case FMLParser::T__169:
      case FMLParser::T__170:
      case FMLParser::T__171:
      case FMLParser::T__172:
      case FMLParser::T__173:
      case FMLParser::T__174:
      case FMLParser::T__175:
      case FMLParser::T__176:
      case FMLParser::T__177:
      case FMLParser::T__178:
      case FMLParser::T__179:
      case FMLParser::T__180:
      case FMLParser::T__181:
      case FMLParser::T__182:
      case FMLParser::T__183:
      case FMLParser::T__184:
      case FMLParser::T__185:
      case FMLParser::T__186:
      case FMLParser::T__187:
      case FMLParser::T__188:
      case FMLParser::T__199:
      case FMLParser::T__200:
      case FMLParser::T__201:
      case FMLParser::T__202:
      case FMLParser::T__203:
      case FMLParser::T__204:
      case FMLParser::T__205:
      case FMLParser::ASSIGN_REF:
      case FMLParser::LTE:
      case FMLParser::BAND:
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(985);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 17166254080) != 0) || _la == FMLParser::ASSIGN_REF

        || _la == FMLParser::LTE || _la == FMLParser::BAND) {
          setState(982);
          antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->m = modifier_param();
           _localctx->mdfr.override_ifdef( antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->m->mdfr ); 
        }
        setState(987);
        antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->tv = type_var();
         paramT = antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->tv->type; 
        setState(996);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::ID) {
          setState(989);
          antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->id = match(FMLParser::ID);
           paramID = antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->id->getText(); 
          setState(994);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::ASSIGN

          || _la == FMLParser::LPAREN) {
            setState(991);
            antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->iv = initial_value();
             value = antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->iv->bf; 
          }
        }

        		_localctx->paramDecl->saveOwnedVariable( variable =
        				new sep::Variable(machine, _localctx->mdfr, paramT, paramID, value) );
        	  
        break;
      }

      case FMLParser::T__48: {
        enterOuterAlt(_localctx, 2);
        setState(1000);
        match(FMLParser::T__48);
        setState(1010);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
        case 1: {
          setState(1001);
          antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->tv = type_var();
          setState(1002);
          match(FMLParser::COLON);
           paramT = antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->tv->type; 
          setState(1004);
          antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->e = expression();
           value = antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->e->bf; 
          break;
        }

        case 2: {
          setState(1007);
          antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->vid = qualifiedNameID();

          		value = sep::ParserUtil::getVariable(antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->vid->s, antlrcpp::downCast<Def_machine_variable_return_atomContext *>(_localctx)->vid->nb);
          		if( value.valid() ) { paramT = value.to_ptr< sep::Variable >()->getType(); }
          	  
          break;
        }

        default:
          break;
        }

        		paramID = sep::OSS() << '#' << offset;

        		variable = new sep::Variable(machine,
        				_localctx->mdfr.addNatureKind( sep::Modifier::NATURE_BIND_KIND ),
        				paramT, paramID, value);

        		_localctx->paramDecl->saveOwnedVariable( variable );

        		variable->setOwnedOffset( offset );
        	  
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_body_procedureContext ------------------------------------------------------------------

FMLParser::Def_body_procedureContext::Def_body_procedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_body_procedureContext::Def_body_procedureContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * procedure)
  : ParserRuleContext(parent, invokingState) {
  this->procedure = procedure;
}

tree::TerminalNode* FMLParser::Def_body_procedureContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Def_body_procedureContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

FMLParser::Def_body_procedure_sectionContext* FMLParser::Def_body_procedureContext::def_body_procedure_section() {
  return getRuleContext<FMLParser::Def_body_procedure_sectionContext>(0);
}

FMLParser::Def_body_procedure_simplifContext* FMLParser::Def_body_procedureContext::def_body_procedure_simplif() {
  return getRuleContext<FMLParser::Def_body_procedure_simplifContext>(0);
}


size_t FMLParser::Def_body_procedureContext::getRuleIndex() const {
  return FMLParser::RuleDef_body_procedure;
}


FMLParser::Def_body_procedureContext* FMLParser::def_body_procedure(sep::Machine * procedure) {
  Def_body_procedureContext *_localctx = _tracker.createInstance<Def_body_procedureContext>(_ctx, getState(), procedure);
  enterRule(_localctx, 56, FMLParser::RuleDef_body_procedure);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1016);
    match(FMLParser::LCURLY);
    setState(1019);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__43:
      case FMLParser::T__44:
      case FMLParser::T__46:
      case FMLParser::T__51:
      case FMLParser::T__52:
      case FMLParser::T__53:
      case FMLParser::T__54:
      case FMLParser::T__55:
      case FMLParser::T__56:
      case FMLParser::T__63:
      case FMLParser::T__73:
      case FMLParser::T__127:
      case FMLParser::T__128:
      case FMLParser::T__129:
      case FMLParser::T__130:
      case FMLParser::T__131:
      case FMLParser::T__132:
      case FMLParser::T__133:
      case FMLParser::T__134:
      case FMLParser::T__135:
      case FMLParser::T__136:
      case FMLParser::T__137:
      case FMLParser::T__138:
      case FMLParser::T__139:
      case FMLParser::T__206:
      case FMLParser::T__207:
      case FMLParser::T__208:
      case FMLParser::T__210:
      case FMLParser::T__216:
      case FMLParser::T__217:
      case FMLParser::RCURLY: {
        setState(1017);
        def_body_procedure_section( procedure );
        break;
      }

      case FMLParser::T__13:
      case FMLParser::T__14:
      case FMLParser::T__15:
      case FMLParser::T__16:
      case FMLParser::T__17:
      case FMLParser::T__18:
      case FMLParser::T__19:
      case FMLParser::T__20:
      case FMLParser::T__21:
      case FMLParser::T__22:
      case FMLParser::T__25:
      case FMLParser::T__27:
      case FMLParser::T__29:
      case FMLParser::T__30:
      case FMLParser::T__31:
      case FMLParser::T__32:
      case FMLParser::T__33:
      case FMLParser::T__34:
      case FMLParser::T__35:
      case FMLParser::T__36:
      case FMLParser::T__37:
      case FMLParser::T__38:
      case FMLParser::T__39:
      case FMLParser::T__40:
      case FMLParser::T__59:
      case FMLParser::T__61:
      case FMLParser::T__74:
      case FMLParser::T__76:
      case FMLParser::T__77:
      case FMLParser::T__78:
      case FMLParser::T__79:
      case FMLParser::T__80:
      case FMLParser::T__81:
      case FMLParser::T__82:
      case FMLParser::T__116:
      case FMLParser::T__117:
      case FMLParser::T__118:
      case FMLParser::T__119:
      case FMLParser::T__120:
      case FMLParser::T__121:
      case FMLParser::T__122:
      case FMLParser::T__123:
      case FMLParser::T__124:
      case FMLParser::T__125:
      case FMLParser::T__126:
      case FMLParser::T__157:
      case FMLParser::T__158:
      case FMLParser::T__205: {
        setState(1018);
        def_body_procedure_simplif( procedure );
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1021);
    match(FMLParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_body_procedure_sectionContext ------------------------------------------------------------------

FMLParser::Def_body_procedure_sectionContext::Def_body_procedure_sectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_body_procedure_sectionContext::Def_body_procedure_sectionContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * procedure)
  : ParserRuleContext(parent, invokingState) {
  this->procedure = procedure;
}

FMLParser::Section_headerContext* FMLParser::Def_body_procedure_sectionContext::section_header() {
  return getRuleContext<FMLParser::Section_headerContext>(0);
}

FMLParser::Section_importContext* FMLParser::Def_body_procedure_sectionContext::section_import() {
  return getRuleContext<FMLParser::Section_importContext>(0);
}

std::vector<FMLParser::Section_parameterContext *> FMLParser::Def_body_procedure_sectionContext::section_parameter() {
  return getRuleContexts<FMLParser::Section_parameterContext>();
}

FMLParser::Section_parameterContext* FMLParser::Def_body_procedure_sectionContext::section_parameter(size_t i) {
  return getRuleContext<FMLParser::Section_parameterContext>(i);
}

std::vector<FMLParser::Section_propertyContext *> FMLParser::Def_body_procedure_sectionContext::section_property() {
  return getRuleContexts<FMLParser::Section_propertyContext>();
}

FMLParser::Section_propertyContext* FMLParser::Def_body_procedure_sectionContext::section_property(size_t i) {
  return getRuleContext<FMLParser::Section_propertyContext>(i);
}

std::vector<FMLParser::Section_composite_structureContext *> FMLParser::Def_body_procedure_sectionContext::section_composite_structure() {
  return getRuleContexts<FMLParser::Section_composite_structureContext>();
}

FMLParser::Section_composite_structureContext* FMLParser::Def_body_procedure_sectionContext::section_composite_structure(size_t i) {
  return getRuleContext<FMLParser::Section_composite_structureContext>(i);
}

FMLParser::Section_behaviorContext* FMLParser::Def_body_procedure_sectionContext::section_behavior() {
  return getRuleContext<FMLParser::Section_behaviorContext>(0);
}

FMLParser::Section_statemachineContext* FMLParser::Def_body_procedure_sectionContext::section_statemachine() {
  return getRuleContext<FMLParser::Section_statemachineContext>(0);
}

std::vector<FMLParser::Section_model_of_computationContext *> FMLParser::Def_body_procedure_sectionContext::section_model_of_computation() {
  return getRuleContexts<FMLParser::Section_model_of_computationContext>();
}

FMLParser::Section_model_of_computationContext* FMLParser::Def_body_procedure_sectionContext::section_model_of_computation(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_computationContext>(i);
}

std::vector<FMLParser::Section_model_of_executionContext *> FMLParser::Def_body_procedure_sectionContext::section_model_of_execution() {
  return getRuleContexts<FMLParser::Section_model_of_executionContext>();
}

FMLParser::Section_model_of_executionContext* FMLParser::Def_body_procedure_sectionContext::section_model_of_execution(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_executionContext>(i);
}

std::vector<FMLParser::Section_model_of_interactionContext *> FMLParser::Def_body_procedure_sectionContext::section_model_of_interaction() {
  return getRuleContexts<FMLParser::Section_model_of_interactionContext>();
}

FMLParser::Section_model_of_interactionContext* FMLParser::Def_body_procedure_sectionContext::section_model_of_interaction(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_interactionContext>(i);
}


size_t FMLParser::Def_body_procedure_sectionContext::getRuleIndex() const {
  return FMLParser::RuleDef_body_procedure_section;
}


FMLParser::Def_body_procedure_sectionContext* FMLParser::def_body_procedure_section(sep::Machine * procedure) {
  Def_body_procedure_sectionContext *_localctx = _tracker.createInstance<Def_body_procedure_sectionContext>(_ctx, getState(), procedure);
  enterRule(_localctx, 58, FMLParser::RuleDef_body_procedure_section);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1024);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__43) {
      setState(1023);
      section_header( _localctx->procedure );
    }
    setState(1027);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__44) {
      setState(1026);
      section_import( _localctx->procedure );
    }
    setState(1032);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 127) != 0)) {
      setState(1029);
      section_parameter( _localctx->procedure );
      setState(1034);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1038);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 135) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 135)) & 63) != 0)) {
      setState(1035);
      section_property( _localctx->procedure );
      setState(1040);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1044);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 283867514012696576) != 0) || _la == FMLParser::T__207

    || _la == FMLParser::T__208) {
      setState(1041);
      section_composite_structure( _localctx->procedure );
      setState(1046);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1049);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__63: {
        setState(1047);
        section_behavior( _localctx->procedure );
        break;
      }

      case FMLParser::T__73: {
        setState(1048);
        section_statemachine( _localctx->procedure );
        break;
      }

      case FMLParser::T__206:
      case FMLParser::T__210:
      case FMLParser::T__216:
      case FMLParser::T__217:
      case FMLParser::RCURLY: {
        break;
      }

    default:
      break;
    }
    setState(1056);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 3089) != 0)) {
      setState(1054);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::T__206: {
          setState(1051);
          section_model_of_computation( _localctx->procedure );
          break;
        }

        case FMLParser::T__210: {
          setState(1052);
          section_model_of_execution( _localctx->procedure );
          break;
        }

        case FMLParser::T__216:
        case FMLParser::T__217: {
          setState(1053);
          section_model_of_interaction( _localctx->procedure );
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1058);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_body_procedure_simplifContext ------------------------------------------------------------------

FMLParser::Def_body_procedure_simplifContext::Def_body_procedure_simplifContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_body_procedure_simplifContext::Def_body_procedure_simplifContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * procedure)
  : ParserRuleContext(parent, invokingState) {
  this->procedure = procedure;
}

std::vector<FMLParser::Decl_variableContext *> FMLParser::Def_body_procedure_simplifContext::decl_variable() {
  return getRuleContexts<FMLParser::Decl_variableContext>();
}

FMLParser::Decl_variableContext* FMLParser::Def_body_procedure_simplifContext::decl_variable(size_t i) {
  return getRuleContext<FMLParser::Decl_variableContext>(i);
}

std::vector<FMLParser::Def_state_activityContext *> FMLParser::Def_body_procedure_simplifContext::def_state_activity() {
  return getRuleContexts<FMLParser::Def_state_activityContext>();
}

FMLParser::Def_state_activityContext* FMLParser::Def_body_procedure_simplifContext::def_state_activity(size_t i) {
  return getRuleContext<FMLParser::Def_state_activityContext>(i);
}

std::vector<FMLParser::Any_def_statemachineContext *> FMLParser::Def_body_procedure_simplifContext::any_def_statemachine() {
  return getRuleContexts<FMLParser::Any_def_statemachineContext>();
}

FMLParser::Any_def_statemachineContext* FMLParser::Def_body_procedure_simplifContext::any_def_statemachine(size_t i) {
  return getRuleContext<FMLParser::Any_def_statemachineContext>(i);
}

std::vector<FMLParser::Modifier_declarationContext *> FMLParser::Def_body_procedure_simplifContext::modifier_declaration() {
  return getRuleContexts<FMLParser::Modifier_declarationContext>();
}

FMLParser::Modifier_declarationContext* FMLParser::Def_body_procedure_simplifContext::modifier_declaration(size_t i) {
  return getRuleContext<FMLParser::Modifier_declarationContext>(i);
}


size_t FMLParser::Def_body_procedure_simplifContext::getRuleIndex() const {
  return FMLParser::RuleDef_body_procedure_simplif;
}


FMLParser::Def_body_procedure_simplifContext* FMLParser::def_body_procedure_simplif(sep::Machine * procedure) {
  Def_body_procedure_simplifContext *_localctx = _tracker.createInstance<Def_body_procedure_simplifContext>(_ctx, getState(), procedure);
  enterRule(_localctx, 60, FMLParser::RuleDef_body_procedure_simplif);

  	sep::Modifier mdfr;

  	sep::Specifier spcfr;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1070); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
       mdfr = sep::Modifier::PROPERTY_UNDEFINED_MODIFIER; 
      setState(1063);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
      case 1: {
        setState(1060);
        antlrcpp::downCast<Def_body_procedure_simplifContext *>(_localctx)->m = modifier_declaration();
         mdfr = antlrcpp::downCast<Def_body_procedure_simplifContext *>(_localctx)->m->mdfr; 
        break;
      }

      default:
        break;
      }
      setState(1068);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::T__31:
        case FMLParser::T__32:
        case FMLParser::T__157:
        case FMLParser::T__158:
        case FMLParser::T__205: {
          setState(1065);
          decl_variable( &( _localctx->procedure->getPropertyPart() ) , mdfr );
          break;
        }

        case FMLParser::T__17:
        case FMLParser::T__33:
        case FMLParser::T__34:
        case FMLParser::T__35:
        case FMLParser::T__36:
        case FMLParser::T__37:
        case FMLParser::T__38:
        case FMLParser::T__39:
        case FMLParser::T__40:
        case FMLParser::T__59:
        case FMLParser::T__74:
        case FMLParser::T__76:
        case FMLParser::T__77:
        case FMLParser::T__78:
        case FMLParser::T__79:
        case FMLParser::T__80:
        case FMLParser::T__81:
        case FMLParser::T__82: {
          setState(1066);
          antlrcpp::downCast<Def_body_procedure_simplifContext *>(_localctx)->ads = any_def_statemachine( _localctx->procedure , mdfr , spcfr );
          break;
        }

        case FMLParser::T__61:
        case FMLParser::T__116:
        case FMLParser::T__117:
        case FMLParser::T__118:
        case FMLParser::T__119:
        case FMLParser::T__120:
        case FMLParser::T__121:
        case FMLParser::T__122:
        case FMLParser::T__123:
        case FMLParser::T__124:
        case FMLParser::T__125:
        case FMLParser::T__126: {
          setState(1067);
          def_state_activity( _localctx->procedure );
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1072); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5764611920359309312) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 9002801208230397) != 0) || ((((_la - 158) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 158)) & 281474976710659) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_composite_structureContext ------------------------------------------------------------------

FMLParser::Section_composite_structureContext::Section_composite_structureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_composite_structureContext::Section_composite_structureContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

FMLParser::Section_routineContext* FMLParser::Section_composite_structureContext::section_routine() {
  return getRuleContext<FMLParser::Section_routineContext>(0);
}

FMLParser::Section_procedureContext* FMLParser::Section_composite_structureContext::section_procedure() {
  return getRuleContext<FMLParser::Section_procedureContext>(0);
}

FMLParser::Section_composite_genericContext* FMLParser::Section_composite_structureContext::section_composite_generic() {
  return getRuleContext<FMLParser::Section_composite_genericContext>(0);
}

FMLParser::Section_machine_modelContext* FMLParser::Section_composite_structureContext::section_machine_model() {
  return getRuleContext<FMLParser::Section_machine_modelContext>(0);
}

FMLParser::Section_machine_prototypeContext* FMLParser::Section_composite_structureContext::section_machine_prototype() {
  return getRuleContext<FMLParser::Section_machine_prototypeContext>(0);
}

FMLParser::Section_machine_instanceContext* FMLParser::Section_composite_structureContext::section_machine_instance() {
  return getRuleContext<FMLParser::Section_machine_instanceContext>(0);
}


size_t FMLParser::Section_composite_structureContext::getRuleIndex() const {
  return FMLParser::RuleSection_composite_structure;
}


FMLParser::Section_composite_structureContext* FMLParser::section_composite_structure(sep::Machine * container) {
  Section_composite_structureContext *_localctx = _tracker.createInstance<Section_composite_structureContext>(_ctx, getState(), container);
  enterRule(_localctx, 62, FMLParser::RuleSection_composite_structure);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1080);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__207:
      case FMLParser::T__208: {
        enterOuterAlt(_localctx, 1);
        setState(1074);
        section_routine( container );
        break;
      }

      case FMLParser::T__46: {
        enterOuterAlt(_localctx, 2);
        setState(1075);
        section_procedure( container );
        break;
      }

      case FMLParser::T__51:
      case FMLParser::T__52:
      case FMLParser::T__53: {
        enterOuterAlt(_localctx, 3);
        setState(1076);
        section_composite_generic( container );
        break;
      }

      case FMLParser::T__54: {
        enterOuterAlt(_localctx, 4);
        setState(1077);
        section_machine_model( container );
        break;
      }

      case FMLParser::T__55: {
        enterOuterAlt(_localctx, 5);
        setState(1078);
        section_machine_prototype( container );
        break;
      }

      case FMLParser::T__56: {
        enterOuterAlt(_localctx, 6);
        setState(1079);
        section_machine_instance( container );
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_composite_genericContext ------------------------------------------------------------------

FMLParser::Section_composite_genericContext::Section_composite_genericContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_composite_genericContext::Section_composite_genericContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

std::vector<FMLParser::Executable_machineContext *> FMLParser::Section_composite_genericContext::executable_machine() {
  return getRuleContexts<FMLParser::Executable_machineContext>();
}

FMLParser::Executable_machineContext* FMLParser::Section_composite_genericContext::executable_machine(size_t i) {
  return getRuleContext<FMLParser::Executable_machineContext>(i);
}


size_t FMLParser::Section_composite_genericContext::getRuleIndex() const {
  return FMLParser::RuleSection_composite_generic;
}


FMLParser::Section_composite_genericContext* FMLParser::section_composite_generic(sep::Machine * container) {
  Section_composite_genericContext *_localctx = _tracker.createInstance<Section_composite_genericContext>(_ctx, getState(), container);
  enterRule(_localctx, 64, FMLParser::RuleSection_composite_generic);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1082);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 31525197391593472) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1086);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2017617013928886272) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 509) != 0)) {
      setState(1083);
      antlrcpp::downCast<Section_composite_genericContext *>(_localctx)->m = executable_machine( container );
      setState(1088);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_machine_modelContext ------------------------------------------------------------------

FMLParser::Section_machine_modelContext::Section_machine_modelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_machine_modelContext::Section_machine_modelContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

std::vector<FMLParser::Executable_model_definitonContext *> FMLParser::Section_machine_modelContext::executable_model_definiton() {
  return getRuleContexts<FMLParser::Executable_model_definitonContext>();
}

FMLParser::Executable_model_definitonContext* FMLParser::Section_machine_modelContext::executable_model_definiton(size_t i) {
  return getRuleContext<FMLParser::Executable_model_definitonContext>(i);
}


size_t FMLParser::Section_machine_modelContext::getRuleIndex() const {
  return FMLParser::RuleSection_machine_model;
}


FMLParser::Section_machine_modelContext* FMLParser::section_machine_model(sep::Machine * container) {
  Section_machine_modelContext *_localctx = _tracker.createInstance<Section_machine_modelContext>(_ctx, getState(), container);
  enterRule(_localctx, 66, FMLParser::RuleSection_machine_model);

  	sep::Modifier mdfr;

  	sep::Specifier spcfr( sep::Specifier::DESIGN_MODEL_SPECIFIER );

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1089);
    match(FMLParser::T__54);
    setState(1093);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1729386637777174528) != 0)) {
      setState(1090);
      antlrcpp::downCast<Section_machine_modelContext *>(_localctx)->m = executable_model_definiton( container , mdfr , spcfr );
      setState(1095);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_machine_prototypeContext ------------------------------------------------------------------

FMLParser::Section_machine_prototypeContext::Section_machine_prototypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_machine_prototypeContext::Section_machine_prototypeContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

std::vector<FMLParser::Executable_model_definitonContext *> FMLParser::Section_machine_prototypeContext::executable_model_definiton() {
  return getRuleContexts<FMLParser::Executable_model_definitonContext>();
}

FMLParser::Executable_model_definitonContext* FMLParser::Section_machine_prototypeContext::executable_model_definiton(size_t i) {
  return getRuleContext<FMLParser::Executable_model_definitonContext>(i);
}


size_t FMLParser::Section_machine_prototypeContext::getRuleIndex() const {
  return FMLParser::RuleSection_machine_prototype;
}


FMLParser::Section_machine_prototypeContext* FMLParser::section_machine_prototype(sep::Machine * container) {
  Section_machine_prototypeContext *_localctx = _tracker.createInstance<Section_machine_prototypeContext>(_ctx, getState(), container);
  enterRule(_localctx, 68, FMLParser::RuleSection_machine_prototype);

  	sep::Modifier mdfr;

  	sep::Specifier spcfr( sep::Specifier::DESIGN_PROTOTYPE_STATIC_SPECIFIER );

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1096);
    match(FMLParser::T__55);
    setState(1100);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1729386637777174528) != 0)) {
      setState(1097);
      antlrcpp::downCast<Section_machine_prototypeContext *>(_localctx)->m = executable_model_definiton( container , mdfr , spcfr );
      setState(1102);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_machine_instanceContext ------------------------------------------------------------------

FMLParser::Section_machine_instanceContext::Section_machine_instanceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_machine_instanceContext::Section_machine_instanceContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

std::vector<FMLParser::Executable_instance_definitonContext *> FMLParser::Section_machine_instanceContext::executable_instance_definiton() {
  return getRuleContexts<FMLParser::Executable_instance_definitonContext>();
}

FMLParser::Executable_instance_definitonContext* FMLParser::Section_machine_instanceContext::executable_instance_definiton(size_t i) {
  return getRuleContext<FMLParser::Executable_instance_definitonContext>(i);
}


size_t FMLParser::Section_machine_instanceContext::getRuleIndex() const {
  return FMLParser::RuleSection_machine_instance;
}


FMLParser::Section_machine_instanceContext* FMLParser::section_machine_instance(sep::Machine * container) {
  Section_machine_instanceContext *_localctx = _tracker.createInstance<Section_machine_instanceContext>(_ctx, getState(), container);
  enterRule(_localctx, 70, FMLParser::RuleSection_machine_instance);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1103);
    match(FMLParser::T__56);
    setState(1107);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 288238330444005376) != 0)) {
      setState(1104);
      antlrcpp::downCast<Section_machine_instanceContext *>(_localctx)->edi = executable_instance_definiton( container );
      setState(1109);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Executable_machineContext ------------------------------------------------------------------

FMLParser::Executable_machineContext::Executable_machineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Executable_machineContext::Executable_machineContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

FMLParser::Def_machineContext* FMLParser::Executable_machineContext::def_machine() {
  return getRuleContext<FMLParser::Def_machineContext>(0);
}

FMLParser::Any_def_statemachineContext* FMLParser::Executable_machineContext::any_def_statemachine() {
  return getRuleContext<FMLParser::Any_def_statemachineContext>(0);
}

FMLParser::Decl_instanceContext* FMLParser::Executable_machineContext::decl_instance() {
  return getRuleContext<FMLParser::Decl_instanceContext>(0);
}

FMLParser::Executable_modifier_specifierContext* FMLParser::Executable_machineContext::executable_modifier_specifier() {
  return getRuleContext<FMLParser::Executable_modifier_specifierContext>(0);
}


size_t FMLParser::Executable_machineContext::getRuleIndex() const {
  return FMLParser::RuleExecutable_machine;
}


FMLParser::Executable_machineContext* FMLParser::executable_machine(sep::Machine * container) {
  Executable_machineContext *_localctx = _tracker.createInstance<Executable_machineContext>(_ctx, getState(), container);
  enterRule(_localctx, 72, FMLParser::RuleExecutable_machine);

  	sep::Modifier mdfr;

  	sep::Specifier spcfr;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1113);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      setState(1110);
      antlrcpp::downCast<Executable_machineContext *>(_localctx)->ms = executable_modifier_specifier();
       mdfr = antlrcpp::downCast<Executable_machineContext *>(_localctx)->ms->mdfr; spcfr = antlrcpp::downCast<Executable_machineContext *>(_localctx)->ms->spcfr; 
      break;
    }

    default:
      break;
    }
    setState(1124);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__58: {
        setState(1115);
        antlrcpp::downCast<Executable_machineContext *>(_localctx)->dm = def_machine( _localctx->container , mdfr , spcfr );
         antlrcpp::downCast<Executable_machineContext *>(_localctx)->machine =  antlrcpp::downCast<Executable_machineContext *>(_localctx)->dm->machine;  
        break;
      }

      case FMLParser::T__17:
      case FMLParser::T__33:
      case FMLParser::T__34:
      case FMLParser::T__35:
      case FMLParser::T__36:
      case FMLParser::T__37:
      case FMLParser::T__38:
      case FMLParser::T__39:
      case FMLParser::T__40:
      case FMLParser::T__59:
      case FMLParser::T__74:
      case FMLParser::T__76:
      case FMLParser::T__77:
      case FMLParser::T__78:
      case FMLParser::T__79:
      case FMLParser::T__80:
      case FMLParser::T__81:
      case FMLParser::T__82: {
        setState(1118);
        antlrcpp::downCast<Executable_machineContext *>(_localctx)->ads = any_def_statemachine( _localctx->container , mdfr , spcfr );
         antlrcpp::downCast<Executable_machineContext *>(_localctx)->machine =  antlrcpp::downCast<Executable_machineContext *>(_localctx)->ads->machine;  
        break;
      }

      case FMLParser::T__57: {
        setState(1121);
        antlrcpp::downCast<Executable_machineContext *>(_localctx)->emi = decl_instance( _localctx->container , mdfr , spcfr );
         antlrcpp::downCast<Executable_machineContext *>(_localctx)->machine =  antlrcpp::downCast<Executable_machineContext *>(_localctx)->emi->instance; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Executable_model_definitonContext ------------------------------------------------------------------

FMLParser::Executable_model_definitonContext::Executable_model_definitonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Executable_model_definitonContext::Executable_model_definitonContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
  this->mdfr = mdfr;
  this->spcfr = spcfr;
}

FMLParser::Def_machineContext* FMLParser::Executable_model_definitonContext::def_machine() {
  return getRuleContext<FMLParser::Def_machineContext>(0);
}

FMLParser::Def_statemachineContext* FMLParser::Executable_model_definitonContext::def_statemachine() {
  return getRuleContext<FMLParser::Def_statemachineContext>(0);
}

FMLParser::Executable_modifier_specifierContext* FMLParser::Executable_model_definitonContext::executable_modifier_specifier() {
  return getRuleContext<FMLParser::Executable_modifier_specifierContext>(0);
}


size_t FMLParser::Executable_model_definitonContext::getRuleIndex() const {
  return FMLParser::RuleExecutable_model_definiton;
}


FMLParser::Executable_model_definitonContext* FMLParser::executable_model_definiton(sep::Machine * container,sep::Modifier mdfr,sep::Specifier spcfr) {
  Executable_model_definitonContext *_localctx = _tracker.createInstance<Executable_model_definitonContext>(_ctx, getState(), container, mdfr, spcfr);
  enterRule(_localctx, 74, FMLParser::RuleExecutable_model_definiton);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1129);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4380866904064) != 0)) {
      setState(1126);
      antlrcpp::downCast<Executable_model_definitonContext *>(_localctx)->ms = executable_modifier_specifier();
       _localctx->mdfr.override_ifdef( antlrcpp::downCast<Executable_model_definitonContext *>(_localctx)->ms->mdfr );  _localctx->spcfr.override_ifdef( antlrcpp::downCast<Executable_model_definitonContext *>(_localctx)->ms->spcfr ); 
    }
    setState(1137);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__58: {
        setState(1131);
        antlrcpp::downCast<Executable_model_definitonContext *>(_localctx)->dm = def_machine( _localctx->container , _localctx->mdfr , _localctx->spcfr );
         antlrcpp::downCast<Executable_model_definitonContext *>(_localctx)->machine =  antlrcpp::downCast<Executable_model_definitonContext *>(_localctx)->dm->machine;  
        break;
      }

      case FMLParser::T__59: {
        setState(1134);
        antlrcpp::downCast<Executable_model_definitonContext *>(_localctx)->ads = def_statemachine( _localctx->container , _localctx->mdfr , _localctx->spcfr );
         antlrcpp::downCast<Executable_model_definitonContext *>(_localctx)->machine =  antlrcpp::downCast<Executable_model_definitonContext *>(_localctx)->ads->machine; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Executable_instance_definitonContext ------------------------------------------------------------------

FMLParser::Executable_instance_definitonContext::Executable_instance_definitonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Executable_instance_definitonContext::Executable_instance_definitonContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

FMLParser::Decl_instanceContext* FMLParser::Executable_instance_definitonContext::decl_instance() {
  return getRuleContext<FMLParser::Decl_instanceContext>(0);
}

FMLParser::Instance_modifier_specifierContext* FMLParser::Executable_instance_definitonContext::instance_modifier_specifier() {
  return getRuleContext<FMLParser::Instance_modifier_specifierContext>(0);
}


size_t FMLParser::Executable_instance_definitonContext::getRuleIndex() const {
  return FMLParser::RuleExecutable_instance_definiton;
}


FMLParser::Executable_instance_definitonContext* FMLParser::executable_instance_definiton(sep::Machine * container) {
  Executable_instance_definitonContext *_localctx = _tracker.createInstance<Executable_instance_definitonContext>(_ctx, getState(), container);
  enterRule(_localctx, 76, FMLParser::RuleExecutable_instance_definiton);

  	sep::Modifier mdfr;

  	sep::Specifier spcfr( sep::Specifier::DESIGN_INSTANCE_STATIC_SPECIFIER );

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1142);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 7954292293632) != 0)) {
      setState(1139);
      antlrcpp::downCast<Executable_instance_definitonContext *>(_localctx)->ms = instance_modifier_specifier();
       mdfr = antlrcpp::downCast<Executable_instance_definitonContext *>(_localctx)->ms->mdfr; spcfr = antlrcpp::downCast<Executable_instance_definitonContext *>(_localctx)->ms->spcfr; 
    }
    setState(1144);
    antlrcpp::downCast<Executable_instance_definitonContext *>(_localctx)->emi = decl_instance( _localctx->container , mdfr , spcfr );
     antlrcpp::downCast<Executable_instance_definitonContext *>(_localctx)->instance =  antlrcpp::downCast<Executable_instance_definitonContext *>(_localctx)->emi->instance; 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_instanceContext ------------------------------------------------------------------

FMLParser::Decl_instanceContext::Decl_instanceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_instanceContext::Decl_instanceContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
  this->mdfr = mdfr;
  this->spcfr = spcfr;
}

tree::TerminalNode* FMLParser::Decl_instanceContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Decl_instanceContext::GT() {
  return getToken(FMLParser::GT, 0);
}

FMLParser::Instance_machine_modelContext* FMLParser::Decl_instanceContext::instance_machine_model() {
  return getRuleContext<FMLParser::Instance_machine_modelContext>(0);
}

tree::TerminalNode* FMLParser::Decl_instanceContext::ID() {
  return getToken(FMLParser::ID, 0);
}

tree::TerminalNode* FMLParser::Decl_instanceContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

tree::TerminalNode* FMLParser::Decl_instanceContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Decl_instanceContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

tree::TerminalNode* FMLParser::Decl_instanceContext::COMMA() {
  return getToken(FMLParser::COMMA, 0);
}

FMLParser::Def_instance_countContext* FMLParser::Decl_instanceContext::def_instance_count() {
  return getRuleContext<FMLParser::Def_instance_countContext>(0);
}

tree::TerminalNode* FMLParser::Decl_instanceContext::StringLiteral() {
  return getToken(FMLParser::StringLiteral, 0);
}

tree::TerminalNode* FMLParser::Decl_instanceContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Decl_instanceContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

std::vector<FMLParser::Def_instance_activityContext *> FMLParser::Decl_instanceContext::def_instance_activity() {
  return getRuleContexts<FMLParser::Def_instance_activityContext>();
}

FMLParser::Def_instance_activityContext* FMLParser::Decl_instanceContext::def_instance_activity(size_t i) {
  return getRuleContext<FMLParser::Def_instance_activityContext>(i);
}

FMLParser::Def_instance_on_new_activityContext* FMLParser::Decl_instanceContext::def_instance_on_new_activity() {
  return getRuleContext<FMLParser::Def_instance_on_new_activityContext>(0);
}

std::vector<FMLParser::StatementContext *> FMLParser::Decl_instanceContext::statement() {
  return getRuleContexts<FMLParser::StatementContext>();
}

FMLParser::StatementContext* FMLParser::Decl_instanceContext::statement(size_t i) {
  return getRuleContext<FMLParser::StatementContext>(i);
}


size_t FMLParser::Decl_instanceContext::getRuleIndex() const {
  return FMLParser::RuleDecl_instance;
}


FMLParser::Decl_instanceContext* FMLParser::decl_instance(sep::Machine * container,sep::Modifier mdfr,sep::Specifier spcfr) {
  Decl_instanceContext *_localctx = _tracker.createInstance<Decl_instanceContext>(_ctx, getState(), container, mdfr, spcfr);
  enterRule(_localctx, 78, FMLParser::RuleDecl_instance);

  	sep::BF aModel;

  	std::size_t initialCount = 1;
  	std::size_t maximalCount = AVM_NUMERIC_MAX_SIZE_T;

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1147);
    match(FMLParser::T__57);
    setState(1149);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__58

    || _la == FMLParser::T__59) {
      setState(1148);
      _la = _input->LA(1);
      if (!(_la == FMLParser::T__58

      || _la == FMLParser::T__59)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1151);
    match(FMLParser::LT_);
    setState(1153);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__60) {
      setState(1152);
      match(FMLParser::T__60);
    }
    setState(1155);
    antlrcpp::downCast<Decl_instanceContext *>(_localctx)->mm = instance_machine_model();
     aModel = antlrcpp::downCast<Decl_instanceContext *>(_localctx)->mm->model; 
    setState(1159);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::COMMA) {
      setState(1157);
      match(FMLParser::COMMA);
      setState(1158);
      def_instance_count( & initialCount , & maximalCount );
    }
    setState(1161);
    match(FMLParser::GT);
    setState(1162);
    antlrcpp::downCast<Decl_instanceContext *>(_localctx)->id = match(FMLParser::ID);

    		if( aModel.is< sep::Machine >() )
    		{
    			PUSH_CTX_NEW( aModel.to_ptr< sep::Machine >() );
    		}

    		antlrcpp::downCast<Decl_instanceContext *>(_localctx)->instance =  sep::Machine::newInstance(container,
    				antlrcpp::downCast<Decl_instanceContext *>(_localctx)->id->getText(), aModel, initialCount, maximalCount);

    		_localctx->instance->getwModifier().override_ifdef( mdfr );

    		_localctx->instance->getwSpecifier().override_ifdef(
    				_localctx->spcfr.isDesignInstanceDynamic() ?
    						_localctx->spcfr : _localctx->spcfr.setDesignInstanceStatic() );

    		container->saveOwnedElement( _localctx->instance );
    	  
    setState(1166);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::StringLiteral) {
      setState(1164);
      antlrcpp::downCast<Decl_instanceContext *>(_localctx)->stringliteralToken = match(FMLParser::StringLiteral);
       _localctx->instance->setUnrestrictedName(antlrcpp::downCast<Decl_instanceContext *>(_localctx)->stringliteralToken->getText()); 
    }
    setState(1173);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LPAREN) {
      setState(1168);
      match(FMLParser::LPAREN);
      setState(1170);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 219) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 432)) & 125) != 0)) {
        setState(1169);
        def_instance_on_new_activity( _localctx->instance );
      }
      setState(1172);
      match(FMLParser::RPAREN);
    }
    setState(1192);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::SEMI: {
        setState(1175);
        match(FMLParser::SEMI);
        break;
      }

      case FMLParser::LCURLY: {
        setState(1176);
        match(FMLParser::LCURLY);
        setState(1182);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 2483044352) != 0) || ((((_la - 84) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 84)) & 33554441) != 0) || ((((_la - 228) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 228)) & -4468811335467295) != 0) || ((((_la - 292) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 292)) & 1152921504606850055) != 0) || ((((_la - 357) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 357)) & 598134329704513) != 0) || _la == FMLParser::ID) {
          setState(1177);
          antlrcpp::downCast<Decl_instanceContext *>(_localctx)->s = statement();
           _localctx->instance->getUniqBehaviorPart()->seqOnCreate(antlrcpp::downCast<Decl_instanceContext *>(_localctx)->s->ac); 
          setState(1184);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1188);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FMLParser::T__61

        || _la == FMLParser::T__62) {
          setState(1185);
          def_instance_activity( _localctx->instance );
          setState(1190);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1191);
        match(FMLParser::RCURLY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   _ctx->stop = _input->LT(-1);

    	if( aModel.is< sep::Machine >() )
    	{
    		POP_CTX;
    	}
    	SET_RULE_LOCATION(_localctx->instance);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_instance_on_new_activityContext ------------------------------------------------------------------

FMLParser::Def_instance_on_new_activityContext::Def_instance_on_new_activityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_instance_on_new_activityContext::Def_instance_on_new_activityContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * instance)
  : ParserRuleContext(parent, invokingState) {
  this->instance = instance;
}

std::vector<FMLParser::Def_instance_on_new_activity_parameterContext *> FMLParser::Def_instance_on_new_activityContext::def_instance_on_new_activity_parameter() {
  return getRuleContexts<FMLParser::Def_instance_on_new_activity_parameterContext>();
}

FMLParser::Def_instance_on_new_activity_parameterContext* FMLParser::Def_instance_on_new_activityContext::def_instance_on_new_activity_parameter(size_t i) {
  return getRuleContext<FMLParser::Def_instance_on_new_activity_parameterContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Def_instance_on_new_activityContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Def_instance_on_new_activityContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Def_instance_on_new_activityContext::getRuleIndex() const {
  return FMLParser::RuleDef_instance_on_new_activity;
}


FMLParser::Def_instance_on_new_activityContext* FMLParser::def_instance_on_new_activity(sep::Machine * instance) {
  Def_instance_on_new_activityContext *_localctx = _tracker.createInstance<Def_instance_on_new_activityContext>(_ctx, getState(), instance);
  enterRule(_localctx, 80, FMLParser::RuleDef_instance_on_new_activity);

  	std::size_t position = 0;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1194);
    def_instance_on_new_activity_parameter( _localctx->instance , position++ );
    setState(1199);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::COMMA) {
      setState(1195);
      match(FMLParser::COMMA);
      setState(1196);
      def_instance_on_new_activity_parameter( _localctx->instance , position++ );
      setState(1201);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_instance_on_new_activity_parameterContext ------------------------------------------------------------------

FMLParser::Def_instance_on_new_activity_parameterContext::Def_instance_on_new_activity_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_instance_on_new_activity_parameterContext::Def_instance_on_new_activity_parameterContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * instance, std::size_t position)
  : ParserRuleContext(parent, invokingState) {
  this->instance = instance;
  this->position = position;
}

FMLParser::LvalueContext* FMLParser::Def_instance_on_new_activity_parameterContext::lvalue() {
  return getRuleContext<FMLParser::LvalueContext>(0);
}

FMLParser::Op_assign_paramContext* FMLParser::Def_instance_on_new_activity_parameterContext::op_assign_param() {
  return getRuleContext<FMLParser::Op_assign_paramContext>(0);
}

FMLParser::ExpressionContext* FMLParser::Def_instance_on_new_activity_parameterContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}


size_t FMLParser::Def_instance_on_new_activity_parameterContext::getRuleIndex() const {
  return FMLParser::RuleDef_instance_on_new_activity_parameter;
}


FMLParser::Def_instance_on_new_activity_parameterContext* FMLParser::def_instance_on_new_activity_parameter(sep::Machine * instance,std::size_t position) {
  Def_instance_on_new_activity_parameterContext *_localctx = _tracker.createInstance<Def_instance_on_new_activity_parameterContext>(_ctx, getState(), instance, position);
  enterRule(_localctx, 82, FMLParser::RuleDef_instance_on_new_activity_parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1210);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1202);
      antlrcpp::downCast<Def_instance_on_new_activity_parameterContext *>(_localctx)->lv = lvalue();
      setState(1203);
      antlrcpp::downCast<Def_instance_on_new_activity_parameterContext *>(_localctx)->oap = op_assign_param();
      setState(1204);
      antlrcpp::downCast<Def_instance_on_new_activity_parameterContext *>(_localctx)->e = expression();
       _localctx->instance->getUniqBehaviorPart()->seqOnCreate( NEW_STMT2(antlrcpp::downCast<Def_instance_on_new_activity_parameterContext *>(_localctx)->oap->op, antlrcpp::downCast<Def_instance_on_new_activity_parameterContext *>(_localctx)->lv->bf, antlrcpp::downCast<Def_instance_on_new_activity_parameterContext *>(_localctx)->e->bf) ); 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1207);
      antlrcpp::downCast<Def_instance_on_new_activity_parameterContext *>(_localctx)->e = expression();

      		sep::ParserUtil::appendInstanceDynamicPositionalParameter(
      				_localctx->instance, antlrcpp::downCast<Def_instance_on_new_activity_parameterContext *>(_localctx)->e->bf, position);
      	  
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Op_assign_paramContext ------------------------------------------------------------------

FMLParser::Op_assign_paramContext::Op_assign_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Op_assign_paramContext::ASSIGN() {
  return getToken(FMLParser::ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Op_assign_paramContext::COLON() {
  return getToken(FMLParser::COLON, 0);
}

tree::TerminalNode* FMLParser::Op_assign_paramContext::ASSIGN_REF() {
  return getToken(FMLParser::ASSIGN_REF, 0);
}

tree::TerminalNode* FMLParser::Op_assign_paramContext::ASSIGN_MACRO() {
  return getToken(FMLParser::ASSIGN_MACRO, 0);
}


size_t FMLParser::Op_assign_paramContext::getRuleIndex() const {
  return FMLParser::RuleOp_assign_param;
}


FMLParser::Op_assign_paramContext* FMLParser::op_assign_param() {
  Op_assign_paramContext *_localctx = _tracker.createInstance<Op_assign_paramContext>(_ctx, getState());
  enterRule(_localctx, 84, FMLParser::RuleOp_assign_param);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1218);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::ASSIGN:
      case FMLParser::COLON: {
        enterOuterAlt(_localctx, 1);
        setState(1212);
        _la = _input->LA(1);
        if (!(_la == FMLParser::ASSIGN

        || _la == FMLParser::COLON)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         antlrcpp::downCast<Op_assign_paramContext *>(_localctx)->op =  OP(ASSIGN);       
        break;
      }

      case FMLParser::ASSIGN_REF: {
        enterOuterAlt(_localctx, 2);
        setState(1214);
        match(FMLParser::ASSIGN_REF);
         antlrcpp::downCast<Op_assign_paramContext *>(_localctx)->op =  OP(ASSIGN_REF);   
        break;
      }

      case FMLParser::ASSIGN_MACRO: {
        enterOuterAlt(_localctx, 3);
        setState(1216);
        match(FMLParser::ASSIGN_MACRO);
         antlrcpp::downCast<Op_assign_paramContext *>(_localctx)->op =  OP(ASSIGN_MACRO); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_instance_activityContext ------------------------------------------------------------------

FMLParser::Def_instance_activityContext::Def_instance_activityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_instance_activityContext::Def_instance_activityContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * instance)
  : ParserRuleContext(parent, invokingState) {
  this->instance = instance;
}

FMLParser::Block_statementContext* FMLParser::Def_instance_activityContext::block_statement() {
  return getRuleContext<FMLParser::Block_statementContext>(0);
}


size_t FMLParser::Def_instance_activityContext::getRuleIndex() const {
  return FMLParser::RuleDef_instance_activity;
}


FMLParser::Def_instance_activityContext* FMLParser::def_instance_activity(sep::Machine * instance) {
  Def_instance_activityContext *_localctx = _tracker.createInstance<Def_instance_activityContext>(_ctx, getState(), instance);
  enterRule(_localctx, 86, FMLParser::RuleDef_instance_activity);

  	sep::BehavioralPart * theBehavior = _localctx->instance->getUniqBehaviorPart();


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1228);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__61: {
        enterOuterAlt(_localctx, 1);
        setState(1220);
        match(FMLParser::T__61);
        setState(1221);
        antlrcpp::downCast<Def_instance_activityContext *>(_localctx)->bs = block_statement();
         theBehavior->seqOnCreate(antlrcpp::downCast<Def_instance_activityContext *>(_localctx)->bs->ac); 
        break;
      }

      case FMLParser::T__62: {
        enterOuterAlt(_localctx, 2);
        setState(1224);
        match(FMLParser::T__62);
        setState(1225);
        antlrcpp::downCast<Def_instance_activityContext *>(_localctx)->bs = block_statement();
         theBehavior->seqOnStart(antlrcpp::downCast<Def_instance_activityContext *>(_localctx)->bs->ac);   
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_behaviorContext ------------------------------------------------------------------

FMLParser::Section_behaviorContext::Section_behaviorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_behaviorContext::Section_behaviorContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

std::vector<FMLParser::Executable_machineContext *> FMLParser::Section_behaviorContext::executable_machine() {
  return getRuleContexts<FMLParser::Executable_machineContext>();
}

FMLParser::Executable_machineContext* FMLParser::Section_behaviorContext::executable_machine(size_t i) {
  return getRuleContext<FMLParser::Executable_machineContext>(i);
}


size_t FMLParser::Section_behaviorContext::getRuleIndex() const {
  return FMLParser::RuleSection_behavior;
}


FMLParser::Section_behaviorContext* FMLParser::section_behavior(sep::Machine * container) {
  Section_behaviorContext *_localctx = _tracker.createInstance<Section_behaviorContext>(_ctx, getState(), container);
  enterRule(_localctx, 88, FMLParser::RuleSection_behavior);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1230);
    match(FMLParser::T__63);
     _localctx->container->getwSpecifier().setMocCompositeStructure(); 
    setState(1235); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1232);
      antlrcpp::downCast<Section_behaviorContext *>(_localctx)->m = executable_machine( container );
       _localctx->container->getUniqBehaviorPart()->appendOwnedBehavior( antlrcpp::downCast<Section_behaviorContext *>(_localctx)->m->machine ); 
      setState(1237); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2017617013928886272) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 509) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_instance_countContext ------------------------------------------------------------------

FMLParser::Def_instance_countContext::Def_instance_countContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_instance_countContext::Def_instance_countContext(ParserRuleContext *parent, size_t invokingState, std::size_t * initial, std::size_t * maximal)
  : ParserRuleContext(parent, invokingState) {
  this->initial = initial;
  this->maximal = maximal;
}

tree::TerminalNode* FMLParser::Def_instance_countContext::LBRACKET() {
  return getToken(FMLParser::LBRACKET, 0);
}

tree::TerminalNode* FMLParser::Def_instance_countContext::RBRACKET() {
  return getToken(FMLParser::RBRACKET, 0);
}

tree::TerminalNode* FMLParser::Def_instance_countContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

std::vector<FMLParser::Def_instance_count_atomContext *> FMLParser::Def_instance_countContext::def_instance_count_atom() {
  return getRuleContexts<FMLParser::Def_instance_count_atomContext>();
}

FMLParser::Def_instance_count_atomContext* FMLParser::Def_instance_countContext::def_instance_count_atom(size_t i) {
  return getRuleContext<FMLParser::Def_instance_count_atomContext>(i);
}

tree::TerminalNode* FMLParser::Def_instance_countContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> FMLParser::Def_instance_countContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Def_instance_countContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}

tree::TerminalNode* FMLParser::Def_instance_countContext::STAR() {
  return getToken(FMLParser::STAR, 0);
}

tree::TerminalNode* FMLParser::Def_instance_countContext::PLUS() {
  return getToken(FMLParser::PLUS, 0);
}

std::vector<FMLParser::Integer_constantContext *> FMLParser::Def_instance_countContext::integer_constant() {
  return getRuleContexts<FMLParser::Integer_constantContext>();
}

FMLParser::Integer_constantContext* FMLParser::Def_instance_countContext::integer_constant(size_t i) {
  return getRuleContext<FMLParser::Integer_constantContext>(i);
}


size_t FMLParser::Def_instance_countContext::getRuleIndex() const {
  return FMLParser::RuleDef_instance_count;
}


FMLParser::Def_instance_countContext* FMLParser::def_instance_count(std::size_t * initial,std::size_t * maximal) {
  Def_instance_countContext *_localctx = _tracker.createInstance<Def_instance_countContext>(_ctx, getState(), initial, maximal);
  enterRule(_localctx, 90, FMLParser::RuleDef_instance_count);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1240);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__64

    || _la == FMLParser::T__65) {
      setState(1239);
      _la = _input->LA(1);
      if (!(_la == FMLParser::T__64

      || _la == FMLParser::T__65)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1273);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LBRACKET: {
        setState(1242);
        match(FMLParser::LBRACKET);
        setState(1257);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::ID:
          case FMLParser::IntegerLiteral: {
            setState(1243);
            antlrcpp::downCast<Def_instance_countContext *>(_localctx)->n = integer_constant();
             *(_localctx->initial) = antlrcpp::downCast<Def_instance_countContext *>(_localctx)->n->val; 
            setState(1245);
            match(FMLParser::COMMA);
            setState(1251);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case FMLParser::ID:
              case FMLParser::IntegerLiteral: {
                setState(1246);
                antlrcpp::downCast<Def_instance_countContext *>(_localctx)->n = integer_constant();
                 *(_localctx->maximal) = antlrcpp::downCast<Def_instance_countContext *>(_localctx)->n->val; 
                break;
              }

              case FMLParser::PLUS:
              case FMLParser::STAR: {
                setState(1249);
                _la = _input->LA(1);
                if (!(_la == FMLParser::PLUS

                || _la == FMLParser::STAR)) {
                _errHandler->recoverInline(this);
                }
                else {
                  _errHandler->reportMatch(this);
                  consume();
                }
                 *(_localctx->maximal) = AVM_NUMERIC_MAX_SIZE_T; 
                break;
              }

            default:
              throw NoViableAltException(this);
            }
            break;
          }

          case FMLParser::STAR: {
            setState(1253);
            match(FMLParser::STAR);
             *(_localctx->initial) = 0; *(_localctx->maximal) = AVM_NUMERIC_MAX_SIZE_T; 
            break;
          }

          case FMLParser::PLUS: {
            setState(1255);
            match(FMLParser::PLUS);
             *(_localctx->initial) = 1; *(_localctx->maximal) = AVM_NUMERIC_MAX_SIZE_T; 
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1259);
        match(FMLParser::RBRACKET);
        break;
      }

      case FMLParser::LPAREN: {
        setState(1260);
        match(FMLParser::LPAREN);
        setState(1261);
        def_instance_count_atom( _localctx->initial , _localctx->maximal );
        setState(1268);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FMLParser::T__66

        || _la == FMLParser::T__67 || _la == FMLParser::COMMA) {
          setState(1263);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::COMMA) {
            setState(1262);
            match(FMLParser::COMMA);
          }
          setState(1265);
          def_instance_count_atom( _localctx->initial , _localctx->maximal );
          setState(1270);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1271);
        match(FMLParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   _ctx->stop = _input->LT(-1);

    	if( *(_localctx->maximal) < *(_localctx->initial) )
    	{
    		*(_localctx->maximal) = *(_localctx->initial);
    	}

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_instance_count_atomContext ------------------------------------------------------------------

FMLParser::Def_instance_count_atomContext::Def_instance_count_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_instance_count_atomContext::Def_instance_count_atomContext(ParserRuleContext *parent, size_t invokingState, std::size_t * initial, std::size_t * maximal)
  : ParserRuleContext(parent, invokingState) {
  this->initial = initial;
  this->maximal = maximal;
}

FMLParser::Integer_constantContext* FMLParser::Def_instance_count_atomContext::integer_constant() {
  return getRuleContext<FMLParser::Integer_constantContext>(0);
}


size_t FMLParser::Def_instance_count_atomContext::getRuleIndex() const {
  return FMLParser::RuleDef_instance_count_atom;
}


FMLParser::Def_instance_count_atomContext* FMLParser::def_instance_count_atom(std::size_t * initial,std::size_t * maximal) {
  Def_instance_count_atomContext *_localctx = _tracker.createInstance<Def_instance_count_atomContext>(_ctx, getState(), initial, maximal);
  enterRule(_localctx, 92, FMLParser::RuleDef_instance_count_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1283);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__66: {
        enterOuterAlt(_localctx, 1);
        setState(1275);
        match(FMLParser::T__66);
        setState(1276);
        antlrcpp::downCast<Def_instance_count_atomContext *>(_localctx)->n = integer_constant();
         *(_localctx->initial) = antlrcpp::downCast<Def_instance_count_atomContext *>(_localctx)->n->val; 
        break;
      }

      case FMLParser::T__67: {
        enterOuterAlt(_localctx, 2);
        setState(1279);
        match(FMLParser::T__67);
        setState(1280);
        antlrcpp::downCast<Def_instance_count_atomContext *>(_localctx)->n = integer_constant();
         *(_localctx->maximal) = antlrcpp::downCast<Def_instance_count_atomContext *>(_localctx)->n->val; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_machineContext ------------------------------------------------------------------

FMLParser::Def_machineContext::Def_machineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_machineContext::Def_machineContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
  this->mdfr = mdfr;
  this->spcfr = spcfr;
}

FMLParser::Def_body_machineContext* FMLParser::Def_machineContext::def_body_machine() {
  return getRuleContext<FMLParser::Def_body_machineContext>(0);
}

tree::TerminalNode* FMLParser::Def_machineContext::ID() {
  return getToken(FMLParser::ID, 0);
}

tree::TerminalNode* FMLParser::Def_machineContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Def_machineContext::GT() {
  return getToken(FMLParser::GT, 0);
}

tree::TerminalNode* FMLParser::Def_machineContext::StringLiteral() {
  return getToken(FMLParser::StringLiteral, 0);
}

FMLParser::Def_machine_parametersContext* FMLParser::Def_machineContext::def_machine_parameters() {
  return getRuleContext<FMLParser::Def_machine_parametersContext>(0);
}

FMLParser::Def_machine_returnsContext* FMLParser::Def_machineContext::def_machine_returns() {
  return getRuleContext<FMLParser::Def_machine_returnsContext>(0);
}

FMLParser::Executable_specifierContext* FMLParser::Def_machineContext::executable_specifier() {
  return getRuleContext<FMLParser::Executable_specifierContext>(0);
}

FMLParser::Def_instance_countContext* FMLParser::Def_machineContext::def_instance_count() {
  return getRuleContext<FMLParser::Def_instance_countContext>(0);
}

tree::TerminalNode* FMLParser::Def_machineContext::COMMA() {
  return getToken(FMLParser::COMMA, 0);
}


size_t FMLParser::Def_machineContext::getRuleIndex() const {
  return FMLParser::RuleDef_machine;
}


FMLParser::Def_machineContext* FMLParser::def_machine(sep::Machine * container,sep::Modifier mdfr,sep::Specifier spcfr) {
  Def_machineContext *_localctx = _tracker.createInstance<Def_machineContext>(_ctx, getState(), container, mdfr, spcfr);
  enterRule(_localctx, 94, FMLParser::RuleDef_machine);

  	std::size_t initialCount = 1;
  	std::size_t maximalCount = AVM_NUMERIC_MAX_SIZE_T;

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1285);
    match(FMLParser::T__58);
    setState(1299);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LT_) {
      setState(1286);
      match(FMLParser::LT_);
      setState(1296);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::T__13:
        case FMLParser::T__30:
        case FMLParser::T__42:
        case FMLParser::T__83:
        case FMLParser::T__84:
        case FMLParser::T__85:
        case FMLParser::T__86:
        case FMLParser::T__87:
        case FMLParser::T__88:
        case FMLParser::T__89:
        case FMLParser::T__90:
        case FMLParser::T__91:
        case FMLParser::T__92:
        case FMLParser::T__93:
        case FMLParser::T__94:
        case FMLParser::T__95:
        case FMLParser::T__96:
        case FMLParser::T__97:
        case FMLParser::T__98:
        case FMLParser::T__99:
        case FMLParser::T__100:
        case FMLParser::T__101:
        case FMLParser::T__102:
        case FMLParser::T__103:
        case FMLParser::T__104:
        case FMLParser::ID: {
          setState(1288);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::T__42) {
            setState(1287);
            match(FMLParser::T__42);
          }
          setState(1290);
          executable_specifier( &( _localctx->spcfr ) );
          setState(1293);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::COMMA) {
            setState(1291);
            match(FMLParser::COMMA);
            setState(1292);
            def_instance_count( & initialCount , & maximalCount );
          }
          break;
        }

        case FMLParser::T__64:
        case FMLParser::T__65:
        case FMLParser::LPAREN:
        case FMLParser::LBRACKET: {
          setState(1295);
          def_instance_count( & initialCount , & maximalCount );
          break;
        }

        case FMLParser::GT: {
          break;
        }

      default:
        break;
      }
      setState(1298);
      match(FMLParser::GT);
    }
    setState(1301);
    antlrcpp::downCast<Def_machineContext *>(_localctx)->id = match(FMLParser::ID);

    		PUSH_CTX_CPM( antlrcpp::downCast<Def_machineContext *>(_localctx)->machine =  sep::Machine::newExecutable(
    				container, antlrcpp::downCast<Def_machineContext *>(_localctx)->id->getText(), _localctx->spcfr) );

    		_localctx->machine->getwModifier().override_ifdef( _localctx->mdfr );

    		container->saveOwnedElement( _localctx->machine );

    		_localctx->machine->getUniqInstanceSpecifier()->
    				setInstanceCount(initialCount, maximalCount);
    	  
    setState(1305);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::StringLiteral) {
      setState(1303);
      antlrcpp::downCast<Def_machineContext *>(_localctx)->stringliteralToken = match(FMLParser::StringLiteral);
       _localctx->machine->setUnrestrictedName(antlrcpp::downCast<Def_machineContext *>(_localctx)->stringliteralToken->getText()); 
    }
    setState(1308);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LPAREN

    || _la == FMLParser::LBRACKET) {
      setState(1307);
      def_machine_parameters( _localctx->machine );
    }
    setState(1311);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__49

    || _la == FMLParser::T__50) {
      setState(1310);
      def_machine_returns( _localctx->machine , sep::Modifier::PROPERTY_RETURN_PARAMETER_MODIFIER );
    }
    setState(1313);
    def_body_machine( _localctx->machine );
   _ctx->stop = _input->LT(-1);

    	POP_CTX;

    	SET_RULE_LOCATION(_localctx->machine);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_body_machineContext ------------------------------------------------------------------

FMLParser::Def_body_machineContext::Def_body_machineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_body_machineContext::Def_body_machineContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
}

tree::TerminalNode* FMLParser::Def_body_machineContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

FMLParser::Def_body_machine_sectionContext* FMLParser::Def_body_machineContext::def_body_machine_section() {
  return getRuleContext<FMLParser::Def_body_machine_sectionContext>(0);
}

tree::TerminalNode* FMLParser::Def_body_machineContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}


size_t FMLParser::Def_body_machineContext::getRuleIndex() const {
  return FMLParser::RuleDef_body_machine;
}


FMLParser::Def_body_machineContext* FMLParser::def_body_machine(sep::Machine * machine) {
  Def_body_machineContext *_localctx = _tracker.createInstance<Def_body_machineContext>(_ctx, getState(), machine);
  enterRule(_localctx, 96, FMLParser::RuleDef_body_machine);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1315);
    match(FMLParser::LCURLY);
    setState(1316);
    def_body_machine_section( _localctx->machine );
    setState(1317);
    match(FMLParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_body_machine_sectionContext ------------------------------------------------------------------

FMLParser::Def_body_machine_sectionContext::Def_body_machine_sectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_body_machine_sectionContext::Def_body_machine_sectionContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
}

FMLParser::Section_headerContext* FMLParser::Def_body_machine_sectionContext::section_header() {
  return getRuleContext<FMLParser::Section_headerContext>(0);
}

FMLParser::Section_importContext* FMLParser::Def_body_machine_sectionContext::section_import() {
  return getRuleContext<FMLParser::Section_importContext>(0);
}

std::vector<FMLParser::Section_parameterContext *> FMLParser::Def_body_machine_sectionContext::section_parameter() {
  return getRuleContexts<FMLParser::Section_parameterContext>();
}

FMLParser::Section_parameterContext* FMLParser::Def_body_machine_sectionContext::section_parameter(size_t i) {
  return getRuleContext<FMLParser::Section_parameterContext>(i);
}

std::vector<FMLParser::Section_propertyContext *> FMLParser::Def_body_machine_sectionContext::section_property() {
  return getRuleContexts<FMLParser::Section_propertyContext>();
}

FMLParser::Section_propertyContext* FMLParser::Def_body_machine_sectionContext::section_property(size_t i) {
  return getRuleContext<FMLParser::Section_propertyContext>(i);
}

std::vector<FMLParser::Section_composite_structureContext *> FMLParser::Def_body_machine_sectionContext::section_composite_structure() {
  return getRuleContexts<FMLParser::Section_composite_structureContext>();
}

FMLParser::Section_composite_structureContext* FMLParser::Def_body_machine_sectionContext::section_composite_structure(size_t i) {
  return getRuleContext<FMLParser::Section_composite_structureContext>(i);
}

FMLParser::Section_behaviorContext* FMLParser::Def_body_machine_sectionContext::section_behavior() {
  return getRuleContext<FMLParser::Section_behaviorContext>(0);
}

FMLParser::Section_statemachineContext* FMLParser::Def_body_machine_sectionContext::section_statemachine() {
  return getRuleContext<FMLParser::Section_statemachineContext>(0);
}

std::vector<FMLParser::Section_model_of_computationContext *> FMLParser::Def_body_machine_sectionContext::section_model_of_computation() {
  return getRuleContexts<FMLParser::Section_model_of_computationContext>();
}

FMLParser::Section_model_of_computationContext* FMLParser::Def_body_machine_sectionContext::section_model_of_computation(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_computationContext>(i);
}

std::vector<FMLParser::Section_model_of_executionContext *> FMLParser::Def_body_machine_sectionContext::section_model_of_execution() {
  return getRuleContexts<FMLParser::Section_model_of_executionContext>();
}

FMLParser::Section_model_of_executionContext* FMLParser::Def_body_machine_sectionContext::section_model_of_execution(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_executionContext>(i);
}

std::vector<FMLParser::Section_model_of_interactionContext *> FMLParser::Def_body_machine_sectionContext::section_model_of_interaction() {
  return getRuleContexts<FMLParser::Section_model_of_interactionContext>();
}

FMLParser::Section_model_of_interactionContext* FMLParser::Def_body_machine_sectionContext::section_model_of_interaction(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_interactionContext>(i);
}


size_t FMLParser::Def_body_machine_sectionContext::getRuleIndex() const {
  return FMLParser::RuleDef_body_machine_section;
}


FMLParser::Def_body_machine_sectionContext* FMLParser::def_body_machine_section(sep::Machine * machine) {
  Def_body_machine_sectionContext *_localctx = _tracker.createInstance<Def_body_machine_sectionContext>(_ctx, getState(), machine);
  enterRule(_localctx, 98, FMLParser::RuleDef_body_machine_section);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1320);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__43) {
      setState(1319);
      section_header( _localctx->machine );
    }
    setState(1323);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__44) {
      setState(1322);
      section_import( _localctx->machine );
    }
    setState(1328);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 127) != 0)) {
      setState(1325);
      section_parameter( _localctx->machine );
      setState(1330);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
      sep::TemplateFactory::genProperty( _localctx->machine ); 
    setState(1335);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 135) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 135)) & 63) != 0)) {
      setState(1332);
      section_property( _localctx->machine );
      setState(1337);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1341);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 283867514012696576) != 0) || _la == FMLParser::T__207

    || _la == FMLParser::T__208) {
      setState(1338);
      section_composite_structure( _localctx->machine );
      setState(1343);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1346);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__63: {
        setState(1344);
        section_behavior( _localctx->machine );
        break;
      }

      case FMLParser::T__73: {
        setState(1345);
        section_statemachine( _localctx->machine );
        break;
      }

      case FMLParser::T__206:
      case FMLParser::T__210:
      case FMLParser::T__216:
      case FMLParser::T__217:
      case FMLParser::RCURLY: {
        break;
      }

    default:
      break;
    }
      sep::TemplateFactory::genBehavior(_localctx->machine); 
    setState(1354);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 3089) != 0)) {
      setState(1352);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::T__206: {
          setState(1349);
          section_model_of_computation( _localctx->machine );
          break;
        }

        case FMLParser::T__210: {
          setState(1350);
          section_model_of_execution( _localctx->machine );
          break;
        }

        case FMLParser::T__216:
        case FMLParser::T__217: {
          setState(1351);
          section_model_of_interaction( _localctx->machine );
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1356);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_body_machine_simplifContext ------------------------------------------------------------------

FMLParser::Def_body_machine_simplifContext::Def_body_machine_simplifContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_body_machine_simplifContext::Def_body_machine_simplifContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
}

std::vector<FMLParser::Property_declarationContext *> FMLParser::Def_body_machine_simplifContext::property_declaration() {
  return getRuleContexts<FMLParser::Property_declarationContext>();
}

FMLParser::Property_declarationContext* FMLParser::Def_body_machine_simplifContext::property_declaration(size_t i) {
  return getRuleContext<FMLParser::Property_declarationContext>(i);
}

std::vector<FMLParser::Def_moe_primitiveContext *> FMLParser::Def_body_machine_simplifContext::def_moe_primitive() {
  return getRuleContexts<FMLParser::Def_moe_primitiveContext>();
}

FMLParser::Def_moe_primitiveContext* FMLParser::Def_body_machine_simplifContext::def_moe_primitive(size_t i) {
  return getRuleContext<FMLParser::Def_moe_primitiveContext>(i);
}


size_t FMLParser::Def_body_machine_simplifContext::getRuleIndex() const {
  return FMLParser::RuleDef_body_machine_simplif;
}


FMLParser::Def_body_machine_simplifContext* FMLParser::def_body_machine_simplif(sep::Machine * machine) {
  Def_body_machine_simplifContext *_localctx = _tracker.createInstance<Def_body_machine_simplifContext>(_ctx, getState(), machine);
  enterRule(_localctx, 100, FMLParser::RuleDef_body_machine_simplif);

  	sep::PropertyPart & declPropertyPart = machine->getPropertyPart();

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1368);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::EOF:
      case FMLParser::T__13:
      case FMLParser::T__14:
      case FMLParser::T__15:
      case FMLParser::T__16:
      case FMLParser::T__17:
      case FMLParser::T__18:
      case FMLParser::T__19:
      case FMLParser::T__20:
      case FMLParser::T__21:
      case FMLParser::T__22:
      case FMLParser::T__25:
      case FMLParser::T__27:
      case FMLParser::T__29:
      case FMLParser::T__30:
      case FMLParser::T__31:
      case FMLParser::T__32:
      case FMLParser::T__84:
      case FMLParser::T__141:
      case FMLParser::T__142:
      case FMLParser::T__143:
      case FMLParser::T__144:
      case FMLParser::T__155:
      case FMLParser::T__156:
      case FMLParser::T__157:
      case FMLParser::T__158:
      case FMLParser::T__192:
      case FMLParser::T__194:
      case FMLParser::T__195:
      case FMLParser::T__196:
      case FMLParser::T__197:
      case FMLParser::T__205: {
        setState(1360);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 16458432512) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & 2161727821137838081) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 156)) & 1134283683004431) != 0)) {
          setState(1357);
          property_declaration( &declPropertyPart ,
          				sep::Modifier::PROPERTY_UNDEFINED_MODIFIER );
          setState(1362);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FMLParser::T__61:
      case FMLParser::T__62:
      case FMLParser::T__116:
      case FMLParser::T__117:
      case FMLParser::T__118:
      case FMLParser::T__119:
      case FMLParser::T__120:
      case FMLParser::T__121:
      case FMLParser::T__122:
      case FMLParser::T__123:
      case FMLParser::T__124:
      case FMLParser::T__125:
      case FMLParser::T__126:
      case FMLParser::T__209:
      case FMLParser::T__211:
      case FMLParser::T__212:
      case FMLParser::T__213:
      case FMLParser::T__214:
      case FMLParser::T__215: {
        setState(1364); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(1363);
          def_moe_primitive( _localctx->machine );
          setState(1366); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FMLParser::T__61

        || _la == FMLParser::T__62 || ((((_la - 117) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 117)) & 2047) != 0) || ((((_la - 210) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 210)) & 125) != 0));
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Any_def_statemachineContext ------------------------------------------------------------------

FMLParser::Any_def_statemachineContext::Any_def_statemachineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Any_def_statemachineContext::Any_def_statemachineContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
  this->mdfr = mdfr;
  this->spcfr = spcfr;
}

FMLParser::Def_state_singletonContext* FMLParser::Any_def_statemachineContext::def_state_singleton() {
  return getRuleContext<FMLParser::Def_state_singletonContext>(0);
}

FMLParser::Def_stateContext* FMLParser::Any_def_statemachineContext::def_state() {
  return getRuleContext<FMLParser::Def_stateContext>(0);
}

FMLParser::Def_statemachineContext* FMLParser::Any_def_statemachineContext::def_statemachine() {
  return getRuleContext<FMLParser::Def_statemachineContext>(0);
}

FMLParser::Executable_modifier_specifierContext* FMLParser::Any_def_statemachineContext::executable_modifier_specifier() {
  return getRuleContext<FMLParser::Executable_modifier_specifierContext>(0);
}


size_t FMLParser::Any_def_statemachineContext::getRuleIndex() const {
  return FMLParser::RuleAny_def_statemachine;
}


FMLParser::Any_def_statemachineContext* FMLParser::any_def_statemachine(sep::Machine * container,sep::Modifier mdfr,sep::Specifier spcfr) {
  Any_def_statemachineContext *_localctx = _tracker.createInstance<Any_def_statemachineContext>(_ctx, getState(), container, mdfr, spcfr);
  enterRule(_localctx, 102, FMLParser::RuleAny_def_statemachine);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1373);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4380866904064) != 0)) {
      setState(1370);
      antlrcpp::downCast<Any_def_statemachineContext *>(_localctx)->ms = executable_modifier_specifier();
       _localctx->mdfr.override_ifdef( antlrcpp::downCast<Any_def_statemachineContext *>(_localctx)->ms->mdfr ); _localctx->spcfr.override_ifdef( antlrcpp::downCast<Any_def_statemachineContext *>(_localctx)->ms->spcfr ); 
    }
    setState(1384);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__76:
      case FMLParser::T__77:
      case FMLParser::T__78:
      case FMLParser::T__79:
      case FMLParser::T__80:
      case FMLParser::T__81:
      case FMLParser::T__82: {
        setState(1375);
        antlrcpp::downCast<Any_def_statemachineContext *>(_localctx)->dss = def_state_singleton( _localctx->container , _localctx->mdfr , _localctx->spcfr );
         antlrcpp::downCast<Any_def_statemachineContext *>(_localctx)->machine =  antlrcpp::downCast<Any_def_statemachineContext *>(_localctx)->dss->state;   
        break;
      }

      case FMLParser::T__74: {
        setState(1378);
        antlrcpp::downCast<Any_def_statemachineContext *>(_localctx)->ds = def_state( _localctx->container , _localctx->mdfr , _localctx->spcfr );
         antlrcpp::downCast<Any_def_statemachineContext *>(_localctx)->machine =  antlrcpp::downCast<Any_def_statemachineContext *>(_localctx)->ds->state;   
        break;
      }

      case FMLParser::T__59: {
        setState(1381);
        antlrcpp::downCast<Any_def_statemachineContext *>(_localctx)->sm = def_statemachine( _localctx->container , _localctx->mdfr , _localctx->spcfr );
         antlrcpp::downCast<Any_def_statemachineContext *>(_localctx)->machine =  antlrcpp::downCast<Any_def_statemachineContext *>(_localctx)->sm->machine; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_statemachineContext ------------------------------------------------------------------

FMLParser::Def_statemachineContext::Def_statemachineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_statemachineContext::Def_statemachineContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
  this->mdfr = mdfr;
  this->spcfr = spcfr;
}

FMLParser::Def_body_statemachineContext* FMLParser::Def_statemachineContext::def_body_statemachine() {
  return getRuleContext<FMLParser::Def_body_statemachineContext>(0);
}

tree::TerminalNode* FMLParser::Def_statemachineContext::RBRACKET() {
  return getToken(FMLParser::RBRACKET, 0);
}

tree::TerminalNode* FMLParser::Def_statemachineContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Def_statemachineContext::GT() {
  return getToken(FMLParser::GT, 0);
}

std::vector<tree::TerminalNode *> FMLParser::Def_statemachineContext::ID() {
  return getTokens(FMLParser::ID);
}

tree::TerminalNode* FMLParser::Def_statemachineContext::ID(size_t i) {
  return getToken(FMLParser::ID, i);
}

tree::TerminalNode* FMLParser::Def_statemachineContext::StringLiteral() {
  return getToken(FMLParser::StringLiteral, 0);
}

FMLParser::Def_machine_parametersContext* FMLParser::Def_statemachineContext::def_machine_parameters() {
  return getRuleContext<FMLParser::Def_machine_parametersContext>(0);
}

FMLParser::Def_machine_returnsContext* FMLParser::Def_statemachineContext::def_machine_returns() {
  return getRuleContext<FMLParser::Def_machine_returnsContext>(0);
}

tree::TerminalNode* FMLParser::Def_statemachineContext::LBRACKET() {
  return getToken(FMLParser::LBRACKET, 0);
}

tree::TerminalNode* FMLParser::Def_statemachineContext::LBRACKET_EXCEPT() {
  return getToken(FMLParser::LBRACKET_EXCEPT, 0);
}

tree::TerminalNode* FMLParser::Def_statemachineContext::STAR() {
  return getToken(FMLParser::STAR, 0);
}

FMLParser::Executable_specifierContext* FMLParser::Def_statemachineContext::executable_specifier() {
  return getRuleContext<FMLParser::Executable_specifierContext>(0);
}

FMLParser::Def_instance_countContext* FMLParser::Def_statemachineContext::def_instance_count() {
  return getRuleContext<FMLParser::Def_instance_countContext>(0);
}

std::vector<tree::TerminalNode *> FMLParser::Def_statemachineContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Def_statemachineContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Def_statemachineContext::getRuleIndex() const {
  return FMLParser::RuleDef_statemachine;
}


FMLParser::Def_statemachineContext* FMLParser::def_statemachine(sep::Machine * container,sep::Modifier mdfr,sep::Specifier spcfr) {
  Def_statemachineContext *_localctx = _tracker.createInstance<Def_statemachineContext>(_ctx, getState(), container, mdfr, spcfr);
  enterRule(_localctx, 104, FMLParser::RuleDef_statemachine);

  //	resetTransitionID();
  	resetConnectorID();
  	resetBufferID();

  	std::size_t initialCount = 1;
  	std::size_t maximalCount = AVM_NUMERIC_MAX_SIZE_T;

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1386);
    match(FMLParser::T__59);
    setState(1400);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LT_) {
      setState(1387);
      match(FMLParser::LT_);
      setState(1397);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::T__13:
        case FMLParser::T__30:
        case FMLParser::T__42:
        case FMLParser::T__83:
        case FMLParser::T__84:
        case FMLParser::T__85:
        case FMLParser::T__86:
        case FMLParser::T__87:
        case FMLParser::T__88:
        case FMLParser::T__89:
        case FMLParser::T__90:
        case FMLParser::T__91:
        case FMLParser::T__92:
        case FMLParser::T__93:
        case FMLParser::T__94:
        case FMLParser::T__95:
        case FMLParser::T__96:
        case FMLParser::T__97:
        case FMLParser::T__98:
        case FMLParser::T__99:
        case FMLParser::T__100:
        case FMLParser::T__101:
        case FMLParser::T__102:
        case FMLParser::T__103:
        case FMLParser::T__104:
        case FMLParser::ID: {
          setState(1389);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::T__42) {
            setState(1388);
            match(FMLParser::T__42);
          }
          setState(1391);
          executable_specifier( &( _localctx->spcfr ) );
          setState(1394);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::COMMA) {
            setState(1392);
            match(FMLParser::COMMA);
            setState(1393);
            def_instance_count( & initialCount , & maximalCount );
          }
          break;
        }

        case FMLParser::T__64:
        case FMLParser::T__65:
        case FMLParser::LPAREN:
        case FMLParser::LBRACKET: {
          setState(1396);
          def_instance_count( & initialCount , & maximalCount );
          break;
        }

        case FMLParser::GT: {
          break;
        }

      default:
        break;
      }
      setState(1399);
      match(FMLParser::GT);
    }
    setState(1427);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::ID: {
        setState(1402);
        antlrcpp::downCast<Def_statemachineContext *>(_localctx)->id = match(FMLParser::ID);

        			if( _localctx->spcfr.isUndefined() )
        			{
        				_localctx->spcfr.setComponentExecutable();
        			}
        			PUSH_CTX_CPM( antlrcpp::downCast<Def_statemachineContext *>(_localctx)->machine =  sep::Machine::newStatemachine(
        					_localctx->container, antlrcpp::downCast<Def_statemachineContext *>(_localctx)->id->getText(), _localctx->spcfr) );

        			_localctx->machine->getwModifier().override_ifdef( _localctx->mdfr );

        			_localctx->container->saveOwnedElement( _localctx->machine );

        			_localctx->machine->getUniqInstanceSpecifier()->
        					setInstanceCount(initialCount, maximalCount);
        		
        break;
      }

      case FMLParser::LBRACKET:
      case FMLParser::LBRACKET_EXCEPT: {
        setState(1408);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::LBRACKET: {
            setState(1404);
            match(FMLParser::LBRACKET);
             _localctx->spcfr.setGroupSome(); 
            break;
          }

          case FMLParser::LBRACKET_EXCEPT: {
            setState(1406);
            match(FMLParser::LBRACKET_EXCEPT);
             _localctx->spcfr.setGroupExcept(); 
            break;
          }

        default:
          throw NoViableAltException(this);
        }

        			PUSH_CTX_CPM( antlrcpp::downCast<Def_statemachineContext *>(_localctx)->machine =  sep::Machine::newStatemachine(
        					_localctx->container, "[]", _localctx->spcfr/*, type*/) );

        			_localctx->machine->getwModifier().override_ifdef( _localctx->mdfr );

        			_localctx->container->saveOwnedElement( _localctx->machine );

        			_localctx->machine->getUniqInstanceSpecifier()->
        					setInstanceCount(initialCount, maximalCount);
        		
        setState(1423);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::ID: {
            setState(1411);
            antlrcpp::downCast<Def_statemachineContext *>(_localctx)->id = match(FMLParser::ID);
             _localctx->machine->appendGroupId( antlrcpp::downCast<Def_statemachineContext *>(_localctx)->id->getText() ); 
            setState(1418);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == FMLParser::COMMA) {
              setState(1413);
              match(FMLParser::COMMA);
              setState(1414);
              antlrcpp::downCast<Def_statemachineContext *>(_localctx)->id = match(FMLParser::ID);
               _localctx->machine->appendGroupId( antlrcpp::downCast<Def_statemachineContext *>(_localctx)->id->getText() ); 
              setState(1420);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            break;
          }

          case FMLParser::STAR: {
            setState(1421);
            match(FMLParser::STAR);
             _localctx->machine->getwSpecifier().setGroupEvery(); 
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1425);
        match(FMLParser::RBRACKET);
         _localctx->machine->setGroupId(); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1431);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::StringLiteral) {
      setState(1429);
      antlrcpp::downCast<Def_statemachineContext *>(_localctx)->stringliteralToken = match(FMLParser::StringLiteral);
       _localctx->machine->setUnrestrictedName(antlrcpp::downCast<Def_statemachineContext *>(_localctx)->stringliteralToken->getText()); 
    }
    setState(1434);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LPAREN

    || _la == FMLParser::LBRACKET) {
      setState(1433);
      def_machine_parameters( _localctx->machine );
    }
    setState(1437);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__49

    || _la == FMLParser::T__50) {
      setState(1436);
      def_machine_returns( _localctx->machine , sep::Modifier::PROPERTY_RETURN_PARAMETER_MODIFIER );
    }
    setState(1439);
    def_body_statemachine( _localctx->machine );
   _ctx->stop = _input->LT(-1);

    	POP_CTX;

    	SET_RULE_LOCATION(_localctx->machine);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_body_statemachineContext ------------------------------------------------------------------

FMLParser::Def_body_statemachineContext::Def_body_statemachineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_body_statemachineContext::Def_body_statemachineContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
}

tree::TerminalNode* FMLParser::Def_body_statemachineContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Def_body_statemachineContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

FMLParser::Section_headerContext* FMLParser::Def_body_statemachineContext::section_header() {
  return getRuleContext<FMLParser::Section_headerContext>(0);
}

FMLParser::Section_importContext* FMLParser::Def_body_statemachineContext::section_import() {
  return getRuleContext<FMLParser::Section_importContext>(0);
}

std::vector<FMLParser::Section_parameterContext *> FMLParser::Def_body_statemachineContext::section_parameter() {
  return getRuleContexts<FMLParser::Section_parameterContext>();
}

FMLParser::Section_parameterContext* FMLParser::Def_body_statemachineContext::section_parameter(size_t i) {
  return getRuleContext<FMLParser::Section_parameterContext>(i);
}

std::vector<FMLParser::Section_propertyContext *> FMLParser::Def_body_statemachineContext::section_property() {
  return getRuleContexts<FMLParser::Section_propertyContext>();
}

FMLParser::Section_propertyContext* FMLParser::Def_body_statemachineContext::section_property(size_t i) {
  return getRuleContext<FMLParser::Section_propertyContext>(i);
}

std::vector<FMLParser::Section_composite_structureContext *> FMLParser::Def_body_statemachineContext::section_composite_structure() {
  return getRuleContexts<FMLParser::Section_composite_structureContext>();
}

FMLParser::Section_composite_structureContext* FMLParser::Def_body_statemachineContext::section_composite_structure(size_t i) {
  return getRuleContext<FMLParser::Section_composite_structureContext>(i);
}

FMLParser::Section_state_regionContext* FMLParser::Def_body_statemachineContext::section_state_region() {
  return getRuleContext<FMLParser::Section_state_regionContext>(0);
}

FMLParser::Section_transitionContext* FMLParser::Def_body_statemachineContext::section_transition() {
  return getRuleContext<FMLParser::Section_transitionContext>(0);
}

std::vector<FMLParser::Section_model_of_computationContext *> FMLParser::Def_body_statemachineContext::section_model_of_computation() {
  return getRuleContexts<FMLParser::Section_model_of_computationContext>();
}

FMLParser::Section_model_of_computationContext* FMLParser::Def_body_statemachineContext::section_model_of_computation(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_computationContext>(i);
}

std::vector<FMLParser::Section_model_of_executionContext *> FMLParser::Def_body_statemachineContext::section_model_of_execution() {
  return getRuleContexts<FMLParser::Section_model_of_executionContext>();
}

FMLParser::Section_model_of_executionContext* FMLParser::Def_body_statemachineContext::section_model_of_execution(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_executionContext>(i);
}

std::vector<FMLParser::Section_model_of_interactionContext *> FMLParser::Def_body_statemachineContext::section_model_of_interaction() {
  return getRuleContexts<FMLParser::Section_model_of_interactionContext>();
}

FMLParser::Section_model_of_interactionContext* FMLParser::Def_body_statemachineContext::section_model_of_interaction(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_interactionContext>(i);
}

std::vector<FMLParser::Section_composite_regionContext *> FMLParser::Def_body_statemachineContext::section_composite_region() {
  return getRuleContexts<FMLParser::Section_composite_regionContext>();
}

FMLParser::Section_composite_regionContext* FMLParser::Def_body_statemachineContext::section_composite_region(size_t i) {
  return getRuleContext<FMLParser::Section_composite_regionContext>(i);
}


size_t FMLParser::Def_body_statemachineContext::getRuleIndex() const {
  return FMLParser::RuleDef_body_statemachine;
}


FMLParser::Def_body_statemachineContext* FMLParser::def_body_statemachine(sep::Machine * machine) {
  Def_body_statemachineContext *_localctx = _tracker.createInstance<Def_body_statemachineContext>(_ctx, getState(), machine);
  enterRule(_localctx, 106, FMLParser::RuleDef_body_statemachine);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1441);
    match(FMLParser::LCURLY);
    setState(1443);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__43) {
      setState(1442);
      section_header( _localctx->machine );
    }
    setState(1446);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__44) {
      setState(1445);
      section_import( _localctx->machine );
    }
    setState(1451);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & 127) != 0)) {
      setState(1448);
      section_parameter( _localctx->machine );
      setState(1453);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
      sep::TemplateFactory::genProperty( _localctx->machine ); 
    setState(1458);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 135) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 135)) & 63) != 0)) {
      setState(1455);
      section_property( _localctx->machine );
      setState(1460);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1464);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 283867514012696576) != 0) || _la == FMLParser::T__207

    || _la == FMLParser::T__208) {
      setState(1461);
      section_composite_structure( _localctx->machine );
      setState(1466);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1473);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__68:
      case FMLParser::T__69: {
        setState(1467);
        section_state_region( _localctx->machine );
        break;
      }

      case FMLParser::T__70: {
        setState(1469); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(1468);
          section_composite_region( _localctx->machine );
          setState(1471); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FMLParser::T__70);
        break;
      }

      case FMLParser::T__105:
      case FMLParser::T__206:
      case FMLParser::T__210:
      case FMLParser::T__216:
      case FMLParser::T__217:
      case FMLParser::RCURLY: {
        break;
      }

    default:
      break;
    }
    setState(1476);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__105) {
      setState(1475);
      section_transition( _localctx->machine );
    }
      sep::TemplateFactory::genBehavior(machine); 
    setState(1484);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 3089) != 0)) {
      setState(1482);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::T__206: {
          setState(1479);
          section_model_of_computation( _localctx->machine );
          break;
        }

        case FMLParser::T__210: {
          setState(1480);
          section_model_of_execution( _localctx->machine );
          break;
        }

        case FMLParser::T__216:
        case FMLParser::T__217: {
          setState(1481);
          section_model_of_interaction( _localctx->machine );
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1486);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1487);
    match(FMLParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_state_regionContext ------------------------------------------------------------------

FMLParser::Section_state_regionContext::Section_state_regionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_state_regionContext::Section_state_regionContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

std::vector<FMLParser::Any_def_statemachineContext *> FMLParser::Section_state_regionContext::any_def_statemachine() {
  return getRuleContexts<FMLParser::Any_def_statemachineContext>();
}

FMLParser::Any_def_statemachineContext* FMLParser::Section_state_regionContext::any_def_statemachine(size_t i) {
  return getRuleContext<FMLParser::Any_def_statemachineContext>(i);
}


size_t FMLParser::Section_state_regionContext::getRuleIndex() const {
  return FMLParser::RuleSection_state_region;
}


FMLParser::Section_state_regionContext* FMLParser::section_state_region(sep::Machine * container) {
  Section_state_regionContext *_localctx = _tracker.createInstance<Section_state_regionContext>(_ctx, getState(), container);
  enterRule(_localctx, 108, FMLParser::RuleSection_state_region);

  	sep::Modifier mdfr;

  	sep::Specifier spcfr;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1489);
    _la = _input->LA(1);
    if (!(_la == FMLParser::T__68

    || _la == FMLParser::T__69)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
     _localctx->container->getwSpecifier().setMocStateTransitionSystem(); 
    setState(1492); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1491);
      antlrcpp::downCast<Section_state_regionContext *>(_localctx)->m = any_def_statemachine( _localctx->container , mdfr , spcfr );
      setState(1494); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1152925885473751040) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 509) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_composite_regionContext ------------------------------------------------------------------

FMLParser::Section_composite_regionContext::Section_composite_regionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_composite_regionContext::Section_composite_regionContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

tree::TerminalNode* FMLParser::Section_composite_regionContext::ID() {
  return getToken(FMLParser::ID, 0);
}

tree::TerminalNode* FMLParser::Section_composite_regionContext::StringLiteral() {
  return getToken(FMLParser::StringLiteral, 0);
}

std::vector<FMLParser::Any_def_statemachineContext *> FMLParser::Section_composite_regionContext::any_def_statemachine() {
  return getRuleContexts<FMLParser::Any_def_statemachineContext>();
}

FMLParser::Any_def_statemachineContext* FMLParser::Section_composite_regionContext::any_def_statemachine(size_t i) {
  return getRuleContext<FMLParser::Any_def_statemachineContext>(i);
}


size_t FMLParser::Section_composite_regionContext::getRuleIndex() const {
  return FMLParser::RuleSection_composite_region;
}


FMLParser::Section_composite_regionContext* FMLParser::section_composite_region(sep::Machine * container) {
  Section_composite_regionContext *_localctx = _tracker.createInstance<Section_composite_regionContext>(_ctx, getState(), container);
  enterRule(_localctx, 110, FMLParser::RuleSection_composite_region);

  	sep::Machine * regionComposititeState;
  	
  	std::string unrestrictedName;
  	
  	sep::Modifier mdfr;

  	sep::Specifier spcfr;

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1496);
    match(FMLParser::T__70);
    setState(1498);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__71) {
      setState(1497);
      match(FMLParser::T__71);
    }
    setState(1500);
    antlrcpp::downCast<Section_composite_regionContext *>(_localctx)->id = match(FMLParser::ID);
    setState(1503);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::StringLiteral) {
      setState(1501);
      antlrcpp::downCast<Section_composite_regionContext *>(_localctx)->sl = match(FMLParser::StringLiteral);
       unrestrictedName = antlrcpp::downCast<Section_composite_regionContext *>(_localctx)->sl->getText(); 
    }
    setState(1505);
    match(FMLParser::T__72);

    	  	_localctx->container->getwSpecifier().setMocCompositeStructure();
    	  	
    		PUSH_CTX_CPM( regionComposititeState = sep::Machine::newState(
    				_localctx->container, antlrcpp::downCast<Section_composite_regionContext *>(_localctx)->id->getText(),
    				sep::Specifier::MOC_STATE_TRANSITION_SYSTEM_KIND) );
    				
    		regionComposititeState->setUnrestrictedName( unrestrictedName );
    				
    		_localctx->container->saveOwnedElement( regionComposititeState );
    	  
    setState(1508); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1507);
      antlrcpp::downCast<Section_composite_regionContext *>(_localctx)->m = any_def_statemachine( regionComposititeState , mdfr , spcfr );
      setState(1510); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1152925885473751040) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 509) != 0));
   _ctx->stop = _input->LT(-1);

    	POP_CTX;

    	SET_RULE_LOCATION(regionComposititeState);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_statemachineContext ------------------------------------------------------------------

FMLParser::Section_statemachineContext::Section_statemachineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_statemachineContext::Section_statemachineContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

std::vector<FMLParser::Any_def_statemachineContext *> FMLParser::Section_statemachineContext::any_def_statemachine() {
  return getRuleContexts<FMLParser::Any_def_statemachineContext>();
}

FMLParser::Any_def_statemachineContext* FMLParser::Section_statemachineContext::any_def_statemachine(size_t i) {
  return getRuleContext<FMLParser::Any_def_statemachineContext>(i);
}


size_t FMLParser::Section_statemachineContext::getRuleIndex() const {
  return FMLParser::RuleSection_statemachine;
}


FMLParser::Section_statemachineContext* FMLParser::section_statemachine(sep::Machine * container) {
  Section_statemachineContext *_localctx = _tracker.createInstance<Section_statemachineContext>(_ctx, getState(), container);
  enterRule(_localctx, 112, FMLParser::RuleSection_statemachine);

  	sep::Modifier mdfr;

  	sep::Specifier spcfr;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1512);
    match(FMLParser::T__73);
     _localctx->container->getwSpecifier().setMocStateTransitionSystem(); 
    setState(1515); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1514);
      antlrcpp::downCast<Section_statemachineContext *>(_localctx)->m = any_def_statemachine( _localctx->container , mdfr , spcfr );
      setState(1517); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1152925885473751040) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 509) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_stateContext ------------------------------------------------------------------

FMLParser::Def_stateContext::Def_stateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_stateContext::Def_stateContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
  this->mdfr = mdfr;
  this->spcfr = spcfr;
}

FMLParser::Def_body_stateContext* FMLParser::Def_stateContext::def_body_state() {
  return getRuleContext<FMLParser::Def_body_stateContext>(0);
}

tree::TerminalNode* FMLParser::Def_stateContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

tree::TerminalNode* FMLParser::Def_stateContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

FMLParser::Executable_specifierContext* FMLParser::Def_stateContext::executable_specifier() {
  return getRuleContext<FMLParser::Executable_specifierContext>(0);
}

tree::TerminalNode* FMLParser::Def_stateContext::GT() {
  return getToken(FMLParser::GT, 0);
}

tree::TerminalNode* FMLParser::Def_stateContext::RBRACKET() {
  return getToken(FMLParser::RBRACKET, 0);
}

tree::TerminalNode* FMLParser::Def_stateContext::StringLiteral() {
  return getToken(FMLParser::StringLiteral, 0);
}

std::vector<FMLParser::State_idContext *> FMLParser::Def_stateContext::state_id() {
  return getRuleContexts<FMLParser::State_idContext>();
}

FMLParser::State_idContext* FMLParser::Def_stateContext::state_id(size_t i) {
  return getRuleContext<FMLParser::State_idContext>(i);
}

tree::TerminalNode* FMLParser::Def_stateContext::LBRACKET() {
  return getToken(FMLParser::LBRACKET, 0);
}

tree::TerminalNode* FMLParser::Def_stateContext::LBRACKET_EXCEPT() {
  return getToken(FMLParser::LBRACKET_EXCEPT, 0);
}

tree::TerminalNode* FMLParser::Def_stateContext::STAR() {
  return getToken(FMLParser::STAR, 0);
}

std::vector<tree::TerminalNode *> FMLParser::Def_stateContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Def_stateContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Def_stateContext::getRuleIndex() const {
  return FMLParser::RuleDef_state;
}


FMLParser::Def_stateContext* FMLParser::def_state(sep::Machine * container,sep::Modifier mdfr,sep::Specifier spcfr) {
  Def_stateContext *_localctx = _tracker.createInstance<Def_stateContext>(_ctx, getState(), container, mdfr, spcfr);
  enterRule(_localctx, 114, FMLParser::RuleDef_state);

  	std::string sid;

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1519);
    match(FMLParser::T__74);
    setState(1528);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LT_) {
      setState(1520);
      match(FMLParser::LT_);
      setState(1522);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FMLParser::T__42) {
        setState(1521);
        match(FMLParser::T__42);
      }
      setState(1524);
      executable_specifier( &( _localctx->spcfr ) );
      setState(1525);
      match(FMLParser::GT);
       sid = "$" + _localctx->spcfr.strAnyStateMoc(""); 
    }
    setState(1557);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__75:
      case FMLParser::T__76:
      case FMLParser::T__77:
      case FMLParser::T__78:
      case FMLParser::T__79:
      case FMLParser::T__80:
      case FMLParser::T__81:
      case FMLParser::T__82:
      case FMLParser::DOLLAR:
      case FMLParser::ID: {
        setState(1530);
        antlrcpp::downCast<Def_stateContext *>(_localctx)->id = state_id();

        			if( _localctx->spcfr.couldBeStateMocSIMPLE() )
        			{
        				_localctx->spcfr.setStateMocSIMPLE();
        			}

        			PUSH_CTX_CPM(
        					antlrcpp::downCast<Def_stateContext *>(_localctx)->state =  sep::Machine::newState(_localctx->container, antlrcpp::downCast<Def_stateContext *>(_localctx)->id->s, _localctx->spcfr) );

        			_localctx->state->getwModifier().override_ifdef( _localctx->mdfr );

        			_localctx->container->saveOwnedElement( _localctx->state );
        		
        break;
      }

      case FMLParser::LBRACKET:
      case FMLParser::LBRACKET_EXCEPT: {
        setState(1537);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::LBRACKET: {
            setState(1533);
            match(FMLParser::LBRACKET);
             _localctx->spcfr.setGroupSome(); 
            break;
          }

          case FMLParser::LBRACKET_EXCEPT: {
            setState(1535);
            match(FMLParser::LBRACKET_EXCEPT);
             _localctx->spcfr.setGroupExcept(); 
            break;
          }

        default:
          throw NoViableAltException(this);
        }

        			PUSH_CTX_CPM(
        					antlrcpp::downCast<Def_stateContext *>(_localctx)->state =  sep::Machine::newState(_localctx->container, "[]", _localctx->spcfr) );

        			_localctx->container->saveOwnedElement( _localctx->state );

        			_localctx->state->getwModifier().override_ifdef( _localctx->mdfr );
        		
        setState(1553);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::T__75:
          case FMLParser::T__76:
          case FMLParser::T__77:
          case FMLParser::T__78:
          case FMLParser::T__79:
          case FMLParser::T__80:
          case FMLParser::T__81:
          case FMLParser::T__82:
          case FMLParser::DOLLAR:
          case FMLParser::ID: {
            setState(1540);
            antlrcpp::downCast<Def_stateContext *>(_localctx)->id = state_id();
             _localctx->state->appendGroupId( antlrcpp::downCast<Def_stateContext *>(_localctx)->id->s ); 
            setState(1548);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == FMLParser::COMMA) {
              setState(1542);
              match(FMLParser::COMMA);
              setState(1543);
              antlrcpp::downCast<Def_stateContext *>(_localctx)->id = state_id();
               _localctx->state->appendGroupId( antlrcpp::downCast<Def_stateContext *>(_localctx)->id->s ); 
              setState(1550);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            break;
          }

          case FMLParser::STAR: {
            setState(1551);
            match(FMLParser::STAR);
             _localctx->state->getwSpecifier().setGroupEvery(); 
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1555);
        match(FMLParser::RBRACKET);
         _localctx->state->setGroupId(); 
        break;
      }

      case FMLParser::LCURLY:
      case FMLParser::SEMI:
      case FMLParser::StringLiteral: {
        break;
      }

    default:
      break;
    }

    		if( _localctx->state == nullptr )
    		{
    			PUSH_CTX_CPM(
    					antlrcpp::downCast<Def_stateContext *>(_localctx)->state =  sep::Machine::newState(_localctx->container, sid, _localctx->spcfr) );

    			_localctx->state->getwModifier().override_ifdef( _localctx->mdfr );

    			_localctx->container->saveOwnedElement( _localctx->state );
    		}
    	  
    setState(1562);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::StringLiteral) {
      setState(1560);
      antlrcpp::downCast<Def_stateContext *>(_localctx)->stringliteralToken = match(FMLParser::StringLiteral);
       _localctx->state->setUnrestrictedName(antlrcpp::downCast<Def_stateContext *>(_localctx)->stringliteralToken->getText()); 
    }
    setState(1566);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LCURLY: {
        setState(1564);
        def_body_state( _localctx->state );
        break;
      }

      case FMLParser::SEMI: {
        setState(1565);
        match(FMLParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   _ctx->stop = _input->LT(-1);

    	POP_CTX;

    	SET_RULE_LOCATION(_localctx->state);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- State_kw_idContext ------------------------------------------------------------------

FMLParser::State_kw_idContext::State_kw_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t FMLParser::State_kw_idContext::getRuleIndex() const {
  return FMLParser::RuleState_kw_id;
}


FMLParser::State_kw_idContext* FMLParser::state_kw_id() {
  State_kw_idContext *_localctx = _tracker.createInstance<State_kw_idContext>(_ctx, getState());
  enterRule(_localctx, 116, FMLParser::RuleState_kw_id);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1584);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__75: {
        enterOuterAlt(_localctx, 1);
        setState(1568);
        match(FMLParser::T__75);
         antlrcpp::downCast<State_kw_idContext *>(_localctx)->s =  "#init"    ; 
        break;
      }

      case FMLParser::T__76: {
        enterOuterAlt(_localctx, 2);
        setState(1570);
        match(FMLParser::T__76);
         antlrcpp::downCast<State_kw_idContext *>(_localctx)->s =  "#initial" ; 
        break;
      }

      case FMLParser::T__77: {
        enterOuterAlt(_localctx, 3);
        setState(1572);
        match(FMLParser::T__77);
         antlrcpp::downCast<State_kw_idContext *>(_localctx)->s =  "#start"   ; 
        break;
      }

      case FMLParser::T__78: {
        enterOuterAlt(_localctx, 4);
        setState(1574);
        match(FMLParser::T__78);
         antlrcpp::downCast<State_kw_idContext *>(_localctx)->s =  "#dhistory"; 
        break;
      }

      case FMLParser::T__79: {
        enterOuterAlt(_localctx, 5);
        setState(1576);
        match(FMLParser::T__79);
         antlrcpp::downCast<State_kw_idContext *>(_localctx)->s =  "#shistory"; 
        break;
      }

      case FMLParser::T__80: {
        enterOuterAlt(_localctx, 6);
        setState(1578);
        match(FMLParser::T__80);
         antlrcpp::downCast<State_kw_idContext *>(_localctx)->s =  "#final"   ; needDefaultStateFinal.remove(_CPM_);    
        break;
      }

      case FMLParser::T__81: {
        enterOuterAlt(_localctx, 7);
        setState(1580);
        match(FMLParser::T__81);
         antlrcpp::downCast<State_kw_idContext *>(_localctx)->s =  "#terminal"; needDefaultStateTerminal.remove(_CPM_); 
        break;
      }

      case FMLParser::T__82: {
        enterOuterAlt(_localctx, 8);
        setState(1582);
        match(FMLParser::T__82);
         antlrcpp::downCast<State_kw_idContext *>(_localctx)->s =  "#return"  ; needDefaultStateReturn.remove(_CPM_);   
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- State_idContext ------------------------------------------------------------------

FMLParser::State_idContext::State_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::State_kw_idContext* FMLParser::State_idContext::state_kw_id() {
  return getRuleContext<FMLParser::State_kw_idContext>(0);
}

tree::TerminalNode* FMLParser::State_idContext::ID() {
  return getToken(FMLParser::ID, 0);
}

tree::TerminalNode* FMLParser::State_idContext::DOLLAR() {
  return getToken(FMLParser::DOLLAR, 0);
}


size_t FMLParser::State_idContext::getRuleIndex() const {
  return FMLParser::RuleState_id;
}


FMLParser::State_idContext* FMLParser::state_id() {
  State_idContext *_localctx = _tracker.createInstance<State_idContext>(_ctx, getState());
  enterRule(_localctx, 118, FMLParser::RuleState_id);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1594);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__75:
      case FMLParser::T__76:
      case FMLParser::T__77:
      case FMLParser::T__78:
      case FMLParser::T__79:
      case FMLParser::T__80:
      case FMLParser::T__81:
      case FMLParser::T__82: {
        enterOuterAlt(_localctx, 1);
        setState(1586);
        antlrcpp::downCast<State_idContext *>(_localctx)->kw = state_kw_id();
         antlrcpp::downCast<State_idContext *>(_localctx)->s =  antlrcpp::downCast<State_idContext *>(_localctx)->kw->s; 
        break;
      }

      case FMLParser::ID: {
        enterOuterAlt(_localctx, 2);
        setState(1589);
        antlrcpp::downCast<State_idContext *>(_localctx)->id = match(FMLParser::ID);
         antlrcpp::downCast<State_idContext *>(_localctx)->s =  antlrcpp::downCast<State_idContext *>(_localctx)->id->getText(); 
        break;
      }

      case FMLParser::DOLLAR: {
        enterOuterAlt(_localctx, 3);
        setState(1591);
        match(FMLParser::DOLLAR);
        setState(1592);
        antlrcpp::downCast<State_idContext *>(_localctx)->id = match(FMLParser::ID);
         antlrcpp::downCast<State_idContext *>(_localctx)->s =  "#" + antlrcpp::downCast<State_idContext *>(_localctx)->id->getText(); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_state_singletonContext ------------------------------------------------------------------

FMLParser::Def_state_singletonContext::Def_state_singletonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_state_singletonContext::Def_state_singletonContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
  this->mdfr = mdfr;
  this->spcfr = spcfr;
}

tree::TerminalNode* FMLParser::Def_state_singletonContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

FMLParser::Def_body_state_simplifContext* FMLParser::Def_state_singletonContext::def_body_state_simplif() {
  return getRuleContext<FMLParser::Def_body_state_simplifContext>(0);
}

tree::TerminalNode* FMLParser::Def_state_singletonContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

FMLParser::Block_statementContext* FMLParser::Def_state_singletonContext::block_statement() {
  return getRuleContext<FMLParser::Block_statementContext>(0);
}


size_t FMLParser::Def_state_singletonContext::getRuleIndex() const {
  return FMLParser::RuleDef_state_singleton;
}


FMLParser::Def_state_singletonContext* FMLParser::def_state_singleton(sep::Machine * container,sep::Modifier mdfr,sep::Specifier spcfr) {
  Def_state_singletonContext *_localctx = _tracker.createInstance<Def_state_singletonContext>(_ctx, getState(), container, mdfr, spcfr);
  enterRule(_localctx, 120, FMLParser::RuleDef_state_singleton);

  	SAVE_RULE_BEGIN_LOCATION;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1622);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__76:
      case FMLParser::T__77:
      case FMLParser::T__78:
      case FMLParser::T__79: {
        enterOuterAlt(_localctx, 1);
        setState(1604);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::T__76: {
            setState(1596);
            match(FMLParser::T__76);

            		PUSH_CTX_CPM( antlrcpp::downCast<Def_state_singletonContext *>(_localctx)->state =  sep::Machine::newState(
            				_localctx->container, "#initial", _localctx->spcfr.setPseudostateMocINITIAL()) );

            		_localctx->container->saveOwnedElement( _localctx->state );
            	  
            break;
          }

          case FMLParser::T__77: {
            setState(1598);
            match(FMLParser::T__77);

            		PUSH_CTX_CPM( antlrcpp::downCast<Def_state_singletonContext *>(_localctx)->state =  sep::Machine::newState(
            				_localctx->container, "#start", _localctx->spcfr.setStateMocSTART()) );

            		_localctx->container->saveOwnedElement( _localctx->state );
            	  
            break;
          }

          case FMLParser::T__78: {
            setState(1600);
            match(FMLParser::T__78);

            		PUSH_CTX_CPM( antlrcpp::downCast<Def_state_singletonContext *>(_localctx)->state =  sep::Machine::newState(
            				_localctx->container, "#dhistory",
            				_localctx->spcfr.setPseudostateMocDEEP_HISTORY()) );

            		_localctx->container->saveOwnedElement( _localctx->state );
            	  
            break;
          }

          case FMLParser::T__79: {
            setState(1602);
            match(FMLParser::T__79);

            		PUSH_CTX_CPM( antlrcpp::downCast<Def_state_singletonContext *>(_localctx)->state =  sep::Machine::newState(
            				_localctx->container, "#shistory",
            				_localctx->spcfr.setPseudostateMocSHALLOW_HISTORY()) );

            		_localctx->container->saveOwnedElement( _localctx->state );
            	  
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1606);
        match(FMLParser::LCURLY);
        setState(1607);
        def_body_state_simplif( _localctx->state );
        setState(1608);
        match(FMLParser::RCURLY);
        break;
      }

      case FMLParser::T__80: {
        enterOuterAlt(_localctx, 2);
        setState(1610);
        match(FMLParser::T__80);
        setState(1611);
        antlrcpp::downCast<Def_state_singletonContext *>(_localctx)->bs = block_statement();

        		PUSH_CTX_CPM( antlrcpp::downCast<Def_state_singletonContext *>(_localctx)->state =  sep::Machine::newState(
        			_localctx->container, "#final", _localctx->spcfr.setStateMocFINAL()) );

        		_localctx->container->saveOwnedElement( _localctx->state );

        		_localctx->state->getUniqBehaviorPart()->seqOnFinal(antlrcpp::downCast<Def_state_singletonContext *>(_localctx)->bs->ac);

        		needDefaultStateFinal.remove(_localctx->container);
        	
        break;
      }

      case FMLParser::T__81: {
        enterOuterAlt(_localctx, 3);
        setState(1614);
        match(FMLParser::T__81);
        setState(1615);
        antlrcpp::downCast<Def_state_singletonContext *>(_localctx)->bs = block_statement();

        		PUSH_CTX_CPM( antlrcpp::downCast<Def_state_singletonContext *>(_localctx)->state =  sep::Machine::newState(
        			_localctx->container, "#terminal", _localctx->spcfr.setPseudostateMocTERMINAL()) );

        		_localctx->container->saveOwnedElement( _localctx->state );

        		_localctx->state->getUniqBehaviorPart()->seqOnFinal(antlrcpp::downCast<Def_state_singletonContext *>(_localctx)->bs->ac);

        		needDefaultStateTerminal.remove(_localctx->container);
        	
        break;
      }

      case FMLParser::T__82: {
        enterOuterAlt(_localctx, 4);
        setState(1618);
        match(FMLParser::T__82);
        setState(1619);
        antlrcpp::downCast<Def_state_singletonContext *>(_localctx)->bs = block_statement();

        		PUSH_CTX_CPM( antlrcpp::downCast<Def_state_singletonContext *>(_localctx)->state =  sep::Machine::newState(
        			_localctx->container, "#return", _localctx->spcfr.setPseudostateMocRETURN()) );

        		_localctx->container->saveOwnedElement( _localctx->state );

        		_localctx->state->getUniqBehaviorPart()->seqOnFinal(antlrcpp::downCast<Def_state_singletonContext *>(_localctx)->bs->ac);

        		needDefaultStateReturn.remove(_localctx->container);
        	
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   _ctx->stop = _input->LT(-1);

    	_localctx->state->getwModifier().override_ifdef( _localctx->mdfr );

    	POP_CTX;

    	SET_RULE_LOCATION(_localctx->state);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Executable_specifierContext ------------------------------------------------------------------

FMLParser::Executable_specifierContext::Executable_specifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Executable_specifierContext::Executable_specifierContext(ParserRuleContext *parent, size_t invokingState, sep::Specifier * spcfr)
  : ParserRuleContext(parent, invokingState) {
  this->spcfr = spcfr;
}

std::vector<FMLParser::Executable_specifier_atomContext *> FMLParser::Executable_specifierContext::executable_specifier_atom() {
  return getRuleContexts<FMLParser::Executable_specifier_atomContext>();
}

FMLParser::Executable_specifier_atomContext* FMLParser::Executable_specifierContext::executable_specifier_atom(size_t i) {
  return getRuleContext<FMLParser::Executable_specifier_atomContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Executable_specifierContext::BAND() {
  return getTokens(FMLParser::BAND);
}

tree::TerminalNode* FMLParser::Executable_specifierContext::BAND(size_t i) {
  return getToken(FMLParser::BAND, i);
}


size_t FMLParser::Executable_specifierContext::getRuleIndex() const {
  return FMLParser::RuleExecutable_specifier;
}


FMLParser::Executable_specifierContext* FMLParser::executable_specifier(sep::Specifier * spcfr) {
  Executable_specifierContext *_localctx = _tracker.createInstance<Executable_specifierContext>(_ctx, getState(), spcfr);
  enterRule(_localctx, 122, FMLParser::RuleExecutable_specifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1624);
    antlrcpp::downCast<Executable_specifierContext *>(_localctx)->ka = executable_specifier_atom( _localctx->spcfr );
    setState(1629);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::BAND) {
      setState(1625);
      match(FMLParser::BAND);
      setState(1626);
      antlrcpp::downCast<Executable_specifierContext *>(_localctx)->ka = executable_specifier_atom( _localctx->spcfr );
      setState(1631);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Executable_specifier_atomContext ------------------------------------------------------------------

FMLParser::Executable_specifier_atomContext::Executable_specifier_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Executable_specifier_atomContext::Executable_specifier_atomContext(ParserRuleContext *parent, size_t invokingState, sep::Specifier * spcfr)
  : ParserRuleContext(parent, invokingState) {
  this->spcfr = spcfr;
}

tree::TerminalNode* FMLParser::Executable_specifier_atomContext::ID() {
  return getToken(FMLParser::ID, 0);
}


size_t FMLParser::Executable_specifier_atomContext::getRuleIndex() const {
  return FMLParser::RuleExecutable_specifier_atom;
}


FMLParser::Executable_specifier_atomContext* FMLParser::executable_specifier_atom(sep::Specifier * spcfr) {
  Executable_specifier_atomContext *_localctx = _tracker.createInstance<Executable_specifier_atomContext>(_ctx, getState(), spcfr);
  enterRule(_localctx, 124, FMLParser::RuleExecutable_specifier_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1682);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(1632);
        antlrcpp::downCast<Executable_specifier_atomContext *>(_localctx)->id = match(FMLParser::ID);
         _localctx->spcfr->setMoc( antlrcpp::downCast<Executable_specifier_atomContext *>(_localctx)->id->getText() ); 
        break;
      }

      case FMLParser::T__83: {
        enterOuterAlt(_localctx, 2);
        setState(1634);
        match(FMLParser::T__83);
         _localctx->spcfr->setStateMocSTART();  
        break;
      }

      case FMLParser::T__13: {
        enterOuterAlt(_localctx, 3);
        setState(1636);
        match(FMLParser::T__13);
         _localctx->spcfr->setStateMocFINAL();  
        break;
      }

      case FMLParser::T__30: {
        enterOuterAlt(_localctx, 4);
        setState(1638);
        match(FMLParser::T__30);
         _localctx->spcfr->setPseudostateMocRETURN();   
        break;
      }

      case FMLParser::T__84: {
        enterOuterAlt(_localctx, 5);
        setState(1640);
        match(FMLParser::T__84);
         _localctx->spcfr->setPseudostateMocCHOICE();   
        break;
      }

      case FMLParser::T__85: {
        enterOuterAlt(_localctx, 6);
        setState(1642);
        match(FMLParser::T__85);
         _localctx->spcfr->setPseudostateMocFORK(); 
        break;
      }

      case FMLParser::T__86: {
        enterOuterAlt(_localctx, 7);
        setState(1644);
        match(FMLParser::T__86);
         _localctx->spcfr->setPseudostateMocJOIN(); 
        break;
      }

      case FMLParser::T__87: {
        enterOuterAlt(_localctx, 8);
        setState(1646);
        match(FMLParser::T__87);
         _localctx->spcfr->setMocCompositeStructure();     
        break;
      }

      case FMLParser::T__88: {
        enterOuterAlt(_localctx, 9);
        setState(1648);
        match(FMLParser::T__88);
         _localctx->spcfr->setMocStateTransitionSystem();  
        break;
      }

      case FMLParser::T__89: {
        enterOuterAlt(_localctx, 10);
        setState(1650);
        match(FMLParser::T__89);
         _localctx->spcfr->setMocStateTransitionSystem();  
        break;
      }

      case FMLParser::T__90: {
        enterOuterAlt(_localctx, 11);
        setState(1652);
        match(FMLParser::T__90);
         _localctx->spcfr->setMocStateTransitionFlow();    
        break;
      }

      case FMLParser::T__91: {
        enterOuterAlt(_localctx, 12);
        setState(1654);
        match(FMLParser::T__91);
         _localctx->spcfr->setCompositeMocDataFlow();      
        break;
      }

      case FMLParser::T__92: {
        enterOuterAlt(_localctx, 13);
        setState(1656);
        match(FMLParser::T__92);
         _localctx->spcfr->setComponentInteraction().setMocCompositeInteraction().setInteractionAlternative();    
        break;
      }

      case FMLParser::T__93: {
        enterOuterAlt(_localctx, 14);
        setState(1658);
        match(FMLParser::T__93);
         _localctx->spcfr->setComponentInteraction().setMocCompositeInteraction().setInteractionOption();         
        break;
      }

      case FMLParser::T__94: {
        enterOuterAlt(_localctx, 15);
        setState(1660);
        match(FMLParser::T__94);
         _localctx->spcfr->setComponentInteraction().setMocCompositeInteraction().setInteractionLoop();           
        break;
      }

      case FMLParser::T__95: {
        enterOuterAlt(_localctx, 16);
        setState(1662);
        match(FMLParser::T__95);
         _localctx->spcfr->setComponentInteraction().setMocCompositeInteraction().setInteractionBreak();          
        break;
      }

      case FMLParser::T__96: {
        enterOuterAlt(_localctx, 17);
        setState(1664);
        match(FMLParser::T__96);
         _localctx->spcfr->setComponentInteraction().setMocCompositeInteraction().setInteractionParallel();       
        break;
      }

      case FMLParser::T__97: {
        enterOuterAlt(_localctx, 18);
        setState(1666);
        match(FMLParser::T__97);
         _localctx->spcfr->setComponentInteraction().setMocCompositeInteraction().setInteractionStrictSequence(); 
        break;
      }

      case FMLParser::T__98: {
        enterOuterAlt(_localctx, 19);
        setState(1668);
        match(FMLParser::T__98);
         _localctx->spcfr->setComponentInteraction().setMocCompositeInteraction().setInteractionWeakSequence();   
        break;
      }

      case FMLParser::T__99: {
        enterOuterAlt(_localctx, 20);
        setState(1670);
        match(FMLParser::T__99);
         _localctx->spcfr->setComponentInteraction().setMocCompositeInteraction().setInteractionWeakSequence();   
        break;
      }

      case FMLParser::T__100: {
        enterOuterAlt(_localctx, 21);
        setState(1672);
        match(FMLParser::T__100);
         _localctx->spcfr->setComponentInteraction().setMocCompositeInteraction().setInteractionCritical();       
        break;
      }

      case FMLParser::T__101: {
        enterOuterAlt(_localctx, 22);
        setState(1674);
        match(FMLParser::T__101);
         _localctx->spcfr->setComponentInteraction().setMocCompositeInteraction().setInteractionIgnore();         
        break;
      }

      case FMLParser::T__102: {
        enterOuterAlt(_localctx, 23);
        setState(1676);
        match(FMLParser::T__102);
         _localctx->spcfr->setComponentInteraction().setMocCompositeInteraction().setInteractionAlternative();    
        break;
      }

      case FMLParser::T__103: {
        enterOuterAlt(_localctx, 24);
        setState(1678);
        match(FMLParser::T__103);
         _localctx->spcfr->setComponentInteraction().setMocCompositeInteraction().setInteractionAlternative();    
        break;
      }

      case FMLParser::T__104: {
        enterOuterAlt(_localctx, 25);
        setState(1680);
        match(FMLParser::T__104);
         _localctx->spcfr->setComponentInteraction().setMocCompositeInteraction().setInteractionAlternative();    
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Instance_machine_modelContext ------------------------------------------------------------------

FMLParser::Instance_machine_modelContext::Instance_machine_modelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::QualifiedNameIDContext* FMLParser::Instance_machine_modelContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}


size_t FMLParser::Instance_machine_modelContext::getRuleIndex() const {
  return FMLParser::RuleInstance_machine_model;
}


FMLParser::Instance_machine_modelContext* FMLParser::instance_machine_model() {
  Instance_machine_modelContext *_localctx = _tracker.createInstance<Instance_machine_modelContext>(_ctx, getState());
  enterRule(_localctx, 126, FMLParser::RuleInstance_machine_model);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1684);
    antlrcpp::downCast<Instance_machine_modelContext *>(_localctx)->tid = qualifiedNameID();

    		antlrcpp::downCast<Instance_machine_modelContext *>(_localctx)->model =  sep::ParserUtil::getExecutableMachine(antlrcpp::downCast<Instance_machine_modelContext *>(_localctx)->tid->s, antlrcpp::downCast<Instance_machine_modelContext *>(_localctx)->tid->nb);
    		if( _localctx->model.invalid() )
    		{
    			sep::ParserUtil::avm_syntax_error(
    				"instance_machine_model", getCurrentToken()/*tid*/->getLine() )
    					<< "unexpected ID< " << antlrcpp::downCast<Instance_machine_modelContext *>(_localctx)->tid->s << " >"
    					<< sep::ParserUtil::SYNTAX_ERROR_EOL;
    		}
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_body_stateContext ------------------------------------------------------------------

FMLParser::Def_body_stateContext::Def_body_stateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_body_stateContext::Def_body_stateContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * state)
  : ParserRuleContext(parent, invokingState) {
  this->state = state;
}

tree::TerminalNode* FMLParser::Def_body_stateContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Def_body_stateContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

FMLParser::Def_body_state_sectionContext* FMLParser::Def_body_stateContext::def_body_state_section() {
  return getRuleContext<FMLParser::Def_body_state_sectionContext>(0);
}

FMLParser::Def_body_state_simplifContext* FMLParser::Def_body_stateContext::def_body_state_simplif() {
  return getRuleContext<FMLParser::Def_body_state_simplifContext>(0);
}


size_t FMLParser::Def_body_stateContext::getRuleIndex() const {
  return FMLParser::RuleDef_body_state;
}


FMLParser::Def_body_stateContext* FMLParser::def_body_state(sep::Machine * state) {
  Def_body_stateContext *_localctx = _tracker.createInstance<Def_body_stateContext>(_ctx, getState(), state);
  enterRule(_localctx, 128, FMLParser::RuleDef_body_state);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1687);
    match(FMLParser::LCURLY);
    setState(1690);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
    case 1: {
      setState(1688);
      def_body_state_section( _localctx->state );
      break;
    }

    case 2: {
      setState(1689);
      def_body_state_simplif( _localctx->state );
      break;
    }

    default:
      break;
    }
    setState(1692);
    match(FMLParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_body_state_sectionContext ------------------------------------------------------------------

FMLParser::Def_body_state_sectionContext::Def_body_state_sectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_body_state_sectionContext::Def_body_state_sectionContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
}

std::vector<FMLParser::Section_propertyContext *> FMLParser::Def_body_state_sectionContext::section_property() {
  return getRuleContexts<FMLParser::Section_propertyContext>();
}

FMLParser::Section_propertyContext* FMLParser::Def_body_state_sectionContext::section_property(size_t i) {
  return getRuleContext<FMLParser::Section_propertyContext>(i);
}

std::vector<FMLParser::Section_composite_structureContext *> FMLParser::Def_body_state_sectionContext::section_composite_structure() {
  return getRuleContexts<FMLParser::Section_composite_structureContext>();
}

FMLParser::Section_composite_structureContext* FMLParser::Def_body_state_sectionContext::section_composite_structure(size_t i) {
  return getRuleContext<FMLParser::Section_composite_structureContext>(i);
}

FMLParser::Section_state_regionContext* FMLParser::Def_body_state_sectionContext::section_state_region() {
  return getRuleContext<FMLParser::Section_state_regionContext>(0);
}

FMLParser::Section_transitionContext* FMLParser::Def_body_state_sectionContext::section_transition() {
  return getRuleContext<FMLParser::Section_transitionContext>(0);
}

std::vector<FMLParser::Section_model_of_computationContext *> FMLParser::Def_body_state_sectionContext::section_model_of_computation() {
  return getRuleContexts<FMLParser::Section_model_of_computationContext>();
}

FMLParser::Section_model_of_computationContext* FMLParser::Def_body_state_sectionContext::section_model_of_computation(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_computationContext>(i);
}

std::vector<FMLParser::Section_model_of_executionContext *> FMLParser::Def_body_state_sectionContext::section_model_of_execution() {
  return getRuleContexts<FMLParser::Section_model_of_executionContext>();
}

FMLParser::Section_model_of_executionContext* FMLParser::Def_body_state_sectionContext::section_model_of_execution(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_executionContext>(i);
}

std::vector<FMLParser::Section_model_of_interactionContext *> FMLParser::Def_body_state_sectionContext::section_model_of_interaction() {
  return getRuleContexts<FMLParser::Section_model_of_interactionContext>();
}

FMLParser::Section_model_of_interactionContext* FMLParser::Def_body_state_sectionContext::section_model_of_interaction(size_t i) {
  return getRuleContext<FMLParser::Section_model_of_interactionContext>(i);
}

std::vector<FMLParser::Section_composite_regionContext *> FMLParser::Def_body_state_sectionContext::section_composite_region() {
  return getRuleContexts<FMLParser::Section_composite_regionContext>();
}

FMLParser::Section_composite_regionContext* FMLParser::Def_body_state_sectionContext::section_composite_region(size_t i) {
  return getRuleContext<FMLParser::Section_composite_regionContext>(i);
}


size_t FMLParser::Def_body_state_sectionContext::getRuleIndex() const {
  return FMLParser::RuleDef_body_state_section;
}


FMLParser::Def_body_state_sectionContext* FMLParser::def_body_state_section(sep::Machine * machine) {
  Def_body_state_sectionContext *_localctx = _tracker.createInstance<Def_body_state_sectionContext>(_ctx, getState(), machine);
  enterRule(_localctx, 130, FMLParser::RuleDef_body_state_section);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1697);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 135) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 135)) & 63) != 0)) {
      setState(1694);
      section_property( _localctx->machine );
      setState(1699);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1703);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 283867514012696576) != 0) || _la == FMLParser::T__207

    || _la == FMLParser::T__208) {
      setState(1700);
      section_composite_structure( _localctx->machine );
      setState(1705);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1712);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__68:
      case FMLParser::T__69: {
        setState(1706);
        section_state_region( _localctx->machine );
        break;
      }

      case FMLParser::T__70: {
        setState(1708); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(1707);
          section_composite_region( _localctx->machine );
          setState(1710); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FMLParser::T__70);
        break;
      }

      case FMLParser::T__105:
      case FMLParser::T__206:
      case FMLParser::T__210:
      case FMLParser::T__216:
      case FMLParser::T__217:
      case FMLParser::RCURLY: {
        break;
      }

    default:
      break;
    }
    setState(1715);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__105) {
      setState(1714);
      section_transition( _localctx->machine );
    }
    setState(1722);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 207) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 207)) & 3089) != 0)) {
      setState(1720);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::T__206: {
          setState(1717);
          section_model_of_computation( _localctx->machine );
          break;
        }

        case FMLParser::T__210: {
          setState(1718);
          section_model_of_execution( _localctx->machine );
          break;
        }

        case FMLParser::T__216:
        case FMLParser::T__217: {
          setState(1719);
          section_model_of_interaction( _localctx->machine );
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1724);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_body_state_simplifContext ------------------------------------------------------------------

FMLParser::Def_body_state_simplifContext::Def_body_state_simplifContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_body_state_simplifContext::Def_body_state_simplifContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * state)
  : ParserRuleContext(parent, invokingState) {
  this->state = state;
}

std::vector<FMLParser::Decl_variableContext *> FMLParser::Def_body_state_simplifContext::decl_variable() {
  return getRuleContexts<FMLParser::Decl_variableContext>();
}

FMLParser::Decl_variableContext* FMLParser::Def_body_state_simplifContext::decl_variable(size_t i) {
  return getRuleContext<FMLParser::Decl_variableContext>(i);
}

std::vector<FMLParser::Def_transitionContext *> FMLParser::Def_body_state_simplifContext::def_transition() {
  return getRuleContexts<FMLParser::Def_transitionContext>();
}

FMLParser::Def_transitionContext* FMLParser::Def_body_state_simplifContext::def_transition(size_t i) {
  return getRuleContext<FMLParser::Def_transitionContext>(i);
}

std::vector<FMLParser::Def_state_activityContext *> FMLParser::Def_body_state_simplifContext::def_state_activity() {
  return getRuleContexts<FMLParser::Def_state_activityContext>();
}

FMLParser::Def_state_activityContext* FMLParser::Def_body_state_simplifContext::def_state_activity(size_t i) {
  return getRuleContext<FMLParser::Def_state_activityContext>(i);
}

std::vector<FMLParser::Any_def_statemachineContext *> FMLParser::Def_body_state_simplifContext::any_def_statemachine() {
  return getRuleContexts<FMLParser::Any_def_statemachineContext>();
}

FMLParser::Any_def_statemachineContext* FMLParser::Def_body_state_simplifContext::any_def_statemachine(size_t i) {
  return getRuleContext<FMLParser::Any_def_statemachineContext>(i);
}

std::vector<FMLParser::Modifier_declarationContext *> FMLParser::Def_body_state_simplifContext::modifier_declaration() {
  return getRuleContexts<FMLParser::Modifier_declarationContext>();
}

FMLParser::Modifier_declarationContext* FMLParser::Def_body_state_simplifContext::modifier_declaration(size_t i) {
  return getRuleContext<FMLParser::Modifier_declarationContext>(i);
}


size_t FMLParser::Def_body_state_simplifContext::getRuleIndex() const {
  return FMLParser::RuleDef_body_state_simplif;
}


FMLParser::Def_body_state_simplifContext* FMLParser::def_body_state_simplif(sep::Machine * state) {
  Def_body_state_simplifContext *_localctx = _tracker.createInstance<Def_body_state_simplifContext>(_ctx, getState(), state);
  enterRule(_localctx, 132, FMLParser::RuleDef_body_state_simplif);

  	sep::Modifier mdfr;

  	sep::Specifier spcfr;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1739);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 5764611920359309312) != 0) || ((((_la - 75) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 75)) & 9002814093132285) != 0) || ((((_la - 158) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 158)) & 281474976710659) != 0) || _la == FMLParser::AT_ID) {
       mdfr = sep::Modifier::PROPERTY_UNDEFINED_MODIFIER; 
      setState(1729);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
      case 1: {
        setState(1726);
        antlrcpp::downCast<Def_body_state_simplifContext *>(_localctx)->m = modifier_declaration();
         mdfr = antlrcpp::downCast<Def_body_state_simplifContext *>(_localctx)->m->mdfr; 
        break;
      }

      default:
        break;
      }
      setState(1735);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::T__31:
        case FMLParser::T__32:
        case FMLParser::T__157:
        case FMLParser::T__158:
        case FMLParser::T__205: {
          setState(1731);
          decl_variable( &( _localctx->state->getPropertyPart() ) , mdfr );
          break;
        }

        case FMLParser::T__17:
        case FMLParser::T__33:
        case FMLParser::T__34:
        case FMLParser::T__35:
        case FMLParser::T__36:
        case FMLParser::T__37:
        case FMLParser::T__38:
        case FMLParser::T__39:
        case FMLParser::T__40:
        case FMLParser::T__59:
        case FMLParser::T__74:
        case FMLParser::T__76:
        case FMLParser::T__77:
        case FMLParser::T__78:
        case FMLParser::T__79:
        case FMLParser::T__80:
        case FMLParser::T__81:
        case FMLParser::T__82: {
          setState(1732);
          antlrcpp::downCast<Def_body_state_simplifContext *>(_localctx)->ads = any_def_statemachine( _localctx->state , mdfr , spcfr );
          break;
        }

        case FMLParser::T__106:
        case FMLParser::T__107:
        case FMLParser::AT_ID: {
          setState(1733);
          def_transition( _localctx->state , mdfr , spcfr );
          break;
        }

        case FMLParser::T__61:
        case FMLParser::T__116:
        case FMLParser::T__117:
        case FMLParser::T__118:
        case FMLParser::T__119:
        case FMLParser::T__120:
        case FMLParser::T__121:
        case FMLParser::T__122:
        case FMLParser::T__123:
        case FMLParser::T__124:
        case FMLParser::T__125:
        case FMLParser::T__126: {
          setState(1734);
          def_state_activity( _localctx->state );
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(1741);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_transitionContext ------------------------------------------------------------------

FMLParser::Section_transitionContext::Section_transitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_transitionContext::Section_transitionContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * state)
  : ParserRuleContext(parent, invokingState) {
  this->state = state;
}

std::vector<FMLParser::Def_transitionContext *> FMLParser::Section_transitionContext::def_transition() {
  return getRuleContexts<FMLParser::Def_transitionContext>();
}

FMLParser::Def_transitionContext* FMLParser::Section_transitionContext::def_transition(size_t i) {
  return getRuleContext<FMLParser::Def_transitionContext>(i);
}

std::vector<FMLParser::Modifier_transitionContext *> FMLParser::Section_transitionContext::modifier_transition() {
  return getRuleContexts<FMLParser::Modifier_transitionContext>();
}

FMLParser::Modifier_transitionContext* FMLParser::Section_transitionContext::modifier_transition(size_t i) {
  return getRuleContext<FMLParser::Modifier_transitionContext>(i);
}


size_t FMLParser::Section_transitionContext::getRuleIndex() const {
  return FMLParser::RuleSection_transition;
}


FMLParser::Section_transitionContext* FMLParser::section_transition(sep::Machine * state) {
  Section_transitionContext *_localctx = _tracker.createInstance<Section_transitionContext>(_ctx, getState(), state);
  enterRule(_localctx, 134, FMLParser::RuleSection_transition);

  	sep::Modifier mdfr;

  	sep::Specifier spcfr;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1742);
    match(FMLParser::T__105);
    setState(1751);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 257698168832) != 0) || _la == FMLParser::T__106

    || _la == FMLParser::T__107 || _la == FMLParser::AT_ID) {
      setState(1746);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 257698168832) != 0)) {
        setState(1743);
        antlrcpp::downCast<Section_transitionContext *>(_localctx)->m = modifier_transition();
         mdfr = antlrcpp::downCast<Section_transitionContext *>(_localctx)->m->mdfr; 
      }
      setState(1748);
      def_transition( _localctx->state , mdfr , spcfr );
      setState(1753);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_transitionContext ------------------------------------------------------------------

FMLParser::Def_transitionContext::Def_transitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_transitionContext::Def_transitionContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * state, sep::Modifier mdfr, sep::Specifier spcfr)
  : ParserRuleContext(parent, invokingState) {
  this->state = state;
  this->mdfr = mdfr;
  this->spcfr = spcfr;
}

FMLParser::Moe_transitionContext* FMLParser::Def_transitionContext::moe_transition() {
  return getRuleContext<FMLParser::Moe_transitionContext>(0);
}

tree::TerminalNode* FMLParser::Def_transitionContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

FMLParser::Moc_transitionContext* FMLParser::Def_transitionContext::moc_transition() {
  return getRuleContext<FMLParser::Moc_transitionContext>(0);
}

tree::TerminalNode* FMLParser::Def_transitionContext::GT() {
  return getToken(FMLParser::GT, 0);
}

tree::TerminalNode* FMLParser::Def_transitionContext::AT_ID() {
  return getToken(FMLParser::AT_ID, 0);
}

tree::TerminalNode* FMLParser::Def_transitionContext::StringLiteral() {
  return getToken(FMLParser::StringLiteral, 0);
}

tree::TerminalNode* FMLParser::Def_transitionContext::ID() {
  return getToken(FMLParser::ID, 0);
}


size_t FMLParser::Def_transitionContext::getRuleIndex() const {
  return FMLParser::RuleDef_transition;
}


FMLParser::Def_transitionContext* FMLParser::def_transition(sep::Machine * state,sep::Modifier mdfr,sep::Specifier spcfr) {
  Def_transitionContext *_localctx = _tracker.createInstance<Def_transitionContext>(_ctx, getState(), state, mdfr, spcfr);
  enterRule(_localctx, 136, FMLParser::RuleDef_transition);

  	sep::Transition * trans = nullptr;
  	std::string t_id;

  	mProcedureCallCount = 0;

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1785);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__106:
      case FMLParser::AT_ID: {
        enterOuterAlt(_localctx, 1);
        setState(1757);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::T__106: {
            setState(1754);
            antlrcpp::downCast<Def_transitionContext *>(_localctx)->tok = match(FMLParser::T__106);
            break;
          }

          case FMLParser::AT_ID: {
            setState(1755);
            antlrcpp::downCast<Def_transitionContext *>(_localctx)->tok = match(FMLParser::AT_ID);
             t_id = antlrcpp::downCast<Def_transitionContext *>(_localctx)->tok->getText(); 
            break;
          }

        default:
          throw NoViableAltException(this);
        }

        		state->getUniqBehaviorPart()->saveOutgoingTransition(
        				trans = new sep::Transition((* state), newTransitionID(t_id)) );

        		trans->setModifier( _localctx->mdfr );

        		trans->setSpecifier( _localctx->spcfr );
        	  
        setState(1764);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::LT_) {
          setState(1760);
          match(FMLParser::LT_);
          setState(1761);
          moc_transition( trans );
          setState(1762);
          match(FMLParser::GT);
        }
        setState(1766);
        moe_transition( trans );
        break;
      }

      case FMLParser::T__107: {
        enterOuterAlt(_localctx, 2);
        setState(1767);
        match(FMLParser::T__107);

        		state->getUniqBehaviorPart()->saveOutgoingTransition(
        				trans = new sep::Transition(* state) );

        		trans->setModifier( _localctx->mdfr );

        		trans->setSpecifier( _localctx->spcfr );
        	  
        setState(1773);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::LT_) {
          setState(1769);
          match(FMLParser::LT_);
          setState(1770);
          moc_transition( trans );
          setState(1771);
          match(FMLParser::GT);
        }
        setState(1777);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::ID) {
          setState(1775);
          antlrcpp::downCast<Def_transitionContext *>(_localctx)->id = match(FMLParser::ID);
           t_id = antlrcpp::downCast<Def_transitionContext *>(_localctx)->id->getText(); 
        }
         trans->fullyUpdateAllNameID( newTransitionID(t_id) ); 
        setState(1782);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::StringLiteral) {
          setState(1780);
          antlrcpp::downCast<Def_transitionContext *>(_localctx)->stringliteralToken = match(FMLParser::StringLiteral);
           trans->setUnrestrictedName(antlrcpp::downCast<Def_transitionContext *>(_localctx)->stringliteralToken->getText()); 
        }
        setState(1784);
        moe_transition( trans );
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   _ctx->stop = _input->LT(-1);

    	if( (mProcedureCallCount > 0) && (trans != nullptr) )
    	{
    		sep::ParserUtil::inlineTransitionProcedureCall(trans, trans->getNameID());
    	}

    	SET_RULE_LOCATION(trans);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Kind_transitionContext ------------------------------------------------------------------

FMLParser::Kind_transitionContext::Kind_transitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Kind_transitionContext::ID() {
  return getToken(FMLParser::ID, 0);
}


size_t FMLParser::Kind_transitionContext::getRuleIndex() const {
  return FMLParser::RuleKind_transition;
}


FMLParser::Kind_transitionContext* FMLParser::kind_transition() {
  Kind_transitionContext *_localctx = _tracker.createInstance<Kind_transitionContext>(_ctx, getState());
  enterRule(_localctx, 138, FMLParser::RuleKind_transition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1797);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(1787);
        antlrcpp::downCast<Kind_transitionContext *>(_localctx)->id = match(FMLParser::ID);

        		if( (antlrcpp::downCast<Kind_transitionContext *>(_localctx)->kind =  sep::Transition::toMocKind(antlrcpp::downCast<Kind_transitionContext *>(_localctx)->id->getText())) ==
        			sep::Transition::MOC_UNDEFINED_KIND )
        		{
        			sep::ParserUtil::avm_syntax_error( "kind_transition", (antlrcpp::downCast<Kind_transitionContext *>(_localctx)->id != nullptr ? antlrcpp::downCast<Kind_transitionContext *>(_localctx)->id->getLine() : 0) )
        					<< "unexpected ID< " << antlrcpp::downCast<Kind_transitionContext *>(_localctx)->id->getText() << " >"
        					<< sep::ParserUtil::SYNTAX_ERROR_EOL;
        		}
        	
        break;
      }

      case FMLParser::T__108: {
        enterOuterAlt(_localctx, 2);
        setState(1789);
        match(FMLParser::T__108);
         antlrcpp::downCast<Kind_transitionContext *>(_localctx)->kind =  sep::Transition::MOC_ABORT_KIND;    
        break;
      }

      case FMLParser::T__13: {
        enterOuterAlt(_localctx, 3);
        setState(1791);
        match(FMLParser::T__13);
         antlrcpp::downCast<Kind_transitionContext *>(_localctx)->kind =  sep::Transition::MOC_FINAL_KIND;    
        break;
      }

      case FMLParser::T__109: {
        enterOuterAlt(_localctx, 4);
        setState(1793);
        match(FMLParser::T__109);
         antlrcpp::downCast<Kind_transitionContext *>(_localctx)->kind =  sep::Transition::MOC_ELSE_KIND;     
        break;
      }

      case FMLParser::T__91: {
        enterOuterAlt(_localctx, 5);
        setState(1795);
        match(FMLParser::T__91);
         antlrcpp::downCast<Kind_transitionContext *>(_localctx)->kind =  sep::Transition::MOC_FLOW_KIND;     
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Moc_transition_attributeContext ------------------------------------------------------------------

FMLParser::Moc_transition_attributeContext::Moc_transition_attributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Kind_transitionContext* FMLParser::Moc_transition_attributeContext::kind_transition() {
  return getRuleContext<FMLParser::Kind_transitionContext>(0);
}

tree::TerminalNode* FMLParser::Moc_transition_attributeContext::BAND() {
  return getToken(FMLParser::BAND, 0);
}


size_t FMLParser::Moc_transition_attributeContext::getRuleIndex() const {
  return FMLParser::RuleMoc_transition_attribute;
}


FMLParser::Moc_transition_attributeContext* FMLParser::moc_transition_attribute() {
  Moc_transition_attributeContext *_localctx = _tracker.createInstance<Moc_transition_attributeContext>(_ctx, getState());
  enterRule(_localctx, 140, FMLParser::RuleMoc_transition_attribute);

  	antlrcpp::downCast<Moc_transition_attributeContext *>(_localctx)->kind =  sep::Transition::MOC_UNDEFINED_KIND;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1799);
    antlrcpp::downCast<Moc_transition_attributeContext *>(_localctx)->kt = kind_transition();
     antlrcpp::downCast<Moc_transition_attributeContext *>(_localctx)->kind =  antlrcpp::downCast<Moc_transition_attributeContext *>(_localctx)->kt->kind; 
    setState(1804);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::BAND) {
      setState(1801);
      match(FMLParser::BAND);
      setState(1802);
      match(FMLParser::T__109);
       antlrcpp::downCast<Moc_transition_attributeContext *>(_localctx)->kind =  _localctx->kind | sep::Transition::MOC_ELSE_KIND; 
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Moc_transitionContext ------------------------------------------------------------------

FMLParser::Moc_transitionContext::Moc_transitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Moc_transitionContext::Moc_transitionContext(ParserRuleContext *parent, size_t invokingState, sep::Transition * trans)
  : ParserRuleContext(parent, invokingState) {
  this->trans = trans;
}

std::vector<FMLParser::Moc_transition_atomContext *> FMLParser::Moc_transitionContext::moc_transition_atom() {
  return getRuleContexts<FMLParser::Moc_transition_atomContext>();
}

FMLParser::Moc_transition_atomContext* FMLParser::Moc_transitionContext::moc_transition_atom(size_t i) {
  return getRuleContext<FMLParser::Moc_transition_atomContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Moc_transitionContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Moc_transitionContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Moc_transitionContext::getRuleIndex() const {
  return FMLParser::RuleMoc_transition;
}


FMLParser::Moc_transitionContext* FMLParser::moc_transition(sep::Transition * trans) {
  Moc_transitionContext *_localctx = _tracker.createInstance<Moc_transitionContext>(_ctx, getState(), trans);
  enterRule(_localctx, 142, FMLParser::RuleMoc_transition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1806);
    moc_transition_atom( trans );
    setState(1811);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::COMMA) {
      setState(1807);
      match(FMLParser::COMMA);
      setState(1808);
      moc_transition_atom( trans );
      setState(1813);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Moc_transition_atomContext ------------------------------------------------------------------

FMLParser::Moc_transition_atomContext::Moc_transition_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Moc_transition_atomContext::Moc_transition_atomContext(ParserRuleContext *parent, size_t invokingState, sep::Transition * trans)
  : ParserRuleContext(parent, invokingState) {
  this->trans = trans;
}

FMLParser::Moc_transition_attributeContext* FMLParser::Moc_transition_atomContext::moc_transition_attribute() {
  return getRuleContext<FMLParser::Moc_transition_attributeContext>(0);
}

FMLParser::Integer_constantContext* FMLParser::Moc_transition_atomContext::integer_constant() {
  return getRuleContext<FMLParser::Integer_constantContext>(0);
}

FMLParser::Float_constantContext* FMLParser::Moc_transition_atomContext::float_constant() {
  return getRuleContext<FMLParser::Float_constantContext>(0);
}


size_t FMLParser::Moc_transition_atomContext::getRuleIndex() const {
  return FMLParser::RuleMoc_transition_atom;
}


FMLParser::Moc_transition_atomContext* FMLParser::moc_transition_atom(sep::Transition * trans) {
  Moc_transition_atomContext *_localctx = _tracker.createInstance<Moc_transition_atomContext>(_ctx, getState(), trans);
  enterRule(_localctx, 144, FMLParser::RuleMoc_transition_atom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1832);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1815);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FMLParser::T__42) {
        setState(1814);
        match(FMLParser::T__42);
      }
      setState(1817);
      antlrcpp::downCast<Moc_transition_atomContext *>(_localctx)->kt = moc_transition_attribute();
       trans->setMocKind( antlrcpp::downCast<Moc_transition_atomContext *>(_localctx)->kt->kind ); 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1821);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FMLParser::T__110) {
        setState(1820);
        match(FMLParser::T__110);
      }
      setState(1823);
      antlrcpp::downCast<Moc_transition_atomContext *>(_localctx)->n = integer_constant();
       trans->setPriority( antlrcpp::downCast<Moc_transition_atomContext *>(_localctx)->n->val ); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1827);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FMLParser::T__111) {
        setState(1826);
        match(FMLParser::T__111);
      }
      setState(1829);
      antlrcpp::downCast<Moc_transition_atomContext *>(_localctx)->p = float_constant();
       trans->setProbability( antlrcpp::downCast<Moc_transition_atomContext *>(_localctx)->p->val ); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Moe_transitionContext ------------------------------------------------------------------

FMLParser::Moe_transitionContext::Moe_transitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Moe_transitionContext::Moe_transitionContext(ParserRuleContext *parent, size_t invokingState, sep::Transition * trans)
  : ParserRuleContext(parent, invokingState) {
  this->trans = trans;
}

FMLParser::Transition_statementContext* FMLParser::Moe_transitionContext::transition_statement() {
  return getRuleContext<FMLParser::Transition_statementContext>(0);
}

tree::TerminalNode* FMLParser::Moe_transitionContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

FMLParser::Target_state_idContext* FMLParser::Moe_transitionContext::target_state_id() {
  return getRuleContext<FMLParser::Target_state_idContext>(0);
}


size_t FMLParser::Moe_transitionContext::getRuleIndex() const {
  return FMLParser::RuleMoe_transition;
}


FMLParser::Moe_transitionContext* FMLParser::moe_transition(sep::Transition * trans) {
  Moe_transitionContext *_localctx = _tracker.createInstance<Moe_transitionContext>(_ctx, getState(), trans);
  enterRule(_localctx, 146, FMLParser::RuleMoe_transition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1854);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LCURLY: {
        enterOuterAlt(_localctx, 1);
        setState(1834);
        antlrcpp::downCast<Moe_transitionContext *>(_localctx)->bs = transition_statement();
         trans->setStatement(antlrcpp::downCast<Moe_transitionContext *>(_localctx)->bs->ac);   
        setState(1843);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
        case 1: {
          setState(1837);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::T__49) {
            setState(1836);
            match(FMLParser::T__49);
          }
          setState(1839);
          antlrcpp::downCast<Moe_transitionContext *>(_localctx)->tid = target_state_id();
           trans->setTarget(antlrcpp::downCast<Moe_transitionContext *>(_localctx)->tid->target); 
          setState(1841);
          match(FMLParser::SEMI);
          break;
        }

        default:
          break;
        }
        break;
      }

      case FMLParser::T__49: {
        enterOuterAlt(_localctx, 2);
        setState(1845);
        match(FMLParser::T__49);
        setState(1846);
        antlrcpp::downCast<Moe_transitionContext *>(_localctx)->tid = target_state_id();
         trans->setTarget(antlrcpp::downCast<Moe_transitionContext *>(_localctx)->tid->target); 
        setState(1852);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::LCURLY: {
            setState(1848);
            antlrcpp::downCast<Moe_transitionContext *>(_localctx)->bs = transition_statement();
             trans->setStatement(antlrcpp::downCast<Moe_transitionContext *>(_localctx)->bs->ac); 
            break;
          }

          case FMLParser::SEMI: {
            setState(1851);
            match(FMLParser::SEMI);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transition_statementContext ------------------------------------------------------------------

FMLParser::Transition_statementContext::Transition_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Transition_statementContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Transition_statementContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

FMLParser::Transition_triggerContext* FMLParser::Transition_statementContext::transition_trigger() {
  return getRuleContext<FMLParser::Transition_triggerContext>(0);
}

FMLParser::Transition_guardContext* FMLParser::Transition_statementContext::transition_guard() {
  return getRuleContext<FMLParser::Transition_guardContext>(0);
}

FMLParser::Transition_timed_guardContext* FMLParser::Transition_statementContext::transition_timed_guard() {
  return getRuleContext<FMLParser::Transition_timed_guardContext>(0);
}

FMLParser::Transition_effectContext* FMLParser::Transition_statementContext::transition_effect() {
  return getRuleContext<FMLParser::Transition_effectContext>(0);
}

FMLParser::Op_blockContext* FMLParser::Transition_statementContext::op_block() {
  return getRuleContext<FMLParser::Op_blockContext>(0);
}

std::vector<FMLParser::StatementContext *> FMLParser::Transition_statementContext::statement() {
  return getRuleContexts<FMLParser::StatementContext>();
}

FMLParser::StatementContext* FMLParser::Transition_statementContext::statement(size_t i) {
  return getRuleContext<FMLParser::StatementContext>(i);
}


size_t FMLParser::Transition_statementContext::getRuleIndex() const {
  return FMLParser::RuleTransition_statement;
}


FMLParser::Transition_statementContext* FMLParser::transition_statement() {
  Transition_statementContext *_localctx = _tracker.createInstance<Transition_statementContext>(_ctx, getState());
  enterRule(_localctx, 148, FMLParser::RuleTransition_statement);

  	const sep::Operator * op = OP(SEQUENCE);
  	bool implicitSequenceOp = true;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1856);
    match(FMLParser::LCURLY);
    setState(1860);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 318) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 318)) & 12582911) != 0)) {
      setState(1857);
      antlrcpp::downCast<Transition_statementContext *>(_localctx)->o = op_block();
       op = antlrcpp::downCast<Transition_statementContext *>(_localctx)->o->op; implicitSequenceOp = false; 
    }
     antlrcpp::downCast<Transition_statementContext *>(_localctx)->ac =  NEW_STMT(op); 
    setState(1868);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2483044352) != 0) || ((((_la - 84) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 84)) & 33554441) != 0) || ((((_la - 228) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 228)) & -4468811335467295) != 0) || ((((_la - 292) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 292)) & 1152921504606850055) != 0) || ((((_la - 357) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 357)) & 598134329704513) != 0) || _la == FMLParser::ID) {
      setState(1863);
      antlrcpp::downCast<Transition_statementContext *>(_localctx)->s = statement();
       _localctx->ac->append(antlrcpp::downCast<Transition_statementContext *>(_localctx)->s->ac); 
      setState(1870);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1872);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__112) {
      setState(1871);
      transition_trigger( _localctx->ac );
    }
    setState(1875);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__113) {
      setState(1874);
      transition_guard( _localctx->ac );
    }
    setState(1878);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__114) {
      setState(1877);
      transition_timed_guard( _localctx->ac );
    }
    setState(1881);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__115) {
      setState(1880);
      transition_effect( _localctx->ac );
    }
    setState(1883);
    match(FMLParser::RCURLY);
   _ctx->stop = _input->LT(-1);

    	if( implicitSequenceOp && _localctx->ac.valid() && _localctx->ac->hasOneOperand()
    		&& sep::OperatorManager::isSchedule(op) )
    	{
    		sep::BFCode singleCode = _localctx->ac->first().bfCode();
    		antlrcpp::downCast<Transition_statementContext *>(_localctx)->ac =  singleCode;
    	}

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transition_triggerContext ------------------------------------------------------------------

FMLParser::Transition_triggerContext::Transition_triggerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Transition_triggerContext::Transition_triggerContext(ParserRuleContext *parent, size_t invokingState, sep::BFCode ac)
  : ParserRuleContext(parent, invokingState) {
  this->ac = ac;
}

std::vector<FMLParser::Statement_com_inputContext *> FMLParser::Transition_triggerContext::statement_com_input() {
  return getRuleContexts<FMLParser::Statement_com_inputContext>();
}

FMLParser::Statement_com_inputContext* FMLParser::Transition_triggerContext::statement_com_input(size_t i) {
  return getRuleContext<FMLParser::Statement_com_inputContext>(i);
}


size_t FMLParser::Transition_triggerContext::getRuleIndex() const {
  return FMLParser::RuleTransition_trigger;
}


FMLParser::Transition_triggerContext* FMLParser::transition_trigger(sep::BFCode ac) {
  Transition_triggerContext *_localctx = _tracker.createInstance<Transition_triggerContext>(_ctx, getState(), ac);
  enterRule(_localctx, 150, FMLParser::RuleTransition_trigger);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1885);
    match(FMLParser::T__112);
    setState(1891);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::T__25 || ((((_la - 241) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 241)) & 63) != 0)) {
      setState(1886);
      antlrcpp::downCast<Transition_triggerContext *>(_localctx)->s = statement_com_input();
       _localctx->ac->append( antlrcpp::downCast<Transition_triggerContext *>(_localctx)->s->ac ); 
      setState(1893);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transition_guardContext ------------------------------------------------------------------

FMLParser::Transition_guardContext::Transition_guardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Transition_guardContext::Transition_guardContext(ParserRuleContext *parent, size_t invokingState, sep::BFCode ac)
  : ParserRuleContext(parent, invokingState) {
  this->ac = ac;
}

std::vector<tree::TerminalNode *> FMLParser::Transition_guardContext::LBRACKET() {
  return getTokens(FMLParser::LBRACKET);
}

tree::TerminalNode* FMLParser::Transition_guardContext::LBRACKET(size_t i) {
  return getToken(FMLParser::LBRACKET, i);
}

std::vector<tree::TerminalNode *> FMLParser::Transition_guardContext::RBRACKET() {
  return getTokens(FMLParser::RBRACKET);
}

tree::TerminalNode* FMLParser::Transition_guardContext::RBRACKET(size_t i) {
  return getToken(FMLParser::RBRACKET, i);
}

std::vector<FMLParser::Statement_guardContext *> FMLParser::Transition_guardContext::statement_guard() {
  return getRuleContexts<FMLParser::Statement_guardContext>();
}

FMLParser::Statement_guardContext* FMLParser::Transition_guardContext::statement_guard(size_t i) {
  return getRuleContext<FMLParser::Statement_guardContext>(i);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Transition_guardContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Transition_guardContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}


size_t FMLParser::Transition_guardContext::getRuleIndex() const {
  return FMLParser::RuleTransition_guard;
}


FMLParser::Transition_guardContext* FMLParser::transition_guard(sep::BFCode ac) {
  Transition_guardContext *_localctx = _tracker.createInstance<Transition_guardContext>(_ctx, getState(), ac);
  enterRule(_localctx, 152, FMLParser::RuleTransition_guard);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1894);
    match(FMLParser::T__113);
    setState(1908);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 219) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 219)) & 18144003442622465) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 432)) & 125) != 0)) {
      setState(1906);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
      case 1: {
        setState(1895);
        antlrcpp::downCast<Transition_guardContext *>(_localctx)->s = statement_guard();
         _localctx->ac->append( antlrcpp::downCast<Transition_guardContext *>(_localctx)->s->ac ); 
        break;
      }

      case 2: {
        setState(1898);
        antlrcpp::downCast<Transition_guardContext *>(_localctx)->e = expression();
         _localctx->ac->append( NEW_STMT1(OP(GUARD), antlrcpp::downCast<Transition_guardContext *>(_localctx)->e->bf) ); 
        break;
      }

      case 3: {
        setState(1901);
        match(FMLParser::LBRACKET);
        setState(1902);
        antlrcpp::downCast<Transition_guardContext *>(_localctx)->e = expression();
        setState(1903);
        match(FMLParser::RBRACKET);
         _localctx->ac->append( NEW_STMT1(OP(GUARD), antlrcpp::downCast<Transition_guardContext *>(_localctx)->e->bf) ); 
        break;
      }

      default:
        break;
      }
      setState(1910);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transition_timed_guardContext ------------------------------------------------------------------

FMLParser::Transition_timed_guardContext::Transition_timed_guardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Transition_timed_guardContext::Transition_timed_guardContext(ParserRuleContext *parent, size_t invokingState, sep::BFCode ac)
  : ParserRuleContext(parent, invokingState) {
  this->ac = ac;
}

std::vector<tree::TerminalNode *> FMLParser::Transition_timed_guardContext::LCURLY() {
  return getTokens(FMLParser::LCURLY);
}

tree::TerminalNode* FMLParser::Transition_timed_guardContext::LCURLY(size_t i) {
  return getToken(FMLParser::LCURLY, i);
}

std::vector<tree::TerminalNode *> FMLParser::Transition_timed_guardContext::RCURLY() {
  return getTokens(FMLParser::RCURLY);
}

tree::TerminalNode* FMLParser::Transition_timed_guardContext::RCURLY(size_t i) {
  return getToken(FMLParser::RCURLY, i);
}

std::vector<FMLParser::Statement_timed_guardContext *> FMLParser::Transition_timed_guardContext::statement_timed_guard() {
  return getRuleContexts<FMLParser::Statement_timed_guardContext>();
}

FMLParser::Statement_timed_guardContext* FMLParser::Transition_timed_guardContext::statement_timed_guard(size_t i) {
  return getRuleContext<FMLParser::Statement_timed_guardContext>(i);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Transition_timed_guardContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Transition_timed_guardContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}


size_t FMLParser::Transition_timed_guardContext::getRuleIndex() const {
  return FMLParser::RuleTransition_timed_guard;
}


FMLParser::Transition_timed_guardContext* FMLParser::transition_timed_guard(sep::BFCode ac) {
  Transition_timed_guardContext *_localctx = _tracker.createInstance<Transition_timed_guardContext>(_ctx, getState(), ac);
  enterRule(_localctx, 154, FMLParser::RuleTransition_timed_guard);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1911);
    match(FMLParser::T__114);
    setState(1925);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 219) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 219)) & 18144553198436353) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 432)) & 125) != 0)) {
      setState(1923);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
      case 1: {
        setState(1912);
        antlrcpp::downCast<Transition_timed_guardContext *>(_localctx)->s = statement_timed_guard();
         _localctx->ac->append( antlrcpp::downCast<Transition_timed_guardContext *>(_localctx)->s->ac ); 
        break;
      }

      case 2: {
        setState(1915);
        antlrcpp::downCast<Transition_timed_guardContext *>(_localctx)->e = expression();
         _localctx->ac->append( NEW_STMT1(OP(TIMED_GUARD), antlrcpp::downCast<Transition_timed_guardContext *>(_localctx)->e->bf) ); 
        break;
      }

      case 3: {
        setState(1918);
        match(FMLParser::LCURLY);
        setState(1919);
        antlrcpp::downCast<Transition_timed_guardContext *>(_localctx)->e = expression();
        setState(1920);
        match(FMLParser::RCURLY);
         _localctx->ac->append( NEW_STMT1(OP(TIMED_GUARD), antlrcpp::downCast<Transition_timed_guardContext *>(_localctx)->e->bf) ); 
        break;
      }

      default:
        break;
      }
      setState(1927);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Transition_effectContext ------------------------------------------------------------------

FMLParser::Transition_effectContext::Transition_effectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Transition_effectContext::Transition_effectContext(ParserRuleContext *parent, size_t invokingState, sep::BFCode ac)
  : ParserRuleContext(parent, invokingState) {
  this->ac = ac;
}

std::vector<FMLParser::StatementContext *> FMLParser::Transition_effectContext::statement() {
  return getRuleContexts<FMLParser::StatementContext>();
}

FMLParser::StatementContext* FMLParser::Transition_effectContext::statement(size_t i) {
  return getRuleContext<FMLParser::StatementContext>(i);
}


size_t FMLParser::Transition_effectContext::getRuleIndex() const {
  return FMLParser::RuleTransition_effect;
}


FMLParser::Transition_effectContext* FMLParser::transition_effect(sep::BFCode ac) {
  Transition_effectContext *_localctx = _tracker.createInstance<Transition_effectContext>(_ctx, getState(), ac);
  enterRule(_localctx, 156, FMLParser::RuleTransition_effect);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1928);
    match(FMLParser::T__115);
    setState(1934);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2483044352) != 0) || ((((_la - 84) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 84)) & 33554441) != 0) || ((((_la - 228) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 228)) & -4468811335467295) != 0) || ((((_la - 292) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 292)) & 1152921504606850055) != 0) || ((((_la - 357) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 357)) & 598134329704513) != 0) || _la == FMLParser::ID) {
      setState(1929);
      antlrcpp::downCast<Transition_effectContext *>(_localctx)->s = statement();
       _localctx->ac->append( antlrcpp::downCast<Transition_effectContext *>(_localctx)->s->ac ); 
      setState(1936);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Target_state_idContext ------------------------------------------------------------------

FMLParser::Target_state_idContext::Target_state_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Target_state_kw_idContext* FMLParser::Target_state_idContext::target_state_kw_id() {
  return getRuleContext<FMLParser::Target_state_kw_idContext>(0);
}

FMLParser::QualifiedNameIDContext* FMLParser::Target_state_idContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}

tree::TerminalNode* FMLParser::Target_state_idContext::DOLLAR() {
  return getToken(FMLParser::DOLLAR, 0);
}

tree::TerminalNode* FMLParser::Target_state_idContext::ID() {
  return getToken(FMLParser::ID, 0);
}


size_t FMLParser::Target_state_idContext::getRuleIndex() const {
  return FMLParser::RuleTarget_state_id;
}


FMLParser::Target_state_idContext* FMLParser::target_state_id() {
  Target_state_idContext *_localctx = _tracker.createInstance<Target_state_idContext>(_ctx, getState());
  enterRule(_localctx, 158, FMLParser::RuleTarget_state_id);

  	std::string tid;
  	std::size_t nb = 1;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1946);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__75:
      case FMLParser::T__76:
      case FMLParser::T__77:
      case FMLParser::T__78:
      case FMLParser::T__79:
      case FMLParser::T__80:
      case FMLParser::T__81:
      case FMLParser::T__82: {
        enterOuterAlt(_localctx, 1);
        setState(1937);
        antlrcpp::downCast<Target_state_idContext *>(_localctx)->kw = target_state_kw_id();
         tid = antlrcpp::downCast<Target_state_idContext *>(_localctx)->kw->s; 
        break;
      }

      case FMLParser::ID: {
        enterOuterAlt(_localctx, 2);
        setState(1940);
        antlrcpp::downCast<Target_state_idContext *>(_localctx)->u = qualifiedNameID();
         tid = antlrcpp::downCast<Target_state_idContext *>(_localctx)->u->s; nb = antlrcpp::downCast<Target_state_idContext *>(_localctx)->u->nb; 
        break;
      }

      case FMLParser::DOLLAR: {
        enterOuterAlt(_localctx, 3);
        setState(1943);
        match(FMLParser::DOLLAR);
        setState(1944);
        antlrcpp::downCast<Target_state_idContext *>(_localctx)->id = match(FMLParser::ID);
         tid ="$" + antlrcpp::downCast<Target_state_idContext *>(_localctx)->id->getText(); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   _ctx->stop = _input->LT(-1);

    	if( (antlrcpp::downCast<Target_state_idContext *>(_localctx)->target =  sep::ParserUtil::getvarMachine(tid, nb)).invalid() )
    	{
    		_localctx->target = NEW_QNID(tid, nb);
    	}

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Target_state_kw_idContext ------------------------------------------------------------------

FMLParser::Target_state_kw_idContext::Target_state_kw_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t FMLParser::Target_state_kw_idContext::getRuleIndex() const {
  return FMLParser::RuleTarget_state_kw_id;
}


FMLParser::Target_state_kw_idContext* FMLParser::target_state_kw_id() {
  Target_state_kw_idContext *_localctx = _tracker.createInstance<Target_state_kw_idContext>(_ctx, getState());
  enterRule(_localctx, 160, FMLParser::RuleTarget_state_kw_id);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1964);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__75: {
        enterOuterAlt(_localctx, 1);
        setState(1948);
        match(FMLParser::T__75);
         antlrcpp::downCast<Target_state_kw_idContext *>(_localctx)->s =  "#init"    ; 
        break;
      }

      case FMLParser::T__76: {
        enterOuterAlt(_localctx, 2);
        setState(1950);
        match(FMLParser::T__76);
         antlrcpp::downCast<Target_state_kw_idContext *>(_localctx)->s =  "#initial" ; 
        break;
      }

      case FMLParser::T__77: {
        enterOuterAlt(_localctx, 3);
        setState(1952);
        match(FMLParser::T__77);
         antlrcpp::downCast<Target_state_kw_idContext *>(_localctx)->s =  "#start"   ; 
        break;
      }

      case FMLParser::T__78: {
        enterOuterAlt(_localctx, 4);
        setState(1954);
        match(FMLParser::T__78);
         antlrcpp::downCast<Target_state_kw_idContext *>(_localctx)->s =  "#dhistory"; 
        break;
      }

      case FMLParser::T__79: {
        enterOuterAlt(_localctx, 5);
        setState(1956);
        match(FMLParser::T__79);
         antlrcpp::downCast<Target_state_kw_idContext *>(_localctx)->s =  "#shistory"; 
        break;
      }

      case FMLParser::T__80: {
        enterOuterAlt(_localctx, 6);
        setState(1958);
        match(FMLParser::T__80);
         antlrcpp::downCast<Target_state_kw_idContext *>(_localctx)->s =  "#final";
        		needDefaultStateFinal.push_back(_CPM_->getContainerMachine()); 
        break;
      }

      case FMLParser::T__81: {
        enterOuterAlt(_localctx, 7);
        setState(1960);
        match(FMLParser::T__81);
         antlrcpp::downCast<Target_state_kw_idContext *>(_localctx)->s =  "#terminal";
        		needDefaultStateTerminal.push_back(_CPM_->getContainerMachine()); 
        break;
      }

      case FMLParser::T__82: {
        enterOuterAlt(_localctx, 8);
        setState(1962);
        match(FMLParser::T__82);
         antlrcpp::downCast<Target_state_kw_idContext *>(_localctx)->s =  "#return";
        		needDefaultStateReturn.push_back(_CPM_->getContainerMachine()); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_state_activityContext ------------------------------------------------------------------

FMLParser::Def_state_activityContext::Def_state_activityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_state_activityContext::Def_state_activityContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * state)
  : ParserRuleContext(parent, invokingState) {
  this->state = state;
}

FMLParser::Block_statementContext* FMLParser::Def_state_activityContext::block_statement() {
  return getRuleContext<FMLParser::Block_statementContext>(0);
}


size_t FMLParser::Def_state_activityContext::getRuleIndex() const {
  return FMLParser::RuleDef_state_activity;
}


FMLParser::Def_state_activityContext* FMLParser::def_state_activity(sep::Machine * state) {
  Def_state_activityContext *_localctx = _tracker.createInstance<Def_state_activityContext>(_ctx, getState(), state);
  enterRule(_localctx, 162, FMLParser::RuleDef_state_activity);

  	sep::BehavioralPart * theBehavior = state->getUniqBehaviorPart();


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2014);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__61: {
        enterOuterAlt(_localctx, 1);
        setState(1966);
        match(FMLParser::T__61);
        setState(1967);
        antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs = block_statement();
         theBehavior->seqOnCreate(antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs->ac); 
        break;
      }

      case FMLParser::T__116: {
        enterOuterAlt(_localctx, 2);
        setState(1970);
        match(FMLParser::T__116);
        setState(1971);
        antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs = block_statement();
         theBehavior->seqOnInit(antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs->ac);   
        break;
      }

      case FMLParser::T__117: {
        enterOuterAlt(_localctx, 3);
        setState(1974);
        match(FMLParser::T__117);
        setState(1975);
        antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs = block_statement();
         theBehavior->seqOnIEnable(antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs->ac); 
        break;
      }

      case FMLParser::T__118: {
        enterOuterAlt(_localctx, 4);
        setState(1978);
        match(FMLParser::T__118);
        setState(1979);
        antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs = block_statement();
         theBehavior->seqOnEnable (antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs->ac); 
        break;
      }

      case FMLParser::T__119: {
        enterOuterAlt(_localctx, 5);
        setState(1982);
        match(FMLParser::T__119);
        setState(1983);
        antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs = block_statement();
         theBehavior->seqOnIDisable(antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs->ac); 
        break;
      }

      case FMLParser::T__120: {
        enterOuterAlt(_localctx, 6);
        setState(1986);
        match(FMLParser::T__120);
        setState(1987);
        antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs = block_statement();
         theBehavior->seqOnDisable (antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs->ac); 
        break;
      }

      case FMLParser::T__121: {
        enterOuterAlt(_localctx, 7);
        setState(1990);
        match(FMLParser::T__121);
        setState(1991);
        antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs = block_statement();
         theBehavior->seqOnIAbort(antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs->ac); 
        break;
      }

      case FMLParser::T__122: {
        enterOuterAlt(_localctx, 8);
        setState(1994);
        match(FMLParser::T__122);
        setState(1995);
        antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs = block_statement();
         theBehavior->seqOnAbort(antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs->ac); 
        break;
      }

      case FMLParser::T__123: {
        enterOuterAlt(_localctx, 9);
        setState(1998);
        match(FMLParser::T__123);
        setState(1999);
        antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs = block_statement();
         theBehavior->seqOnIRun(antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs->ac); 
        break;
      }

      case FMLParser::T__124: {
        enterOuterAlt(_localctx, 10);
        setState(2002);
        match(FMLParser::T__124);
        setState(2003);
        antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs = block_statement();
         theBehavior->seqOnRun(antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs->ac); 
        break;
      }

      case FMLParser::T__125: {
        enterOuterAlt(_localctx, 11);
        setState(2006);
        match(FMLParser::T__125);
        setState(2007);
        antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs = block_statement();
         theBehavior->seqOnRtc(antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs->ac); 
        break;
      }

      case FMLParser::T__126: {
        enterOuterAlt(_localctx, 12);
        setState(2010);
        match(FMLParser::T__126);
        setState(2011);
        antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs = block_statement();
         theBehavior->seqOnFinal(antlrcpp::downCast<Def_state_activityContext *>(_localctx)->bs->ac); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_header_import_parameter_propertyContext ------------------------------------------------------------------

FMLParser::Section_header_import_parameter_propertyContext::Section_header_import_parameter_propertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_header_import_parameter_propertyContext::Section_header_import_parameter_propertyContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

FMLParser::Section_headerContext* FMLParser::Section_header_import_parameter_propertyContext::section_header() {
  return getRuleContext<FMLParser::Section_headerContext>(0);
}

FMLParser::Section_importContext* FMLParser::Section_header_import_parameter_propertyContext::section_import() {
  return getRuleContext<FMLParser::Section_importContext>(0);
}

FMLParser::Section_parameterContext* FMLParser::Section_header_import_parameter_propertyContext::section_parameter() {
  return getRuleContext<FMLParser::Section_parameterContext>(0);
}

std::vector<FMLParser::Section_propertyContext *> FMLParser::Section_header_import_parameter_propertyContext::section_property() {
  return getRuleContexts<FMLParser::Section_propertyContext>();
}

FMLParser::Section_propertyContext* FMLParser::Section_header_import_parameter_propertyContext::section_property(size_t i) {
  return getRuleContext<FMLParser::Section_propertyContext>(i);
}

FMLParser::Section_property_free_declarationContext* FMLParser::Section_header_import_parameter_propertyContext::section_property_free_declaration() {
  return getRuleContext<FMLParser::Section_property_free_declarationContext>(0);
}


size_t FMLParser::Section_header_import_parameter_propertyContext::getRuleIndex() const {
  return FMLParser::RuleSection_header_import_parameter_property;
}


FMLParser::Section_header_import_parameter_propertyContext* FMLParser::section_header_import_parameter_property(sep::Machine * container) {
  Section_header_import_parameter_propertyContext *_localctx = _tracker.createInstance<Section_header_import_parameter_propertyContext>(_ctx, getState(), container);
  enterRule(_localctx, 164, FMLParser::RuleSection_header_import_parameter_property);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2057);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__43: {
        enterOuterAlt(_localctx, 1);
        setState(2016);
        section_header( _localctx->container );
        setState(2018);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::T__44) {
          setState(2017);
          section_import( _localctx->container );
        }
        setState(2021);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 128) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 128)) & 127) != 0)) {
          setState(2020);
          section_parameter( _localctx->container );
        }
          sep::TemplateFactory::genProperty( _localctx->container ); 
        setState(2027);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 135) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 135)) & 63) != 0)) {
          setState(2024);
          section_property( _localctx->container );
          setState(2029);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FMLParser::T__44: {
        enterOuterAlt(_localctx, 2);
        setState(2030);
        section_import( _localctx->container );
        setState(2032);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 128) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 128)) & 127) != 0)) {
          setState(2031);
          section_parameter( _localctx->container );
        }
          sep::TemplateFactory::genProperty( _localctx->container ); 
        setState(2038);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 135) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 135)) & 63) != 0)) {
          setState(2035);
          section_property( _localctx->container );
          setState(2040);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FMLParser::T__127:
      case FMLParser::T__128:
      case FMLParser::T__129:
      case FMLParser::T__130:
      case FMLParser::T__131:
      case FMLParser::T__132:
      case FMLParser::T__133: {
        enterOuterAlt(_localctx, 3);
        setState(2041);
        section_parameter( _localctx->container );
          sep::TemplateFactory::genProperty( _localctx->container ); 
        setState(2046);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (((((_la - 135) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 135)) & 63) != 0)) {
          setState(2043);
          section_property( _localctx->container );
          setState(2048);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FMLParser::T__134:
      case FMLParser::T__135:
      case FMLParser::T__136:
      case FMLParser::T__137:
      case FMLParser::T__138:
      case FMLParser::T__139: {
        enterOuterAlt(_localctx, 4);
          sep::TemplateFactory::genProperty( _localctx->container ); 
        setState(2051); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2050);
          section_property( _localctx->container );
          setState(2053); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (((((_la - 135) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 135)) & 63) != 0));
        break;
      }

      case FMLParser::EOF:
      case FMLParser::T__13:
      case FMLParser::T__14:
      case FMLParser::T__15:
      case FMLParser::T__16:
      case FMLParser::T__17:
      case FMLParser::T__18:
      case FMLParser::T__19:
      case FMLParser::T__20:
      case FMLParser::T__21:
      case FMLParser::T__22:
      case FMLParser::T__25:
      case FMLParser::T__27:
      case FMLParser::T__29:
      case FMLParser::T__30:
      case FMLParser::T__31:
      case FMLParser::T__32:
      case FMLParser::T__84:
      case FMLParser::T__141:
      case FMLParser::T__142:
      case FMLParser::T__143:
      case FMLParser::T__144:
      case FMLParser::T__155:
      case FMLParser::T__156:
      case FMLParser::T__157:
      case FMLParser::T__158:
      case FMLParser::T__192:
      case FMLParser::T__194:
      case FMLParser::T__195:
      case FMLParser::T__196:
      case FMLParser::T__197:
      case FMLParser::T__205: {
        enterOuterAlt(_localctx, 5);
          sep::TemplateFactory::genProperty( _localctx->container ); 
        setState(2056);
        section_property_free_declaration( _localctx->container );
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_parameterContext ------------------------------------------------------------------

FMLParser::Section_parameterContext::Section_parameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_parameterContext::Section_parameterContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

std::vector<FMLParser::Property_declarationContext *> FMLParser::Section_parameterContext::property_declaration() {
  return getRuleContexts<FMLParser::Property_declarationContext>();
}

FMLParser::Property_declarationContext* FMLParser::Section_parameterContext::property_declaration(size_t i) {
  return getRuleContext<FMLParser::Property_declarationContext>(i);
}


size_t FMLParser::Section_parameterContext::getRuleIndex() const {
  return FMLParser::RuleSection_parameter;
}


FMLParser::Section_parameterContext* FMLParser::section_parameter(sep::Machine * container) {
  Section_parameterContext *_localctx = _tracker.createInstance<Section_parameterContext>(_ctx, getState(), container);
  enterRule(_localctx, 166, FMLParser::RuleSection_parameter);

  	sep::PropertyPart * declPropertyPart = &( _localctx->container->getPropertyPart() );

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2094);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__127:
      case FMLParser::T__128: {
        enterOuterAlt(_localctx, 1);
        setState(2059);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__127

        || _la == FMLParser::T__128)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2063);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 16458432512) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & 2161727821137838081) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 156)) & 1134283683004431) != 0)) {
          setState(2060);
          property_declaration( declPropertyPart ,
          				sep::Modifier::PROPERTY_INPUT_PARAMETER_MODIFIER  );
          setState(2065);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FMLParser::T__129: {
        enterOuterAlt(_localctx, 2);
        setState(2066);
        match(FMLParser::T__129);
        setState(2070);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 16458432512) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & 2161727821137838081) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 156)) & 1134283683004431) != 0)) {
          setState(2067);
          property_declaration( declPropertyPart ,
          				sep::Modifier::PROPERTY_INPUT_PARAMETER_MODIFIER  );
          setState(2072);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FMLParser::T__130: {
        enterOuterAlt(_localctx, 3);
        setState(2073);
        match(FMLParser::T__130);
        setState(2077);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 16458432512) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & 2161727821137838081) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 156)) & 1134283683004431) != 0)) {
          setState(2074);
          property_declaration( declPropertyPart ,
          				sep::Modifier::PROPERTY_INOUT_PARAMETER_MODIFIER  );
          setState(2079);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FMLParser::T__131: {
        enterOuterAlt(_localctx, 4);
        setState(2080);
        match(FMLParser::T__131);
        setState(2084);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 16458432512) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & 2161727821137838081) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 156)) & 1134283683004431) != 0)) {
          setState(2081);
          property_declaration( declPropertyPart ,
          				sep::Modifier::PROPERTY_OUTPUT_PARAMETER_MODIFIER );
          setState(2086);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FMLParser::T__132:
      case FMLParser::T__133: {
        enterOuterAlt(_localctx, 5);
        setState(2087);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__132

        || _la == FMLParser::T__133)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2091);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 16458432512) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & 2161727821137838081) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 156)) & 1134283683004431) != 0)) {
          setState(2088);
          property_declaration( declPropertyPart ,
          				sep::Modifier::PROPERTY_RETURN_PARAMETER_MODIFIER );
          setState(2093);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   _ctx->stop = _input->LT(-1);

    	SET_RULE_LOCATION(declPropertyPart);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_propertyContext ------------------------------------------------------------------

FMLParser::Section_propertyContext::Section_propertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_propertyContext::Section_propertyContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

std::vector<FMLParser::Property_declarationContext *> FMLParser::Section_propertyContext::property_declaration() {
  return getRuleContexts<FMLParser::Property_declarationContext>();
}

FMLParser::Property_declarationContext* FMLParser::Section_propertyContext::property_declaration(size_t i) {
  return getRuleContext<FMLParser::Property_declarationContext>(i);
}


size_t FMLParser::Section_propertyContext::getRuleIndex() const {
  return FMLParser::RuleSection_property;
}


FMLParser::Section_propertyContext* FMLParser::section_property(sep::Machine * container) {
  Section_propertyContext *_localctx = _tracker.createInstance<Section_propertyContext>(_ctx, getState(), container);
  enterRule(_localctx, 168, FMLParser::RuleSection_property);

  	sep::PropertyPart * declPropertyPart = &( _localctx->container->getPropertyPart() );

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2124);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__134:
      case FMLParser::T__135: {
        enterOuterAlt(_localctx, 1);
        setState(2096);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__134

        || _la == FMLParser::T__135)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2100);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 16458432512) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & 2161727821137838081) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 156)) & 1134283683004431) != 0)) {
          setState(2097);
          property_declaration( declPropertyPart ,
          				sep::Modifier::PROPERTY_UNDEFINED_MODIFIER );
          setState(2102);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FMLParser::T__136: {
        enterOuterAlt(_localctx, 2);
        setState(2103);
        match(FMLParser::T__136);
        setState(2107);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 16458432512) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & 2161727821137838081) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 156)) & 1134283683004431) != 0)) {
          setState(2104);
          property_declaration( declPropertyPart ,
          				sep::Modifier::PROPERTY_PUBLIC_MODIFIER );
          setState(2109);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FMLParser::T__137: {
        enterOuterAlt(_localctx, 3);
        setState(2110);
        match(FMLParser::T__137);
        setState(2114);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 16458432512) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & 2161727821137838081) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 156)) & 1134283683004431) != 0)) {
          setState(2111);
          property_declaration( declPropertyPart ,
          				sep::Modifier::PROPERTY_PROTECTED_MODIFIER );
          setState(2116);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FMLParser::T__138:
      case FMLParser::T__139: {
        enterOuterAlt(_localctx, 4);
        setState(2117);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__138

        || _la == FMLParser::T__139)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2121);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 16458432512) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & 2161727821137838081) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 156)) & 1134283683004431) != 0)) {
          setState(2118);
          property_declaration( declPropertyPart ,
          				sep::Modifier::PROPERTY_PRIVATE_MODIFIER );
          setState(2123);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   _ctx->stop = _input->LT(-1);

    	SET_RULE_LOCATION(declPropertyPart);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_property_free_declarationContext ------------------------------------------------------------------

FMLParser::Section_property_free_declarationContext::Section_property_free_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_property_free_declarationContext::Section_property_free_declarationContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

std::vector<FMLParser::Property_declarationContext *> FMLParser::Section_property_free_declarationContext::property_declaration() {
  return getRuleContexts<FMLParser::Property_declarationContext>();
}

FMLParser::Property_declarationContext* FMLParser::Section_property_free_declarationContext::property_declaration(size_t i) {
  return getRuleContext<FMLParser::Property_declarationContext>(i);
}


size_t FMLParser::Section_property_free_declarationContext::getRuleIndex() const {
  return FMLParser::RuleSection_property_free_declaration;
}


FMLParser::Section_property_free_declarationContext* FMLParser::section_property_free_declaration(sep::Machine * container) {
  Section_property_free_declarationContext *_localctx = _tracker.createInstance<Section_property_free_declarationContext>(_ctx, getState(), container);
  enterRule(_localctx, 170, FMLParser::RuleSection_property_free_declaration);

  	sep::PropertyPart * declPropertyPart = &( _localctx->container->getPropertyPart() );

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2129);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 16458432512) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 85)) & 2161727821137838081) != 0) || ((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & 1134283683004431) != 0)) {
      setState(2126);
      property_declaration( declPropertyPart ,
      				sep::Modifier::PROPERTY_UNDEFINED_MODIFIER );
      setState(2131);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   _ctx->stop = _input->LT(-1);

    	SET_RULE_LOCATION(declPropertyPart);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Property_declarationContext ------------------------------------------------------------------

FMLParser::Property_declarationContext::Property_declarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Property_declarationContext::Property_declarationContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Decl_property_elementContext* FMLParser::Property_declarationContext::decl_property_element() {
  return getRuleContext<FMLParser::Decl_property_elementContext>(0);
}

FMLParser::Modifier_declarationContext* FMLParser::Property_declarationContext::modifier_declaration() {
  return getRuleContext<FMLParser::Modifier_declarationContext>(0);
}


size_t FMLParser::Property_declarationContext::getRuleIndex() const {
  return FMLParser::RuleProperty_declaration;
}


FMLParser::Property_declarationContext* FMLParser::property_declaration(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Property_declarationContext *_localctx = _tracker.createInstance<Property_declarationContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 172, FMLParser::RuleProperty_declaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2135);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3573530624) != 0)) {
      setState(2132);
      antlrcpp::downCast<Property_declarationContext *>(_localctx)->m = modifier_declaration();
       _localctx->mdfr.override_ifdef( antlrcpp::downCast<Property_declarationContext *>(_localctx)->m->mdfr ); 
    }
    setState(2137);
    decl_property_element( _localctx->declPropertyPart , _localctx->mdfr );
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_property_elementContext ------------------------------------------------------------------

FMLParser::Decl_property_elementContext::Decl_property_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_property_elementContext::Decl_property_elementContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Decl_variableContext* FMLParser::Decl_property_elementContext::decl_variable() {
  return getRuleContext<FMLParser::Decl_variableContext>(0);
}

FMLParser::Decl_portContext* FMLParser::Decl_property_elementContext::decl_port() {
  return getRuleContext<FMLParser::Decl_portContext>(0);
}

FMLParser::Decl_signalContext* FMLParser::Decl_property_elementContext::decl_signal() {
  return getRuleContext<FMLParser::Decl_signalContext>(0);
}

FMLParser::Decl_bufferContext* FMLParser::Decl_property_elementContext::decl_buffer() {
  return getRuleContext<FMLParser::Decl_bufferContext>(0);
}

FMLParser::Decl_channelContext* FMLParser::Decl_property_elementContext::decl_channel() {
  return getRuleContext<FMLParser::Decl_channelContext>(0);
}

FMLParser::Def_typeContext* FMLParser::Decl_property_elementContext::def_type() {
  return getRuleContext<FMLParser::Def_typeContext>(0);
}

FMLParser::Def_enumContext* FMLParser::Decl_property_elementContext::def_enum() {
  return getRuleContext<FMLParser::Def_enumContext>(0);
}

FMLParser::Def_unionContext* FMLParser::Decl_property_elementContext::def_union() {
  return getRuleContext<FMLParser::Def_unionContext>(0);
}

FMLParser::Def_choiceContext* FMLParser::Decl_property_elementContext::def_choice() {
  return getRuleContext<FMLParser::Def_choiceContext>(0);
}

FMLParser::Def_structContext* FMLParser::Decl_property_elementContext::def_struct() {
  return getRuleContext<FMLParser::Def_structContext>(0);
}

FMLParser::Decl_functionContext* FMLParser::Decl_property_elementContext::decl_function() {
  return getRuleContext<FMLParser::Decl_functionContext>(0);
}


size_t FMLParser::Decl_property_elementContext::getRuleIndex() const {
  return FMLParser::RuleDecl_property_element;
}


FMLParser::Decl_property_elementContext* FMLParser::decl_property_element(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Decl_property_elementContext *_localctx = _tracker.createInstance<Decl_property_elementContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 174, FMLParser::RuleDecl_property_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2150);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__31:
      case FMLParser::T__32:
      case FMLParser::T__157:
      case FMLParser::T__158:
      case FMLParser::T__205: {
        enterOuterAlt(_localctx, 1);
        setState(2139);
        decl_variable( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::T__141: {
        enterOuterAlt(_localctx, 2);
        setState(2140);
        decl_port( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::T__142:
      case FMLParser::T__143: {
        enterOuterAlt(_localctx, 3);
        setState(2141);
        decl_signal( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::T__144: {
        enterOuterAlt(_localctx, 4);
        setState(2142);
        decl_buffer( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::T__155: {
        enterOuterAlt(_localctx, 5);
        setState(2143);
        decl_channel( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::T__197: {
        enterOuterAlt(_localctx, 6);
        setState(2144);
        def_type( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::T__192: {
        enterOuterAlt(_localctx, 7);
        setState(2145);
        def_enum( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::T__196: {
        enterOuterAlt(_localctx, 8);
        setState(2146);
        def_union( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::T__84: {
        enterOuterAlt(_localctx, 9);
        setState(2147);
        def_choice( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::T__194:
      case FMLParser::T__195: {
        enterOuterAlt(_localctx, 10);
        setState(2148);
        def_struct( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::T__156: {
        enterOuterAlt(_localctx, 11);
        setState(2149);
        decl_function( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Labelled_argumentContext ------------------------------------------------------------------

FMLParser::Labelled_argumentContext::Labelled_argumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::ExpressionContext* FMLParser::Labelled_argumentContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}

tree::TerminalNode* FMLParser::Labelled_argumentContext::COLON() {
  return getToken(FMLParser::COLON, 0);
}

tree::TerminalNode* FMLParser::Labelled_argumentContext::ID() {
  return getToken(FMLParser::ID, 0);
}


size_t FMLParser::Labelled_argumentContext::getRuleIndex() const {
  return FMLParser::RuleLabelled_argument;
}


FMLParser::Labelled_argumentContext* FMLParser::labelled_argument() {
  Labelled_argumentContext *_localctx = _tracker.createInstance<Labelled_argumentContext>(_ctx, getState());
  enterRule(_localctx, 176, FMLParser::RuleLabelled_argument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2167);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2159);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::ID: {
          setState(2152);
          antlrcpp::downCast<Labelled_argumentContext *>(_localctx)->id = match(FMLParser::ID);
          setState(2153);
          match(FMLParser::COLON);
           antlrcpp::downCast<Labelled_argumentContext *>(_localctx)->label =  antlrcpp::downCast<Labelled_argumentContext *>(_localctx)->id->getText(); 
          break;
        }

        case FMLParser::T__71: {
          setState(2155);
          match(FMLParser::T__71);
           antlrcpp::downCast<Labelled_argumentContext *>(_localctx)->label =  "name"; 
          break;
        }

        case FMLParser::T__140: {
          setState(2157);
          match(FMLParser::T__140);
           antlrcpp::downCast<Labelled_argumentContext *>(_localctx)->label =  "size"; 
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2161);
      antlrcpp::downCast<Labelled_argumentContext *>(_localctx)->e = expression();
       antlrcpp::downCast<Labelled_argumentContext *>(_localctx)->arg =  antlrcpp::downCast<Labelled_argumentContext *>(_localctx)->e->bf; 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2164);
      antlrcpp::downCast<Labelled_argumentContext *>(_localctx)->e = expression();
       antlrcpp::downCast<Labelled_argumentContext *>(_localctx)->arg =  antlrcpp::downCast<Labelled_argumentContext *>(_localctx)->e->bf; 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_instance_machine_paramsContext ------------------------------------------------------------------

FMLParser::Decl_instance_machine_paramsContext::Decl_instance_machine_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_instance_machine_paramsContext::Decl_instance_machine_paramsContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
}

tree::TerminalNode* FMLParser::Decl_instance_machine_paramsContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Decl_instance_machine_paramsContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

std::vector<FMLParser::Labelled_argumentContext *> FMLParser::Decl_instance_machine_paramsContext::labelled_argument() {
  return getRuleContexts<FMLParser::Labelled_argumentContext>();
}

FMLParser::Labelled_argumentContext* FMLParser::Decl_instance_machine_paramsContext::labelled_argument(size_t i) {
  return getRuleContext<FMLParser::Labelled_argumentContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Decl_instance_machine_paramsContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Decl_instance_machine_paramsContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Decl_instance_machine_paramsContext::getRuleIndex() const {
  return FMLParser::RuleDecl_instance_machine_params;
}


FMLParser::Decl_instance_machine_paramsContext* FMLParser::decl_instance_machine_params(sep::Machine * machine) {
  Decl_instance_machine_paramsContext *_localctx = _tracker.createInstance<Decl_instance_machine_paramsContext>(_ctx, getState(), machine);
  enterRule(_localctx, 178, FMLParser::RuleDecl_instance_machine_params);

  	sep::BFVector labelledParams(
  		( _localctx->machine->getType().is< sep::Machine >() ) ? _localctx->machine->getType().
  			to_ptr< sep::Machine >()->getVariableParametersCount() : 0 );

  	sep::BFList positionalParams;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2169);
    match(FMLParser::LPAREN);
    setState(2181);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__71 || _la == FMLParser::T__140 || ((((_la - 219) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 432)) & 125) != 0)) {
      setState(2170);
      antlrcpp::downCast<Decl_instance_machine_paramsContext *>(_localctx)->lp = labelled_argument();

      			sep::ParserUtil::appendInstanceMachineParameter(_localctx->machine, antlrcpp::downCast<Decl_instance_machine_paramsContext *>(_localctx)->lp->label,
      					labelledParams, positionalParams, antlrcpp::downCast<Decl_instance_machine_paramsContext *>(_localctx)->lp->arg);
      		
      setState(2178);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FMLParser::COMMA) {
        setState(2172);
        match(FMLParser::COMMA);
        setState(2173);
        antlrcpp::downCast<Decl_instance_machine_paramsContext *>(_localctx)->lp = labelled_argument();

        			sep::ParserUtil::appendInstanceMachineParameter(_localctx->machine, antlrcpp::downCast<Decl_instance_machine_paramsContext *>(_localctx)->lp->label,
        					labelledParams, positionalParams, antlrcpp::downCast<Decl_instance_machine_paramsContext *>(_localctx)->lp->arg);
        		
        setState(2180);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2183);
    match(FMLParser::RPAREN);
   _ctx->stop = _input->LT(-1);

    	if( labelledParams.nonempty() )
    	{
    		sep::ParserUtil::computeInstanceMachineParameter(
    				_localctx->machine, labelledParams, positionalParams);
    	}

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_instance_machine_returnsContext ------------------------------------------------------------------

FMLParser::Decl_instance_machine_returnsContext::Decl_instance_machine_returnsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_instance_machine_returnsContext::Decl_instance_machine_returnsContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
}

tree::TerminalNode* FMLParser::Decl_instance_machine_returnsContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Decl_instance_machine_returnsContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

std::vector<FMLParser::Labelled_argumentContext *> FMLParser::Decl_instance_machine_returnsContext::labelled_argument() {
  return getRuleContexts<FMLParser::Labelled_argumentContext>();
}

FMLParser::Labelled_argumentContext* FMLParser::Decl_instance_machine_returnsContext::labelled_argument(size_t i) {
  return getRuleContext<FMLParser::Labelled_argumentContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Decl_instance_machine_returnsContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Decl_instance_machine_returnsContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Decl_instance_machine_returnsContext::getRuleIndex() const {
  return FMLParser::RuleDecl_instance_machine_returns;
}


FMLParser::Decl_instance_machine_returnsContext* FMLParser::decl_instance_machine_returns(sep::Machine * machine) {
  Decl_instance_machine_returnsContext *_localctx = _tracker.createInstance<Decl_instance_machine_returnsContext>(_ctx, getState(), machine);
  enterRule(_localctx, 180, FMLParser::RuleDecl_instance_machine_returns);

  	sep::BFVector labelledReturns(
  		( _localctx->machine->getType().is< sep::Machine >() ) ? _localctx->machine->getType().
  			to_ptr< sep::Machine >()->getVariableParametersCount() : 0 );

  	sep::BFList positionalReturns;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2185);
    _la = _input->LA(1);
    if (!(_la == FMLParser::T__49

    || _la == FMLParser::T__50)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2203);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 247, _ctx)) {
    case 1: {
      setState(2186);
      match(FMLParser::LPAREN);
      setState(2187);
      antlrcpp::downCast<Decl_instance_machine_returnsContext *>(_localctx)->lp = labelled_argument();

      			sep::ParserUtil::appendInstanceMachineReturn(_localctx->machine, antlrcpp::downCast<Decl_instance_machine_returnsContext *>(_localctx)->lp->label,
      					labelledReturns, positionalReturns, antlrcpp::downCast<Decl_instance_machine_returnsContext *>(_localctx)->lp->arg);
      		
      setState(2195);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FMLParser::COMMA) {
        setState(2189);
        match(FMLParser::COMMA);
        setState(2190);
        antlrcpp::downCast<Decl_instance_machine_returnsContext *>(_localctx)->lp = labelled_argument();

        			sep::ParserUtil::appendInstanceMachineReturn(_localctx->machine, antlrcpp::downCast<Decl_instance_machine_returnsContext *>(_localctx)->lp->label,
        					labelledReturns, positionalReturns, antlrcpp::downCast<Decl_instance_machine_returnsContext *>(_localctx)->lp->arg);
        	      
        setState(2197);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2198);
      match(FMLParser::RPAREN);
      break;
    }

    case 2: {
      setState(2200);
      antlrcpp::downCast<Decl_instance_machine_returnsContext *>(_localctx)->lp = labelled_argument();

      			sep::ParserUtil::appendInstanceMachineReturn(_localctx->machine, antlrcpp::downCast<Decl_instance_machine_returnsContext *>(_localctx)->lp->label,
      					labelledReturns, positionalReturns, antlrcpp::downCast<Decl_instance_machine_returnsContext *>(_localctx)->lp->arg);
      		
      break;
    }

    default:
      break;
    }
   _ctx->stop = _input->LT(-1);

    	if( labelledReturns.nonempty() )
    	{
    		sep::ParserUtil::computeInstanceMachineReturn(
    				_localctx->machine, labelledReturns, positionalReturns);
    	}

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Activity_machine_param_returnContext ------------------------------------------------------------------

FMLParser::Activity_machine_param_returnContext::Activity_machine_param_returnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Activity_machine_param_returnContext::Activity_machine_param_returnContext(ParserRuleContext *parent, size_t invokingState, sep::BF argMachine, sep::BFCode ac)
  : ParserRuleContext(parent, invokingState) {
  this->argMachine = argMachine;
  this->ac = ac;
}

std::vector<tree::TerminalNode *> FMLParser::Activity_machine_param_returnContext::LPAREN() {
  return getTokens(FMLParser::LPAREN);
}

tree::TerminalNode* FMLParser::Activity_machine_param_returnContext::LPAREN(size_t i) {
  return getToken(FMLParser::LPAREN, i);
}

std::vector<tree::TerminalNode *> FMLParser::Activity_machine_param_returnContext::RPAREN() {
  return getTokens(FMLParser::RPAREN);
}

tree::TerminalNode* FMLParser::Activity_machine_param_returnContext::RPAREN(size_t i) {
  return getToken(FMLParser::RPAREN, i);
}

std::vector<FMLParser::Labelled_argumentContext *> FMLParser::Activity_machine_param_returnContext::labelled_argument() {
  return getRuleContexts<FMLParser::Labelled_argumentContext>();
}

FMLParser::Labelled_argumentContext* FMLParser::Activity_machine_param_returnContext::labelled_argument(size_t i) {
  return getRuleContext<FMLParser::Labelled_argumentContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Activity_machine_param_returnContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Activity_machine_param_returnContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Activity_machine_param_returnContext::getRuleIndex() const {
  return FMLParser::RuleActivity_machine_param_return;
}


FMLParser::Activity_machine_param_returnContext* FMLParser::activity_machine_param_return(sep::BF argMachine,sep::BFCode ac) {
  Activity_machine_param_returnContext *_localctx = _tracker.createInstance<Activity_machine_param_returnContext>(_ctx, getState(), argMachine, ac);
  enterRule(_localctx, 182, FMLParser::RuleActivity_machine_param_return);

  	sep::Machine * machine = sep::ParserUtil::getActivityMachine(argMachine);

  	sep::Routine * routine = nullptr;

  	std::size_t paramCount = 0;
  	std::size_t returnCount = 0;
  	if( machine == nullptr )
  	{
  		routine = nullptr;
  	}
  	else if( machine->getSpecifier().isDesignInstanceStatic()
  			&& machine->getType().is< sep::Machine >() )
  	{
  		routine = &( machine->getType().to_ptr< sep::Machine >()->
  			getBehavior()->getActivity( ac->getAvmOpCode() ) );
  	}
  	else if( ac->isnotOpCode( sep::AVM_OPCODE_INVOKE_NEW ) )
  //	if( machine->isDesignPrototypeStatic() )
  	{
  		routine = &( machine->getBehavior()->getActivity( ac->getAvmOpCode() ) );
  	}

  	if( routine != nullptr )
  	{
  		paramCount  = routine->getPropertyPart().getVariableParametersCount();
  		returnCount = routine->getPropertyPart().getVariableReturnsCount();
  	}


  	sep::BFVector labelledParams( paramCount );
  	sep::BFList positionalParams;

  	sep::BFVector labelledReturns( returnCount );
  	sep::BFList positionalReturns;

  	if( machine != nullptr )
  	{
  		PUSH_CTX_CPM( machine );
  	}

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2205);
    match(FMLParser::LPAREN);
    setState(2217);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__71 || _la == FMLParser::T__140 || ((((_la - 219) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 432)) & 125) != 0)) {
      setState(2206);
      antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp = labelled_argument();

      			sep::ParserUtil::appendRoutineParameters(routine, antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp->label,
      					labelledParams, positionalParams, antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp->arg);
      		
      setState(2214);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FMLParser::COMMA) {
        setState(2208);
        match(FMLParser::COMMA);
        setState(2209);
        antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp = labelled_argument();

        			sep::ParserUtil::appendRoutineParameters(routine, antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp->label,
        					labelledParams, positionalParams, antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp->arg);
        		
        setState(2216);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2219);
    match(FMLParser::RPAREN);
    setState(2240);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__49

    || _la == FMLParser::T__50) {
      setState(2220);
      _la = _input->LA(1);
      if (!(_la == FMLParser::T__49

      || _la == FMLParser::T__50)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2238);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx)) {
      case 1: {
        setState(2221);
        match(FMLParser::LPAREN);
        setState(2222);
        antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp = labelled_argument();

        			sep::ParserUtil::appendRoutineReturns(routine, antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp->label,
        					labelledReturns, positionalReturns, antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp->arg);
        		
        setState(2230);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FMLParser::COMMA) {
          setState(2224);
          match(FMLParser::COMMA);
          setState(2225);
          antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp = labelled_argument();

          			sep::ParserUtil::appendRoutineReturns(routine, antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp->label,
          					labelledReturns, positionalReturns, antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp->arg);
          	      
          setState(2232);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2233);
        match(FMLParser::RPAREN);
        break;
      }

      case 2: {
        setState(2235);
        antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp = labelled_argument();

        			sep::ParserUtil::appendRoutineReturns(routine, antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp->label,
        					labelledReturns, positionalReturns, antlrcpp::downCast<Activity_machine_param_returnContext *>(_localctx)->lp->arg);
        		
        break;
      }

      default:
        break;
      }
    }
   _ctx->stop = _input->LT(-1);

    	sep::ParserUtil::computeActivityRoutineParamReturn(argMachine, routine, _localctx->ac,
    		labelledParams , positionalParams, labelledReturns, positionalReturns);

    	if( machine != nullptr )
    	{
    		POP_CTX;
    	}

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_portContext ------------------------------------------------------------------

FMLParser::Decl_portContext::Decl_portContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_portContext::Decl_portContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Decl_port_implContext* FMLParser::Decl_portContext::decl_port_impl() {
  return getRuleContext<FMLParser::Decl_port_implContext>(0);
}


size_t FMLParser::Decl_portContext::getRuleIndex() const {
  return FMLParser::RuleDecl_port;
}


FMLParser::Decl_portContext* FMLParser::decl_port(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Decl_portContext *_localctx = _tracker.createInstance<Decl_portContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 184, FMLParser::RuleDecl_port);

  	sep::IComPoint::ENUM_IO_NATURE nature = sep::IComPoint::IO_UNDEFINED_NATURE;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2242);
    match(FMLParser::T__141);
     nature = sep::IComPoint::IO_PORT_NATURE; 
    setState(2244);
    decl_port_impl( _localctx->declPropertyPart , _localctx->mdfr, nature );
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_port_implContext ------------------------------------------------------------------

FMLParser::Decl_port_implContext::Decl_port_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_port_implContext::Decl_port_implContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr, sep::IComPoint::ENUM_IO_NATURE nature)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
  this->nature = nature;
}

std::vector<tree::TerminalNode *> FMLParser::Decl_port_implContext::SEMI() {
  return getTokens(FMLParser::SEMI);
}

tree::TerminalNode* FMLParser::Decl_port_implContext::SEMI(size_t i) {
  return getToken(FMLParser::SEMI, i);
}

std::vector<tree::TerminalNode *> FMLParser::Decl_port_implContext::ID() {
  return getTokens(FMLParser::ID);
}

tree::TerminalNode* FMLParser::Decl_port_implContext::ID(size_t i) {
  return getToken(FMLParser::ID, i);
}

std::vector<FMLParser::Typed_parameter_inputContext *> FMLParser::Decl_port_implContext::typed_parameter_input() {
  return getRuleContexts<FMLParser::Typed_parameter_inputContext>();
}

FMLParser::Typed_parameter_inputContext* FMLParser::Decl_port_implContext::typed_parameter_input(size_t i) {
  return getRuleContext<FMLParser::Typed_parameter_inputContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Decl_port_implContext::StringLiteral() {
  return getTokens(FMLParser::StringLiteral);
}

tree::TerminalNode* FMLParser::Decl_port_implContext::StringLiteral(size_t i) {
  return getToken(FMLParser::StringLiteral, i);
}

std::vector<FMLParser::Modifier_set_direction_strict_textContext *> FMLParser::Decl_port_implContext::modifier_set_direction_strict_text() {
  return getRuleContexts<FMLParser::Modifier_set_direction_strict_textContext>();
}

FMLParser::Modifier_set_direction_strict_textContext* FMLParser::Decl_port_implContext::modifier_set_direction_strict_text(size_t i) {
  return getRuleContext<FMLParser::Modifier_set_direction_strict_textContext>(i);
}

tree::TerminalNode* FMLParser::Decl_port_implContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Decl_port_implContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}


size_t FMLParser::Decl_port_implContext::getRuleIndex() const {
  return FMLParser::RuleDecl_port_impl;
}


FMLParser::Decl_port_implContext* FMLParser::decl_port_impl(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr,sep::IComPoint::ENUM_IO_NATURE nature) {
  Decl_port_implContext *_localctx = _tracker.createInstance<Decl_port_implContext>(_ctx, getState(), declPropertyPart, mdfr, nature);
  enterRule(_localctx, 186, FMLParser::RuleDecl_port_impl);

  	sep::Port * port;
  	sep::BF TPort;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2313);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(2246);
        antlrcpp::downCast<Decl_port_implContext *>(_localctx)->id = match(FMLParser::ID);

        		_localctx->declPropertyPart->appendPort( sep::BF(
        				port = new sep::Port(*( _localctx->declPropertyPart ),
        						antlrcpp::downCast<Decl_port_implContext *>(_localctx)->id->getText(), nature,
        						_localctx->mdfr.setDirectionInoutElse() ) ) );
        	  
        setState(2250);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::StringLiteral) {
          setState(2248);
          antlrcpp::downCast<Decl_port_implContext *>(_localctx)->sl = match(FMLParser::StringLiteral);
           port->setUnrestrictedName(antlrcpp::downCast<Decl_port_implContext *>(_localctx)->sl->getText()); 
        }
        setState(2253);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::LPAREN) {
          setState(2252);
          typed_parameter_input( &( port->getParameterPart() ) );
        }
        setState(2255);
        match(FMLParser::SEMI);
        break;
      }

      case FMLParser::T__25:
      case FMLParser::T__27:
      case FMLParser::T__29:
      case FMLParser::T__30: {
        enterOuterAlt(_localctx, 2);
        setState(2256);
        modifier_set_direction_strict_text( &( _localctx->mdfr ) );
        setState(2283);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::ID: {
            setState(2257);
            antlrcpp::downCast<Decl_port_implContext *>(_localctx)->id = match(FMLParser::ID);

            			_localctx->declPropertyPart->appendPort( sep::BF(
            					port = new sep::Port(*( _localctx->declPropertyPart ),
            							antlrcpp::downCast<Decl_port_implContext *>(_localctx)->id->getText(), nature, _localctx->mdfr ) ) );
            		
            setState(2261);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == FMLParser::StringLiteral) {
              setState(2259);
              antlrcpp::downCast<Decl_port_implContext *>(_localctx)->sl = match(FMLParser::StringLiteral);
               port->setUnrestrictedName(antlrcpp::downCast<Decl_port_implContext *>(_localctx)->sl->getText()); 
            }
            setState(2264);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == FMLParser::LPAREN) {
              setState(2263);
              typed_parameter_input( &( port->getParameterPart() ) );
            }
            setState(2266);
            match(FMLParser::SEMI);
            break;
          }

          case FMLParser::LCURLY: {
            setState(2267);
            match(FMLParser::LCURLY);
            setState(2278); 
            _errHandler->sync(this);
            _la = _input->LA(1);
            do {
              setState(2268);
              antlrcpp::downCast<Decl_port_implContext *>(_localctx)->id = match(FMLParser::ID);

              			_localctx->declPropertyPart->appendPort( sep::BF(
              					port = new sep::Port(*( _localctx->declPropertyPart ),
              							antlrcpp::downCast<Decl_port_implContext *>(_localctx)->id->getText(), nature, _localctx->mdfr) ) );
              	      
              setState(2272);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == FMLParser::StringLiteral) {
                setState(2270);
                antlrcpp::downCast<Decl_port_implContext *>(_localctx)->sl = match(FMLParser::StringLiteral);
                 port->setUnrestrictedName(antlrcpp::downCast<Decl_port_implContext *>(_localctx)->sl->getText()); 
              }
              setState(2275);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == FMLParser::LPAREN) {
                setState(2274);
                typed_parameter_input( &( port->getParameterPart() ) );
              }
              setState(2277);
              match(FMLParser::SEMI);
              setState(2280); 
              _errHandler->sync(this);
              _la = _input->LA(1);
            } while (_la == FMLParser::ID);
            setState(2282);
            match(FMLParser::RCURLY);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case FMLParser::LCURLY: {
        enterOuterAlt(_localctx, 3);
        setState(2285);
        match(FMLParser::LCURLY);
        setState(2308); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2308);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case FMLParser::ID: {
              setState(2286);
              antlrcpp::downCast<Decl_port_implContext *>(_localctx)->id = match(FMLParser::ID);

              			_localctx->declPropertyPart->appendPort( sep::BF(
              					port = new sep::Port(*( _localctx->declPropertyPart ),
              							antlrcpp::downCast<Decl_port_implContext *>(_localctx)->id->getText(), nature,
              							_localctx->mdfr.setDirectionInoutElse() ) ) );
              			port->setModifier( _localctx->mdfr );
              		
              setState(2290);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == FMLParser::StringLiteral) {
                setState(2288);
                antlrcpp::downCast<Decl_port_implContext *>(_localctx)->sl = match(FMLParser::StringLiteral);
                 port->setUnrestrictedName(antlrcpp::downCast<Decl_port_implContext *>(_localctx)->sl->getText()); 
              }
              setState(2293);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == FMLParser::LPAREN) {
                setState(2292);
                typed_parameter_input( &( port->getParameterPart() ) );
              }
              setState(2295);
              match(FMLParser::SEMI);
              break;
            }

            case FMLParser::T__25:
            case FMLParser::T__27:
            case FMLParser::T__29:
            case FMLParser::T__30: {
              setState(2296);
              modifier_set_direction_strict_text( &( _localctx->mdfr ) );
              setState(2297);
              antlrcpp::downCast<Decl_port_implContext *>(_localctx)->id = match(FMLParser::ID);

              			_localctx->declPropertyPart->appendPort( sep::BF(
              					port = new sep::Port(*( _localctx->declPropertyPart ),
              							antlrcpp::downCast<Decl_port_implContext *>(_localctx)->id->getText(), nature, _localctx->mdfr) ) );
              		
              setState(2301);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == FMLParser::StringLiteral) {
                setState(2299);
                antlrcpp::downCast<Decl_port_implContext *>(_localctx)->sl = match(FMLParser::StringLiteral);
                 port->setUnrestrictedName(antlrcpp::downCast<Decl_port_implContext *>(_localctx)->sl->getText()); 
              }
              setState(2304);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == FMLParser::LPAREN) {
                setState(2303);
                typed_parameter_input( &( port->getParameterPart() ) );
              }
              setState(2306);
              match(FMLParser::SEMI);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(2310); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3556769792) != 0) || _la == FMLParser::ID);
        setState(2312);
        match(FMLParser::RCURLY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_signalContext ------------------------------------------------------------------

FMLParser::Decl_signalContext::Decl_signalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_signalContext::Decl_signalContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Decl_signal_implContext* FMLParser::Decl_signalContext::decl_signal_impl() {
  return getRuleContext<FMLParser::Decl_signal_implContext>(0);
}


size_t FMLParser::Decl_signalContext::getRuleIndex() const {
  return FMLParser::RuleDecl_signal;
}


FMLParser::Decl_signalContext* FMLParser::decl_signal(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Decl_signalContext *_localctx = _tracker.createInstance<Decl_signalContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 188, FMLParser::RuleDecl_signal);

  	sep::IComPoint::ENUM_IO_NATURE nature = sep::IComPoint::IO_UNDEFINED_NATURE;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2319);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__142: {
        setState(2315);
        match(FMLParser::T__142);
         nature = sep::IComPoint::IO_SIGNAL_NATURE;  
        break;
      }

      case FMLParser::T__143: {
        setState(2317);
        match(FMLParser::T__143);
         nature = sep::IComPoint::IO_MESSAGE_NATURE; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2321);
    decl_signal_impl( _localctx->declPropertyPart , _localctx->mdfr, nature );
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_signal_implContext ------------------------------------------------------------------

FMLParser::Decl_signal_implContext::Decl_signal_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_signal_implContext::Decl_signal_implContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr, sep::IComPoint::ENUM_IO_NATURE nature)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
  this->nature = nature;
}

std::vector<tree::TerminalNode *> FMLParser::Decl_signal_implContext::SEMI() {
  return getTokens(FMLParser::SEMI);
}

tree::TerminalNode* FMLParser::Decl_signal_implContext::SEMI(size_t i) {
  return getToken(FMLParser::SEMI, i);
}

std::vector<tree::TerminalNode *> FMLParser::Decl_signal_implContext::ID() {
  return getTokens(FMLParser::ID);
}

tree::TerminalNode* FMLParser::Decl_signal_implContext::ID(size_t i) {
  return getToken(FMLParser::ID, i);
}

std::vector<FMLParser::Typed_parameter_inputContext *> FMLParser::Decl_signal_implContext::typed_parameter_input() {
  return getRuleContexts<FMLParser::Typed_parameter_inputContext>();
}

FMLParser::Typed_parameter_inputContext* FMLParser::Decl_signal_implContext::typed_parameter_input(size_t i) {
  return getRuleContext<FMLParser::Typed_parameter_inputContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Decl_signal_implContext::StringLiteral() {
  return getTokens(FMLParser::StringLiteral);
}

tree::TerminalNode* FMLParser::Decl_signal_implContext::StringLiteral(size_t i) {
  return getToken(FMLParser::StringLiteral, i);
}

std::vector<FMLParser::Modifier_set_direction_strict_textContext *> FMLParser::Decl_signal_implContext::modifier_set_direction_strict_text() {
  return getRuleContexts<FMLParser::Modifier_set_direction_strict_textContext>();
}

FMLParser::Modifier_set_direction_strict_textContext* FMLParser::Decl_signal_implContext::modifier_set_direction_strict_text(size_t i) {
  return getRuleContext<FMLParser::Modifier_set_direction_strict_textContext>(i);
}

tree::TerminalNode* FMLParser::Decl_signal_implContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Decl_signal_implContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}


size_t FMLParser::Decl_signal_implContext::getRuleIndex() const {
  return FMLParser::RuleDecl_signal_impl;
}


FMLParser::Decl_signal_implContext* FMLParser::decl_signal_impl(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr,sep::IComPoint::ENUM_IO_NATURE nature) {
  Decl_signal_implContext *_localctx = _tracker.createInstance<Decl_signal_implContext>(_ctx, getState(), declPropertyPart, mdfr, nature);
  enterRule(_localctx, 190, FMLParser::RuleDecl_signal_impl);

  	sep::Port * signal;
  	sep::BF TPort;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2390);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(2323);
        antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->id = match(FMLParser::ID);

        		_localctx->declPropertyPart->appendSignal( sep::BF(
        				signal = new sep::Signal(*( _localctx->declPropertyPart ),
        						antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->id->getText(), nature,
        						_localctx->mdfr.setDirectionInoutElse() ) ) );
        	  
        setState(2327);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::StringLiteral) {
          setState(2325);
          antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->sl = match(FMLParser::StringLiteral);
           signal->setUnrestrictedName(antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->sl->getText()); 
        }
        setState(2330);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::LPAREN) {
          setState(2329);
          typed_parameter_input( &( signal->getParameterPart() ) );
        }
        setState(2332);
        match(FMLParser::SEMI);
        break;
      }

      case FMLParser::T__25:
      case FMLParser::T__27:
      case FMLParser::T__29:
      case FMLParser::T__30: {
        enterOuterAlt(_localctx, 2);
        setState(2333);
        modifier_set_direction_strict_text( &( _localctx->mdfr ) );
        setState(2360);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::ID: {
            setState(2334);
            antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->id = match(FMLParser::ID);

            			_localctx->declPropertyPart->appendSignal( sep::BF(
            					signal = new sep::Signal(*( _localctx->declPropertyPart ),
            							antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->id->getText(), nature, _localctx->mdfr ) ) );
            		
            setState(2338);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == FMLParser::StringLiteral) {
              setState(2336);
              antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->sl = match(FMLParser::StringLiteral);
               signal->setUnrestrictedName(antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->sl->getText()); 
            }
            setState(2341);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == FMLParser::LPAREN) {
              setState(2340);
              typed_parameter_input( &( signal->getParameterPart() ) );
            }
            setState(2343);
            match(FMLParser::SEMI);
            break;
          }

          case FMLParser::LCURLY: {
            setState(2344);
            match(FMLParser::LCURLY);
            setState(2355); 
            _errHandler->sync(this);
            _la = _input->LA(1);
            do {
              setState(2345);
              antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->id = match(FMLParser::ID);

              			_localctx->declPropertyPart->appendSignal( sep::BF(
              					signal = new sep::Signal(*( _localctx->declPropertyPart ),
              							antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->id->getText(), nature, _localctx->mdfr) ) );
              	      
              setState(2349);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == FMLParser::StringLiteral) {
                setState(2347);
                antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->sl = match(FMLParser::StringLiteral);
                 signal->setUnrestrictedName(antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->sl->getText()); 
              }
              setState(2352);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == FMLParser::LPAREN) {
                setState(2351);
                typed_parameter_input( &( signal->getParameterPart() ) );
              }
              setState(2354);
              match(FMLParser::SEMI);
              setState(2357); 
              _errHandler->sync(this);
              _la = _input->LA(1);
            } while (_la == FMLParser::ID);
            setState(2359);
            match(FMLParser::RCURLY);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case FMLParser::LCURLY: {
        enterOuterAlt(_localctx, 3);
        setState(2362);
        match(FMLParser::LCURLY);
        setState(2385); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2385);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case FMLParser::ID: {
              setState(2363);
              antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->id = match(FMLParser::ID);

              			_localctx->declPropertyPart->appendSignal( sep::BF(
              					signal = new sep::Signal(*( _localctx->declPropertyPart ),
              							antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->id->getText(), nature,
              							_localctx->mdfr.setDirectionInoutElse() ) ) );
              			signal->setModifier( _localctx->mdfr );
              		
              setState(2367);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == FMLParser::StringLiteral) {
                setState(2365);
                antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->sl = match(FMLParser::StringLiteral);
                 signal->setUnrestrictedName(antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->sl->getText()); 
              }
              setState(2370);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == FMLParser::LPAREN) {
                setState(2369);
                typed_parameter_input( &( signal->getParameterPart() ) );
              }
              setState(2372);
              match(FMLParser::SEMI);
              break;
            }

            case FMLParser::T__25:
            case FMLParser::T__27:
            case FMLParser::T__29:
            case FMLParser::T__30: {
              setState(2373);
              modifier_set_direction_strict_text( &( _localctx->mdfr ) );
              setState(2374);
              antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->id = match(FMLParser::ID);

              			_localctx->declPropertyPart->appendSignal( sep::BF(
              					signal = new sep::Signal(*( _localctx->declPropertyPart ),
              							antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->id->getText(), nature, _localctx->mdfr) ) );
              		
              setState(2378);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == FMLParser::StringLiteral) {
                setState(2376);
                antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->sl = match(FMLParser::StringLiteral);
                 signal->setUnrestrictedName(antlrcpp::downCast<Decl_signal_implContext *>(_localctx)->sl->getText()); 
              }
              setState(2381);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == FMLParser::LPAREN) {
                setState(2380);
                typed_parameter_input( &( signal->getParameterPart() ) );
              }
              setState(2383);
              match(FMLParser::SEMI);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(2387); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3556769792) != 0) || _la == FMLParser::ID);
        setState(2389);
        match(FMLParser::RCURLY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Typed_parameter_inputContext ------------------------------------------------------------------

FMLParser::Typed_parameter_inputContext::Typed_parameter_inputContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Typed_parameter_inputContext::Typed_parameter_inputContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declParameterPart)
  : ParserRuleContext(parent, invokingState) {
  this->declParameterPart = declParameterPart;
}

tree::TerminalNode* FMLParser::Typed_parameter_inputContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

std::vector<FMLParser::Typed_parameter_atomContext *> FMLParser::Typed_parameter_inputContext::typed_parameter_atom() {
  return getRuleContexts<FMLParser::Typed_parameter_atomContext>();
}

FMLParser::Typed_parameter_atomContext* FMLParser::Typed_parameter_inputContext::typed_parameter_atom(size_t i) {
  return getRuleContext<FMLParser::Typed_parameter_atomContext>(i);
}

tree::TerminalNode* FMLParser::Typed_parameter_inputContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> FMLParser::Typed_parameter_inputContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Typed_parameter_inputContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Typed_parameter_inputContext::getRuleIndex() const {
  return FMLParser::RuleTyped_parameter_input;
}


FMLParser::Typed_parameter_inputContext* FMLParser::typed_parameter_input(sep::PropertyPart * declParameterPart) {
  Typed_parameter_inputContext *_localctx = _tracker.createInstance<Typed_parameter_inputContext>(_ctx, getState(), declParameterPart);
  enterRule(_localctx, 192, FMLParser::RuleTyped_parameter_input);

  	sep::avm_offset_t offset = 0;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2392);
    match(FMLParser::LPAREN);
    setState(2393);
    typed_parameter_atom( declParameterPart, 
    				sep::Modifier::PROPERTY_PARAMETER_MODIFIER, offset);
    setState(2398);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::COMMA) {
      setState(2394);
      match(FMLParser::COMMA);
      setState(2395);
      typed_parameter_atom( declParameterPart ,
      				sep::Modifier::PROPERTY_PARAMETER_MODIFIER, ++offset );
      setState(2400);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2401);
    match(FMLParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Typed_parameter_returnContext ------------------------------------------------------------------

FMLParser::Typed_parameter_returnContext::Typed_parameter_returnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Typed_parameter_returnContext::Typed_parameter_returnContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declParameterPart)
  : ParserRuleContext(parent, invokingState) {
  this->declParameterPart = declParameterPart;
}

tree::TerminalNode* FMLParser::Typed_parameter_returnContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

std::vector<FMLParser::Typed_parameter_atomContext *> FMLParser::Typed_parameter_returnContext::typed_parameter_atom() {
  return getRuleContexts<FMLParser::Typed_parameter_atomContext>();
}

FMLParser::Typed_parameter_atomContext* FMLParser::Typed_parameter_returnContext::typed_parameter_atom(size_t i) {
  return getRuleContext<FMLParser::Typed_parameter_atomContext>(i);
}

tree::TerminalNode* FMLParser::Typed_parameter_returnContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> FMLParser::Typed_parameter_returnContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Typed_parameter_returnContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Typed_parameter_returnContext::getRuleIndex() const {
  return FMLParser::RuleTyped_parameter_return;
}


FMLParser::Typed_parameter_returnContext* FMLParser::typed_parameter_return(sep::PropertyPart * declParameterPart) {
  Typed_parameter_returnContext *_localctx = _tracker.createInstance<Typed_parameter_returnContext>(_ctx, getState(), declParameterPart);
  enterRule(_localctx, 194, FMLParser::RuleTyped_parameter_return);

  	sep::avm_offset_t offset = 0;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2415);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LPAREN: {
        setState(2403);
        match(FMLParser::LPAREN);
        setState(2404);
        typed_parameter_atom( declParameterPart, 
        				sep::Modifier::PROPERTY_RETURN_PARAMETER_MODIFIER, offset);
        setState(2409);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FMLParser::COMMA) {
          setState(2405);
          match(FMLParser::COMMA);
          setState(2406);
          typed_parameter_atom( declParameterPart,
          				sep::Modifier::PROPERTY_RETURN_PARAMETER_MODIFIER, ++offset );
          setState(2411);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2412);
        match(FMLParser::RPAREN);
        break;
      }

      case FMLParser::T__48:
      case FMLParser::T__58:
      case FMLParser::T__141:
      case FMLParser::T__142:
      case FMLParser::T__143:
      case FMLParser::T__144:
      case FMLParser::T__146:
      case FMLParser::T__147:
      case FMLParser::T__148:
      case FMLParser::T__149:
      case FMLParser::T__150:
      case FMLParser::T__151:
      case FMLParser::T__152:
      case FMLParser::T__153:
      case FMLParser::T__154:
      case FMLParser::T__159:
      case FMLParser::T__160:
      case FMLParser::T__161:
      case FMLParser::T__162:
      case FMLParser::T__163:
      case FMLParser::T__164:
      case FMLParser::T__165:
      case FMLParser::T__166:
      case FMLParser::T__167:
      case FMLParser::T__168:
      case FMLParser::T__169:
      case FMLParser::T__170:
      case FMLParser::T__171:
      case FMLParser::T__172:
      case FMLParser::T__173:
      case FMLParser::T__174:
      case FMLParser::T__175:
      case FMLParser::T__176:
      case FMLParser::T__177:
      case FMLParser::T__178:
      case FMLParser::T__179:
      case FMLParser::T__180:
      case FMLParser::T__181:
      case FMLParser::T__182:
      case FMLParser::T__183:
      case FMLParser::T__184:
      case FMLParser::T__185:
      case FMLParser::T__186:
      case FMLParser::T__187:
      case FMLParser::T__188:
      case FMLParser::T__199:
      case FMLParser::T__200:
      case FMLParser::T__201:
      case FMLParser::T__202:
      case FMLParser::T__203:
      case FMLParser::T__204:
      case FMLParser::T__205:
      case FMLParser::ID: {
        setState(2414);
        typed_parameter_atom( declParameterPart, 
        				sep::Modifier::PROPERTY_RETURN_PARAMETER_MODIFIER, offset);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Typed_parameter_atomContext ------------------------------------------------------------------

FMLParser::Typed_parameter_atomContext::Typed_parameter_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Typed_parameter_atomContext::Typed_parameter_atomContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declParameterPart, sep::Modifier mdfr, sep::avm_offset_t offset)
  : ParserRuleContext(parent, invokingState) {
  this->declParameterPart = declParameterPart;
  this->mdfr = mdfr;
  this->offset = offset;
}

FMLParser::Type_varContext* FMLParser::Typed_parameter_atomContext::type_var() {
  return getRuleContext<FMLParser::Type_varContext>(0);
}

tree::TerminalNode* FMLParser::Typed_parameter_atomContext::ID() {
  return getToken(FMLParser::ID, 0);
}

FMLParser::Initial_valueContext* FMLParser::Typed_parameter_atomContext::initial_value() {
  return getRuleContext<FMLParser::Initial_valueContext>(0);
}

tree::TerminalNode* FMLParser::Typed_parameter_atomContext::COLON() {
  return getToken(FMLParser::COLON, 0);
}

FMLParser::ExpressionContext* FMLParser::Typed_parameter_atomContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}

FMLParser::QualifiedNameIDContext* FMLParser::Typed_parameter_atomContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}


size_t FMLParser::Typed_parameter_atomContext::getRuleIndex() const {
  return FMLParser::RuleTyped_parameter_atom;
}


FMLParser::Typed_parameter_atomContext* FMLParser::typed_parameter_atom(sep::PropertyPart * declParameterPart,sep::Modifier mdfr,sep::avm_offset_t offset) {
  Typed_parameter_atomContext *_localctx = _tracker.createInstance<Typed_parameter_atomContext>(_ctx, getState(), declParameterPart, mdfr, offset);
  enterRule(_localctx, 196, FMLParser::RuleTyped_parameter_atom);

  	sep::Variable * variable;
  	sep::BF paramT = sep::TypeManager::UNIVERSAL;
  	std::string paramID;
  	sep::BF value;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2444);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__58:
      case FMLParser::T__141:
      case FMLParser::T__142:
      case FMLParser::T__143:
      case FMLParser::T__144:
      case FMLParser::T__146:
      case FMLParser::T__147:
      case FMLParser::T__148:
      case FMLParser::T__149:
      case FMLParser::T__150:
      case FMLParser::T__151:
      case FMLParser::T__152:
      case FMLParser::T__153:
      case FMLParser::T__154:
      case FMLParser::T__159:
      case FMLParser::T__160:
      case FMLParser::T__161:
      case FMLParser::T__162:
      case FMLParser::T__163:
      case FMLParser::T__164:
      case FMLParser::T__165:
      case FMLParser::T__166:
      case FMLParser::T__167:
      case FMLParser::T__168:
      case FMLParser::T__169:
      case FMLParser::T__170:
      case FMLParser::T__171:
      case FMLParser::T__172:
      case FMLParser::T__173:
      case FMLParser::T__174:
      case FMLParser::T__175:
      case FMLParser::T__176:
      case FMLParser::T__177:
      case FMLParser::T__178:
      case FMLParser::T__179:
      case FMLParser::T__180:
      case FMLParser::T__181:
      case FMLParser::T__182:
      case FMLParser::T__183:
      case FMLParser::T__184:
      case FMLParser::T__185:
      case FMLParser::T__186:
      case FMLParser::T__187:
      case FMLParser::T__188:
      case FMLParser::T__199:
      case FMLParser::T__200:
      case FMLParser::T__201:
      case FMLParser::T__202:
      case FMLParser::T__203:
      case FMLParser::T__204:
      case FMLParser::T__205:
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(2417);
        antlrcpp::downCast<Typed_parameter_atomContext *>(_localctx)->tv = type_var();
         paramT = antlrcpp::downCast<Typed_parameter_atomContext *>(_localctx)->tv->type; 
        setState(2426);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::ID) {
          setState(2419);
          antlrcpp::downCast<Typed_parameter_atomContext *>(_localctx)->id = match(FMLParser::ID);
           paramID = antlrcpp::downCast<Typed_parameter_atomContext *>(_localctx)->id->getText(); 
          setState(2424);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::ASSIGN

          || _la == FMLParser::LPAREN) {
            setState(2421);
            antlrcpp::downCast<Typed_parameter_atomContext *>(_localctx)->iv = initial_value();
             value = antlrcpp::downCast<Typed_parameter_atomContext *>(_localctx)->iv->bf; 
          }
        }

        		variable = new sep::Variable(_localctx->declParameterPart->getContainer(),
        				mdfr, paramT, paramID, value);
        				
        		_localctx->declParameterPart->saveOwnedVariable( variable );
        	
        break;
      }

      case FMLParser::T__48: {
        enterOuterAlt(_localctx, 2);
        setState(2430);
        match(FMLParser::T__48);
        setState(2440);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx)) {
        case 1: {
          setState(2431);
          antlrcpp::downCast<Typed_parameter_atomContext *>(_localctx)->tv = type_var();
          setState(2432);
          match(FMLParser::COLON);
           paramT = antlrcpp::downCast<Typed_parameter_atomContext *>(_localctx)->tv->type; 
          setState(2434);
          antlrcpp::downCast<Typed_parameter_atomContext *>(_localctx)->e = expression();
           value = antlrcpp::downCast<Typed_parameter_atomContext *>(_localctx)->e->bf; 
          break;
        }

        case 2: {
          setState(2437);
          antlrcpp::downCast<Typed_parameter_atomContext *>(_localctx)->vid = qualifiedNameID();

          		value = sep::ParserUtil::getVariable(antlrcpp::downCast<Typed_parameter_atomContext *>(_localctx)->vid->s, antlrcpp::downCast<Typed_parameter_atomContext *>(_localctx)->vid->nb);
          		if( value.valid() )
          		{ paramT = value.to_ptr< sep::Variable >()->getType(); }
          	  
          break;
        }

        default:
          break;
        }

        		paramID = sep::OSS() << '#' << offset;
        		
        		variable = new sep::Variable(_localctx->declParameterPart->getContainer(),
        				sep::Modifier::PROPERTY_PARAMETER_BIND_MODIFIER,
        				paramT, paramID, value);
        				
        		_localctx->declParameterPart->saveOwnedVariable( variable );
        				
        		variable->setOwnedOffset( offset );
        	
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_bufferContext ------------------------------------------------------------------

FMLParser::Decl_bufferContext::Decl_bufferContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_bufferContext::Decl_bufferContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Decl_buffer_implContext* FMLParser::Decl_bufferContext::decl_buffer_impl() {
  return getRuleContext<FMLParser::Decl_buffer_implContext>(0);
}


size_t FMLParser::Decl_bufferContext::getRuleIndex() const {
  return FMLParser::RuleDecl_buffer;
}


FMLParser::Decl_bufferContext* FMLParser::decl_buffer(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Decl_bufferContext *_localctx = _tracker.createInstance<Decl_bufferContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 198, FMLParser::RuleDecl_buffer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2446);
    match(FMLParser::T__144);
    setState(2447);
    decl_buffer_impl( _localctx->declPropertyPart , _localctx->mdfr );
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_buffer_implContext ------------------------------------------------------------------

FMLParser::Decl_buffer_implContext::Decl_buffer_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_buffer_implContext::Decl_buffer_implContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

tree::TerminalNode* FMLParser::Decl_buffer_implContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

std::vector<FMLParser::Def_bufferContext *> FMLParser::Decl_buffer_implContext::def_buffer() {
  return getRuleContexts<FMLParser::Def_bufferContext>();
}

FMLParser::Def_bufferContext* FMLParser::Decl_buffer_implContext::def_buffer(size_t i) {
  return getRuleContext<FMLParser::Def_bufferContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Decl_buffer_implContext::ID() {
  return getTokens(FMLParser::ID);
}

tree::TerminalNode* FMLParser::Decl_buffer_implContext::ID(size_t i) {
  return getToken(FMLParser::ID, i);
}

FMLParser::Initial_buffer_contentsContext* FMLParser::Decl_buffer_implContext::initial_buffer_contents() {
  return getRuleContext<FMLParser::Initial_buffer_contentsContext>(0);
}

tree::TerminalNode* FMLParser::Decl_buffer_implContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Decl_buffer_implContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}


size_t FMLParser::Decl_buffer_implContext::getRuleIndex() const {
  return FMLParser::RuleDecl_buffer_impl;
}


FMLParser::Decl_buffer_implContext* FMLParser::decl_buffer_impl(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Decl_buffer_implContext *_localctx = _tracker.createInstance<Decl_buffer_implContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 200, FMLParser::RuleDecl_buffer_impl);

  	sep::Buffer * buffer;

  	sep::BF TBuffer;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2468);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__145:
      case FMLParser::T__146:
      case FMLParser::T__147:
      case FMLParser::T__148:
      case FMLParser::T__149:
      case FMLParser::T__150:
      case FMLParser::T__151:
      case FMLParser::T__152:
      case FMLParser::T__153:
      case FMLParser::T__154: {
        enterOuterAlt(_localctx, 1);
        setState(2449);
        antlrcpp::downCast<Decl_buffer_implContext *>(_localctx)->db = def_buffer();
        setState(2450);
        antlrcpp::downCast<Decl_buffer_implContext *>(_localctx)->id = match(FMLParser::ID);

        		_localctx->declPropertyPart->appendBuffer( sep::BF(
        				buffer = new sep::Buffer(*( _localctx->declPropertyPart ),
        						antlrcpp::downCast<Decl_buffer_implContext *>(_localctx)->id->getText(), antlrcpp::downCast<Decl_buffer_implContext *>(_localctx)->db->kind, antlrcpp::downCast<Decl_buffer_implContext *>(_localctx)->db->size)) );
        		buffer->setModifier( _localctx->mdfr );
        	
        setState(2453);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::ASSIGN) {
          setState(2452);
          initial_buffer_contents( buffer );
        }
        setState(2455);
        match(FMLParser::SEMI);
        break;
      }

      case FMLParser::LCURLY: {
        enterOuterAlt(_localctx, 2);
        setState(2457);
        match(FMLParser::LCURLY);
        setState(2462); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2458);
          antlrcpp::downCast<Decl_buffer_implContext *>(_localctx)->db = def_buffer();
          setState(2459);
          antlrcpp::downCast<Decl_buffer_implContext *>(_localctx)->id = match(FMLParser::ID);

          			_localctx->declPropertyPart->appendBuffer( sep::BF(
          					buffer = new sep::Buffer(*( _localctx->declPropertyPart ),
          							antlrcpp::downCast<Decl_buffer_implContext *>(_localctx)->id->getText(), antlrcpp::downCast<Decl_buffer_implContext *>(_localctx)->db->kind, antlrcpp::downCast<Decl_buffer_implContext *>(_localctx)->db->size)) );
          			buffer->setModifier( _localctx->mdfr );
          		
          setState(2464); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (((((_la - 146) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 146)) & 1023) != 0));
        setState(2466);
        match(FMLParser::RCURLY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_bufferContext ------------------------------------------------------------------

FMLParser::Def_bufferContext::Def_bufferContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Policy_bufferContext* FMLParser::Def_bufferContext::policy_buffer() {
  return getRuleContext<FMLParser::Policy_bufferContext>(0);
}

tree::TerminalNode* FMLParser::Def_bufferContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Def_bufferContext::GT() {
  return getToken(FMLParser::GT, 0);
}

tree::TerminalNode* FMLParser::Def_bufferContext::LBRACKET() {
  return getToken(FMLParser::LBRACKET, 0);
}

tree::TerminalNode* FMLParser::Def_bufferContext::RBRACKET() {
  return getToken(FMLParser::RBRACKET, 0);
}

tree::TerminalNode* FMLParser::Def_bufferContext::STAR() {
  return getToken(FMLParser::STAR, 0);
}

FMLParser::Integer_constantContext* FMLParser::Def_bufferContext::integer_constant() {
  return getRuleContext<FMLParser::Integer_constantContext>(0);
}


size_t FMLParser::Def_bufferContext::getRuleIndex() const {
  return FMLParser::RuleDef_buffer;
}


FMLParser::Def_bufferContext* FMLParser::def_buffer() {
  Def_bufferContext *_localctx = _tracker.createInstance<Def_bufferContext>(_ctx, getState());
  enterRule(_localctx, 202, FMLParser::RuleDef_buffer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2500);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__146:
      case FMLParser::T__147:
      case FMLParser::T__148:
      case FMLParser::T__149:
      case FMLParser::T__150:
      case FMLParser::T__151:
      case FMLParser::T__152:
      case FMLParser::T__153:
      case FMLParser::T__154: {
        enterOuterAlt(_localctx, 1);
        setState(2470);
        antlrcpp::downCast<Def_bufferContext *>(_localctx)->pb = policy_buffer();
         antlrcpp::downCast<Def_bufferContext *>(_localctx)->kind =  antlrcpp::downCast<Def_bufferContext *>(_localctx)->pb->kind; 
        setState(2496);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::LT_: {
            setState(2472);
            match(FMLParser::LT_);
            setState(2474);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == FMLParser::T__140) {
              setState(2473);
              match(FMLParser::T__140);
            }
            setState(2481);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case FMLParser::ID:
              case FMLParser::IntegerLiteral: {
                setState(2476);
                antlrcpp::downCast<Def_bufferContext *>(_localctx)->n = integer_constant();
                 antlrcpp::downCast<Def_bufferContext *>(_localctx)->size =  antlrcpp::downCast<Def_bufferContext *>(_localctx)->n->val; 
                break;
              }

              case FMLParser::STAR: {
                setState(2479);
                match(FMLParser::STAR);
                 antlrcpp::downCast<Def_bufferContext *>(_localctx)->size =  -1; 
                break;
              }

            default:
              throw NoViableAltException(this);
            }
            setState(2483);
            match(FMLParser::GT);
            break;
          }

          case FMLParser::LBRACKET: {
            setState(2484);
            match(FMLParser::LBRACKET);
            setState(2486);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == FMLParser::T__140) {
              setState(2485);
              match(FMLParser::T__140);
            }
            setState(2493);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case FMLParser::ID:
              case FMLParser::IntegerLiteral: {
                setState(2488);
                antlrcpp::downCast<Def_bufferContext *>(_localctx)->n = integer_constant();
                 antlrcpp::downCast<Def_bufferContext *>(_localctx)->size =  antlrcpp::downCast<Def_bufferContext *>(_localctx)->n->val; 
                break;
              }

              case FMLParser::STAR: {
                setState(2491);
                match(FMLParser::STAR);
                 antlrcpp::downCast<Def_bufferContext *>(_localctx)->size =  -1; 
                break;
              }

            default:
              throw NoViableAltException(this);
            }
            setState(2495);
            match(FMLParser::RBRACKET);
            break;
          }

          case FMLParser::COMMA:
          case FMLParser::GT:
          case FMLParser::ID: {
            break;
          }

        default:
          break;
        }
        break;
      }

      case FMLParser::T__145: {
        enterOuterAlt(_localctx, 2);
        setState(2498);
        match(FMLParser::T__145);
         antlrcpp::downCast<Def_bufferContext *>(_localctx)->kind =  sep::TYPE_RAM_SPECIFIER; antlrcpp::downCast<Def_bufferContext *>(_localctx)->size =  1; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Policy_bufferContext ------------------------------------------------------------------

FMLParser::Policy_bufferContext::Policy_bufferContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t FMLParser::Policy_bufferContext::getRuleIndex() const {
  return FMLParser::RulePolicy_buffer;
}


FMLParser::Policy_bufferContext* FMLParser::policy_buffer() {
  Policy_bufferContext *_localctx = _tracker.createInstance<Policy_bufferContext>(_ctx, getState());
  enterRule(_localctx, 204, FMLParser::RulePolicy_buffer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2520);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__146: {
        enterOuterAlt(_localctx, 1);
        setState(2502);
        match(FMLParser::T__146);
         antlrcpp::downCast<Policy_bufferContext *>(_localctx)->kind =  sep::TYPE_FIFO_SPECIFIER;           
        break;
      }

      case FMLParser::T__147: {
        enterOuterAlt(_localctx, 2);
        setState(2504);
        match(FMLParser::T__147);
         antlrcpp::downCast<Policy_bufferContext *>(_localctx)->kind =  sep::TYPE_LIFO_SPECIFIER;           
        break;
      }

      case FMLParser::T__148: {
        enterOuterAlt(_localctx, 3);
        setState(2506);
        match(FMLParser::T__148);
         antlrcpp::downCast<Policy_bufferContext *>(_localctx)->kind =  sep::TYPE_MULTI_FIFO_SPECIFIER;     
        break;
      }

      case FMLParser::T__149: {
        enterOuterAlt(_localctx, 4);
        setState(2508);
        match(FMLParser::T__149);
         antlrcpp::downCast<Policy_bufferContext *>(_localctx)->kind =  sep::TYPE_MULTI_LIFO_SPECIFIER;     
        break;
      }

      case FMLParser::T__150: {
        enterOuterAlt(_localctx, 5);
        setState(2510);
        match(FMLParser::T__150);
         antlrcpp::downCast<Policy_bufferContext *>(_localctx)->kind =  sep::TYPE_SET_SPECIFIER;            
        break;
      }

      case FMLParser::T__151: {
        enterOuterAlt(_localctx, 6);
        setState(2512);
        match(FMLParser::T__151);
         antlrcpp::downCast<Policy_bufferContext *>(_localctx)->kind =  sep::TYPE_MULTISET_SPECIFIER;       
        break;
      }

      case FMLParser::T__152: {
        enterOuterAlt(_localctx, 7);
        setState(2514);
        match(FMLParser::T__152);
         antlrcpp::downCast<Policy_bufferContext *>(_localctx)->kind =  sep::TYPE_MULTISET_SPECIFIER;       
        break;
      }

      case FMLParser::T__153: {
        enterOuterAlt(_localctx, 8);
        setState(2516);
        match(FMLParser::T__153);
         antlrcpp::downCast<Policy_bufferContext *>(_localctx)->kind =  sep::TYPE_VECTOR_SPECIFIER;         
        break;
      }

      case FMLParser::T__154: {
        enterOuterAlt(_localctx, 9);
        setState(2518);
        match(FMLParser::T__154);
         antlrcpp::downCast<Policy_bufferContext *>(_localctx)->kind =  sep::TYPE_REVERSE_VECTOR_SPECIFIER; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ref_bufferContext ------------------------------------------------------------------

FMLParser::Ref_bufferContext::Ref_bufferContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Ref_bufferContext::Ref_bufferContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
}

FMLParser::QualifiedNameIDContext* FMLParser::Ref_bufferContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}


size_t FMLParser::Ref_bufferContext::getRuleIndex() const {
  return FMLParser::RuleRef_buffer;
}


FMLParser::Ref_bufferContext* FMLParser::ref_buffer(sep::Machine * machine) {
  Ref_bufferContext *_localctx = _tracker.createInstance<Ref_bufferContext>(_ctx, getState(), machine);
  enterRule(_localctx, 206, FMLParser::RuleRef_buffer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2522);
    antlrcpp::downCast<Ref_bufferContext *>(_localctx)->id = qualifiedNameID();
     antlrcpp::downCast<Ref_bufferContext *>(_localctx)->buf =  sep::ParserUtil::getBuffer(machine, antlrcpp::downCast<Ref_bufferContext *>(_localctx)->id->s, antlrcpp::downCast<Ref_bufferContext *>(_localctx)->id->nb); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Initial_buffer_contentsContext ------------------------------------------------------------------

FMLParser::Initial_buffer_contentsContext::Initial_buffer_contentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Initial_buffer_contentsContext::Initial_buffer_contentsContext(ParserRuleContext *parent, size_t invokingState, const sep::Buffer * buffer)
  : ParserRuleContext(parent, invokingState) {
  this->buffer = buffer;
}

tree::TerminalNode* FMLParser::Initial_buffer_contentsContext::ASSIGN() {
  return getToken(FMLParser::ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Initial_buffer_contentsContext::LBRACKET() {
  return getToken(FMLParser::LBRACKET, 0);
}

tree::TerminalNode* FMLParser::Initial_buffer_contentsContext::RBRACKET() {
  return getToken(FMLParser::RBRACKET, 0);
}

std::vector<FMLParser::QualifiedNameIDContext *> FMLParser::Initial_buffer_contentsContext::qualifiedNameID() {
  return getRuleContexts<FMLParser::QualifiedNameIDContext>();
}

FMLParser::QualifiedNameIDContext* FMLParser::Initial_buffer_contentsContext::qualifiedNameID(size_t i) {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Initial_buffer_contentsContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Initial_buffer_contentsContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Initial_buffer_contentsContext::getRuleIndex() const {
  return FMLParser::RuleInitial_buffer_contents;
}


FMLParser::Initial_buffer_contentsContext* FMLParser::initial_buffer_contents(const sep::Buffer * buffer) {
  Initial_buffer_contentsContext *_localctx = _tracker.createInstance<Initial_buffer_contentsContext>(_ctx, getState(), buffer);
  enterRule(_localctx, 208, FMLParser::RuleInitial_buffer_contents);

  	sep::BF msg;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2525);
    match(FMLParser::ASSIGN);
    setState(2526);
    match(FMLParser::LBRACKET);
    setState(2527);
    antlrcpp::downCast<Initial_buffer_contentsContext *>(_localctx)->mid = qualifiedNameID();
    /* msg = sep::ParserUtil::getMessage($mid.s, $mid.nb);
    			buffer->appendMessage(msg); */
    setState(2533);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::COMMA) {
      setState(2529);
      match(FMLParser::COMMA);
      setState(2530);
      antlrcpp::downCast<Initial_buffer_contentsContext *>(_localctx)->mid = qualifiedNameID();
      setState(2535);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2536);
    match(FMLParser::RBRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_channelContext ------------------------------------------------------------------

FMLParser::Decl_channelContext::Decl_channelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_channelContext::Decl_channelContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Decl_channel_portContext* FMLParser::Decl_channelContext::decl_channel_port() {
  return getRuleContext<FMLParser::Decl_channel_portContext>(0);
}


size_t FMLParser::Decl_channelContext::getRuleIndex() const {
  return FMLParser::RuleDecl_channel;
}


FMLParser::Decl_channelContext* FMLParser::decl_channel(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Decl_channelContext *_localctx = _tracker.createInstance<Decl_channelContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 210, FMLParser::RuleDecl_channel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2538);
    match(FMLParser::T__155);
    setState(2539);
    decl_channel_port( _localctx->declPropertyPart , _localctx->mdfr );
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_channel_portContext ------------------------------------------------------------------

FMLParser::Decl_channel_portContext::Decl_channel_portContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_channel_portContext::Decl_channel_portContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

tree::TerminalNode* FMLParser::Decl_channel_portContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Decl_channel_portContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

tree::TerminalNode* FMLParser::Decl_channel_portContext::ID() {
  return getToken(FMLParser::ID, 0);
}

tree::TerminalNode* FMLParser::Decl_channel_portContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

FMLParser::Com_protocolContext* FMLParser::Decl_channel_portContext::com_protocol() {
  return getRuleContext<FMLParser::Com_protocolContext>(0);
}

tree::TerminalNode* FMLParser::Decl_channel_portContext::GT() {
  return getToken(FMLParser::GT, 0);
}

FMLParser::Modifier_set_direction_strict_textContext* FMLParser::Decl_channel_portContext::modifier_set_direction_strict_text() {
  return getRuleContext<FMLParser::Modifier_set_direction_strict_textContext>(0);
}

std::vector<tree::TerminalNode *> FMLParser::Decl_channel_portContext::SEMI() {
  return getTokens(FMLParser::SEMI);
}

tree::TerminalNode* FMLParser::Decl_channel_portContext::SEMI(size_t i) {
  return getToken(FMLParser::SEMI, i);
}

std::vector<FMLParser::Decl_portContext *> FMLParser::Decl_channel_portContext::decl_port() {
  return getRuleContexts<FMLParser::Decl_portContext>();
}

FMLParser::Decl_portContext* FMLParser::Decl_channel_portContext::decl_port(size_t i) {
  return getRuleContext<FMLParser::Decl_portContext>(i);
}

std::vector<FMLParser::Decl_signalContext *> FMLParser::Decl_channel_portContext::decl_signal() {
  return getRuleContexts<FMLParser::Decl_signalContext>();
}

FMLParser::Decl_signalContext* FMLParser::Decl_channel_portContext::decl_signal(size_t i) {
  return getRuleContext<FMLParser::Decl_signalContext>(i);
}

std::vector<FMLParser::Modifier_directionContext *> FMLParser::Decl_channel_portContext::modifier_direction() {
  return getRuleContexts<FMLParser::Modifier_directionContext>();
}

FMLParser::Modifier_directionContext* FMLParser::Decl_channel_portContext::modifier_direction(size_t i) {
  return getRuleContext<FMLParser::Modifier_directionContext>(i);
}

std::vector<FMLParser::QualifiedNameIDContext *> FMLParser::Decl_channel_portContext::qualifiedNameID() {
  return getRuleContexts<FMLParser::QualifiedNameIDContext>();
}

FMLParser::QualifiedNameIDContext* FMLParser::Decl_channel_portContext::qualifiedNameID(size_t i) {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(i);
}

tree::TerminalNode* FMLParser::Decl_channel_portContext::COMMA() {
  return getToken(FMLParser::COMMA, 0);
}

FMLParser::Com_castContext* FMLParser::Decl_channel_portContext::com_cast() {
  return getRuleContext<FMLParser::Com_castContext>(0);
}


size_t FMLParser::Decl_channel_portContext::getRuleIndex() const {
  return FMLParser::RuleDecl_channel_port;
}


FMLParser::Decl_channel_portContext* FMLParser::decl_channel_port(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Decl_channel_portContext *_localctx = _tracker.createInstance<Decl_channel_portContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 212, FMLParser::RuleDecl_channel_port);

  	sep::Channel * aChannel;

  	_localctx->declPropertyPart->appendChannel( sep::BF( aChannel =
  			new sep::Channel(*( _localctx->declPropertyPart ),
  					"#channel#", _localctx->mdfr.setDirectionInoutElse() ) ));


  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2549);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LT_) {
      setState(2541);
      match(FMLParser::LT_);
      setState(2542);
      com_protocol( _localctx->declPropertyPart->getContainer()->as_ptr< sep::Machine >(),
      	    			aChannel );
      setState(2545);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FMLParser::COMMA) {
        setState(2543);
        match(FMLParser::COMMA);
        setState(2544);
        com_cast( aChannel );
      }
      setState(2547);
      match(FMLParser::GT);
    }
    setState(2552);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 3556769792) != 0)) {
      setState(2551);
      modifier_set_direction_strict_text( &( aChannel->getwModifier() ) );
    }
    setState(2554);
    antlrcpp::downCast<Decl_channel_portContext *>(_localctx)->id = match(FMLParser::ID);
     aChannel->fullyUpdateAllNameID( antlrcpp::downCast<Decl_channel_portContext *>(_localctx)->id->getText() ); 
    setState(2556);
    match(FMLParser::LCURLY);
    setState(2564); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2564);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::T__23:
        case FMLParser::T__24:
        case FMLParser::T__25:
        case FMLParser::T__26:
        case FMLParser::T__27:
        case FMLParser::T__28:
        case FMLParser::T__29:
        case FMLParser::T__30:
        case FMLParser::ASSIGN_REF:
        case FMLParser::LTE: {
          setState(2557);
          antlrcpp::downCast<Decl_channel_portContext *>(_localctx)->m = modifier_direction();
          setState(2558);
          antlrcpp::downCast<Decl_channel_portContext *>(_localctx)->uid = qualifiedNameID();
          setState(2559);
          match(FMLParser::SEMI);

          			sep::BF comSignal = sep::ParserUtil::getComSignal(antlrcpp::downCast<Decl_channel_portContext *>(_localctx)->uid->s, antlrcpp::downCast<Decl_channel_portContext *>(_localctx)->uid->nb);
          			if( comSignal.valid() )
          			{
          				aChannel->appendSignal(antlrcpp::downCast<Decl_channel_portContext *>(_localctx)->m->mdfr, comSignal);
          			}
          		
          break;
        }

        case FMLParser::T__141: {
          setState(2562);
          decl_port( &( aChannel->getParameterPart() ) ,
          	  				sep::Modifier::PROPERTY_PUBLIC_MODIFIER );
          break;
        }

        case FMLParser::T__142:
        case FMLParser::T__143: {
          setState(2563);
          decl_signal( &( aChannel->getParameterPart() ) ,
          					sep::Modifier::PROPERTY_PUBLIC_MODIFIER );
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2566); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4278190080) != 0) || ((((_la - 142) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 142)) & 7) != 0) || _la == FMLParser::ASSIGN_REF

    || _la == FMLParser::LTE);
    setState(2568);
    match(FMLParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_channel_varContext ------------------------------------------------------------------

FMLParser::Decl_channel_varContext::Decl_channel_varContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_channel_varContext::Decl_channel_varContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

std::vector<FMLParser::Type_varContext *> FMLParser::Decl_channel_varContext::type_var() {
  return getRuleContexts<FMLParser::Type_varContext>();
}

FMLParser::Type_varContext* FMLParser::Decl_channel_varContext::type_var(size_t i) {
  return getRuleContext<FMLParser::Type_varContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Decl_channel_varContext::ID() {
  return getTokens(FMLParser::ID);
}

tree::TerminalNode* FMLParser::Decl_channel_varContext::ID(size_t i) {
  return getToken(FMLParser::ID, i);
}

std::vector<tree::TerminalNode *> FMLParser::Decl_channel_varContext::SEMI() {
  return getTokens(FMLParser::SEMI);
}

tree::TerminalNode* FMLParser::Decl_channel_varContext::SEMI(size_t i) {
  return getToken(FMLParser::SEMI, i);
}

std::vector<FMLParser::On_write_var_routine_defContext *> FMLParser::Decl_channel_varContext::on_write_var_routine_def() {
  return getRuleContexts<FMLParser::On_write_var_routine_defContext>();
}

FMLParser::On_write_var_routine_defContext* FMLParser::Decl_channel_varContext::on_write_var_routine_def(size_t i) {
  return getRuleContext<FMLParser::On_write_var_routine_defContext>(i);
}

std::vector<FMLParser::Initial_valueContext *> FMLParser::Decl_channel_varContext::initial_value() {
  return getRuleContexts<FMLParser::Initial_valueContext>();
}

FMLParser::Initial_valueContext* FMLParser::Decl_channel_varContext::initial_value(size_t i) {
  return getRuleContext<FMLParser::Initial_valueContext>(i);
}

tree::TerminalNode* FMLParser::Decl_channel_varContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Decl_channel_varContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}


size_t FMLParser::Decl_channel_varContext::getRuleIndex() const {
  return FMLParser::RuleDecl_channel_var;
}


FMLParser::Decl_channel_varContext* FMLParser::decl_channel_var(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Decl_channel_varContext *_localctx = _tracker.createInstance<Decl_channel_varContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 214, FMLParser::RuleDecl_channel_var);

  	sep::Variable * var;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2601);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__58:
      case FMLParser::T__141:
      case FMLParser::T__142:
      case FMLParser::T__143:
      case FMLParser::T__144:
      case FMLParser::T__146:
      case FMLParser::T__147:
      case FMLParser::T__148:
      case FMLParser::T__149:
      case FMLParser::T__150:
      case FMLParser::T__151:
      case FMLParser::T__152:
      case FMLParser::T__153:
      case FMLParser::T__154:
      case FMLParser::T__159:
      case FMLParser::T__160:
      case FMLParser::T__161:
      case FMLParser::T__162:
      case FMLParser::T__163:
      case FMLParser::T__164:
      case FMLParser::T__165:
      case FMLParser::T__166:
      case FMLParser::T__167:
      case FMLParser::T__168:
      case FMLParser::T__169:
      case FMLParser::T__170:
      case FMLParser::T__171:
      case FMLParser::T__172:
      case FMLParser::T__173:
      case FMLParser::T__174:
      case FMLParser::T__175:
      case FMLParser::T__176:
      case FMLParser::T__177:
      case FMLParser::T__178:
      case FMLParser::T__179:
      case FMLParser::T__180:
      case FMLParser::T__181:
      case FMLParser::T__182:
      case FMLParser::T__183:
      case FMLParser::T__184:
      case FMLParser::T__185:
      case FMLParser::T__186:
      case FMLParser::T__187:
      case FMLParser::T__188:
      case FMLParser::T__199:
      case FMLParser::T__200:
      case FMLParser::T__201:
      case FMLParser::T__202:
      case FMLParser::T__203:
      case FMLParser::T__204:
      case FMLParser::T__205:
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(2570);
        antlrcpp::downCast<Decl_channel_varContext *>(_localctx)->tv = type_var();
        setState(2571);
        antlrcpp::downCast<Decl_channel_varContext *>(_localctx)->id = match(FMLParser::ID);

        		_localctx->declPropertyPart->saveOwnedVariable( var = new sep::Variable(
        				*( _localctx->declPropertyPart ), _localctx->mdfr, antlrcpp::downCast<Decl_channel_varContext *>(_localctx)->tv->type, antlrcpp::downCast<Decl_channel_varContext *>(_localctx)->id->getText()) );
        	  
        setState(2576);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::ASSIGN

        || _la == FMLParser::LPAREN) {
          setState(2573);
          antlrcpp::downCast<Decl_channel_varContext *>(_localctx)->iv = initial_value();
           var->setValue(antlrcpp::downCast<Decl_channel_varContext *>(_localctx)->iv->bf); 
        }
        setState(2580);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::SEMI: {
            setState(2578);
            match(FMLParser::SEMI);
            break;
          }

          case FMLParser::LCURLY: {
            setState(2579);
            on_write_var_routine_def( var );
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case FMLParser::LCURLY: {
        enterOuterAlt(_localctx, 2);
        setState(2582);
        match(FMLParser::LCURLY);
        setState(2595); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2583);
          antlrcpp::downCast<Decl_channel_varContext *>(_localctx)->tv = type_var();
          setState(2584);
          antlrcpp::downCast<Decl_channel_varContext *>(_localctx)->id = match(FMLParser::ID);

          		_localctx->declPropertyPart->saveOwnedVariable( var = new sep::Variable(
          				*( _localctx->declPropertyPart) , _localctx->mdfr, antlrcpp::downCast<Decl_channel_varContext *>(_localctx)->tv->type, antlrcpp::downCast<Decl_channel_varContext *>(_localctx)->id->getText()) );
          	  
          setState(2589);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::ASSIGN

          || _la == FMLParser::LPAREN) {
            setState(2586);
            antlrcpp::downCast<Decl_channel_varContext *>(_localctx)->iv = initial_value();
             var->setValue(antlrcpp::downCast<Decl_channel_varContext *>(_localctx)->iv->bf); 
          }
          setState(2593);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case FMLParser::SEMI: {
              setState(2591);
              match(FMLParser::SEMI);
              break;
            }

            case FMLParser::LCURLY: {
              setState(2592);
              on_write_var_routine_def( var );
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(2597); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FMLParser::T__58 || ((((_la - 142) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 142)) & -287948901175246865) != 0) || _la == FMLParser::T__205 || _la == FMLParser::ID);
        setState(2599);
        match(FMLParser::RCURLY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_functionContext ------------------------------------------------------------------

FMLParser::Decl_functionContext::Decl_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_functionContext::Decl_functionContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Decl_function_implContext* FMLParser::Decl_functionContext::decl_function_impl() {
  return getRuleContext<FMLParser::Decl_function_implContext>(0);
}


size_t FMLParser::Decl_functionContext::getRuleIndex() const {
  return FMLParser::RuleDecl_function;
}


FMLParser::Decl_functionContext* FMLParser::decl_function(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Decl_functionContext *_localctx = _tracker.createInstance<Decl_functionContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 216, FMLParser::RuleDecl_function);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2603);
    match(FMLParser::T__156);
    setState(2604);
    decl_function_impl( _localctx->declPropertyPart , _localctx->mdfr );
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_function_implContext ------------------------------------------------------------------

FMLParser::Decl_function_implContext::Decl_function_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_function_implContext::Decl_function_implContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Typed_parameter_returnContext* FMLParser::Decl_function_implContext::typed_parameter_return() {
  return getRuleContext<FMLParser::Typed_parameter_returnContext>(0);
}

tree::TerminalNode* FMLParser::Decl_function_implContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

tree::TerminalNode* FMLParser::Decl_function_implContext::ID() {
  return getToken(FMLParser::ID, 0);
}

FMLParser::Typed_parameter_inputContext* FMLParser::Decl_function_implContext::typed_parameter_input() {
  return getRuleContext<FMLParser::Typed_parameter_inputContext>(0);
}


size_t FMLParser::Decl_function_implContext::getRuleIndex() const {
  return FMLParser::RuleDecl_function_impl;
}


FMLParser::Decl_function_implContext* FMLParser::decl_function_impl(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Decl_function_implContext *_localctx = _tracker.createInstance<Decl_function_implContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 218, FMLParser::RuleDecl_function_impl);

  	sep::Function * function;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2606);
    antlrcpp::downCast<Decl_function_implContext *>(_localctx)->id = match(FMLParser::ID);

    		_localctx->declPropertyPart->appendFunction( sep::BF(
    			function = new sep::Function(*( _localctx->declPropertyPart ), antlrcpp::downCast<Decl_function_implContext *>(_localctx)->id->getText()) ));
    	  
    setState(2609);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LPAREN) {
      setState(2608);
      typed_parameter_input( &( function->getParameterPart() ) );
    }
    setState(2611);
    match(FMLParser::T__23);
    setState(2612);
    typed_parameter_return( &( function->getParameterPart() ) );
    setState(2613);
    match(FMLParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_variableContext ------------------------------------------------------------------

FMLParser::Decl_variableContext::Decl_variableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_variableContext::Decl_variableContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Decl_variable_implContext* FMLParser::Decl_variableContext::decl_variable_impl() {
  return getRuleContext<FMLParser::Decl_variable_implContext>(0);
}

FMLParser::Decl_variable_time_clock_implContext* FMLParser::Decl_variableContext::decl_variable_time_clock_impl() {
  return getRuleContext<FMLParser::Decl_variable_time_clock_implContext>(0);
}


size_t FMLParser::Decl_variableContext::getRuleIndex() const {
  return FMLParser::RuleDecl_variable;
}


FMLParser::Decl_variableContext* FMLParser::decl_variable(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Decl_variableContext *_localctx = _tracker.createInstance<Decl_variableContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 220, FMLParser::RuleDecl_variable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2634);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__31:
      case FMLParser::T__32:
      case FMLParser::T__157:
      case FMLParser::T__158: {
        enterOuterAlt(_localctx, 1);
        setState(2630);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::T__157: {
            setState(2615);
            match(FMLParser::T__157);
              _localctx->mdfr.setNatureVariable(); 
            break;
          }

          case FMLParser::T__158: {
            setState(2617);
            match(FMLParser::T__158);
              _localctx->mdfr.setFeatureConst();   
            break;
          }

          case FMLParser::T__31:
          case FMLParser::T__32: {
            setState(2623); 
            _errHandler->sync(this);
            _la = _input->LA(1);
            do {
              setState(2623);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case FMLParser::T__31: {
                  setState(2619);
                  match(FMLParser::T__31);
                    _localctx->mdfr.setFeatureConst();   
                  break;
                }

                case FMLParser::T__32: {
                  setState(2621);
                  match(FMLParser::T__32);
                    _localctx->mdfr.setNatureMacro();    
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              setState(2625); 
              _errHandler->sync(this);
              _la = _input->LA(1);
            } while (_la == FMLParser::T__31

            || _la == FMLParser::T__32);
            setState(2628);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == FMLParser::T__157) {
              setState(2627);
              match(FMLParser::T__157);
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(2632);
        decl_variable_impl( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::T__205: {
        enterOuterAlt(_localctx, 2);
        setState(2633);
        decl_variable_time_clock_impl( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_variable_time_clock_implContext ------------------------------------------------------------------

FMLParser::Decl_variable_time_clock_implContext::Decl_variable_time_clock_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_variable_time_clock_implContext::Decl_variable_time_clock_implContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Decl_typed_variable_atom_implContext* FMLParser::Decl_variable_time_clock_implContext::decl_typed_variable_atom_impl() {
  return getRuleContext<FMLParser::Decl_typed_variable_atom_implContext>(0);
}

FMLParser::Time_clock_typeContext* FMLParser::Decl_variable_time_clock_implContext::time_clock_type() {
  return getRuleContext<FMLParser::Time_clock_typeContext>(0);
}


size_t FMLParser::Decl_variable_time_clock_implContext::getRuleIndex() const {
  return FMLParser::RuleDecl_variable_time_clock_impl;
}


FMLParser::Decl_variable_time_clock_implContext* FMLParser::decl_variable_time_clock_impl(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Decl_variable_time_clock_implContext *_localctx = _tracker.createInstance<Decl_variable_time_clock_implContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 222, FMLParser::RuleDecl_variable_time_clock_impl);

  	_localctx->mdfr.override_ifdef( sep::Modifier::PROPERTY_PUBLIC_VOLATILE_MODIFIER );


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2636);
    antlrcpp::downCast<Decl_variable_time_clock_implContext *>(_localctx)->ctv = time_clock_type();
    setState(2637);
    decl_typed_variable_atom_impl( _localctx->declPropertyPart , _localctx->mdfr , antlrcpp::downCast<Decl_variable_time_clock_implContext *>(_localctx)->ctv->bts );
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_variable_implContext ------------------------------------------------------------------

FMLParser::Decl_variable_implContext::Decl_variable_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_variable_implContext::Decl_variable_implContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

std::vector<FMLParser::Decl_variable_atom_implContext *> FMLParser::Decl_variable_implContext::decl_variable_atom_impl() {
  return getRuleContexts<FMLParser::Decl_variable_atom_implContext>();
}

FMLParser::Decl_variable_atom_implContext* FMLParser::Decl_variable_implContext::decl_variable_atom_impl(size_t i) {
  return getRuleContext<FMLParser::Decl_variable_atom_implContext>(i);
}

tree::TerminalNode* FMLParser::Decl_variable_implContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Decl_variable_implContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}


size_t FMLParser::Decl_variable_implContext::getRuleIndex() const {
  return FMLParser::RuleDecl_variable_impl;
}


FMLParser::Decl_variable_implContext* FMLParser::decl_variable_impl(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Decl_variable_implContext *_localctx = _tracker.createInstance<Decl_variable_implContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 224, FMLParser::RuleDecl_variable_impl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2648);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__58:
      case FMLParser::T__141:
      case FMLParser::T__142:
      case FMLParser::T__143:
      case FMLParser::T__144:
      case FMLParser::T__146:
      case FMLParser::T__147:
      case FMLParser::T__148:
      case FMLParser::T__149:
      case FMLParser::T__150:
      case FMLParser::T__151:
      case FMLParser::T__152:
      case FMLParser::T__153:
      case FMLParser::T__154:
      case FMLParser::T__159:
      case FMLParser::T__160:
      case FMLParser::T__161:
      case FMLParser::T__162:
      case FMLParser::T__163:
      case FMLParser::T__164:
      case FMLParser::T__165:
      case FMLParser::T__166:
      case FMLParser::T__167:
      case FMLParser::T__168:
      case FMLParser::T__169:
      case FMLParser::T__170:
      case FMLParser::T__171:
      case FMLParser::T__172:
      case FMLParser::T__173:
      case FMLParser::T__174:
      case FMLParser::T__175:
      case FMLParser::T__176:
      case FMLParser::T__177:
      case FMLParser::T__178:
      case FMLParser::T__179:
      case FMLParser::T__180:
      case FMLParser::T__181:
      case FMLParser::T__182:
      case FMLParser::T__183:
      case FMLParser::T__184:
      case FMLParser::T__185:
      case FMLParser::T__186:
      case FMLParser::T__187:
      case FMLParser::T__188:
      case FMLParser::T__199:
      case FMLParser::T__200:
      case FMLParser::T__201:
      case FMLParser::T__202:
      case FMLParser::T__203:
      case FMLParser::T__204:
      case FMLParser::T__205:
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(2639);
        decl_variable_atom_impl( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::LCURLY: {
        enterOuterAlt(_localctx, 2);
        setState(2640);
        match(FMLParser::LCURLY);
        setState(2642); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2641);
          decl_variable_atom_impl( _localctx->declPropertyPart , _localctx->mdfr );
          setState(2644); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FMLParser::T__58 || ((((_la - 142) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 142)) & -287948901175246865) != 0) || _la == FMLParser::T__205 || _la == FMLParser::ID);
        setState(2646);
        match(FMLParser::RCURLY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_variable_atom_implContext ------------------------------------------------------------------

FMLParser::Decl_variable_atom_implContext::Decl_variable_atom_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_variable_atom_implContext::Decl_variable_atom_implContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Decl_typed_variable_atom_implContext* FMLParser::Decl_variable_atom_implContext::decl_typed_variable_atom_impl() {
  return getRuleContext<FMLParser::Decl_typed_variable_atom_implContext>(0);
}

FMLParser::Type_varContext* FMLParser::Decl_variable_atom_implContext::type_var() {
  return getRuleContext<FMLParser::Type_varContext>(0);
}

tree::TerminalNode* FMLParser::Decl_variable_atom_implContext::BAND() {
  return getToken(FMLParser::BAND, 0);
}


size_t FMLParser::Decl_variable_atom_implContext::getRuleIndex() const {
  return FMLParser::RuleDecl_variable_atom_impl;
}


FMLParser::Decl_variable_atom_implContext* FMLParser::decl_variable_atom_impl(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Decl_variable_atom_implContext *_localctx = _tracker.createInstance<Decl_variable_atom_implContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 226, FMLParser::RuleDecl_variable_atom_impl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2650);
    antlrcpp::downCast<Decl_variable_atom_implContext *>(_localctx)->tv = type_var();
    setState(2653);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::BAND) {
      setState(2651);
      match(FMLParser::BAND);
       mdfr.setNatureReference(); 
    }
    setState(2655);
    decl_typed_variable_atom_impl( _localctx->declPropertyPart , _localctx->mdfr , antlrcpp::downCast<Decl_variable_atom_implContext *>(_localctx)->tv->type );
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_typed_variable_atom_implContext ------------------------------------------------------------------

FMLParser::Decl_typed_variable_atom_implContext::Decl_typed_variable_atom_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_typed_variable_atom_implContext::Decl_typed_variable_atom_implContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr, sep::BF type)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
  this->type = type;
}

tree::TerminalNode* FMLParser::Decl_typed_variable_atom_implContext::ID() {
  return getToken(FMLParser::ID, 0);
}

tree::TerminalNode* FMLParser::Decl_typed_variable_atom_implContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

FMLParser::On_write_var_routine_defContext* FMLParser::Decl_typed_variable_atom_implContext::on_write_var_routine_def() {
  return getRuleContext<FMLParser::On_write_var_routine_defContext>(0);
}

tree::TerminalNode* FMLParser::Decl_typed_variable_atom_implContext::StringLiteral() {
  return getToken(FMLParser::StringLiteral, 0);
}

FMLParser::Initial_valueContext* FMLParser::Decl_typed_variable_atom_implContext::initial_value() {
  return getRuleContext<FMLParser::Initial_valueContext>(0);
}


size_t FMLParser::Decl_typed_variable_atom_implContext::getRuleIndex() const {
  return FMLParser::RuleDecl_typed_variable_atom_impl;
}


FMLParser::Decl_typed_variable_atom_implContext* FMLParser::decl_typed_variable_atom_impl(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr,sep::BF type) {
  Decl_typed_variable_atom_implContext *_localctx = _tracker.createInstance<Decl_typed_variable_atom_implContext>(_ctx, getState(), declPropertyPart, mdfr, type);
  enterRule(_localctx, 228, FMLParser::RuleDecl_typed_variable_atom_impl);

  	sep::Variable * var;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2657);
    antlrcpp::downCast<Decl_typed_variable_atom_implContext *>(_localctx)->id = match(FMLParser::ID);

    		_localctx->declPropertyPart->saveOwnedVariable( var = new sep::Variable(
    				*( _localctx->declPropertyPart ), _localctx->mdfr, type, antlrcpp::downCast<Decl_typed_variable_atom_implContext *>(_localctx)->id->getText()) );
    	  
    setState(2661);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::StringLiteral) {
      setState(2659);
      antlrcpp::downCast<Decl_typed_variable_atom_implContext *>(_localctx)->sl = match(FMLParser::StringLiteral);
       var->setUnrestrictedName(antlrcpp::downCast<Decl_typed_variable_atom_implContext *>(_localctx)->sl->getText()); 
    }
    setState(2666);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::ASSIGN

    || _la == FMLParser::LPAREN) {
      setState(2663);
      antlrcpp::downCast<Decl_typed_variable_atom_implContext *>(_localctx)->iv = initial_value();
       var->setValue(antlrcpp::downCast<Decl_typed_variable_atom_implContext *>(_localctx)->iv->bf); 
    }
    setState(2670);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::SEMI: {
        setState(2668);
        match(FMLParser::SEMI);
        break;
      }

      case FMLParser::LCURLY: {
        setState(2669);
        on_write_var_routine_def( var );
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Initial_valueContext ------------------------------------------------------------------

FMLParser::Initial_valueContext::Initial_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Initial_valueContext::ASSIGN() {
  return getToken(FMLParser::ASSIGN, 0);
}

FMLParser::ExpressionContext* FMLParser::Initial_valueContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}

tree::TerminalNode* FMLParser::Initial_valueContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Initial_valueContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}


size_t FMLParser::Initial_valueContext::getRuleIndex() const {
  return FMLParser::RuleInitial_value;
}


FMLParser::Initial_valueContext* FMLParser::initial_value() {
  Initial_valueContext *_localctx = _tracker.createInstance<Initial_valueContext>(_ctx, getState());
  enterRule(_localctx, 230, FMLParser::RuleInitial_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2681);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::ASSIGN: {
        enterOuterAlt(_localctx, 1);
        setState(2672);
        match(FMLParser::ASSIGN);
        setState(2673);
        antlrcpp::downCast<Initial_valueContext *>(_localctx)->e = expression();
         antlrcpp::downCast<Initial_valueContext *>(_localctx)->bf =  antlrcpp::downCast<Initial_valueContext *>(_localctx)->e->bf; 
        break;
      }

      case FMLParser::LPAREN: {
        enterOuterAlt(_localctx, 2);
        setState(2676);
        match(FMLParser::LPAREN);
        setState(2677);
        antlrcpp::downCast<Initial_valueContext *>(_localctx)->e = expression();
        setState(2678);
        match(FMLParser::RPAREN);
         antlrcpp::downCast<Initial_valueContext *>(_localctx)->bf =  antlrcpp::downCast<Initial_valueContext *>(_localctx)->e->bf; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_varContext ------------------------------------------------------------------

FMLParser::Type_varContext::Type_varContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Base_type_varContext* FMLParser::Type_varContext::base_type_var() {
  return getRuleContext<FMLParser::Base_type_varContext>(0);
}

FMLParser::Def_type_arrayContext* FMLParser::Type_varContext::def_type_array() {
  return getRuleContext<FMLParser::Def_type_arrayContext>(0);
}

FMLParser::Def_type_containerContext* FMLParser::Type_varContext::def_type_container() {
  return getRuleContext<FMLParser::Def_type_containerContext>(0);
}

FMLParser::Def_type_intervalContext* FMLParser::Type_varContext::def_type_interval() {
  return getRuleContext<FMLParser::Def_type_intervalContext>(0);
}


size_t FMLParser::Type_varContext::getRuleIndex() const {
  return FMLParser::RuleType_var;
}


FMLParser::Type_varContext* FMLParser::type_var() {
  Type_varContext *_localctx = _tracker.createInstance<Type_varContext>(_ctx, getState());
  enterRule(_localctx, 232, FMLParser::RuleType_var);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2696);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__58:
      case FMLParser::T__141:
      case FMLParser::T__142:
      case FMLParser::T__143:
      case FMLParser::T__144:
      case FMLParser::T__162:
      case FMLParser::T__163:
      case FMLParser::T__164:
      case FMLParser::T__165:
      case FMLParser::T__166:
      case FMLParser::T__167:
      case FMLParser::T__168:
      case FMLParser::T__169:
      case FMLParser::T__170:
      case FMLParser::T__171:
      case FMLParser::T__172:
      case FMLParser::T__173:
      case FMLParser::T__174:
      case FMLParser::T__175:
      case FMLParser::T__176:
      case FMLParser::T__177:
      case FMLParser::T__178:
      case FMLParser::T__179:
      case FMLParser::T__180:
      case FMLParser::T__181:
      case FMLParser::T__182:
      case FMLParser::T__183:
      case FMLParser::T__184:
      case FMLParser::T__185:
      case FMLParser::T__186:
      case FMLParser::T__187:
      case FMLParser::T__188:
      case FMLParser::T__199:
      case FMLParser::T__200:
      case FMLParser::T__201:
      case FMLParser::T__202:
      case FMLParser::T__203:
      case FMLParser::T__204:
      case FMLParser::T__205:
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(2683);
        antlrcpp::downCast<Type_varContext *>(_localctx)->btv = base_type_var();
         antlrcpp::downCast<Type_varContext *>(_localctx)->type =  antlrcpp::downCast<Type_varContext *>(_localctx)->btv->type; 
        setState(2688);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::LBRACKET) {
          setState(2685);
          antlrcpp::downCast<Type_varContext *>(_localctx)->dta = def_type_array( _localctx->type , "" );
           antlrcpp::downCast<Type_varContext *>(_localctx)->type =  antlrcpp::downCast<Type_varContext *>(_localctx)->dta->type; 
        }
        break;
      }

      case FMLParser::T__146:
      case FMLParser::T__147:
      case FMLParser::T__148:
      case FMLParser::T__149:
      case FMLParser::T__150:
      case FMLParser::T__151:
      case FMLParser::T__152:
      case FMLParser::T__153:
      case FMLParser::T__154:
      case FMLParser::T__159:
      case FMLParser::T__160: {
        enterOuterAlt(_localctx, 2);
        setState(2690);
        antlrcpp::downCast<Type_varContext *>(_localctx)->dtc = def_type_container( "" );
         antlrcpp::downCast<Type_varContext *>(_localctx)->type =  antlrcpp::downCast<Type_varContext *>(_localctx)->dtc->type; 
        break;
      }

      case FMLParser::T__161: {
        enterOuterAlt(_localctx, 3);
        setState(2693);
        antlrcpp::downCast<Type_varContext *>(_localctx)->dti = def_type_interval( "" );
         antlrcpp::downCast<Type_varContext *>(_localctx)->type =  antlrcpp::downCast<Type_varContext *>(_localctx)->dti->type; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_type_arrayContext ------------------------------------------------------------------

FMLParser::Def_type_arrayContext::Def_type_arrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_type_arrayContext::Def_type_arrayContext(ParserRuleContext *parent, size_t invokingState, sep::BF baseT, std::string tid)
  : ParserRuleContext(parent, invokingState) {
  this->baseT = baseT;
  this->tid = tid;
}

std::vector<FMLParser::Def_type_array_sizeContext *> FMLParser::Def_type_arrayContext::def_type_array_size() {
  return getRuleContexts<FMLParser::Def_type_array_sizeContext>();
}

FMLParser::Def_type_array_sizeContext* FMLParser::Def_type_arrayContext::def_type_array_size(size_t i) {
  return getRuleContext<FMLParser::Def_type_array_sizeContext>(i);
}


size_t FMLParser::Def_type_arrayContext::getRuleIndex() const {
  return FMLParser::RuleDef_type_array;
}


FMLParser::Def_type_arrayContext* FMLParser::def_type_array(sep::BF baseT,std::string tid) {
  Def_type_arrayContext *_localctx = _tracker.createInstance<Def_type_arrayContext>(_ctx, getState(), baseT, tid);
  enterRule(_localctx, 234, FMLParser::RuleDef_type_array);

  	sep::ListOfInt listOfSize;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2701); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2698);
      antlrcpp::downCast<Def_type_arrayContext *>(_localctx)->dta = def_type_array_size();
       listOfSize.push_back(antlrcpp::downCast<Def_type_arrayContext *>(_localctx)->dta->size); 
      setState(2703); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FMLParser::LBRACKET);

    		int szT = listOfSize.front();
    		listOfSize.pop_front();

    		while( listOfSize.nonempty() )
    		{
    			baseT = sep::BF( sep::DataType::newContainer(_CPM_,
    					sep::DataType::strContainerId(sep::TYPE_ARRAY_SPECIFIER,
    							baseT, listOfSize.back()),
    					sep::TYPE_ARRAY_SPECIFIER, baseT, listOfSize.back()) );
    			listOfSize.pop_back();
    		}
    		antlrcpp::downCast<Def_type_arrayContext *>(_localctx)->type =  sep::BF( sep::DataType::newContainer(_CPM_,
    				sep::DataType::strContainerId(
    						tid, sep::TYPE_ARRAY_SPECIFIER, baseT, szT),
    				sep::TYPE_ARRAY_SPECIFIER, baseT, szT) );
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_type_array_sizeContext ------------------------------------------------------------------

FMLParser::Def_type_array_sizeContext::Def_type_array_sizeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Def_type_array_sizeContext::LBRACKET() {
  return getToken(FMLParser::LBRACKET, 0);
}

tree::TerminalNode* FMLParser::Def_type_array_sizeContext::RBRACKET() {
  return getToken(FMLParser::RBRACKET, 0);
}

tree::TerminalNode* FMLParser::Def_type_array_sizeContext::IntegerLiteral() {
  return getToken(FMLParser::IntegerLiteral, 0);
}

FMLParser::QualifiedNameIDContext* FMLParser::Def_type_array_sizeContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}


size_t FMLParser::Def_type_array_sizeContext::getRuleIndex() const {
  return FMLParser::RuleDef_type_array_size;
}


FMLParser::Def_type_array_sizeContext* FMLParser::def_type_array_size() {
  Def_type_array_sizeContext *_localctx = _tracker.createInstance<Def_type_array_sizeContext>(_ctx, getState());
  enterRule(_localctx, 236, FMLParser::RuleDef_type_array_size);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2707);
    match(FMLParser::LBRACKET);
    setState(2713);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::IntegerLiteral: {
        setState(2708);
        antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->sz = match(FMLParser::IntegerLiteral);
         antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->size =  NUM_INT(antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->sz->getText()); 
        break;
      }

      case FMLParser::ID: {
        setState(2710);
        antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->id = qualifiedNameID();

        			const sep::BF & constVar =
        					sep::ParserUtil::getConstant(antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->id->s, antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->id->nb);
        			if( constVar.valid() &&
        				constVar.to_ptr< sep::Variable >()->hasValue() &&
        				constVar.to_ptr< sep::Variable >()->getValue().isInteger() )
        			{
        				antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->size =  constVar.to_ptr< sep::Variable >()->getValue().toInteger();
        			}
        			else
        			{
        				sep::BF aType = sep::ParserUtil::getDataType(antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->id->s, antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->id->nb);

        				if( aType.valid() && aType.is< sep::DataType >() )
        				{
        					if( aType.to_ptr< sep::DataType >()->isTypedInterval() )
        					{
        						antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->size =  aType.to_ptr< sep::DataType >()->getIntervalLength();

        						if( _localctx->size < 0 )
        						{
        							sep::ParserUtil::avm_syntax_error(
        								"def_type_array_size(...)" )
        									<< "unexpected << interval: " << antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->id->s
        									<< " >> as size (i.e. " << _localctx->size
        									<< ") in an array typedef"
        									<< sep::ParserUtil::SYNTAX_ERROR_EOL;

        							antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->size =  0;
        						}
        					}
        					else if( aType.to_ptr< sep::DataType >()->isTypedEnum() )
        					{
        						antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->size =  aType.to_ptr< sep::DataType >()->getEnumSize();

        						if( _localctx->size == 0 )
        						{
        							sep::ParserUtil::avm_syntax_error(
        								"def_type_array_size(...)" )
        									<< "unexpected << enum: " << antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->id->s
        									<< " >> as size in an array typedef"
        									<< sep::ParserUtil::SYNTAX_ERROR_EOL;
        						}
        					}
        					else
        					{
        						antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->size =  0;

        						sep::ParserUtil::avm_syntax_error(
        							"def_type_array_size(...)" )
        								<< "unexpected << [Qualified]NameID: " << antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->id->s
        								<< " >> as size in an array typedef"
        								<< sep::ParserUtil::SYNTAX_ERROR_EOL;
        					}
        				}
        				else
        				{
        					antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->size =  0;

        					sep::ParserUtil::avm_syntax_error(
        						"def_type_array_size(...)" )
        							<< "unexpected << [Qualified]NameID: " << antlrcpp::downCast<Def_type_array_sizeContext *>(_localctx)->id->s
        							<< " >> as size in an array typedef"
        							<< sep::ParserUtil::SYNTAX_ERROR_EOL;
        				}
        			}
        		
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2715);
    match(FMLParser::RBRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_type_containerContext ------------------------------------------------------------------

FMLParser::Def_type_containerContext::Def_type_containerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_type_containerContext::Def_type_containerContext(ParserRuleContext *parent, size_t invokingState, std::string tid)
  : ParserRuleContext(parent, invokingState) {
  this->tid = tid;
}

FMLParser::Specifier_bufferContext* FMLParser::Def_type_containerContext::specifier_buffer() {
  return getRuleContext<FMLParser::Specifier_bufferContext>(0);
}

tree::TerminalNode* FMLParser::Def_type_containerContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Def_type_containerContext::GT() {
  return getToken(FMLParser::GT, 0);
}

FMLParser::Integer_constantContext* FMLParser::Def_type_containerContext::integer_constant() {
  return getRuleContext<FMLParser::Integer_constantContext>(0);
}

FMLParser::Base_type_varContext* FMLParser::Def_type_containerContext::base_type_var() {
  return getRuleContext<FMLParser::Base_type_varContext>(0);
}

tree::TerminalNode* FMLParser::Def_type_containerContext::COMMA() {
  return getToken(FMLParser::COMMA, 0);
}

tree::TerminalNode* FMLParser::Def_type_containerContext::STAR() {
  return getToken(FMLParser::STAR, 0);
}


size_t FMLParser::Def_type_containerContext::getRuleIndex() const {
  return FMLParser::RuleDef_type_container;
}


FMLParser::Def_type_containerContext* FMLParser::def_type_container(std::string tid) {
  Def_type_containerContext *_localctx = _tracker.createInstance<Def_type_containerContext>(_ctx, getState(), tid);
  enterRule(_localctx, 238, FMLParser::RuleDef_type_container);

  	sep::BF baseT = sep::TypeManager::UNIVERSAL;
  	int szT = -1;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2717);
    antlrcpp::downCast<Def_type_containerContext *>(_localctx)->sb = specifier_buffer();
    setState(2744);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LT_) {
      setState(2718);
      match(FMLParser::LT_);
      setState(2740);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx)) {
      case 1: {
        setState(2719);
        antlrcpp::downCast<Def_type_containerContext *>(_localctx)->btv = base_type_var();
         baseT = antlrcpp::downCast<Def_type_containerContext *>(_localctx)->btv->type; 
        setState(2732);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::COMMA) {
          setState(2721);
          match(FMLParser::COMMA);
          setState(2723);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::T__140) {
            setState(2722);
            match(FMLParser::T__140);
          }
          setState(2730);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case FMLParser::ID:
            case FMLParser::IntegerLiteral: {
              setState(2725);
              antlrcpp::downCast<Def_type_containerContext *>(_localctx)->sz = integer_constant();
               szT = antlrcpp::downCast<Def_type_containerContext *>(_localctx)->sz->val; 
              break;
            }

            case FMLParser::STAR: {
              setState(2728);
              match(FMLParser::STAR);
               szT = -1; 
              break;
            }

          default:
            throw NoViableAltException(this);
          }
        }
        break;
      }

      case 2: {
        setState(2735);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::T__140) {
          setState(2734);
          match(FMLParser::T__140);
        }
        setState(2737);
        antlrcpp::downCast<Def_type_containerContext *>(_localctx)->sz = integer_constant();
         szT = antlrcpp::downCast<Def_type_containerContext *>(_localctx)->sz->val; 
        break;
      }

      default:
        break;
      }
      setState(2742);
      match(FMLParser::GT);
    }

    		antlrcpp::downCast<Def_type_containerContext *>(_localctx)->type =  sep::BF( sep::DataType::newContainer(_CPM_,
    				sep::DataType::strContainerId(tid, antlrcpp::downCast<Def_type_containerContext *>(_localctx)->sb->kind, baseT, szT),
    				antlrcpp::downCast<Def_type_containerContext *>(_localctx)->sb->kind, baseT, szT) );
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Specifier_bufferContext ------------------------------------------------------------------

FMLParser::Specifier_bufferContext::Specifier_bufferContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t FMLParser::Specifier_bufferContext::getRuleIndex() const {
  return FMLParser::RuleSpecifier_buffer;
}


FMLParser::Specifier_bufferContext* FMLParser::specifier_buffer() {
  Specifier_bufferContext *_localctx = _tracker.createInstance<Specifier_bufferContext>(_ctx, getState());
  enterRule(_localctx, 240, FMLParser::RuleSpecifier_buffer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2770);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__159: {
        enterOuterAlt(_localctx, 1);
        setState(2748);
        match(FMLParser::T__159);
         antlrcpp::downCast<Specifier_bufferContext *>(_localctx)->kind =  sep::TYPE_ARRAY_SPECIFIER;          
        break;
      }

      case FMLParser::T__153: {
        enterOuterAlt(_localctx, 2);
        setState(2750);
        match(FMLParser::T__153);
         antlrcpp::downCast<Specifier_bufferContext *>(_localctx)->kind =  sep::TYPE_VECTOR_SPECIFIER;         
        break;
      }

      case FMLParser::T__154: {
        enterOuterAlt(_localctx, 3);
        setState(2752);
        match(FMLParser::T__154);
         antlrcpp::downCast<Specifier_bufferContext *>(_localctx)->kind =  sep::TYPE_REVERSE_VECTOR_SPECIFIER; 
        break;
      }

      case FMLParser::T__160: {
        enterOuterAlt(_localctx, 4);
        setState(2754);
        match(FMLParser::T__160);
         antlrcpp::downCast<Specifier_bufferContext *>(_localctx)->kind =  sep::TYPE_LIST_SPECIFIER;           
        break;
      }

      case FMLParser::T__146: {
        enterOuterAlt(_localctx, 5);
        setState(2756);
        match(FMLParser::T__146);
         antlrcpp::downCast<Specifier_bufferContext *>(_localctx)->kind =  sep::TYPE_FIFO_SPECIFIER;           
        break;
      }

      case FMLParser::T__147: {
        enterOuterAlt(_localctx, 6);
        setState(2758);
        match(FMLParser::T__147);
         antlrcpp::downCast<Specifier_bufferContext *>(_localctx)->kind =  sep::TYPE_LIFO_SPECIFIER;           
        break;
      }

      case FMLParser::T__148: {
        enterOuterAlt(_localctx, 7);
        setState(2760);
        match(FMLParser::T__148);
         antlrcpp::downCast<Specifier_bufferContext *>(_localctx)->kind =  sep::TYPE_MULTI_FIFO_SPECIFIER;     
        break;
      }

      case FMLParser::T__149: {
        enterOuterAlt(_localctx, 8);
        setState(2762);
        match(FMLParser::T__149);
         antlrcpp::downCast<Specifier_bufferContext *>(_localctx)->kind =  sep::TYPE_MULTI_LIFO_SPECIFIER;     
        break;
      }

      case FMLParser::T__150: {
        enterOuterAlt(_localctx, 9);
        setState(2764);
        match(FMLParser::T__150);
         antlrcpp::downCast<Specifier_bufferContext *>(_localctx)->kind =  sep::TYPE_SET_SPECIFIER;            
        break;
      }

      case FMLParser::T__151: {
        enterOuterAlt(_localctx, 10);
        setState(2766);
        match(FMLParser::T__151);
         antlrcpp::downCast<Specifier_bufferContext *>(_localctx)->kind =  sep::TYPE_MULTISET_SPECIFIER;       
        break;
      }

      case FMLParser::T__152: {
        enterOuterAlt(_localctx, 11);
        setState(2768);
        match(FMLParser::T__152);
         antlrcpp::downCast<Specifier_bufferContext *>(_localctx)->kind =  sep::TYPE_MULTISET_SPECIFIER;       
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_type_intervalContext ------------------------------------------------------------------

FMLParser::Def_type_intervalContext::Def_type_intervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_type_intervalContext::Def_type_intervalContext(ParserRuleContext *parent, size_t invokingState, std::string tid)
  : ParserRuleContext(parent, invokingState) {
  this->tid = tid;
}

tree::TerminalNode* FMLParser::Def_type_intervalContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Def_type_intervalContext::COMMA() {
  return getToken(FMLParser::COMMA, 0);
}

tree::TerminalNode* FMLParser::Def_type_intervalContext::GT() {
  return getToken(FMLParser::GT, 0);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Def_type_intervalContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Def_type_intervalContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Def_type_intervalContext::LBRACKET() {
  return getTokens(FMLParser::LBRACKET);
}

tree::TerminalNode* FMLParser::Def_type_intervalContext::LBRACKET(size_t i) {
  return getToken(FMLParser::LBRACKET, i);
}

std::vector<tree::TerminalNode *> FMLParser::Def_type_intervalContext::RBRACKET() {
  return getTokens(FMLParser::RBRACKET);
}

tree::TerminalNode* FMLParser::Def_type_intervalContext::RBRACKET(size_t i) {
  return getToken(FMLParser::RBRACKET, i);
}

tree::TerminalNode* FMLParser::Def_type_intervalContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Def_type_intervalContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

FMLParser::Primitive_typeContext* FMLParser::Def_type_intervalContext::primitive_type() {
  return getRuleContext<FMLParser::Primitive_typeContext>(0);
}


size_t FMLParser::Def_type_intervalContext::getRuleIndex() const {
  return FMLParser::RuleDef_type_interval;
}


FMLParser::Def_type_intervalContext* FMLParser::def_type_interval(std::string tid) {
  Def_type_intervalContext *_localctx = _tracker.createInstance<Def_type_intervalContext>(_ctx, getState(), tid);
  enterRule(_localctx, 242, FMLParser::RuleDef_type_interval);

  	sep::BF baseT = sep::TypeManager::INTEGER;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2772);
    match(FMLParser::T__161);
     antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->type =  sep::TypeManager::INTEGER; 
    setState(2774);
    match(FMLParser::LT_);
    setState(2778);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__58 || ((((_la - 142) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 142)) & -287948901177098225) != 0) || _la == FMLParser::T__205) {
      setState(2775);
      antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->pt = primitive_type();
       baseT = antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->pt->bts; 
    }
    setState(2783);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LBRACKET: {
        setState(2780);
        antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->ll = match(FMLParser::LBRACKET);
        break;
      }

      case FMLParser::RBRACKET: {
        setState(2781);
        antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->ll = match(FMLParser::RBRACKET);
        break;
      }

      case FMLParser::LPAREN: {
        setState(2782);
        antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->ll = match(FMLParser::LPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2785);
    antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->min = expression();
    setState(2786);
    match(FMLParser::COMMA);
    setState(2787);
    antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->max = expression();
    setState(2791);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LBRACKET: {
        setState(2788);
        antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->rr = match(FMLParser::LBRACKET);
        break;
      }

      case FMLParser::RBRACKET: {
        setState(2789);
        antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->rr = match(FMLParser::RBRACKET);
        break;
      }

      case FMLParser::RPAREN: {
        setState(2790);
        antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->rr = match(FMLParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2793);
    match(FMLParser::GT);

    		antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->type =  sep::BF( sep::DataType::newInterval(_CPM_, tid, baseT,
    			sep::IIntervalKind::computeKind(
    				antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->ll->getText().at(0), antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->rr->getText().at(0)),
    			antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->min->bf, antlrcpp::downCast<Def_type_intervalContext *>(_localctx)->max->bf) );
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Base_type_varContext ------------------------------------------------------------------

FMLParser::Base_type_varContext::Base_type_varContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Primitive_typeContext* FMLParser::Base_type_varContext::primitive_type() {
  return getRuleContext<FMLParser::Primitive_typeContext>(0);
}

FMLParser::QualifiedNameIDContext* FMLParser::Base_type_varContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}


size_t FMLParser::Base_type_varContext::getRuleIndex() const {
  return FMLParser::RuleBase_type_var;
}


FMLParser::Base_type_varContext* FMLParser::base_type_var() {
  Base_type_varContext *_localctx = _tracker.createInstance<Base_type_varContext>(_ctx, getState());
  enterRule(_localctx, 244, FMLParser::RuleBase_type_var);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2802);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__58:
      case FMLParser::T__141:
      case FMLParser::T__142:
      case FMLParser::T__143:
      case FMLParser::T__144:
      case FMLParser::T__162:
      case FMLParser::T__163:
      case FMLParser::T__164:
      case FMLParser::T__165:
      case FMLParser::T__166:
      case FMLParser::T__167:
      case FMLParser::T__168:
      case FMLParser::T__169:
      case FMLParser::T__170:
      case FMLParser::T__171:
      case FMLParser::T__172:
      case FMLParser::T__173:
      case FMLParser::T__174:
      case FMLParser::T__175:
      case FMLParser::T__176:
      case FMLParser::T__177:
      case FMLParser::T__178:
      case FMLParser::T__179:
      case FMLParser::T__180:
      case FMLParser::T__181:
      case FMLParser::T__182:
      case FMLParser::T__183:
      case FMLParser::T__184:
      case FMLParser::T__185:
      case FMLParser::T__186:
      case FMLParser::T__187:
      case FMLParser::T__188:
      case FMLParser::T__199:
      case FMLParser::T__200:
      case FMLParser::T__201:
      case FMLParser::T__202:
      case FMLParser::T__203:
      case FMLParser::T__204:
      case FMLParser::T__205: {
        enterOuterAlt(_localctx, 1);
        setState(2796);
        antlrcpp::downCast<Base_type_varContext *>(_localctx)->pt = primitive_type();
         antlrcpp::downCast<Base_type_varContext *>(_localctx)->type =  antlrcpp::downCast<Base_type_varContext *>(_localctx)->pt->bts; 
        break;
      }

      case FMLParser::ID: {
        enterOuterAlt(_localctx, 2);
        setState(2799);
        antlrcpp::downCast<Base_type_varContext *>(_localctx)->id = qualifiedNameID();
         antlrcpp::downCast<Base_type_varContext *>(_localctx)->type =  sep::ParserUtil::getDataType(antlrcpp::downCast<Base_type_varContext *>(_localctx)->id->s, antlrcpp::downCast<Base_type_varContext *>(_localctx)->id->nb); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primitive_typeContext ------------------------------------------------------------------

FMLParser::Primitive_typeContext::Primitive_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Bit_field_sizeContext* FMLParser::Primitive_typeContext::bit_field_size() {
  return getRuleContext<FMLParser::Bit_field_sizeContext>(0);
}

FMLParser::Time_clock_typeContext* FMLParser::Primitive_typeContext::time_clock_type() {
  return getRuleContext<FMLParser::Time_clock_typeContext>(0);
}

FMLParser::Time_typeContext* FMLParser::Primitive_typeContext::time_type() {
  return getRuleContext<FMLParser::Time_typeContext>(0);
}

FMLParser::String_field_sizeContext* FMLParser::Primitive_typeContext::string_field_size() {
  return getRuleContext<FMLParser::String_field_sizeContext>(0);
}

tree::TerminalNode* FMLParser::Primitive_typeContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Primitive_typeContext::GT() {
  return getToken(FMLParser::GT, 0);
}

FMLParser::QualifiedNameIDContext* FMLParser::Primitive_typeContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}


size_t FMLParser::Primitive_typeContext::getRuleIndex() const {
  return FMLParser::RulePrimitive_type;
}


FMLParser::Primitive_typeContext* FMLParser::primitive_type() {
  Primitive_typeContext *_localctx = _tracker.createInstance<Primitive_typeContext>(_ctx, getState());
  enterRule(_localctx, 246, FMLParser::RulePrimitive_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2904);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__162:
      case FMLParser::T__163: {
        enterOuterAlt(_localctx, 1);
        setState(2804);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__162

        || _la == FMLParser::T__163)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::BOOLEAN; 
        break;
      }

      case FMLParser::T__164:
      case FMLParser::T__165: {
        enterOuterAlt(_localctx, 2);
        setState(2806);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__164

        || _la == FMLParser::T__165)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::INTEGER; 
        setState(2811);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx)) {
        case 1: {
          setState(2808);
          antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bfs = bit_field_size();
           antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::getTypeInteger( antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bfs->size ); 
          break;
        }

        default:
          break;
        }
        break;
      }

      case FMLParser::T__166:
      case FMLParser::T__167: {
        enterOuterAlt(_localctx, 3);
        setState(2813);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__166

        || _la == FMLParser::T__167)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::UINTEGER; 
        setState(2818);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx)) {
        case 1: {
          setState(2815);
          antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bfs = bit_field_size();
           antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::getTypeUInteger( antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bfs->size ); 
          break;
        }

        default:
          break;
        }
        break;
      }

      case FMLParser::T__168:
      case FMLParser::T__169: {
        enterOuterAlt(_localctx, 4);
        setState(2820);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__168

        || _la == FMLParser::T__169)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::POS_INTEGER; 
        setState(2825);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx)) {
        case 1: {
          setState(2822);
          antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bfs = bit_field_size();
           antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::getTypePosInteger( antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bfs->size ); 
          break;
        }

        default:
          break;
        }
        break;
      }

      case FMLParser::T__170:
      case FMLParser::T__171:
      case FMLParser::T__172:
      case FMLParser::T__173:
      case FMLParser::T__174:
      case FMLParser::T__175:
      case FMLParser::T__176:
      case FMLParser::T__177:
      case FMLParser::T__178:
      case FMLParser::T__179:
      case FMLParser::T__180:
      case FMLParser::T__181: {
        enterOuterAlt(_localctx, 5);
        setState(2845);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::T__170:
          case FMLParser::T__171: {
            setState(2827);
            _la = _input->LA(1);
            if (!(_la == FMLParser::T__170

            || _la == FMLParser::T__171)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
             antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::RATIONAL; 
            break;
          }

          case FMLParser::T__172:
          case FMLParser::T__173: {
            setState(2829);
            _la = _input->LA(1);
            if (!(_la == FMLParser::T__172

            || _la == FMLParser::T__173)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
             antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::URATIONAL; 
            break;
          }

          case FMLParser::T__174:
          case FMLParser::T__175: {
            setState(2831);
            _la = _input->LA(1);
            if (!(_la == FMLParser::T__174

            || _la == FMLParser::T__175)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
             antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::POS_RATIONAL; 
            break;
          }

          case FMLParser::T__176: {
            setState(2833);
            match(FMLParser::T__176);
             antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::FLOAT; 
            break;
          }

          case FMLParser::T__177: {
            setState(2835);
            match(FMLParser::T__177);
             antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::UFLOAT; 
            break;
          }

          case FMLParser::T__178: {
            setState(2837);
            match(FMLParser::T__178);
             antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::DOUBLE; 
            break;
          }

          case FMLParser::T__179: {
            setState(2839);
            match(FMLParser::T__179);
             antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::UDOUBLE; 
            break;
          }

          case FMLParser::T__180: {
            setState(2841);
            match(FMLParser::T__180);
             antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::REAL; 
            break;
          }

          case FMLParser::T__181: {
            setState(2843);
            match(FMLParser::T__181);
             antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::UREAL; 
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(2850);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx)) {
        case 1: {
          setState(2847);
          antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bfs = bit_field_size();

          		antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::newNumericTypeSpecifier(
          				_localctx->bts, antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bfs->size, sep::ExpressionConstant::INTEGER_ZERO);
          	  
          break;
        }

        default:
          break;
        }
        break;
      }

      case FMLParser::T__205: {
        enterOuterAlt(_localctx, 6);
        setState(2852);
        antlrcpp::downCast<Primitive_typeContext *>(_localctx)->ct = time_clock_type();
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  antlrcpp::downCast<Primitive_typeContext *>(_localctx)->ct->bts; 
        break;
      }

      case FMLParser::T__199:
      case FMLParser::T__200:
      case FMLParser::T__201:
      case FMLParser::T__202:
      case FMLParser::T__203:
      case FMLParser::T__204: {
        enterOuterAlt(_localctx, 7);
        setState(2855);
        antlrcpp::downCast<Primitive_typeContext *>(_localctx)->tt = time_type();
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  antlrcpp::downCast<Primitive_typeContext *>(_localctx)->tt->bts; 
        break;
      }

      case FMLParser::T__182: {
        enterOuterAlt(_localctx, 8);
        setState(2858);
        match(FMLParser::T__182);
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::CHAR; 
        setState(2863);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx)) {
        case 1: {
          setState(2860);
          antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bfs = bit_field_size();
           antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::newCharacter( "char", antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bfs->size ); 
          break;
        }

        default:
          break;
        }
        break;
      }

      case FMLParser::T__183: {
        enterOuterAlt(_localctx, 9);
        setState(2865);
        match(FMLParser::T__183);
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::CHARACTER; 
        setState(2870);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 347, _ctx)) {
        case 1: {
          setState(2867);
          antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bfs = bit_field_size();
           antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::newCharacter( "character", antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bfs->size ); 
          break;
        }

        default:
          break;
        }
        break;
      }

      case FMLParser::T__184: {
        enterOuterAlt(_localctx, 10);
        setState(2872);
        match(FMLParser::T__184);
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::STRING; 
        setState(2877);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx)) {
        case 1: {
          setState(2874);
          antlrcpp::downCast<Primitive_typeContext *>(_localctx)->sfs = string_field_size();
           antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::newString( antlrcpp::downCast<Primitive_typeContext *>(_localctx)->sfs->min , antlrcpp::downCast<Primitive_typeContext *>(_localctx)->sfs->max ); 
          break;
        }

        default:
          break;
        }
        break;
      }

      case FMLParser::T__185: {
        enterOuterAlt(_localctx, 11);
        setState(2879);
        match(FMLParser::T__185);
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::OPERATOR;   
        break;
      }

      case FMLParser::T__186: {
        enterOuterAlt(_localctx, 12);
        setState(2881);
        match(FMLParser::T__186);
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::AVMCODE;    
        break;
      }

      case FMLParser::T__141: {
        enterOuterAlt(_localctx, 13);
        setState(2883);
        match(FMLParser::T__141);
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::PORT;       
        break;
      }

      case FMLParser::T__144: {
        enterOuterAlt(_localctx, 14);
        setState(2885);
        match(FMLParser::T__144);
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::BUFFER;     
        break;
      }

      case FMLParser::T__143: {
        enterOuterAlt(_localctx, 15);
        setState(2887);
        match(FMLParser::T__143);
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::MESSAGE;    
        break;
      }

      case FMLParser::T__142: {
        enterOuterAlt(_localctx, 16);
        setState(2889);
        match(FMLParser::T__142);
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::SIGNAL;     
        break;
      }

      case FMLParser::T__187: {
        enterOuterAlt(_localctx, 17);
        setState(2891);
        match(FMLParser::T__187);
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::CONNECTOR; 
        break;
      }

      case FMLParser::T__58: {
        enterOuterAlt(_localctx, 18);
        setState(2893);
        match(FMLParser::T__58);
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::MACHINE;    
        setState(2900);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::LT_) {
          setState(2895);
          match(FMLParser::LT_);
          setState(2896);
          antlrcpp::downCast<Primitive_typeContext *>(_localctx)->id = qualifiedNameID();
          setState(2897);
          match(FMLParser::GT);

          		sep::BF machineT =
          				sep::ParserUtil::getExecutableMachine(antlrcpp::downCast<Primitive_typeContext *>(_localctx)->id->s, antlrcpp::downCast<Primitive_typeContext *>(_localctx)->id->nb);
          	  
        }
        break;
      }

      case FMLParser::T__188: {
        enterOuterAlt(_localctx, 19);
        setState(2902);
        match(FMLParser::T__188);
         antlrcpp::downCast<Primitive_typeContext *>(_localctx)->bts =  sep::TypeManager::UNIVERSAL; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bit_field_sizeContext ------------------------------------------------------------------

FMLParser::Bit_field_sizeContext::Bit_field_sizeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Bit_field_sizeContext::COLON() {
  return getToken(FMLParser::COLON, 0);
}

FMLParser::Integer_constantContext* FMLParser::Bit_field_sizeContext::integer_constant() {
  return getRuleContext<FMLParser::Integer_constantContext>(0);
}

tree::TerminalNode* FMLParser::Bit_field_sizeContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Bit_field_sizeContext::GT() {
  return getToken(FMLParser::GT, 0);
}


size_t FMLParser::Bit_field_sizeContext::getRuleIndex() const {
  return FMLParser::RuleBit_field_size;
}


FMLParser::Bit_field_sizeContext* FMLParser::bit_field_size() {
  Bit_field_sizeContext *_localctx = _tracker.createInstance<Bit_field_sizeContext>(_ctx, getState());
  enterRule(_localctx, 248, FMLParser::RuleBit_field_size);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2918);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::COLON: {
        enterOuterAlt(_localctx, 1);
        setState(2906);
        match(FMLParser::COLON);
        setState(2907);
        antlrcpp::downCast<Bit_field_sizeContext *>(_localctx)->n = integer_constant();
         antlrcpp::downCast<Bit_field_sizeContext *>(_localctx)->size =  antlrcpp::downCast<Bit_field_sizeContext *>(_localctx)->n->val; 
        break;
      }

      case FMLParser::LT_: {
        enterOuterAlt(_localctx, 2);
        setState(2910);
        match(FMLParser::LT_);
        setState(2912);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::T__140) {
          setState(2911);
          match(FMLParser::T__140);
        }
        setState(2914);
        antlrcpp::downCast<Bit_field_sizeContext *>(_localctx)->n = integer_constant();
        setState(2915);
        match(FMLParser::GT);
         antlrcpp::downCast<Bit_field_sizeContext *>(_localctx)->size =  antlrcpp::downCast<Bit_field_sizeContext *>(_localctx)->n->val; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- String_field_sizeContext ------------------------------------------------------------------

FMLParser::String_field_sizeContext::String_field_sizeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::String_field_sizeContext::COLON() {
  return getToken(FMLParser::COLON, 0);
}

FMLParser::Range_constantContext* FMLParser::String_field_sizeContext::range_constant() {
  return getRuleContext<FMLParser::Range_constantContext>(0);
}

tree::TerminalNode* FMLParser::String_field_sizeContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::String_field_sizeContext::GT() {
  return getToken(FMLParser::GT, 0);
}


size_t FMLParser::String_field_sizeContext::getRuleIndex() const {
  return FMLParser::RuleString_field_size;
}


FMLParser::String_field_sizeContext* FMLParser::string_field_size() {
  String_field_sizeContext *_localctx = _tracker.createInstance<String_field_sizeContext>(_ctx, getState());
  enterRule(_localctx, 250, FMLParser::RuleString_field_size);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2932);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::COLON: {
        enterOuterAlt(_localctx, 1);
        setState(2920);
        match(FMLParser::COLON);
        setState(2921);
        antlrcpp::downCast<String_field_sizeContext *>(_localctx)->rc = range_constant();
         antlrcpp::downCast<String_field_sizeContext *>(_localctx)->min =  antlrcpp::downCast<String_field_sizeContext *>(_localctx)->rc->min; antlrcpp::downCast<String_field_sizeContext *>(_localctx)->max =  antlrcpp::downCast<String_field_sizeContext *>(_localctx)->rc->max; 
        break;
      }

      case FMLParser::LT_: {
        enterOuterAlt(_localctx, 2);
        setState(2924);
        match(FMLParser::LT_);
        setState(2926);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::T__140) {
          setState(2925);
          match(FMLParser::T__140);
        }
        setState(2928);
        antlrcpp::downCast<String_field_sizeContext *>(_localctx)->rc = range_constant();
        setState(2929);
        match(FMLParser::GT);
         antlrcpp::downCast<String_field_sizeContext *>(_localctx)->min =  antlrcpp::downCast<String_field_sizeContext *>(_localctx)->rc->min; antlrcpp::downCast<String_field_sizeContext *>(_localctx)->max =  antlrcpp::downCast<String_field_sizeContext *>(_localctx)->rc->max; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Range_constantContext ------------------------------------------------------------------

FMLParser::Range_constantContext::Range_constantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::Integer_constantContext *> FMLParser::Range_constantContext::integer_constant() {
  return getRuleContexts<FMLParser::Integer_constantContext>();
}

FMLParser::Integer_constantContext* FMLParser::Range_constantContext::integer_constant(size_t i) {
  return getRuleContext<FMLParser::Integer_constantContext>(i);
}

tree::TerminalNode* FMLParser::Range_constantContext::COMMA() {
  return getToken(FMLParser::COMMA, 0);
}

tree::TerminalNode* FMLParser::Range_constantContext::DOTDOT() {
  return getToken(FMLParser::DOTDOT, 0);
}


size_t FMLParser::Range_constantContext::getRuleIndex() const {
  return FMLParser::RuleRange_constant;
}


FMLParser::Range_constantContext* FMLParser::range_constant() {
  Range_constantContext *_localctx = _tracker.createInstance<Range_constantContext>(_ctx, getState());
  enterRule(_localctx, 252, FMLParser::RuleRange_constant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2934);
    antlrcpp::downCast<Range_constantContext *>(_localctx)->n = integer_constant();
     antlrcpp::downCast<Range_constantContext *>(_localctx)->max =  antlrcpp::downCast<Range_constantContext *>(_localctx)->n->val; 
    setState(2940);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx)) {
    case 1: {
      setState(2936);
      _la = _input->LA(1);
      if (!(_la == FMLParser::COMMA

      || _la == FMLParser::DOTDOT)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2937);
      antlrcpp::downCast<Range_constantContext *>(_localctx)->n = integer_constant();
       antlrcpp::downCast<Range_constantContext *>(_localctx)->min =  _localctx->max; antlrcpp::downCast<Range_constantContext *>(_localctx)->max =  antlrcpp::downCast<Range_constantContext *>(_localctx)->n->val; 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- On_write_var_routine_defContext ------------------------------------------------------------------

FMLParser::On_write_var_routine_defContext::On_write_var_routine_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::On_write_var_routine_defContext::On_write_var_routine_defContext(ParserRuleContext *parent, size_t invokingState, sep::Variable * var)
  : ParserRuleContext(parent, invokingState) {
  this->var = var;
}

tree::TerminalNode* FMLParser::On_write_var_routine_defContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::On_write_var_routine_defContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

std::vector<FMLParser::Var_routine_defContext *> FMLParser::On_write_var_routine_defContext::var_routine_def() {
  return getRuleContexts<FMLParser::Var_routine_defContext>();
}

FMLParser::Var_routine_defContext* FMLParser::On_write_var_routine_defContext::var_routine_def(size_t i) {
  return getRuleContext<FMLParser::Var_routine_defContext>(i);
}


size_t FMLParser::On_write_var_routine_defContext::getRuleIndex() const {
  return FMLParser::RuleOn_write_var_routine_def;
}


FMLParser::On_write_var_routine_defContext* FMLParser::on_write_var_routine_def(sep::Variable * var) {
  On_write_var_routine_defContext *_localctx = _tracker.createInstance<On_write_var_routine_defContext>(_ctx, getState(), var);
  enterRule(_localctx, 254, FMLParser::RuleOn_write_var_routine_def);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2942);
    match(FMLParser::LCURLY);
    setState(2944); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2943);
      var_routine_def( var );
      setState(2946); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == FMLParser::T__189

    || _la == FMLParser::T__190);
    setState(2948);
    match(FMLParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Var_routine_defContext ------------------------------------------------------------------

FMLParser::Var_routine_defContext::Var_routine_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Var_routine_defContext::Var_routine_defContext(ParserRuleContext *parent, size_t invokingState, sep::Variable * var)
  : ParserRuleContext(parent, invokingState) {
  this->var = var;
}

tree::TerminalNode* FMLParser::Var_routine_defContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

FMLParser::Routine_single_paramContext* FMLParser::Var_routine_defContext::routine_single_param() {
  return getRuleContext<FMLParser::Routine_single_paramContext>(0);
}

FMLParser::Block_statementContext* FMLParser::Var_routine_defContext::block_statement() {
  return getRuleContext<FMLParser::Block_statementContext>(0);
}

FMLParser::ConditionalExpressionContext* FMLParser::Var_routine_defContext::conditionalExpression() {
  return getRuleContext<FMLParser::ConditionalExpressionContext>(0);
}


size_t FMLParser::Var_routine_defContext::getRuleIndex() const {
  return FMLParser::RuleVar_routine_def;
}


FMLParser::Var_routine_defContext* FMLParser::var_routine_def(sep::Variable * var) {
  Var_routine_defContext *_localctx = _tracker.createInstance<Var_routine_defContext>(_ctx, getState(), var);
  enterRule(_localctx, 256, FMLParser::RuleVar_routine_def);

  	sep::Routine * onWriteRoutine = nullptr;

  	sep::BehavioralPart * aBehavioralpart = var->getUniqContainerOfRoutines();

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2950);
    _la = _input->LA(1);
    if (!(_la == FMLParser::T__189

    || _la == FMLParser::T__190)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }

    		onWriteRoutine = new sep::Routine(var, "on_write");
    		var->setOnWriteRoutine(onWriteRoutine);
    		if( aBehavioralpart != nullptr )
    		{
    			aBehavioralpart->saveAnonymousInnerRoutine(onWriteRoutine);
    		}
    	  
    setState(2953);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LPAREN) {
      setState(2952);
      routine_single_param(onWriteRoutine, var->getType());
    }
    setState(2963);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LCURLY: {
        setState(2955);
        antlrcpp::downCast<Var_routine_defContext *>(_localctx)->bs = block_statement();
         onWriteRoutine->setCode(antlrcpp::downCast<Var_routine_defContext *>(_localctx)->bs->ac); 
        break;
      }

      case FMLParser::T__191: {
        setState(2958);
        match(FMLParser::T__191);
        setState(2959);
        antlrcpp::downCast<Var_routine_defContext *>(_localctx)->ce = conditionalExpression();
        setState(2960);
        match(FMLParser::SEMI);
         onWriteRoutine->setCode( NEW_STMT1(OP(GUARD), antlrcpp::downCast<Var_routine_defContext *>(_localctx)->ce->bf) ); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   _ctx->stop = _input->LT(-1);

    	SET_RULE_LOCATION( onWriteRoutine );

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Routine_single_paramContext ------------------------------------------------------------------

FMLParser::Routine_single_paramContext::Routine_single_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Routine_single_paramContext::Routine_single_paramContext(ParserRuleContext *parent, size_t invokingState, sep::Routine * routine, sep::BF dftType)
  : ParserRuleContext(parent, invokingState) {
  this->routine = routine;
  this->dftType = dftType;
}

tree::TerminalNode* FMLParser::Routine_single_paramContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Routine_single_paramContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

FMLParser::Type_varContext* FMLParser::Routine_single_paramContext::type_var() {
  return getRuleContext<FMLParser::Type_varContext>(0);
}

tree::TerminalNode* FMLParser::Routine_single_paramContext::ID() {
  return getToken(FMLParser::ID, 0);
}

FMLParser::Initial_valueContext* FMLParser::Routine_single_paramContext::initial_value() {
  return getRuleContext<FMLParser::Initial_valueContext>(0);
}


size_t FMLParser::Routine_single_paramContext::getRuleIndex() const {
  return FMLParser::RuleRoutine_single_param;
}


FMLParser::Routine_single_paramContext* FMLParser::routine_single_param(sep::Routine * routine,sep::BF dftType) {
  Routine_single_paramContext *_localctx = _tracker.createInstance<Routine_single_paramContext>(_ctx, getState(), routine, dftType);
  enterRule(_localctx, 258, FMLParser::RuleRoutine_single_param);

  	sep::BF paramT = dftType;
  	sep::BF value;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2965);
    match(FMLParser::LPAREN);
    setState(2971);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx)) {
    case 1: {
      setState(2966);
      antlrcpp::downCast<Routine_single_paramContext *>(_localctx)->tv = type_var();
       paramT = antlrcpp::downCast<Routine_single_paramContext *>(_localctx)->tv->type; 
      setState(2968);
      antlrcpp::downCast<Routine_single_paramContext *>(_localctx)->id = match(FMLParser::ID);
      break;
    }

    case 2: {
      setState(2970);
      antlrcpp::downCast<Routine_single_paramContext *>(_localctx)->id = match(FMLParser::ID);
      break;
    }

    default:
      break;
    }
    setState(2976);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::ASSIGN

    || _la == FMLParser::LPAREN) {
      setState(2973);
      antlrcpp::downCast<Routine_single_paramContext *>(_localctx)->iv = initial_value();
       value = antlrcpp::downCast<Routine_single_paramContext *>(_localctx)->iv->bf; 
    }

    		sep::Variable * variable = new sep::Variable( routine,
    				sep::Modifier::PROPERTY_INPUT_PARAMETER_MODIFIER,
    				paramT, antlrcpp::downCast<Routine_single_paramContext *>(_localctx)->id->getText(), value );
    				
    		routine->getPropertyPart().saveOwnedVariableParameter( variable );
    	  
    setState(2979);
    match(FMLParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_enumContext ------------------------------------------------------------------

FMLParser::Def_enumContext::Def_enumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_enumContext::Def_enumContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Def_enum_implContext* FMLParser::Def_enumContext::def_enum_impl() {
  return getRuleContext<FMLParser::Def_enum_implContext>(0);
}

tree::TerminalNode* FMLParser::Def_enumContext::ID() {
  return getToken(FMLParser::ID, 0);
}


size_t FMLParser::Def_enumContext::getRuleIndex() const {
  return FMLParser::RuleDef_enum;
}


FMLParser::Def_enumContext* FMLParser::def_enum(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Def_enumContext *_localctx = _tracker.createInstance<Def_enumContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 260, FMLParser::RuleDef_enum);

  	sep::BF superEnumType;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2981);
    match(FMLParser::T__192);
    setState(2982);
    antlrcpp::downCast<Def_enumContext *>(_localctx)->id = match(FMLParser::ID);
    setState(2983);
    def_enum_impl(_localctx->declPropertyPart, _localctx->mdfr, antlrcpp::downCast<Def_enumContext *>(_localctx)->id->getText());
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_enum_implContext ------------------------------------------------------------------

FMLParser::Def_enum_implContext::Def_enum_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_enum_implContext::Def_enum_implContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr, std::string tid)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
  this->tid = tid;
}

tree::TerminalNode* FMLParser::Def_enum_implContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Def_enum_implContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

std::vector<tree::TerminalNode *> FMLParser::Def_enum_implContext::ID() {
  return getTokens(FMLParser::ID);
}

tree::TerminalNode* FMLParser::Def_enum_implContext::ID(size_t i) {
  return getToken(FMLParser::ID, i);
}

std::vector<tree::TerminalNode *> FMLParser::Def_enum_implContext::ASSIGN() {
  return getTokens(FMLParser::ASSIGN);
}

tree::TerminalNode* FMLParser::Def_enum_implContext::ASSIGN(size_t i) {
  return getToken(FMLParser::ASSIGN, i);
}

std::vector<tree::TerminalNode *> FMLParser::Def_enum_implContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Def_enum_implContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}

std::vector<tree::TerminalNode *> FMLParser::Def_enum_implContext::StringLiteral() {
  return getTokens(FMLParser::StringLiteral);
}

tree::TerminalNode* FMLParser::Def_enum_implContext::StringLiteral(size_t i) {
  return getToken(FMLParser::StringLiteral, i);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Def_enum_implContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Def_enum_implContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}

tree::TerminalNode* FMLParser::Def_enum_implContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Def_enum_implContext::GT() {
  return getToken(FMLParser::GT, 0);
}


size_t FMLParser::Def_enum_implContext::getRuleIndex() const {
  return FMLParser::RuleDef_enum_impl;
}


FMLParser::Def_enum_implContext* FMLParser::def_enum_impl(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr,std::string tid) {
  Def_enum_implContext *_localctx = _tracker.createInstance<Def_enum_implContext>(_ctx, getState(), declPropertyPart, mdfr, tid);
  enterRule(_localctx, 262, FMLParser::RuleDef_enum_impl);

  	sep::Variable * var = nullptr;
  	sep::DataType * enumT;

  	const sep::DataType * superEnumDataType = nullptr;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3036);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LCURLY: {
        enterOuterAlt(_localctx, 1);
        setState(2985);
        match(FMLParser::LCURLY);
        setState(2986);
        antlrcpp::downCast<Def_enum_implContext *>(_localctx)->id = match(FMLParser::ID);

        			
        			sep::BF td( enumT = sep::DataType::newEnum(*( _localctx->declPropertyPart ), tid) );
        			enumT->setModifier( _localctx->mdfr );
        			_localctx->declPropertyPart->appendDataType( td );

        			enumT->saveVariable( var = new sep::Variable( enumT,
        					sep::Modifier::PROPERTY_UNDEFINED_MODIFIER,
        					sep::TypeManager::INTEGER, antlrcpp::downCast<Def_enum_implContext *>(_localctx)->id->getText() ) );
        		
        setState(2990);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::StringLiteral) {
          setState(2988);
          antlrcpp::downCast<Def_enum_implContext *>(_localctx)->sl = match(FMLParser::StringLiteral);
           var->setUnrestrictedName(antlrcpp::downCast<Def_enum_implContext *>(_localctx)->sl->getText()); 
        }
        setState(2996);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::ASSIGN) {
          setState(2992);
          match(FMLParser::ASSIGN);
          setState(2993);
          antlrcpp::downCast<Def_enum_implContext *>(_localctx)->e = expression();
           var->setValue(antlrcpp::downCast<Def_enum_implContext *>(_localctx)->e->bf); 
        }
        setState(3013);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FMLParser::COMMA) {
          setState(2998);
          match(FMLParser::COMMA);
          setState(2999);
          antlrcpp::downCast<Def_enum_implContext *>(_localctx)->id = match(FMLParser::ID);

          			enumT->saveVariable( var = new sep::Variable( enumT,
          					sep::Modifier::PROPERTY_UNDEFINED_MODIFIER,
          					sep::TypeManager::INTEGER, antlrcpp::downCast<Def_enum_implContext *>(_localctx)->id->getText() ) );
          		
          setState(3003);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::StringLiteral) {
            setState(3001);
            antlrcpp::downCast<Def_enum_implContext *>(_localctx)->sl = match(FMLParser::StringLiteral);
             var->setUnrestrictedName(antlrcpp::downCast<Def_enum_implContext *>(_localctx)->sl->getText()); 
          }
          setState(3009);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::ASSIGN) {
            setState(3005);
            match(FMLParser::ASSIGN);
            setState(3006);
            antlrcpp::downCast<Def_enum_implContext *>(_localctx)->e = expression();
             var->setValue(antlrcpp::downCast<Def_enum_implContext *>(_localctx)->e->bf); 
          }
          setState(3015);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3016);
        match(FMLParser::RCURLY);
        break;
      }

      case FMLParser::LT_: {
        enterOuterAlt(_localctx, 2);
        setState(3017);
        match(FMLParser::LT_);
        setState(3019);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::T__193) {
          setState(3018);
          match(FMLParser::T__193);
        }
        setState(3021);
        antlrcpp::downCast<Def_enum_implContext *>(_localctx)->superId = match(FMLParser::ID);

        	  		const sep::BF & superEnumType =
        	  				declPropertyPart->getSemEnumDataType(antlrcpp::downCast<Def_enum_implContext *>(_localctx)->superId->getText());
        			if( superEnumType.valid() )
        			{
        				superEnumDataType = superEnumType.to_ptr< sep::DataType >();
        			}
        			else
        			{
        				sep::ParserUtil::avm_syntax_error("def_sub_enum_impl:> "
        					"with super enum ID: " + superEnumType.str() , (antlrcpp::downCast<Def_enum_implContext *>(_localctx)->superId != nullptr ? antlrcpp::downCast<Def_enum_implContext *>(_localctx)->superId->getLine() : 0))
        							<< "Unfound super enum datatype specifier !"
        							<< sep::ParserUtil::SYNTAX_ERROR_EOL;
        			}
        			
        			sep::BF td( enumT = sep::DataType::newEnum(
        					*( _localctx->declPropertyPart ), tid, superEnumType) );
        			enumT->setModifier( _localctx->mdfr );
        			_localctx->declPropertyPart->appendDataType( td );
        	  	
        setState(3023);
        match(FMLParser::GT);
        setState(3024);
        match(FMLParser::LCURLY);
        setState(3025);
        antlrcpp::downCast<Def_enum_implContext *>(_localctx)->id = match(FMLParser::ID);

        			if( superEnumDataType != nullptr )
        			{
        				const sep::BF & foundSymbol =
        						superEnumDataType->getEnumSymbol( antlrcpp::downCast<Def_enum_implContext *>(_localctx)->id->getText() );
        			
        				if( foundSymbol.valid() )
        				{
        					enumT->appendVariable(foundSymbol);
        				}
        				else
        				{
        					sep::ParserUtil::avm_syntax_error("def_sub_enum_impl:> "
        						"enum symbol alias ID: " + antlrcpp::downCast<Def_enum_implContext *>(_localctx)->id->getText(), (antlrcpp::downCast<Def_enum_implContext *>(_localctx)->id != nullptr ? antlrcpp::downCast<Def_enum_implContext *>(_localctx)->id->getLine() : 0) )
        								<< "Unfound enum symbol in super enum datatype: "
        								<< superEnumDataType->toString()
        								<< sep::ParserUtil::SYNTAX_ERROR_EOL;
        				}
        			}
        		
        setState(3032);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FMLParser::COMMA) {
          setState(3027);
          match(FMLParser::COMMA);
          setState(3028);
          antlrcpp::downCast<Def_enum_implContext *>(_localctx)->id = match(FMLParser::ID);

          			if( superEnumDataType != nullptr )
          			{
          				const sep::BF & foundSymbol =
          						superEnumDataType->getEnumSymbol( antlrcpp::downCast<Def_enum_implContext *>(_localctx)->id->getText() );
          			
          				if( foundSymbol.valid() )
          				{
          					enumT->appendVariable(foundSymbol);
          				}
          				else
          				{
          					sep::ParserUtil::avm_syntax_error("def_sub_enum_impl:> "
          						"enum symbol alias ID: " + antlrcpp::downCast<Def_enum_implContext *>(_localctx)->id->getText(), (antlrcpp::downCast<Def_enum_implContext *>(_localctx)->id != nullptr ? antlrcpp::downCast<Def_enum_implContext *>(_localctx)->id->getLine() : 0) )
          								<< "Unfound enum symbol in super enum datatype: "
          								<< superEnumDataType->toString()
          								<< sep::ParserUtil::SYNTAX_ERROR_EOL;
          				}
          			}
          		
          setState(3034);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3035);
        match(FMLParser::RCURLY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_structContext ------------------------------------------------------------------

FMLParser::Def_structContext::Def_structContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_structContext::Def_structContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Def_class_structure_implContext* FMLParser::Def_structContext::def_class_structure_impl() {
  return getRuleContext<FMLParser::Def_class_structure_implContext>(0);
}

tree::TerminalNode* FMLParser::Def_structContext::ID() {
  return getToken(FMLParser::ID, 0);
}


size_t FMLParser::Def_structContext::getRuleIndex() const {
  return FMLParser::RuleDef_struct;
}


FMLParser::Def_structContext* FMLParser::def_struct(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Def_structContext *_localctx = _tracker.createInstance<Def_structContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 264, FMLParser::RuleDef_struct);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3038);
    _la = _input->LA(1);
    if (!(_la == FMLParser::T__194

    || _la == FMLParser::T__195)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3039);
    antlrcpp::downCast<Def_structContext *>(_localctx)->id = match(FMLParser::ID);
    setState(3040);
    def_class_structure_impl(_localctx->declPropertyPart, _localctx->mdfr, antlrcpp::downCast<Def_structContext *>(_localctx)->id->getText());
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_class_structure_implContext ------------------------------------------------------------------

FMLParser::Def_class_structure_implContext::Def_class_structure_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_class_structure_implContext::Def_class_structure_implContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr, std::string tid)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
  this->tid = tid;
}

tree::TerminalNode* FMLParser::Def_class_structure_implContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Def_class_structure_implContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

std::vector<FMLParser::Decl_variableContext *> FMLParser::Def_class_structure_implContext::decl_variable() {
  return getRuleContexts<FMLParser::Decl_variableContext>();
}

FMLParser::Decl_variableContext* FMLParser::Def_class_structure_implContext::decl_variable(size_t i) {
  return getRuleContext<FMLParser::Decl_variableContext>(i);
}

std::vector<FMLParser::Modifier_declarationContext *> FMLParser::Def_class_structure_implContext::modifier_declaration() {
  return getRuleContexts<FMLParser::Modifier_declarationContext>();
}

FMLParser::Modifier_declarationContext* FMLParser::Def_class_structure_implContext::modifier_declaration(size_t i) {
  return getRuleContext<FMLParser::Modifier_declarationContext>(i);
}


size_t FMLParser::Def_class_structure_implContext::getRuleIndex() const {
  return FMLParser::RuleDef_class_structure_impl;
}


FMLParser::Def_class_structure_implContext* FMLParser::def_class_structure_impl(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr,std::string tid) {
  Def_class_structure_implContext *_localctx = _tracker.createInstance<Def_class_structure_implContext>(_ctx, getState(), declPropertyPart, mdfr, tid);
  enterRule(_localctx, 266, FMLParser::RuleDef_class_structure_impl);

  	sep::DataType * structT;

  	sep::BF td( structT = sep::DataType::newStructure(*( _localctx->declPropertyPart ), tid) );
  	structT->setModifier( _localctx->mdfr );
  	_localctx->declPropertyPart->appendDataType( td );

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3042);
    match(FMLParser::LCURLY);
    setState(3050); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
       antlrcpp::downCast<Def_class_structure_implContext *>(_localctx)->mdfr =  sep::Modifier::PROPERTY_UNDEFINED_MODIFIER; 
      setState(3047);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3573530624) != 0)) {
        setState(3044);
        antlrcpp::downCast<Def_class_structure_implContext *>(_localctx)->m = modifier_declaration();
         antlrcpp::downCast<Def_class_structure_implContext *>(_localctx)->mdfr =  antlrcpp::downCast<Def_class_structure_implContext *>(_localctx)->m->mdfr; 
      }
      setState(3049);
      decl_variable( structT->getPropertyPart() , _localctx->mdfr );
      setState(3052); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 16458432512) != 0) || ((((_la - 158) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 158)) & 281474976710659) != 0));
    setState(3054);
    match(FMLParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_choiceContext ------------------------------------------------------------------

FMLParser::Def_choiceContext::Def_choiceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_choiceContext::Def_choiceContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Def_choice_implContext* FMLParser::Def_choiceContext::def_choice_impl() {
  return getRuleContext<FMLParser::Def_choice_implContext>(0);
}

tree::TerminalNode* FMLParser::Def_choiceContext::ID() {
  return getToken(FMLParser::ID, 0);
}


size_t FMLParser::Def_choiceContext::getRuleIndex() const {
  return FMLParser::RuleDef_choice;
}


FMLParser::Def_choiceContext* FMLParser::def_choice(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Def_choiceContext *_localctx = _tracker.createInstance<Def_choiceContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 268, FMLParser::RuleDef_choice);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3056);
    match(FMLParser::T__84);
    setState(3057);
    antlrcpp::downCast<Def_choiceContext *>(_localctx)->id = match(FMLParser::ID);
    setState(3058);
    def_choice_impl(declPropertyPart, _localctx->mdfr, antlrcpp::downCast<Def_choiceContext *>(_localctx)->id->getText());
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_choice_implContext ------------------------------------------------------------------

FMLParser::Def_choice_implContext::Def_choice_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_choice_implContext::Def_choice_implContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr, std::string tid)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
  this->tid = tid;
}

tree::TerminalNode* FMLParser::Def_choice_implContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Def_choice_implContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

std::vector<FMLParser::Decl_variableContext *> FMLParser::Def_choice_implContext::decl_variable() {
  return getRuleContexts<FMLParser::Decl_variableContext>();
}

FMLParser::Decl_variableContext* FMLParser::Def_choice_implContext::decl_variable(size_t i) {
  return getRuleContext<FMLParser::Decl_variableContext>(i);
}

std::vector<FMLParser::Modifier_declarationContext *> FMLParser::Def_choice_implContext::modifier_declaration() {
  return getRuleContexts<FMLParser::Modifier_declarationContext>();
}

FMLParser::Modifier_declarationContext* FMLParser::Def_choice_implContext::modifier_declaration(size_t i) {
  return getRuleContext<FMLParser::Modifier_declarationContext>(i);
}


size_t FMLParser::Def_choice_implContext::getRuleIndex() const {
  return FMLParser::RuleDef_choice_impl;
}


FMLParser::Def_choice_implContext* FMLParser::def_choice_impl(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr,std::string tid) {
  Def_choice_implContext *_localctx = _tracker.createInstance<Def_choice_implContext>(_ctx, getState(), declPropertyPart, mdfr, tid);
  enterRule(_localctx, 270, FMLParser::RuleDef_choice_impl);

  	sep::DataType * choiceT;

  	sep::BF td( choiceT = sep::DataType::newChoice(*( _localctx->declPropertyPart ), tid) );
  	choiceT->setModifier( _localctx->mdfr );
  	_localctx->declPropertyPart->appendDataType( td );

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3060);
    match(FMLParser::LCURLY);
    setState(3068); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
       antlrcpp::downCast<Def_choice_implContext *>(_localctx)->mdfr =  sep::Modifier::PROPERTY_UNDEFINED_MODIFIER; 
      setState(3065);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3573530624) != 0)) {
        setState(3062);
        antlrcpp::downCast<Def_choice_implContext *>(_localctx)->m = modifier_declaration();
         antlrcpp::downCast<Def_choice_implContext *>(_localctx)->mdfr =  antlrcpp::downCast<Def_choice_implContext *>(_localctx)->m->mdfr; 
      }
      setState(3067);
      decl_variable( choiceT->getPropertyPart() , _localctx->mdfr );
      setState(3070); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 16458432512) != 0) || ((((_la - 158) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 158)) & 281474976710659) != 0));
    setState(3072);
    match(FMLParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_unionContext ------------------------------------------------------------------

FMLParser::Def_unionContext::Def_unionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_unionContext::Def_unionContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Def_union_implContext* FMLParser::Def_unionContext::def_union_impl() {
  return getRuleContext<FMLParser::Def_union_implContext>(0);
}

tree::TerminalNode* FMLParser::Def_unionContext::ID() {
  return getToken(FMLParser::ID, 0);
}


size_t FMLParser::Def_unionContext::getRuleIndex() const {
  return FMLParser::RuleDef_union;
}


FMLParser::Def_unionContext* FMLParser::def_union(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Def_unionContext *_localctx = _tracker.createInstance<Def_unionContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 272, FMLParser::RuleDef_union);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3074);
    match(FMLParser::T__196);
    setState(3075);
    antlrcpp::downCast<Def_unionContext *>(_localctx)->id = match(FMLParser::ID);
    setState(3076);
    def_union_impl(_localctx->declPropertyPart , _localctx->mdfr, antlrcpp::downCast<Def_unionContext *>(_localctx)->id->getText());
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_union_implContext ------------------------------------------------------------------

FMLParser::Def_union_implContext::Def_union_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_union_implContext::Def_union_implContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr, std::string tid)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
  this->tid = tid;
}

tree::TerminalNode* FMLParser::Def_union_implContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Def_union_implContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

std::vector<FMLParser::Decl_variableContext *> FMLParser::Def_union_implContext::decl_variable() {
  return getRuleContexts<FMLParser::Decl_variableContext>();
}

FMLParser::Decl_variableContext* FMLParser::Def_union_implContext::decl_variable(size_t i) {
  return getRuleContext<FMLParser::Decl_variableContext>(i);
}

std::vector<FMLParser::Modifier_declarationContext *> FMLParser::Def_union_implContext::modifier_declaration() {
  return getRuleContexts<FMLParser::Modifier_declarationContext>();
}

FMLParser::Modifier_declarationContext* FMLParser::Def_union_implContext::modifier_declaration(size_t i) {
  return getRuleContext<FMLParser::Modifier_declarationContext>(i);
}


size_t FMLParser::Def_union_implContext::getRuleIndex() const {
  return FMLParser::RuleDef_union_impl;
}


FMLParser::Def_union_implContext* FMLParser::def_union_impl(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr,std::string tid) {
  Def_union_implContext *_localctx = _tracker.createInstance<Def_union_implContext>(_ctx, getState(), declPropertyPart, mdfr, tid);
  enterRule(_localctx, 274, FMLParser::RuleDef_union_impl);

  	sep::DataType * unionT;

  	sep::BF td(	unionT = sep::DataType::newUnion(*( _localctx->declPropertyPart ), tid) );
  	unionT->setModifier( _localctx->mdfr );
  	_localctx->declPropertyPart->appendDataType( td );

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3078);
    match(FMLParser::LCURLY);
    setState(3086); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      antlrcpp::downCast<Def_union_implContext *>(_localctx)->mdfr =  sep::Modifier::PROPERTY_UNDEFINED_MODIFIER; 
      setState(3083);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3573530624) != 0)) {
        setState(3080);
        antlrcpp::downCast<Def_union_implContext *>(_localctx)->m = modifier_declaration();
         antlrcpp::downCast<Def_union_implContext *>(_localctx)->mdfr =  antlrcpp::downCast<Def_union_implContext *>(_localctx)->m->mdfr; 
      }
      setState(3085);
      decl_variable( unionT->getPropertyPart() , _localctx->mdfr );
      setState(3088); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 16458432512) != 0) || ((((_la - 158) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 158)) & 281474976710659) != 0));
    setState(3090);
    match(FMLParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_typeContext ------------------------------------------------------------------

FMLParser::Def_typeContext::Def_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_typeContext::Def_typeContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

FMLParser::Def_type_implContext* FMLParser::Def_typeContext::def_type_impl() {
  return getRuleContext<FMLParser::Def_type_implContext>(0);
}


size_t FMLParser::Def_typeContext::getRuleIndex() const {
  return FMLParser::RuleDef_type;
}


FMLParser::Def_typeContext* FMLParser::def_type(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Def_typeContext *_localctx = _tracker.createInstance<Def_typeContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 276, FMLParser::RuleDef_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3092);
    match(FMLParser::T__197);
    setState(3093);
    def_type_impl( _localctx->declPropertyPart , _localctx->mdfr );
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_type_implContext ------------------------------------------------------------------

FMLParser::Def_type_implContext::Def_type_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_type_implContext::Def_type_implContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

std::vector<FMLParser::Def_type_atom_implContext *> FMLParser::Def_type_implContext::def_type_atom_impl() {
  return getRuleContexts<FMLParser::Def_type_atom_implContext>();
}

FMLParser::Def_type_atom_implContext* FMLParser::Def_type_implContext::def_type_atom_impl(size_t i) {
  return getRuleContext<FMLParser::Def_type_atom_implContext>(i);
}

tree::TerminalNode* FMLParser::Def_type_implContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Def_type_implContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}


size_t FMLParser::Def_type_implContext::getRuleIndex() const {
  return FMLParser::RuleDef_type_impl;
}


FMLParser::Def_type_implContext* FMLParser::def_type_impl(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Def_type_implContext *_localctx = _tracker.createInstance<Def_type_implContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 278, FMLParser::RuleDef_type_impl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3104);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__84:
      case FMLParser::T__192:
      case FMLParser::T__194:
      case FMLParser::T__195:
      case FMLParser::T__196:
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(3095);
        def_type_atom_impl( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::LCURLY: {
        enterOuterAlt(_localctx, 2);
        setState(3096);
        match(FMLParser::LCURLY);
        setState(3098); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(3097);
          def_type_atom_impl( _localctx->declPropertyPart , _localctx->mdfr );
          setState(3100); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == FMLParser::T__84 || ((((_la - 193) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 193)) & 29) != 0) || _la == FMLParser::ID);
        setState(3102);
        match(FMLParser::RCURLY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_type_atom_implContext ------------------------------------------------------------------

FMLParser::Def_type_atom_implContext::Def_type_atom_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_type_atom_implContext::Def_type_atom_implContext(ParserRuleContext *parent, size_t invokingState, sep::PropertyPart * declPropertyPart, sep::Modifier mdfr)
  : ParserRuleContext(parent, invokingState) {
  this->declPropertyPart = declPropertyPart;
  this->mdfr = mdfr;
}

tree::TerminalNode* FMLParser::Def_type_atom_implContext::ID() {
  return getToken(FMLParser::ID, 0);
}

tree::TerminalNode* FMLParser::Def_type_atom_implContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

FMLParser::Def_enum_implContext* FMLParser::Def_type_atom_implContext::def_enum_impl() {
  return getRuleContext<FMLParser::Def_enum_implContext>(0);
}

FMLParser::Def_union_implContext* FMLParser::Def_type_atom_implContext::def_union_impl() {
  return getRuleContext<FMLParser::Def_union_implContext>(0);
}

FMLParser::Def_choice_implContext* FMLParser::Def_type_atom_implContext::def_choice_impl() {
  return getRuleContext<FMLParser::Def_choice_implContext>(0);
}

FMLParser::Def_class_structure_implContext* FMLParser::Def_type_atom_implContext::def_class_structure_impl() {
  return getRuleContext<FMLParser::Def_class_structure_implContext>(0);
}

FMLParser::Base_type_varContext* FMLParser::Def_type_atom_implContext::base_type_var() {
  return getRuleContext<FMLParser::Base_type_varContext>(0);
}

FMLParser::Def_type_containerContext* FMLParser::Def_type_atom_implContext::def_type_container() {
  return getRuleContext<FMLParser::Def_type_containerContext>(0);
}

FMLParser::Def_type_intervalContext* FMLParser::Def_type_atom_implContext::def_type_interval() {
  return getRuleContext<FMLParser::Def_type_intervalContext>(0);
}

FMLParser::Def_typedef_constraintContext* FMLParser::Def_type_atom_implContext::def_typedef_constraint() {
  return getRuleContext<FMLParser::Def_typedef_constraintContext>(0);
}

FMLParser::Def_type_arrayContext* FMLParser::Def_type_atom_implContext::def_type_array() {
  return getRuleContext<FMLParser::Def_type_arrayContext>(0);
}

FMLParser::Def_enumContext* FMLParser::Def_type_atom_implContext::def_enum() {
  return getRuleContext<FMLParser::Def_enumContext>(0);
}

FMLParser::Def_unionContext* FMLParser::Def_type_atom_implContext::def_union() {
  return getRuleContext<FMLParser::Def_unionContext>(0);
}

FMLParser::Def_choiceContext* FMLParser::Def_type_atom_implContext::def_choice() {
  return getRuleContext<FMLParser::Def_choiceContext>(0);
}

FMLParser::Def_structContext* FMLParser::Def_type_atom_implContext::def_struct() {
  return getRuleContext<FMLParser::Def_structContext>(0);
}


size_t FMLParser::Def_type_atom_implContext::getRuleIndex() const {
  return FMLParser::RuleDef_type_atom_impl;
}


FMLParser::Def_type_atom_implContext* FMLParser::def_type_atom_impl(sep::PropertyPart * declPropertyPart,sep::Modifier mdfr) {
  Def_type_atom_implContext *_localctx = _tracker.createInstance<Def_type_atom_implContext>(_ctx, getState(), declPropertyPart, mdfr);
  enterRule(_localctx, 280, FMLParser::RuleDef_type_atom_impl);

  	sep::DataType * aliasT;
  	sep::BF type;
  	bool isTypedArray = false;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3143);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(3106);
        antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->id = match(FMLParser::ID);
        setState(3137);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::T__58:
          case FMLParser::T__141:
          case FMLParser::T__142:
          case FMLParser::T__143:
          case FMLParser::T__144:
          case FMLParser::T__162:
          case FMLParser::T__163:
          case FMLParser::T__164:
          case FMLParser::T__165:
          case FMLParser::T__166:
          case FMLParser::T__167:
          case FMLParser::T__168:
          case FMLParser::T__169:
          case FMLParser::T__170:
          case FMLParser::T__171:
          case FMLParser::T__172:
          case FMLParser::T__173:
          case FMLParser::T__174:
          case FMLParser::T__175:
          case FMLParser::T__176:
          case FMLParser::T__177:
          case FMLParser::T__178:
          case FMLParser::T__179:
          case FMLParser::T__180:
          case FMLParser::T__181:
          case FMLParser::T__182:
          case FMLParser::T__183:
          case FMLParser::T__184:
          case FMLParser::T__185:
          case FMLParser::T__186:
          case FMLParser::T__187:
          case FMLParser::T__188:
          case FMLParser::T__199:
          case FMLParser::T__200:
          case FMLParser::T__201:
          case FMLParser::T__202:
          case FMLParser::T__203:
          case FMLParser::T__204:
          case FMLParser::T__205:
          case FMLParser::ID: {
            setState(3107);
            antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->btv = base_type_var();
             type = antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->btv->type; 
            setState(3112);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == FMLParser::LBRACKET) {
              setState(3109);
              antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->dta = def_type_array( type , antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->id->getText() );
               type = antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->dta->type; isTypedArray = true; 
            }

            			if( isTypedArray )
            			{
            				aliasT = type.to_ptr< sep::DataType >();
            				aliasT->setModifier( _localctx->mdfr );
            				_localctx->declPropertyPart->appendDataType( type );
            			}
            			else
            			{
            				sep::BF td( aliasT = sep::DataType::newAlias(
            					*( _localctx->declPropertyPart ), antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->id->getText(), type) );
            				aliasT->setModifier( _localctx->mdfr  );
            				_localctx->declPropertyPart->appendDataType( td );
            			}
            		
            setState(3117);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case FMLParser::LCURLY: {
                setState(3115);
                def_typedef_constraint( aliasT );
                break;
              }

              case FMLParser::SEMI: {
                setState(3116);
                match(FMLParser::SEMI);
                break;
              }

              case FMLParser::EOF:
              case FMLParser::T__13:
              case FMLParser::T__14:
              case FMLParser::T__15:
              case FMLParser::T__16:
              case FMLParser::T__17:
              case FMLParser::T__18:
              case FMLParser::T__19:
              case FMLParser::T__20:
              case FMLParser::T__21:
              case FMLParser::T__22:
              case FMLParser::T__25:
              case FMLParser::T__27:
              case FMLParser::T__29:
              case FMLParser::T__30:
              case FMLParser::T__31:
              case FMLParser::T__32:
              case FMLParser::T__46:
              case FMLParser::T__51:
              case FMLParser::T__52:
              case FMLParser::T__53:
              case FMLParser::T__54:
              case FMLParser::T__55:
              case FMLParser::T__56:
              case FMLParser::T__63:
              case FMLParser::T__68:
              case FMLParser::T__69:
              case FMLParser::T__70:
              case FMLParser::T__73:
              case FMLParser::T__84:
              case FMLParser::T__105:
              case FMLParser::T__127:
              case FMLParser::T__128:
              case FMLParser::T__129:
              case FMLParser::T__130:
              case FMLParser::T__131:
              case FMLParser::T__132:
              case FMLParser::T__133:
              case FMLParser::T__134:
              case FMLParser::T__135:
              case FMLParser::T__136:
              case FMLParser::T__137:
              case FMLParser::T__138:
              case FMLParser::T__139:
              case FMLParser::T__141:
              case FMLParser::T__142:
              case FMLParser::T__143:
              case FMLParser::T__144:
              case FMLParser::T__155:
              case FMLParser::T__156:
              case FMLParser::T__157:
              case FMLParser::T__158:
              case FMLParser::T__192:
              case FMLParser::T__194:
              case FMLParser::T__195:
              case FMLParser::T__196:
              case FMLParser::T__197:
              case FMLParser::T__205:
              case FMLParser::T__206:
              case FMLParser::T__207:
              case FMLParser::T__208:
              case FMLParser::T__210:
              case FMLParser::T__216:
              case FMLParser::T__217:
              case FMLParser::RCURLY:
              case FMLParser::ID: {
                break;
              }

            default:
              break;
            }
            break;
          }

          case FMLParser::T__146:
          case FMLParser::T__147:
          case FMLParser::T__148:
          case FMLParser::T__149:
          case FMLParser::T__150:
          case FMLParser::T__151:
          case FMLParser::T__152:
          case FMLParser::T__153:
          case FMLParser::T__154:
          case FMLParser::T__159:
          case FMLParser::T__160: {
            setState(3119);
            antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->dtc = def_type_container( antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->id->getText() );

            	    aliasT = antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->dtc->type.to_ptr< sep::DataType >();
            		aliasT->setModifier( _localctx->mdfr );
            		_localctx->declPropertyPart->appendDataType( antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->dtc->type );
            	  
            setState(3123);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case FMLParser::LCURLY: {
                setState(3121);
                def_typedef_constraint( aliasT );
                break;
              }

              case FMLParser::SEMI: {
                setState(3122);
                match(FMLParser::SEMI);
                break;
              }

              case FMLParser::EOF:
              case FMLParser::T__13:
              case FMLParser::T__14:
              case FMLParser::T__15:
              case FMLParser::T__16:
              case FMLParser::T__17:
              case FMLParser::T__18:
              case FMLParser::T__19:
              case FMLParser::T__20:
              case FMLParser::T__21:
              case FMLParser::T__22:
              case FMLParser::T__25:
              case FMLParser::T__27:
              case FMLParser::T__29:
              case FMLParser::T__30:
              case FMLParser::T__31:
              case FMLParser::T__32:
              case FMLParser::T__46:
              case FMLParser::T__51:
              case FMLParser::T__52:
              case FMLParser::T__53:
              case FMLParser::T__54:
              case FMLParser::T__55:
              case FMLParser::T__56:
              case FMLParser::T__63:
              case FMLParser::T__68:
              case FMLParser::T__69:
              case FMLParser::T__70:
              case FMLParser::T__73:
              case FMLParser::T__84:
              case FMLParser::T__105:
              case FMLParser::T__127:
              case FMLParser::T__128:
              case FMLParser::T__129:
              case FMLParser::T__130:
              case FMLParser::T__131:
              case FMLParser::T__132:
              case FMLParser::T__133:
              case FMLParser::T__134:
              case FMLParser::T__135:
              case FMLParser::T__136:
              case FMLParser::T__137:
              case FMLParser::T__138:
              case FMLParser::T__139:
              case FMLParser::T__141:
              case FMLParser::T__142:
              case FMLParser::T__143:
              case FMLParser::T__144:
              case FMLParser::T__155:
              case FMLParser::T__156:
              case FMLParser::T__157:
              case FMLParser::T__158:
              case FMLParser::T__192:
              case FMLParser::T__194:
              case FMLParser::T__195:
              case FMLParser::T__196:
              case FMLParser::T__197:
              case FMLParser::T__205:
              case FMLParser::T__206:
              case FMLParser::T__207:
              case FMLParser::T__208:
              case FMLParser::T__210:
              case FMLParser::T__216:
              case FMLParser::T__217:
              case FMLParser::RCURLY:
              case FMLParser::ID: {
                break;
              }

            default:
              break;
            }
            break;
          }

          case FMLParser::T__161: {
            setState(3125);
            antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->dti = def_type_interval( antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->id->getText() );
            setState(3126);
            match(FMLParser::SEMI);

            	    aliasT = antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->dti->type.to_ptr< sep::DataType >();
            		aliasT->setModifier( _localctx->mdfr );
            		_localctx->declPropertyPart->appendDataType( antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->dti->type );
            	  
            break;
          }

          case FMLParser::T__192: {
            setState(3129);
            match(FMLParser::T__192);
            setState(3130);
            def_enum_impl(_localctx->declPropertyPart, _localctx->mdfr, antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->id->getText());
            break;
          }

          case FMLParser::T__196: {
            setState(3131);
            match(FMLParser::T__196);
            setState(3132);
            def_union_impl(_localctx->declPropertyPart, _localctx->mdfr, antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->id->getText());
            break;
          }

          case FMLParser::T__84: {
            setState(3133);
            match(FMLParser::T__84);
            setState(3134);
            def_choice_impl(_localctx->declPropertyPart, _localctx->mdfr, antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->id->getText());
            break;
          }

          case FMLParser::T__194:
          case FMLParser::T__195: {
            setState(3135);
            _la = _input->LA(1);
            if (!(_la == FMLParser::T__194

            || _la == FMLParser::T__195)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(3136);
            def_class_structure_impl(_localctx->declPropertyPart, _localctx->mdfr, antlrcpp::downCast<Def_type_atom_implContext *>(_localctx)->id->getText());
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case FMLParser::T__192: {
        enterOuterAlt(_localctx, 2);
        setState(3139);
        def_enum( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::T__196: {
        enterOuterAlt(_localctx, 3);
        setState(3140);
        def_union( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::T__84: {
        enterOuterAlt(_localctx, 4);
        setState(3141);
        def_choice( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

      case FMLParser::T__194:
      case FMLParser::T__195: {
        enterOuterAlt(_localctx, 5);
        setState(3142);
        def_struct( _localctx->declPropertyPart , _localctx->mdfr );
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_typedef_constraintContext ------------------------------------------------------------------

FMLParser::Def_typedef_constraintContext::Def_typedef_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_typedef_constraintContext::Def_typedef_constraintContext(ParserRuleContext *parent, size_t invokingState, sep::DataType * aliasT)
  : ParserRuleContext(parent, invokingState) {
  this->aliasT = aliasT;
}

tree::TerminalNode* FMLParser::Def_typedef_constraintContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Def_typedef_constraintContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

tree::TerminalNode* FMLParser::Def_typedef_constraintContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

FMLParser::Routine_single_paramContext* FMLParser::Def_typedef_constraintContext::routine_single_param() {
  return getRuleContext<FMLParser::Routine_single_paramContext>(0);
}

FMLParser::Block_statementContext* FMLParser::Def_typedef_constraintContext::block_statement() {
  return getRuleContext<FMLParser::Block_statementContext>(0);
}

FMLParser::ConditionalExpressionContext* FMLParser::Def_typedef_constraintContext::conditionalExpression() {
  return getRuleContext<FMLParser::ConditionalExpressionContext>(0);
}


size_t FMLParser::Def_typedef_constraintContext::getRuleIndex() const {
  return FMLParser::RuleDef_typedef_constraint;
}


FMLParser::Def_typedef_constraintContext* FMLParser::def_typedef_constraint(sep::DataType * aliasT) {
  Def_typedef_constraintContext *_localctx = _tracker.createInstance<Def_typedef_constraintContext>(_ctx, getState(), aliasT);
  enterRule(_localctx, 282, FMLParser::RuleDef_typedef_constraint);

  	sep::Routine * onConstraintRoutine = nullptr;

  	sep::BehavioralPart * aBehavioralpart = aliasT->getUniqBehaviorPart();

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3145);
    match(FMLParser::LCURLY);
    setState(3146);
    match(FMLParser::T__198);

    			onConstraintRoutine = new sep::Routine(aliasT, "constraint");
    			aliasT->setConstraintRoutine(onConstraintRoutine);
    			aBehavioralpart->saveAnonymousInnerRoutine(onConstraintRoutine);
    		
    setState(3149);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LPAREN) {
      setState(3148);
      routine_single_param(onConstraintRoutine, aliasT->getTypeSpecifier());
    }
    setState(3159);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LCURLY: {
        setState(3151);
        antlrcpp::downCast<Def_typedef_constraintContext *>(_localctx)->bs = block_statement();
         onConstraintRoutine->setCode( antlrcpp::downCast<Def_typedef_constraintContext *>(_localctx)->bs->ac ); 
        break;
      }

      case FMLParser::T__191: {
        setState(3154);
        match(FMLParser::T__191);
        setState(3155);
        antlrcpp::downCast<Def_typedef_constraintContext *>(_localctx)->ce = conditionalExpression();
        setState(3156);
        match(FMLParser::SEMI);
         onConstraintRoutine->setCode( NEW_STMT1(OP(GUARD), antlrcpp::downCast<Def_typedef_constraintContext *>(_localctx)->ce->bf) ); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3161);
    match(FMLParser::RCURLY);
   _ctx->stop = _input->LT(-1);

    	SET_RULE_LOCATION( onConstraintRoutine );

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Time_typeContext ------------------------------------------------------------------

FMLParser::Time_typeContext::Time_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Time_typeContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Time_typeContext::GT() {
  return getToken(FMLParser::GT, 0);
}

FMLParser::Time_type_domainContext* FMLParser::Time_typeContext::time_type_domain() {
  return getRuleContext<FMLParser::Time_type_domainContext>(0);
}

tree::TerminalNode* FMLParser::Time_typeContext::COMMA() {
  return getToken(FMLParser::COMMA, 0);
}

FMLParser::Integer_constantContext* FMLParser::Time_typeContext::integer_constant() {
  return getRuleContext<FMLParser::Integer_constantContext>(0);
}


size_t FMLParser::Time_typeContext::getRuleIndex() const {
  return FMLParser::RuleTime_type;
}


FMLParser::Time_typeContext* FMLParser::time_type() {
  Time_typeContext *_localctx = _tracker.createInstance<Time_typeContext>(_ctx, getState());
  enterRule(_localctx, 284, FMLParser::RuleTime_type);

  	int szT = 1;
  	sep::avm_type_specifier_kind_t tsk = sep::TYPE_TIME_SPECIFIER;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3175);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__199: {
        setState(3163);
        match(FMLParser::T__199);
         antlrcpp::downCast<Time_typeContext *>(_localctx)->bts =  sep::TypeManager::TIME;            
        break;
      }

      case FMLParser::T__200: {
        setState(3165);
        match(FMLParser::T__200);
         antlrcpp::downCast<Time_typeContext *>(_localctx)->bts =  sep::TypeManager::CONTINUOUS_TIME; 
        break;
      }

      case FMLParser::T__201: {
        setState(3167);
        match(FMLParser::T__201);
         antlrcpp::downCast<Time_typeContext *>(_localctx)->bts =  sep::TypeManager::CONTINUOUS_TIME; 
        break;
      }

      case FMLParser::T__202: {
        setState(3169);
        match(FMLParser::T__202);
         antlrcpp::downCast<Time_typeContext *>(_localctx)->bts =  sep::TypeManager::DENSE_TIME;      
        break;
      }

      case FMLParser::T__203: {
        setState(3171);
        match(FMLParser::T__203);
         antlrcpp::downCast<Time_typeContext *>(_localctx)->bts =  sep::TypeManager::DISCRETE_TIME;   
        break;
      }

      case FMLParser::T__204: {
        setState(3173);
        match(FMLParser::T__204);
         antlrcpp::downCast<Time_typeContext *>(_localctx)->bts =  sep::TypeManager::DISCRETE_TIME;   
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3193);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LT_: {
        setState(3177);
        match(FMLParser::LT_);
         tsk = _localctx->bts.getTypeSpecifierKind(); 
        setState(3179);
        antlrcpp::downCast<Time_typeContext *>(_localctx)->pt = time_type_domain();
         antlrcpp::downCast<Time_typeContext *>(_localctx)->bts =  antlrcpp::downCast<Time_typeContext *>(_localctx)->pt->type; 
        setState(3185);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::COMMA) {
          setState(3181);
          match(FMLParser::COMMA);
          setState(3182);
          antlrcpp::downCast<Time_typeContext *>(_localctx)->sz = integer_constant();
           szT = antlrcpp::downCast<Time_typeContext *>(_localctx)->sz->val; 
        }
        setState(3187);
        match(FMLParser::GT);
         antlrcpp::downCast<Time_typeContext *>(_localctx)->bts =  sep::TypeManager::newClockTime(tsk, _localctx->bts, szT); 
        break;
      }

      case FMLParser::T__164:
      case FMLParser::T__165:
      case FMLParser::T__166:
      case FMLParser::T__167:
      case FMLParser::T__170:
      case FMLParser::T__171:
      case FMLParser::T__172:
      case FMLParser::T__173:
      case FMLParser::T__174:
      case FMLParser::T__175:
      case FMLParser::T__176:
      case FMLParser::T__177:
      case FMLParser::T__178:
      case FMLParser::T__179:
      case FMLParser::T__180:
      case FMLParser::T__181: {
        setState(3190);
        antlrcpp::downCast<Time_typeContext *>(_localctx)->pt = time_type_domain();
         antlrcpp::downCast<Time_typeContext *>(_localctx)->bts =  sep::TypeManager::newClockTime(tsk, antlrcpp::downCast<Time_typeContext *>(_localctx)->pt->type, szT); 
        break;
      }

      case FMLParser::EOF:
      case FMLParser::T__13:
      case FMLParser::T__14:
      case FMLParser::T__15:
      case FMLParser::T__16:
      case FMLParser::T__17:
      case FMLParser::T__18:
      case FMLParser::T__19:
      case FMLParser::T__20:
      case FMLParser::T__21:
      case FMLParser::T__22:
      case FMLParser::T__25:
      case FMLParser::T__27:
      case FMLParser::T__29:
      case FMLParser::T__30:
      case FMLParser::T__31:
      case FMLParser::T__32:
      case FMLParser::T__46:
      case FMLParser::T__51:
      case FMLParser::T__52:
      case FMLParser::T__53:
      case FMLParser::T__54:
      case FMLParser::T__55:
      case FMLParser::T__56:
      case FMLParser::T__63:
      case FMLParser::T__68:
      case FMLParser::T__69:
      case FMLParser::T__70:
      case FMLParser::T__73:
      case FMLParser::T__84:
      case FMLParser::T__105:
      case FMLParser::T__127:
      case FMLParser::T__128:
      case FMLParser::T__129:
      case FMLParser::T__130:
      case FMLParser::T__131:
      case FMLParser::T__132:
      case FMLParser::T__133:
      case FMLParser::T__134:
      case FMLParser::T__135:
      case FMLParser::T__136:
      case FMLParser::T__137:
      case FMLParser::T__138:
      case FMLParser::T__139:
      case FMLParser::T__141:
      case FMLParser::T__142:
      case FMLParser::T__143:
      case FMLParser::T__144:
      case FMLParser::T__155:
      case FMLParser::T__156:
      case FMLParser::T__157:
      case FMLParser::T__158:
      case FMLParser::T__192:
      case FMLParser::T__194:
      case FMLParser::T__195:
      case FMLParser::T__196:
      case FMLParser::T__197:
      case FMLParser::T__205:
      case FMLParser::T__206:
      case FMLParser::T__207:
      case FMLParser::T__208:
      case FMLParser::T__210:
      case FMLParser::T__216:
      case FMLParser::T__217:
      case FMLParser::ASSIGN:
      case FMLParser::LPAREN:
      case FMLParser::RPAREN:
      case FMLParser::LCURLY:
      case FMLParser::RCURLY:
      case FMLParser::LBRACKET:
      case FMLParser::RBRACKET:
      case FMLParser::COLON:
      case FMLParser::COMMA:
      case FMLParser::SEMI:
      case FMLParser::GT:
      case FMLParser::BAND:
      case FMLParser::ID: {
        break;
      }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Time_clock_typeContext ------------------------------------------------------------------

FMLParser::Time_clock_typeContext::Time_clock_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Time_clock_typeContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Time_clock_typeContext::GT() {
  return getToken(FMLParser::GT, 0);
}

FMLParser::Time_type_domainContext* FMLParser::Time_clock_typeContext::time_type_domain() {
  return getRuleContext<FMLParser::Time_type_domainContext>(0);
}

tree::TerminalNode* FMLParser::Time_clock_typeContext::COMMA() {
  return getToken(FMLParser::COMMA, 0);
}

FMLParser::Integer_constantContext* FMLParser::Time_clock_typeContext::integer_constant() {
  return getRuleContext<FMLParser::Integer_constantContext>(0);
}


size_t FMLParser::Time_clock_typeContext::getRuleIndex() const {
  return FMLParser::RuleTime_clock_type;
}


FMLParser::Time_clock_typeContext* FMLParser::time_clock_type() {
  Time_clock_typeContext *_localctx = _tracker.createInstance<Time_clock_typeContext>(_ctx, getState());
  enterRule(_localctx, 286, FMLParser::RuleTime_clock_type);

  	int szT = 1;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3195);
    match(FMLParser::T__205);
     antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::CLOCK;    
    setState(3247);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LT_: {
        setState(3197);
        match(FMLParser::LT_);
        setState(3213);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::T__199: {
            setState(3198);
            match(FMLParser::T__199);
             antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::TIME;            
            break;
          }

          case FMLParser::T__200: {
            setState(3200);
            match(FMLParser::T__200);
             antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::CONTINUOUS_TIME; 
            break;
          }

          case FMLParser::T__201: {
            setState(3202);
            match(FMLParser::T__201);
             antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::CONTINUOUS_TIME; 
            break;
          }

          case FMLParser::T__202: {
            setState(3204);
            match(FMLParser::T__202);
             antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::DENSE_TIME;      
            break;
          }

          case FMLParser::T__203: {
            setState(3206);
            match(FMLParser::T__203);
             antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::DISCRETE_TIME;   
            break;
          }

          case FMLParser::T__204: {
            setState(3208);
            match(FMLParser::T__204);
             antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::DISCRETE_TIME;   
            break;
          }

          case FMLParser::T__164:
          case FMLParser::T__165:
          case FMLParser::T__166:
          case FMLParser::T__167:
          case FMLParser::T__170:
          case FMLParser::T__171:
          case FMLParser::T__172:
          case FMLParser::T__173:
          case FMLParser::T__174:
          case FMLParser::T__175:
          case FMLParser::T__176:
          case FMLParser::T__177:
          case FMLParser::T__178:
          case FMLParser::T__179:
          case FMLParser::T__180:
          case FMLParser::T__181: {
            setState(3210);
            antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->pt = time_type_domain();
             antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->pt->type;   
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(3219);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::COMMA) {
          setState(3215);
          match(FMLParser::COMMA);
          setState(3216);
          antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->sz = integer_constant();
           szT = antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->sz->val; 
        }
        setState(3221);
        match(FMLParser::GT);
         antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::newClockTime(sep::TYPE_CLOCK_SPECIFIER, _localctx->bts, szT); 
        break;
      }

      case FMLParser::T__164:
      case FMLParser::T__165:
      case FMLParser::T__166:
      case FMLParser::T__167:
      case FMLParser::T__170:
      case FMLParser::T__171:
      case FMLParser::T__172:
      case FMLParser::T__173:
      case FMLParser::T__174:
      case FMLParser::T__175:
      case FMLParser::T__176:
      case FMLParser::T__177:
      case FMLParser::T__178:
      case FMLParser::T__179:
      case FMLParser::T__180:
      case FMLParser::T__181:
      case FMLParser::T__199:
      case FMLParser::T__200:
      case FMLParser::T__201:
      case FMLParser::T__202:
      case FMLParser::T__203:
      case FMLParser::T__204: {
        setState(3238);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::T__199: {
            setState(3223);
            match(FMLParser::T__199);
             antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::TIME;            
            break;
          }

          case FMLParser::T__200: {
            setState(3225);
            match(FMLParser::T__200);
             antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::CONTINUOUS_TIME; 
            break;
          }

          case FMLParser::T__201: {
            setState(3227);
            match(FMLParser::T__201);
             antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::CONTINUOUS_TIME; 
            break;
          }

          case FMLParser::T__202: {
            setState(3229);
            match(FMLParser::T__202);
             antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::DENSE_TIME;      
            break;
          }

          case FMLParser::T__203: {
            setState(3231);
            match(FMLParser::T__203);
             antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::DISCRETE_TIME;   
            break;
          }

          case FMLParser::T__204: {
            setState(3233);
            match(FMLParser::T__204);
             antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::DISCRETE_TIME;   
            break;
          }

          case FMLParser::T__164:
          case FMLParser::T__165:
          case FMLParser::T__166:
          case FMLParser::T__167:
          case FMLParser::T__170:
          case FMLParser::T__171:
          case FMLParser::T__172:
          case FMLParser::T__173:
          case FMLParser::T__174:
          case FMLParser::T__175:
          case FMLParser::T__176:
          case FMLParser::T__177:
          case FMLParser::T__178:
          case FMLParser::T__179:
          case FMLParser::T__180:
          case FMLParser::T__181: {
            setState(3235);
            antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->pt = time_type_domain();
             antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->pt->type;   
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(3244);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 390, _ctx)) {
        case 1: {
          setState(3240);
          match(FMLParser::COMMA);
          setState(3241);
          antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->sz = integer_constant();
           szT = antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->sz->val; 
          break;
        }

        default:
          break;
        }
         antlrcpp::downCast<Time_clock_typeContext *>(_localctx)->bts =  sep::TypeManager::newClockTime(sep::TYPE_CLOCK_SPECIFIER, _localctx->bts, szT); 
        break;
      }

      case FMLParser::EOF:
      case FMLParser::T__13:
      case FMLParser::T__14:
      case FMLParser::T__15:
      case FMLParser::T__16:
      case FMLParser::T__17:
      case FMLParser::T__18:
      case FMLParser::T__19:
      case FMLParser::T__20:
      case FMLParser::T__21:
      case FMLParser::T__22:
      case FMLParser::T__25:
      case FMLParser::T__27:
      case FMLParser::T__29:
      case FMLParser::T__30:
      case FMLParser::T__31:
      case FMLParser::T__32:
      case FMLParser::T__46:
      case FMLParser::T__51:
      case FMLParser::T__52:
      case FMLParser::T__53:
      case FMLParser::T__54:
      case FMLParser::T__55:
      case FMLParser::T__56:
      case FMLParser::T__63:
      case FMLParser::T__68:
      case FMLParser::T__69:
      case FMLParser::T__70:
      case FMLParser::T__73:
      case FMLParser::T__84:
      case FMLParser::T__105:
      case FMLParser::T__127:
      case FMLParser::T__128:
      case FMLParser::T__129:
      case FMLParser::T__130:
      case FMLParser::T__131:
      case FMLParser::T__132:
      case FMLParser::T__133:
      case FMLParser::T__134:
      case FMLParser::T__135:
      case FMLParser::T__136:
      case FMLParser::T__137:
      case FMLParser::T__138:
      case FMLParser::T__139:
      case FMLParser::T__141:
      case FMLParser::T__142:
      case FMLParser::T__143:
      case FMLParser::T__144:
      case FMLParser::T__155:
      case FMLParser::T__156:
      case FMLParser::T__157:
      case FMLParser::T__158:
      case FMLParser::T__192:
      case FMLParser::T__194:
      case FMLParser::T__195:
      case FMLParser::T__196:
      case FMLParser::T__197:
      case FMLParser::T__205:
      case FMLParser::T__206:
      case FMLParser::T__207:
      case FMLParser::T__208:
      case FMLParser::T__210:
      case FMLParser::T__216:
      case FMLParser::T__217:
      case FMLParser::ASSIGN:
      case FMLParser::LPAREN:
      case FMLParser::RPAREN:
      case FMLParser::LCURLY:
      case FMLParser::RCURLY:
      case FMLParser::LBRACKET:
      case FMLParser::RBRACKET:
      case FMLParser::COLON:
      case FMLParser::COMMA:
      case FMLParser::SEMI:
      case FMLParser::GT:
      case FMLParser::BAND:
      case FMLParser::ID: {
        break;
      }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Time_type_domainContext ------------------------------------------------------------------

FMLParser::Time_type_domainContext::Time_type_domainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Time_type_domainContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Time_type_domainContext::GT() {
  return getToken(FMLParser::GT, 0);
}

FMLParser::Integer_constantContext* FMLParser::Time_type_domainContext::integer_constant() {
  return getRuleContext<FMLParser::Integer_constantContext>(0);
}


size_t FMLParser::Time_type_domainContext::getRuleIndex() const {
  return FMLParser::RuleTime_type_domain;
}


FMLParser::Time_type_domainContext* FMLParser::time_type_domain() {
  Time_type_domainContext *_localctx = _tracker.createInstance<Time_type_domainContext>(_ctx, getState());
  enterRule(_localctx, 288, FMLParser::RuleTime_type_domain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3285);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__164:
      case FMLParser::T__165: {
        enterOuterAlt(_localctx, 1);
        setState(3249);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__164

        || _la == FMLParser::T__165)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         antlrcpp::downCast<Time_type_domainContext *>(_localctx)->type =  sep::TypeManager::INTEGER; 
        setState(3256);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::LT_) {
          setState(3251);
          match(FMLParser::LT_);
          setState(3252);
          antlrcpp::downCast<Time_type_domainContext *>(_localctx)->n = integer_constant();
           antlrcpp::downCast<Time_type_domainContext *>(_localctx)->type =  sep::TypeManager::getTypeInteger( antlrcpp::downCast<Time_type_domainContext *>(_localctx)->n->val ); 
          setState(3254);
          match(FMLParser::GT);
        }
        break;
      }

      case FMLParser::T__166:
      case FMLParser::T__167: {
        enterOuterAlt(_localctx, 2);
        setState(3258);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__166

        || _la == FMLParser::T__167)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         antlrcpp::downCast<Time_type_domainContext *>(_localctx)->type =  sep::TypeManager::UINTEGER; 
        setState(3265);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::LT_) {
          setState(3260);
          match(FMLParser::LT_);
          setState(3261);
          antlrcpp::downCast<Time_type_domainContext *>(_localctx)->n = integer_constant();
           antlrcpp::downCast<Time_type_domainContext *>(_localctx)->type =  sep::TypeManager::getTypeUInteger( antlrcpp::downCast<Time_type_domainContext *>(_localctx)->n->val); 
          setState(3263);
          match(FMLParser::GT);
        }
        break;
      }

      case FMLParser::T__170:
      case FMLParser::T__171: {
        enterOuterAlt(_localctx, 3);
        setState(3267);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__170

        || _la == FMLParser::T__171)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         antlrcpp::downCast<Time_type_domainContext *>(_localctx)->type =  sep::TypeManager::RATIONAL;     
        break;
      }

      case FMLParser::T__172:
      case FMLParser::T__173: {
        enterOuterAlt(_localctx, 4);
        setState(3269);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__172

        || _la == FMLParser::T__173)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         antlrcpp::downCast<Time_type_domainContext *>(_localctx)->type =  sep::TypeManager::URATIONAL;    
        break;
      }

      case FMLParser::T__174:
      case FMLParser::T__175: {
        enterOuterAlt(_localctx, 5);
        setState(3271);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__174

        || _la == FMLParser::T__175)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         antlrcpp::downCast<Time_type_domainContext *>(_localctx)->type =  sep::TypeManager::POS_RATIONAL; 
        break;
      }

      case FMLParser::T__176: {
        enterOuterAlt(_localctx, 6);
        setState(3273);
        match(FMLParser::T__176);
         antlrcpp::downCast<Time_type_domainContext *>(_localctx)->type =  sep::TypeManager::FLOAT; 
        break;
      }

      case FMLParser::T__177: {
        enterOuterAlt(_localctx, 7);
        setState(3275);
        match(FMLParser::T__177);
         antlrcpp::downCast<Time_type_domainContext *>(_localctx)->type =  sep::TypeManager::UFLOAT; 
        break;
      }

      case FMLParser::T__178: {
        enterOuterAlt(_localctx, 8);
        setState(3277);
        match(FMLParser::T__178);
         antlrcpp::downCast<Time_type_domainContext *>(_localctx)->type =  sep::TypeManager::DOUBLE; 
        break;
      }

      case FMLParser::T__179: {
        enterOuterAlt(_localctx, 9);
        setState(3279);
        match(FMLParser::T__179);
         antlrcpp::downCast<Time_type_domainContext *>(_localctx)->type =  sep::TypeManager::UDOUBLE; 
        break;
      }

      case FMLParser::T__180: {
        enterOuterAlt(_localctx, 10);
        setState(3281);
        match(FMLParser::T__180);
         antlrcpp::downCast<Time_type_domainContext *>(_localctx)->type =  sep::TypeManager::REAL; 
        break;
      }

      case FMLParser::T__181: {
        enterOuterAlt(_localctx, 11);
        setState(3283);
        match(FMLParser::T__181);
         antlrcpp::downCast<Time_type_domainContext *>(_localctx)->type =  sep::TypeManager::UREAL; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_model_of_computationContext ------------------------------------------------------------------

FMLParser::Section_model_of_computationContext::Section_model_of_computationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_model_of_computationContext::Section_model_of_computationContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}


size_t FMLParser::Section_model_of_computationContext::getRuleIndex() const {
  return FMLParser::RuleSection_model_of_computation;
}


FMLParser::Section_model_of_computationContext* FMLParser::section_model_of_computation(sep::Machine * container) {
  Section_model_of_computationContext *_localctx = _tracker.createInstance<Section_model_of_computationContext>(_ctx, getState(), container);
  enterRule(_localctx, 290, FMLParser::RuleSection_model_of_computation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3287);
    match(FMLParser::T__206);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_routineContext ------------------------------------------------------------------

FMLParser::Section_routineContext::Section_routineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_routineContext::Section_routineContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

std::vector<FMLParser::Def_routine_modelContext *> FMLParser::Section_routineContext::def_routine_model() {
  return getRuleContexts<FMLParser::Def_routine_modelContext>();
}

FMLParser::Def_routine_modelContext* FMLParser::Section_routineContext::def_routine_model(size_t i) {
  return getRuleContext<FMLParser::Def_routine_modelContext>(i);
}


size_t FMLParser::Section_routineContext::getRuleIndex() const {
  return FMLParser::RuleSection_routine;
}


FMLParser::Section_routineContext* FMLParser::section_routine(sep::Machine * container) {
  Section_routineContext *_localctx = _tracker.createInstance<Section_routineContext>(_ctx, getState(), container);
  enterRule(_localctx, 292, FMLParser::RuleSection_routine);

  	sep::Modifier mdfr;

  	sep::Specifier spcfr( sep::Specifier::DESIGN_MODEL_KIND );

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3292);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__207: {
        setState(3289);
        match(FMLParser::T__207);
        break;
      }

      case FMLParser::T__208: {
        setState(3290);
        match(FMLParser::T__208);
         mdfr.setNatureMacro(); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3297);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::T__32 || _la == FMLParser::T__209) {
      setState(3294);
      def_routine_model( _localctx->container , mdfr , spcfr );
      setState(3299);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_routine_modelContext ------------------------------------------------------------------

FMLParser::Def_routine_modelContext::Def_routine_modelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_routine_modelContext::Def_routine_modelContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
  this->mdfr = mdfr;
  this->spcfr = spcfr;
}

FMLParser::Def_routine_model_implContext* FMLParser::Def_routine_modelContext::def_routine_model_impl() {
  return getRuleContext<FMLParser::Def_routine_model_implContext>(0);
}


size_t FMLParser::Def_routine_modelContext::getRuleIndex() const {
  return FMLParser::RuleDef_routine_model;
}


FMLParser::Def_routine_modelContext* FMLParser::def_routine_model(sep::Machine * container,sep::Modifier mdfr,sep::Specifier spcfr) {
  Def_routine_modelContext *_localctx = _tracker.createInstance<Def_routine_modelContext>(_ctx, getState(), container, mdfr, spcfr);
  enterRule(_localctx, 294, FMLParser::RuleDef_routine_model);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3306);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__209: {
        setState(3300);
        match(FMLParser::T__209);
        break;
      }

      case FMLParser::T__32: {
        setState(3301);
        match(FMLParser::T__32);
         _localctx->mdfr.setNatureMacro(); 
        setState(3304);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::T__209) {
          setState(3303);
          match(FMLParser::T__209);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3308);
    def_routine_model_impl( _localctx->container , _localctx->mdfr , _localctx->spcfr );
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_routine_model_implContext ------------------------------------------------------------------

FMLParser::Def_routine_model_implContext::Def_routine_model_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_routine_model_implContext::Def_routine_model_implContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
  this->mdfr = mdfr;
  this->spcfr = spcfr;
}

tree::TerminalNode* FMLParser::Def_routine_model_implContext::ID() {
  return getToken(FMLParser::ID, 0);
}

FMLParser::Block_statementContext* FMLParser::Def_routine_model_implContext::block_statement() {
  return getRuleContext<FMLParser::Block_statementContext>(0);
}

FMLParser::Def_routine_parametersContext* FMLParser::Def_routine_model_implContext::def_routine_parameters() {
  return getRuleContext<FMLParser::Def_routine_parametersContext>(0);
}

FMLParser::Def_routine_returnsContext* FMLParser::Def_routine_model_implContext::def_routine_returns() {
  return getRuleContext<FMLParser::Def_routine_returnsContext>(0);
}


size_t FMLParser::Def_routine_model_implContext::getRuleIndex() const {
  return FMLParser::RuleDef_routine_model_impl;
}


FMLParser::Def_routine_model_implContext* FMLParser::def_routine_model_impl(sep::Machine * container,sep::Modifier mdfr,sep::Specifier spcfr) {
  Def_routine_model_implContext *_localctx = _tracker.createInstance<Def_routine_model_implContext>(_ctx, getState(), container, mdfr, spcfr);
  enterRule(_localctx, 296, FMLParser::RuleDef_routine_model_impl);

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3310);
    antlrcpp::downCast<Def_routine_model_implContext *>(_localctx)->idToken = match(FMLParser::ID);

    		PUSH_CTX_CPR( sep::Routine::newDefine(
    				_localctx->container, _localctx->mdfr, _localctx->spcfr, antlrcpp::downCast<Def_routine_model_implContext *>(_localctx)->idToken->getText()) );

    		_localctx->container->saveOwnedElement( _CPR_ );
    	  
    setState(3313);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LPAREN) {
      setState(3312);
      def_routine_parameters( _CPR_ );
    }
    setState(3317);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__49

    || _la == FMLParser::T__50) {
      setState(3315);
      _la = _input->LA(1);
      if (!(_la == FMLParser::T__49

      || _la == FMLParser::T__50)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3316);
      def_routine_returns( _CPR_ );
    }
    setState(3319);
    antlrcpp::downCast<Def_routine_model_implContext *>(_localctx)->bs = block_statement();
     _CPR_->setCode(antlrcpp::downCast<Def_routine_model_implContext *>(_localctx)->bs->ac); 
   _ctx->stop = _input->LT(-1);

    	SET_RULE_LOCATION( _CPR_ );

    	POP_CTX;

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_routine_parametersContext ------------------------------------------------------------------

FMLParser::Def_routine_parametersContext::Def_routine_parametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_routine_parametersContext::Def_routine_parametersContext(ParserRuleContext *parent, size_t invokingState, sep::Routine * routine)
  : ParserRuleContext(parent, invokingState) {
  this->routine = routine;
}

tree::TerminalNode* FMLParser::Def_routine_parametersContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Def_routine_parametersContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

std::vector<FMLParser::Def_routine_param_atomContext *> FMLParser::Def_routine_parametersContext::def_routine_param_atom() {
  return getRuleContexts<FMLParser::Def_routine_param_atomContext>();
}

FMLParser::Def_routine_param_atomContext* FMLParser::Def_routine_parametersContext::def_routine_param_atom(size_t i) {
  return getRuleContext<FMLParser::Def_routine_param_atomContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Def_routine_parametersContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Def_routine_parametersContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Def_routine_parametersContext::getRuleIndex() const {
  return FMLParser::RuleDef_routine_parameters;
}


FMLParser::Def_routine_parametersContext* FMLParser::def_routine_parameters(sep::Routine * routine) {
  Def_routine_parametersContext *_localctx = _tracker.createInstance<Def_routine_parametersContext>(_ctx, getState(), routine);
  enterRule(_localctx, 298, FMLParser::RuleDef_routine_parameters);

  	std::size_t offset = 0;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3322);
    match(FMLParser::LPAREN);
    setState(3331);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 576460769469677568) != 0) || ((((_la - 142) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 142)) & -287948901175246865) != 0) || _la == FMLParser::T__205 || _la == FMLParser::ASSIGN_REF

    || _la == FMLParser::LTE || _la == FMLParser::BAND

    || _la == FMLParser::ID) {
      setState(3323);
      def_routine_param_atom( routine , offset++ );
      setState(3328);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FMLParser::COMMA) {
        setState(3324);
        match(FMLParser::COMMA);
        setState(3325);
        def_routine_param_atom( routine , offset++ );
        setState(3330);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(3333);
    match(FMLParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_routine_param_atomContext ------------------------------------------------------------------

FMLParser::Def_routine_param_atomContext::Def_routine_param_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_routine_param_atomContext::Def_routine_param_atomContext(ParserRuleContext *parent, size_t invokingState, sep::Routine * routine, std::size_t offset)
  : ParserRuleContext(parent, invokingState) {
  this->routine = routine;
  this->offset = offset;
}

FMLParser::Type_varContext* FMLParser::Def_routine_param_atomContext::type_var() {
  return getRuleContext<FMLParser::Type_varContext>(0);
}

tree::TerminalNode* FMLParser::Def_routine_param_atomContext::ID() {
  return getToken(FMLParser::ID, 0);
}

FMLParser::Initial_valueContext* FMLParser::Def_routine_param_atomContext::initial_value() {
  return getRuleContext<FMLParser::Initial_valueContext>(0);
}

FMLParser::Modifier_paramContext* FMLParser::Def_routine_param_atomContext::modifier_param() {
  return getRuleContext<FMLParser::Modifier_paramContext>(0);
}


size_t FMLParser::Def_routine_param_atomContext::getRuleIndex() const {
  return FMLParser::RuleDef_routine_param_atom;
}


FMLParser::Def_routine_param_atomContext* FMLParser::def_routine_param_atom(sep::Routine * routine,std::size_t offset) {
  Def_routine_param_atomContext *_localctx = _tracker.createInstance<Def_routine_param_atomContext>(_ctx, getState(), routine, offset);
  enterRule(_localctx, 300, FMLParser::RuleDef_routine_param_atom);

  	sep::BF variable;
  	sep::Variable * param;
  	sep::Machine * machine = routine->getContainerMachine();
  	sep::BF paramT = sep::TypeManager::UNIVERSAL;
  	sep::Modifier mdfr = sep::Modifier::PROPERTY_PARAMETER_MODIFIER;
  	mdfr.addFeatureKind( sep::Modifier::FEATURE_TRANSIENT_KIND );

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3346);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 404, _ctx)) {
    case 1: {
      setState(3338);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 17166254080) != 0) || _la == FMLParser::ASSIGN_REF

      || _la == FMLParser::LTE || _la == FMLParser::BAND) {
        setState(3335);
        antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->m = modifier_param();
         mdfr.override_ifdef( antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->m->mdfr ); 
      }
      setState(3340);
      antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->tv = type_var();
       paramT = antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->tv->type; 
      setState(3342);
      antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->id = match(FMLParser::ID);
      break;
    }

    case 2: {
      setState(3344);
      antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->id = match(FMLParser::ID);

      			variable = sep::ParserUtil::getVariable(antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->id->getText() , 1);
      			if( variable.invalid() )
      			{
      				sep::ParserUtil::avm_syntax_error(
      					"def_routine_param_atom:> " + routine->str(), (antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->id != nullptr ? antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->id->getLine() : 0) )
      						<< "Unfound machine param's variable < "
      						<< antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->id->getText()
      						<< " > in routine header < " << " >"
      						<< sep::ParserUtil::SYNTAX_ERROR_EOL;
      			}
      		
      break;
    }

    default:
      break;
    }

    	    if( variable.valid() )
    		{
    			param = new sep::Variable( routine,
    					sep::Modifier::PROPERTY_PARAMETER_MACRO_MODIFIER,
    					variable.to_ptr< sep::Variable >()->getType(),
    					antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->id->getText());
    					
    			routine->getPropertyPart().saveOwnedVariableParameter( param );
    					
    			param->setOwnedOffset( offset );
    			param->setBinding( variable );
    		}
    	    else
    		{
    			param = new sep::Variable(routine, mdfr, antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->tv->type, antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->id->getText());
    			param->setOwnedOffset( offset );

    			// Only for Routine design as PROTOTYPE a.k.a. primitive routine
    			if( routine->getSpecifier().isDesignPrototypeStatic() )
    			{
    				routine->getPropertyPart().appendVariableParameter(
    					machine->getPropertyPart().saveOwnedVariable( param ) );
    			}
    			else
    			{
    				routine->getPropertyPart().saveOwnedVariableParameter( param );
    			}
    		}
    	  
    setState(3352);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::ASSIGN

    || _la == FMLParser::LPAREN) {
      setState(3349);
      antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->iv = initial_value();
       param->setValue(antlrcpp::downCast<Def_routine_param_atomContext *>(_localctx)->iv->bf); 
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_routine_returnsContext ------------------------------------------------------------------

FMLParser::Def_routine_returnsContext::Def_routine_returnsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_routine_returnsContext::Def_routine_returnsContext(ParserRuleContext *parent, size_t invokingState, sep::Routine * routine)
  : ParserRuleContext(parent, invokingState) {
  this->routine = routine;
}

tree::TerminalNode* FMLParser::Def_routine_returnsContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

std::vector<FMLParser::Def_routine_returns_atomContext *> FMLParser::Def_routine_returnsContext::def_routine_returns_atom() {
  return getRuleContexts<FMLParser::Def_routine_returns_atomContext>();
}

FMLParser::Def_routine_returns_atomContext* FMLParser::Def_routine_returnsContext::def_routine_returns_atom(size_t i) {
  return getRuleContext<FMLParser::Def_routine_returns_atomContext>(i);
}

tree::TerminalNode* FMLParser::Def_routine_returnsContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> FMLParser::Def_routine_returnsContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Def_routine_returnsContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}

FMLParser::Type_varContext* FMLParser::Def_routine_returnsContext::type_var() {
  return getRuleContext<FMLParser::Type_varContext>(0);
}

FMLParser::Initial_valueContext* FMLParser::Def_routine_returnsContext::initial_value() {
  return getRuleContext<FMLParser::Initial_valueContext>(0);
}


size_t FMLParser::Def_routine_returnsContext::getRuleIndex() const {
  return FMLParser::RuleDef_routine_returns;
}


FMLParser::Def_routine_returnsContext* FMLParser::def_routine_returns(sep::Routine * routine) {
  Def_routine_returnsContext *_localctx = _tracker.createInstance<Def_routine_returnsContext>(_ctx, getState(), routine);
  enterRule(_localctx, 302, FMLParser::RuleDef_routine_returns);

  	sep::BF value;
  	std::size_t offset = 0;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3373);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LPAREN: {
        enterOuterAlt(_localctx, 1);
        setState(3354);
        match(FMLParser::LPAREN);
        setState(3355);
        def_routine_returns_atom( routine , offset++ );
        setState(3360);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FMLParser::COMMA) {
          setState(3356);
          match(FMLParser::COMMA);
          setState(3357);
          def_routine_returns_atom( routine , offset++ );
          setState(3362);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3363);
        match(FMLParser::RPAREN);
        break;
      }

      case FMLParser::T__58:
      case FMLParser::T__141:
      case FMLParser::T__142:
      case FMLParser::T__143:
      case FMLParser::T__144:
      case FMLParser::T__146:
      case FMLParser::T__147:
      case FMLParser::T__148:
      case FMLParser::T__149:
      case FMLParser::T__150:
      case FMLParser::T__151:
      case FMLParser::T__152:
      case FMLParser::T__153:
      case FMLParser::T__154:
      case FMLParser::T__159:
      case FMLParser::T__160:
      case FMLParser::T__161:
      case FMLParser::T__162:
      case FMLParser::T__163:
      case FMLParser::T__164:
      case FMLParser::T__165:
      case FMLParser::T__166:
      case FMLParser::T__167:
      case FMLParser::T__168:
      case FMLParser::T__169:
      case FMLParser::T__170:
      case FMLParser::T__171:
      case FMLParser::T__172:
      case FMLParser::T__173:
      case FMLParser::T__174:
      case FMLParser::T__175:
      case FMLParser::T__176:
      case FMLParser::T__177:
      case FMLParser::T__178:
      case FMLParser::T__179:
      case FMLParser::T__180:
      case FMLParser::T__181:
      case FMLParser::T__182:
      case FMLParser::T__183:
      case FMLParser::T__184:
      case FMLParser::T__185:
      case FMLParser::T__186:
      case FMLParser::T__187:
      case FMLParser::T__188:
      case FMLParser::T__199:
      case FMLParser::T__200:
      case FMLParser::T__201:
      case FMLParser::T__202:
      case FMLParser::T__203:
      case FMLParser::T__204:
      case FMLParser::T__205:
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 2);
        setState(3365);
        antlrcpp::downCast<Def_routine_returnsContext *>(_localctx)->tv = type_var();
        setState(3369);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::ASSIGN

        || _la == FMLParser::LPAREN) {
          setState(3366);
          antlrcpp::downCast<Def_routine_returnsContext *>(_localctx)->iv = initial_value();
           value = antlrcpp::downCast<Def_routine_returnsContext *>(_localctx)->iv->bf; 
        }

        		sep::Variable * variable = new sep::Variable( routine,
        				sep::Modifier::PROPERTY_RETURN_PARAMETER_MODIFIER,
        				antlrcpp::downCast<Def_routine_returnsContext *>(_localctx)->tv->type, "#0", value );
        				
        		routine->getPropertyPart().saveOwnedVariableReturn( variable );
        				
        		variable->setOwnedOffset( offset );
        	
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_routine_returns_atomContext ------------------------------------------------------------------

FMLParser::Def_routine_returns_atomContext::Def_routine_returns_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_routine_returns_atomContext::Def_routine_returns_atomContext(ParserRuleContext *parent, size_t invokingState, sep::Routine * routine, std::size_t offset)
  : ParserRuleContext(parent, invokingState) {
  this->routine = routine;
  this->offset = offset;
}

FMLParser::Type_varContext* FMLParser::Def_routine_returns_atomContext::type_var() {
  return getRuleContext<FMLParser::Type_varContext>(0);
}

tree::TerminalNode* FMLParser::Def_routine_returns_atomContext::ID() {
  return getToken(FMLParser::ID, 0);
}

FMLParser::Initial_valueContext* FMLParser::Def_routine_returns_atomContext::initial_value() {
  return getRuleContext<FMLParser::Initial_valueContext>(0);
}

FMLParser::Modifier_paramContext* FMLParser::Def_routine_returns_atomContext::modifier_param() {
  return getRuleContext<FMLParser::Modifier_paramContext>(0);
}


size_t FMLParser::Def_routine_returns_atomContext::getRuleIndex() const {
  return FMLParser::RuleDef_routine_returns_atom;
}


FMLParser::Def_routine_returns_atomContext* FMLParser::def_routine_returns_atom(sep::Routine * routine,std::size_t offset) {
  Def_routine_returns_atomContext *_localctx = _tracker.createInstance<Def_routine_returns_atomContext>(_ctx, getState(), routine, offset);
  enterRule(_localctx, 304, FMLParser::RuleDef_routine_returns_atom);

  	sep::BF variable;
  	sep::Variable * param;
  	sep::Machine * machine = routine->getContainerMachine();
  	sep::BF paramT = sep::TypeManager::UNIVERSAL;
  	sep::Modifier mdfr = sep::Modifier::PROPERTY_RETURN_PARAMETER_MODIFIER;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3386);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 410, _ctx)) {
    case 1: {
      setState(3378);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 17166254080) != 0) || _la == FMLParser::ASSIGN_REF

      || _la == FMLParser::LTE || _la == FMLParser::BAND) {
        setState(3375);
        antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->m = modifier_param();
         mdfr.override_ifdef( antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->m->mdfr ); 
      }
      setState(3380);
      antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->tv = type_var();
       paramT = antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->tv->type; 
      setState(3382);
      antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->id = match(FMLParser::ID);
      break;
    }

    case 2: {
      setState(3384);
      antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->id = match(FMLParser::ID);

      			variable = sep::ParserUtil::getVariable(antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->id->getText() , 1);
      			if( variable.invalid() )
      			{
      				sep::ParserUtil::avm_syntax_error(
      					"def_routine_returns_atom:> " + routine->str(), (antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->id != nullptr ? antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->id->getLine() : 0) )
      						<< "Unfound machine return's variable < "
      						<< antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->id->getText()
      						<< " > in routine header < " << " >"
      						<< sep::ParserUtil::SYNTAX_ERROR_EOL;
      			}
      		
      break;
    }

    default:
      break;
    }

    	    if( variable.valid() )
    		{
    			param = new sep::Variable( routine,
    					sep::Modifier::PROPERTY_RETURN_PARAMETER_MACRO_MODIFIER,
    					variable.to_ptr< sep::Variable >()->getType(),
    					antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->id->getText());
    					
    			routine->getPropertyPart().saveOwnedVariableReturn( param );

    			param->setOwnedOffset( offset );
    			param->setBinding( variable );
    		}
    	    else
    		{
    			param = new sep::Variable(routine, mdfr, antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->tv->type, antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->id->getText());
    			param->setOwnedOffset( offset );

    			// Only for Routine design as PROTOTYPE a.k.a. primitive routine
    			if( routine->getSpecifier().isDesignPrototypeStatic() )
    			{
    				routine->getPropertyPart().appendVariableReturn(
    					machine->getPropertyPart().saveOwnedVariable( param ));
    			}
    			else
    			{
    				routine->getPropertyPart().saveOwnedVariableReturn( param );
    			}
    		}
    	  
    setState(3392);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::ASSIGN

    || _la == FMLParser::LPAREN) {
      setState(3389);
      antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->iv = initial_value();
       param->setValue(antlrcpp::downCast<Def_routine_returns_atomContext *>(_localctx)->iv->bf); 
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_model_of_executionContext ------------------------------------------------------------------

FMLParser::Section_model_of_executionContext::Section_model_of_executionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_model_of_executionContext::Section_model_of_executionContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

std::vector<FMLParser::Def_moe_primitiveContext *> FMLParser::Section_model_of_executionContext::def_moe_primitive() {
  return getRuleContexts<FMLParser::Def_moe_primitiveContext>();
}

FMLParser::Def_moe_primitiveContext* FMLParser::Section_model_of_executionContext::def_moe_primitive(size_t i) {
  return getRuleContext<FMLParser::Def_moe_primitiveContext>(i);
}


size_t FMLParser::Section_model_of_executionContext::getRuleIndex() const {
  return FMLParser::RuleSection_model_of_execution;
}


FMLParser::Section_model_of_executionContext* FMLParser::section_model_of_execution(sep::Machine * container) {
  Section_model_of_executionContext *_localctx = _tracker.createInstance<Section_model_of_executionContext>(_ctx, getState(), container);
  enterRule(_localctx, 306, FMLParser::RuleSection_model_of_execution);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3394);
    match(FMLParser::T__210);
    setState(3398);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::T__61

    || _la == FMLParser::T__62 || ((((_la - 117) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 117)) & 2047) != 0) || ((((_la - 210) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 210)) & 125) != 0)) {
      setState(3395);
      def_moe_primitive( _localctx->container );
      setState(3400);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_moe_primitiveContext ------------------------------------------------------------------

FMLParser::Def_moe_primitiveContext::Def_moe_primitiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_moe_primitiveContext::Def_moe_primitiveContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
}

FMLParser::Def_routine_seqContext* FMLParser::Def_moe_primitiveContext::def_routine_seq() {
  return getRuleContext<FMLParser::Def_routine_seqContext>(0);
}

FMLParser::Def_routine_model_implContext* FMLParser::Def_moe_primitiveContext::def_routine_model_impl() {
  return getRuleContext<FMLParser::Def_routine_model_implContext>(0);
}


size_t FMLParser::Def_moe_primitiveContext::getRuleIndex() const {
  return FMLParser::RuleDef_moe_primitive;
}


FMLParser::Def_moe_primitiveContext* FMLParser::def_moe_primitive(sep::Machine * container) {
  Def_moe_primitiveContext *_localctx = _tracker.createInstance<Def_moe_primitiveContext>(_ctx, getState(), container);
  enterRule(_localctx, 308, FMLParser::RuleDef_moe_primitive);

  	sep::BehavioralPart * theBehavior = _localctx->container->getUniqBehaviorPart();

  	sep::Modifier mdfr;

  	sep::Specifier spcfr( sep::Specifier::DESIGN_MODEL_KIND );


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3440);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__61: {
        enterOuterAlt(_localctx, 1);
        setState(3401);
        match(FMLParser::T__61);
        setState(3402);
        def_routine_seq( &( theBehavior->getOnCreateRoutine()   ) );
        break;
      }

      case FMLParser::T__116: {
        enterOuterAlt(_localctx, 2);
        setState(3403);
        match(FMLParser::T__116);
        setState(3404);
        def_routine_seq( &( theBehavior->getOnInitRoutine()     ) );
        break;
      }

      case FMLParser::T__126: {
        enterOuterAlt(_localctx, 3);
        setState(3405);
        match(FMLParser::T__126);
        setState(3406);
        def_routine_seq( &( theBehavior->getOnFinalRoutine()    ) );
        break;
      }

      case FMLParser::T__62: {
        enterOuterAlt(_localctx, 4);
        setState(3407);
        match(FMLParser::T__62);
        setState(3408);
        def_routine_seq( &( theBehavior->getOnStartRoutine()    ) );
        break;
      }

      case FMLParser::T__211: {
        enterOuterAlt(_localctx, 5);
        setState(3409);
        match(FMLParser::T__211);
        setState(3410);
        def_routine_seq( &( theBehavior->getOnStopRoutine()     ) );
        break;
      }

      case FMLParser::T__117: {
        enterOuterAlt(_localctx, 6);
        setState(3411);
        match(FMLParser::T__117);
        setState(3412);
        def_routine_seq( &( theBehavior->getOnIEnableRoutine()  ) );
        break;
      }

      case FMLParser::T__118: {
        enterOuterAlt(_localctx, 7);
        setState(3413);
        match(FMLParser::T__118);
        setState(3414);
        def_routine_seq( &( theBehavior->getOnEnableRoutine()   ) );
        break;
      }

      case FMLParser::T__119: {
        enterOuterAlt(_localctx, 8);
        setState(3415);
        match(FMLParser::T__119);
        setState(3416);
        def_routine_seq( &( theBehavior->getOnIDisableRoutine() ) );
        break;
      }

      case FMLParser::T__120: {
        enterOuterAlt(_localctx, 9);
        setState(3417);
        match(FMLParser::T__120);
        setState(3418);
        def_routine_seq( &( theBehavior->getOnDisableRoutine()  ) );
        break;
      }

      case FMLParser::T__121: {
        enterOuterAlt(_localctx, 10);
        setState(3419);
        match(FMLParser::T__121);
        setState(3420);
        def_routine_seq( &( theBehavior->getOnIAbortRoutine()   ) );
        break;
      }

      case FMLParser::T__122: {
        enterOuterAlt(_localctx, 11);
        setState(3421);
        match(FMLParser::T__122);
        setState(3422);
        def_routine_seq( &( theBehavior->getOnAbortRoutine()    ) );
        break;
      }

      case FMLParser::T__123: {
        enterOuterAlt(_localctx, 12);
        setState(3423);
        match(FMLParser::T__123);
        setState(3424);
        def_routine_seq( &( theBehavior->getOnIRunRoutine()     ) );
        break;
      }

      case FMLParser::T__124: {
        enterOuterAlt(_localctx, 13);
        setState(3425);
        match(FMLParser::T__124);
        setState(3426);
        def_routine_seq( &( theBehavior->getOnRunRoutine()      ) );
        break;
      }

      case FMLParser::T__125: {
        enterOuterAlt(_localctx, 14);
        setState(3427);
        match(FMLParser::T__125);
        setState(3428);
        def_routine_seq( &( theBehavior->getOnRtcRoutine()      ) );
        break;
      }

      case FMLParser::T__212: {
        enterOuterAlt(_localctx, 15);
        setState(3429);
        match(FMLParser::T__212);
        setState(3430);
        def_routine_seq( &( theBehavior->getOnFinalRoutine()    ) );
        break;
      }

      case FMLParser::T__213: {
        enterOuterAlt(_localctx, 16);
        setState(3431);
        match(FMLParser::T__213);
        setState(3432);
        def_routine_seq( &( theBehavior->getOnConcurrencyRoutine() ) );
        break;
      }

      case FMLParser::T__214: {
        enterOuterAlt(_localctx, 17);
        setState(3433);
        match(FMLParser::T__214);
        setState(3434);
        def_routine_seq( &( theBehavior->getOnScheduleRoutine() ) );
        break;
      }

      case FMLParser::T__215: {
        enterOuterAlt(_localctx, 18);
        setState(3435);
        match(FMLParser::T__215);
         theBehavior->setUserDefinedSchedule(); 
        						_localctx->container->getwSpecifier().setFeatureUserDefinedSchedule(); 
        setState(3437);
        def_routine_seq( &( theBehavior->getOnScheduleRoutine() ) );
        break;
      }

      case FMLParser::T__209: {
        enterOuterAlt(_localctx, 19);
        setState(3438);
        match(FMLParser::T__209);
        setState(3439);
        def_routine_model_impl( _localctx->container , mdfr , spcfr );
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Def_routine_seqContext ------------------------------------------------------------------

FMLParser::Def_routine_seqContext::Def_routine_seqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Def_routine_seqContext::Def_routine_seqContext(ParserRuleContext *parent, size_t invokingState, sep::Routine * routine)
  : ParserRuleContext(parent, invokingState) {
  this->routine = routine;
}

FMLParser::Block_statementContext* FMLParser::Def_routine_seqContext::block_statement() {
  return getRuleContext<FMLParser::Block_statementContext>(0);
}

FMLParser::Def_routine_parametersContext* FMLParser::Def_routine_seqContext::def_routine_parameters() {
  return getRuleContext<FMLParser::Def_routine_parametersContext>(0);
}

FMLParser::Def_routine_returnsContext* FMLParser::Def_routine_seqContext::def_routine_returns() {
  return getRuleContext<FMLParser::Def_routine_returnsContext>(0);
}


size_t FMLParser::Def_routine_seqContext::getRuleIndex() const {
  return FMLParser::RuleDef_routine_seq;
}


FMLParser::Def_routine_seqContext* FMLParser::def_routine_seq(sep::Routine * routine) {
  Def_routine_seqContext *_localctx = _tracker.createInstance<Def_routine_seqContext>(_ctx, getState(), routine);
  enterRule(_localctx, 310, FMLParser::RuleDef_routine_seq);

  	PUSH_CTX_CPR( routine );

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3443);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LPAREN) {
      setState(3442);
      def_routine_parameters( routine );
    }
    setState(3447);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__49

    || _la == FMLParser::T__50) {
      setState(3445);
      _la = _input->LA(1);
      if (!(_la == FMLParser::T__49

      || _la == FMLParser::T__50)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3446);
      def_routine_returns( routine );
    }
    setState(3449);
    antlrcpp::downCast<Def_routine_seqContext *>(_localctx)->bs = block_statement();
     routine->seqCode(antlrcpp::downCast<Def_routine_seqContext *>(_localctx)->bs->ac); 
   _ctx->stop = _input->LT(-1);

    	SET_RULE_LOCATION( _CPR_ );

    	POP_CTX;;

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Section_model_of_interactionContext ------------------------------------------------------------------

FMLParser::Section_model_of_interactionContext::Section_model_of_interactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Section_model_of_interactionContext::Section_model_of_interactionContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
}

std::vector<FMLParser::Com_connectorContext *> FMLParser::Section_model_of_interactionContext::com_connector() {
  return getRuleContexts<FMLParser::Com_connectorContext>();
}

FMLParser::Com_connectorContext* FMLParser::Section_model_of_interactionContext::com_connector(size_t i) {
  return getRuleContext<FMLParser::Com_connectorContext>(i);
}


size_t FMLParser::Section_model_of_interactionContext::getRuleIndex() const {
  return FMLParser::RuleSection_model_of_interaction;
}


FMLParser::Section_model_of_interactionContext* FMLParser::section_model_of_interaction(sep::Machine * machine) {
  Section_model_of_interactionContext *_localctx = _tracker.createInstance<Section_model_of_interactionContext>(_ctx, getState(), machine);
  enterRule(_localctx, 312, FMLParser::RuleSection_model_of_interaction);

  	sep::InteractionPart * theInteraction = machine->getUniqInteraction();

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3452);
    _la = _input->LA(1);
    if (!(_la == FMLParser::T__216

    || _la == FMLParser::T__217)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3456);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 188) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 188)) & 824633720833) != 0)) {
      setState(3453);
      com_connector( machine, theInteraction );
      setState(3458);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   _ctx->stop = _input->LT(-1);

    	SET_RULE_LOCATION(theInteraction);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Com_protocolContext ------------------------------------------------------------------

FMLParser::Com_protocolContext::Com_protocolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Com_protocolContext::Com_protocolContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine, sep::ComProtocol * cp)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
  this->cp = cp;
}

FMLParser::Buffer_comContext* FMLParser::Com_protocolContext::buffer_com() {
  return getRuleContext<FMLParser::Buffer_comContext>(0);
}


size_t FMLParser::Com_protocolContext::getRuleIndex() const {
  return FMLParser::RuleCom_protocol;
}


FMLParser::Com_protocolContext* FMLParser::com_protocol(sep::Machine * machine,sep::ComProtocol * cp) {
  Com_protocolContext *_localctx = _tracker.createInstance<Com_protocolContext>(_ctx, getState(), machine, cp);
  enterRule(_localctx, 314, FMLParser::RuleCom_protocol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3478);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__218: {
        enterOuterAlt(_localctx, 1);
        setState(3459);
        match(FMLParser::T__218);
         _localctx->cp->setProtocol(sep::ComProtocol::PROTOCOL_ENVIRONMENT_KIND); 
        break;
      }

      case FMLParser::T__219: {
        enterOuterAlt(_localctx, 2);
        setState(3461);
        match(FMLParser::T__219);
         _localctx->cp->setProtocolCast(sep::ComProtocol::PROTOCOL_RDV_KIND, sep::ComProtocol::PROTOCOL_UNICAST_KIND); 
        break;
      }

      case FMLParser::T__220: {
        enterOuterAlt(_localctx, 3);
        setState(3463);
        match(FMLParser::T__220);
         _localctx->cp->setProtocolCast(sep::ComProtocol::PROTOCOL_MULTIRDV_KIND, sep::ComProtocol::PROTOCOL_MULTICAST_KIND); 
        break;
      }

      case FMLParser::T__91: {
        enterOuterAlt(_localctx, 4);
        setState(3465);
        match(FMLParser::T__91);
         _localctx->cp->setProtocolCast(sep::ComProtocol::PROTOCOL_FLOW_KIND, sep::ComProtocol::PROTOCOL_MULTICAST_KIND); 
        break;
      }

      case FMLParser::T__221: {
        enterOuterAlt(_localctx, 5);
        setState(3467);
        match(FMLParser::T__221);
         _localctx->cp->setProtocolCast(sep::ComProtocol::PROTOCOL_ANYCAST_KIND, sep::ComProtocol::PROTOCOL_ANYCAST_KIND); 
        break;
      }

      case FMLParser::T__222: {
        enterOuterAlt(_localctx, 6);
        setState(3469);
        match(FMLParser::T__222);
         _localctx->cp->setProtocolCast(sep::ComProtocol::PROTOCOL_UNICAST_KIND, sep::ComProtocol::PROTOCOL_UNICAST_KIND); 
        break;
      }

      case FMLParser::T__223: {
        enterOuterAlt(_localctx, 7);
        setState(3471);
        match(FMLParser::T__223);
         _localctx->cp->setProtocolCast(sep::ComProtocol::PROTOCOL_MULTICAST_KIND, sep::ComProtocol::PROTOCOL_MULTICAST_KIND); 
        break;
      }

      case FMLParser::T__224: {
        enterOuterAlt(_localctx, 8);
        setState(3473);
        match(FMLParser::T__224);
         _localctx->cp->setProtocolCast(sep::ComProtocol::PROTOCOL_BROADCAST_KIND, sep::ComProtocol::PROTOCOL_BROADCAST_KIND); 
        break;
      }

      case FMLParser::T__144:
      case FMLParser::T__145:
      case FMLParser::T__146:
      case FMLParser::T__147:
      case FMLParser::T__148:
      case FMLParser::T__149:
      case FMLParser::T__150:
      case FMLParser::T__151:
      case FMLParser::T__152:
      case FMLParser::T__153:
      case FMLParser::T__154: {
        enterOuterAlt(_localctx, 9);
        setState(3475);
        antlrcpp::downCast<Com_protocolContext *>(_localctx)->bc = buffer_com( machine );

        		_localctx->cp->setProtocol(sep::ComProtocol::PROTOCOL_BUFFER_KIND);
        		_localctx->cp->setBuffer(antlrcpp::downCast<Com_protocolContext *>(_localctx)->bc->buf);
        	
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Com_castContext ------------------------------------------------------------------

FMLParser::Com_castContext::Com_castContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Com_castContext::Com_castContext(ParserRuleContext *parent, size_t invokingState, sep::ComProtocol * cp)
  : ParserRuleContext(parent, invokingState) {
  this->cp = cp;
}


size_t FMLParser::Com_castContext::getRuleIndex() const {
  return FMLParser::RuleCom_cast;
}


FMLParser::Com_castContext* FMLParser::com_cast(sep::ComProtocol * cp) {
  Com_castContext *_localctx = _tracker.createInstance<Com_castContext>(_ctx, getState(), cp);
  enterRule(_localctx, 316, FMLParser::RuleCom_cast);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3488);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__221: {
        enterOuterAlt(_localctx, 1);
        setState(3480);
        match(FMLParser::T__221);
         _localctx->cp->setCast(sep::ComProtocol::PROTOCOL_ANYCAST_KIND); 
        break;
      }

      case FMLParser::T__222: {
        enterOuterAlt(_localctx, 2);
        setState(3482);
        match(FMLParser::T__222);
         _localctx->cp->setCast(sep::ComProtocol::PROTOCOL_UNICAST_KIND); 
        break;
      }

      case FMLParser::T__223: {
        enterOuterAlt(_localctx, 3);
        setState(3484);
        match(FMLParser::T__223);
         _localctx->cp->setCast(sep::ComProtocol::PROTOCOL_MULTICAST_KIND); 
        break;
      }

      case FMLParser::T__224: {
        enterOuterAlt(_localctx, 4);
        setState(3486);
        match(FMLParser::T__224);
         _localctx->cp->setCast(sep::ComProtocol::PROTOCOL_BROADCAST_KIND); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Buffer_comContext ------------------------------------------------------------------

FMLParser::Buffer_comContext::Buffer_comContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Buffer_comContext::Buffer_comContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
}

tree::TerminalNode* FMLParser::Buffer_comContext::COLON() {
  return getToken(FMLParser::COLON, 0);
}

tree::TerminalNode* FMLParser::Buffer_comContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Buffer_comContext::GT() {
  return getToken(FMLParser::GT, 0);
}

FMLParser::Ref_bufferContext* FMLParser::Buffer_comContext::ref_buffer() {
  return getRuleContext<FMLParser::Ref_bufferContext>(0);
}

FMLParser::Def_bufferContext* FMLParser::Buffer_comContext::def_buffer() {
  return getRuleContext<FMLParser::Def_bufferContext>(0);
}


size_t FMLParser::Buffer_comContext::getRuleIndex() const {
  return FMLParser::RuleBuffer_com;
}


FMLParser::Buffer_comContext* FMLParser::buffer_com(sep::Machine * machine) {
  Buffer_comContext *_localctx = _tracker.createInstance<Buffer_comContext>(_ctx, getState(), machine);
  enterRule(_localctx, 318, FMLParser::RuleBuffer_com);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3516);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__144: {
        enterOuterAlt(_localctx, 1);
        setState(3490);
        match(FMLParser::T__144);
        setState(3511);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::COLON: {
            setState(3491);
            match(FMLParser::COLON);
            setState(3498);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case FMLParser::ID: {
                setState(3492);
                antlrcpp::downCast<Buffer_comContext *>(_localctx)->rb = ref_buffer(machine);
                 antlrcpp::downCast<Buffer_comContext *>(_localctx)->buf =  antlrcpp::downCast<Buffer_comContext *>(_localctx)->rb->buf; 
                break;
              }

              case FMLParser::T__145:
              case FMLParser::T__146:
              case FMLParser::T__147:
              case FMLParser::T__148:
              case FMLParser::T__149:
              case FMLParser::T__150:
              case FMLParser::T__151:
              case FMLParser::T__152:
              case FMLParser::T__153:
              case FMLParser::T__154: {
                setState(3495);
                antlrcpp::downCast<Buffer_comContext *>(_localctx)->db = def_buffer();

                			antlrcpp::downCast<Buffer_comContext *>(_localctx)->buf =  sep::BF( new sep::Buffer(machine,
                				newBufferID(), antlrcpp::downCast<Buffer_comContext *>(_localctx)->db->kind, antlrcpp::downCast<Buffer_comContext *>(_localctx)->db->size) );
                		
                break;
              }

            default:
              throw NoViableAltException(this);
            }
            break;
          }

          case FMLParser::LT_: {
            setState(3500);
            match(FMLParser::LT_);
            setState(3507);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case FMLParser::ID: {
                setState(3501);
                antlrcpp::downCast<Buffer_comContext *>(_localctx)->rb = ref_buffer(machine);
                 antlrcpp::downCast<Buffer_comContext *>(_localctx)->buf =  antlrcpp::downCast<Buffer_comContext *>(_localctx)->rb->buf; 
                break;
              }

              case FMLParser::T__145:
              case FMLParser::T__146:
              case FMLParser::T__147:
              case FMLParser::T__148:
              case FMLParser::T__149:
              case FMLParser::T__150:
              case FMLParser::T__151:
              case FMLParser::T__152:
              case FMLParser::T__153:
              case FMLParser::T__154: {
                setState(3504);
                antlrcpp::downCast<Buffer_comContext *>(_localctx)->db = def_buffer();

                				antlrcpp::downCast<Buffer_comContext *>(_localctx)->buf =  sep::BF( new sep::Buffer(machine,
                						 newBufferID(), antlrcpp::downCast<Buffer_comContext *>(_localctx)->db->kind, antlrcpp::downCast<Buffer_comContext *>(_localctx)->db->size) );
                			
                break;
              }

            default:
              throw NoViableAltException(this);
            }
            setState(3509);
            match(FMLParser::GT);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case FMLParser::T__145:
      case FMLParser::T__146:
      case FMLParser::T__147:
      case FMLParser::T__148:
      case FMLParser::T__149:
      case FMLParser::T__150:
      case FMLParser::T__151:
      case FMLParser::T__152:
      case FMLParser::T__153:
      case FMLParser::T__154: {
        enterOuterAlt(_localctx, 2);
        setState(3513);
        antlrcpp::downCast<Buffer_comContext *>(_localctx)->db = def_buffer();

        		antlrcpp::downCast<Buffer_comContext *>(_localctx)->buf =  sep::BF( new sep::Buffer(machine,
        				 newBufferID(), antlrcpp::downCast<Buffer_comContext *>(_localctx)->db->kind, antlrcpp::downCast<Buffer_comContext *>(_localctx)->db->size) );
        	
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Com_connectorContext ------------------------------------------------------------------

FMLParser::Com_connectorContext::Com_connectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Com_connectorContext::Com_connectorContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine, sep::InteractionPart * anInteractionPart)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
  this->anInteractionPart = anInteractionPart;
}

tree::TerminalNode* FMLParser::Com_connectorContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Com_connectorContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

tree::TerminalNode* FMLParser::Com_connectorContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

FMLParser::Com_protocolContext* FMLParser::Com_connectorContext::com_protocol() {
  return getRuleContext<FMLParser::Com_protocolContext>(0);
}

tree::TerminalNode* FMLParser::Com_connectorContext::GT() {
  return getToken(FMLParser::GT, 0);
}

tree::TerminalNode* FMLParser::Com_connectorContext::ID() {
  return getToken(FMLParser::ID, 0);
}

std::vector<FMLParser::Com_routeContext *> FMLParser::Com_connectorContext::com_route() {
  return getRuleContexts<FMLParser::Com_routeContext>();
}

FMLParser::Com_routeContext* FMLParser::Com_connectorContext::com_route(size_t i) {
  return getRuleContext<FMLParser::Com_routeContext>(i);
}

tree::TerminalNode* FMLParser::Com_connectorContext::COMMA() {
  return getToken(FMLParser::COMMA, 0);
}

FMLParser::Com_castContext* FMLParser::Com_connectorContext::com_cast() {
  return getRuleContext<FMLParser::Com_castContext>(0);
}

tree::TerminalNode* FMLParser::Com_connectorContext::LBRACKET() {
  return getToken(FMLParser::LBRACKET, 0);
}

FMLParser::Com_route_pointsContext* FMLParser::Com_connectorContext::com_route_points() {
  return getRuleContext<FMLParser::Com_route_pointsContext>(0);
}

tree::TerminalNode* FMLParser::Com_connectorContext::RBRACKET() {
  return getToken(FMLParser::RBRACKET, 0);
}

tree::TerminalNode* FMLParser::Com_connectorContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}


size_t FMLParser::Com_connectorContext::getRuleIndex() const {
  return FMLParser::RuleCom_connector;
}


FMLParser::Com_connectorContext* FMLParser::com_connector(sep::Machine * machine,sep::InteractionPart * anInteractionPart) {
  Com_connectorContext *_localctx = _tracker.createInstance<Com_connectorContext>(_ctx, getState(), machine, anInteractionPart);
  enterRule(_localctx, 320, FMLParser::RuleCom_connector);

  	sep::Connector & aConnector = anInteractionPart->appendConnector();
  	aConnector.updateProtocol(* anInteractionPart);
  	std::string c_id;

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3570);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__187:
      case FMLParser::T__225: {
        enterOuterAlt(_localctx, 1);
        setState(3518);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__187

        || _la == FMLParser::T__225)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3527);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::LT_) {
          setState(3519);
          match(FMLParser::LT_);
          setState(3520);
          com_protocol( machine, & aConnector );
          setState(3523);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::COMMA) {
            setState(3521);
            match(FMLParser::COMMA);
            setState(3522);
            com_cast( & aConnector );
          }
          setState(3525);
          match(FMLParser::GT);
        }
        setState(3531);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::ID) {
          setState(3529);
          antlrcpp::downCast<Com_connectorContext *>(_localctx)->idToken = match(FMLParser::ID);
           c_id = antlrcpp::downCast<Com_connectorContext *>(_localctx)->idToken->getText(); 
        }
         aConnector.fullyUpdateAllNameID(newConnectorID(c_id, "_#connector")); 
        setState(3534);
        match(FMLParser::LCURLY);
        setState(3536); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(3535);
          com_route( machine, & aConnector );
          setState(3538); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3556769792) != 0) || _la == FMLParser::ID);
        setState(3540);
        match(FMLParser::RCURLY);
        break;
      }

      case FMLParser::T__226: {
        enterOuterAlt(_localctx, 2);
        setState(3542);
        match(FMLParser::T__226);

        		aConnector.setNature( sep::IComPoint::IO_SIGNAL_NATURE );
        		aConnector.fullyUpdateAllNameID(newConnectorID("", "_#route"));
        	  
        setState(3552);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::LT_) {
          setState(3544);
          match(FMLParser::LT_);
          setState(3545);
          com_protocol( machine, & aConnector );
          setState(3548);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == FMLParser::COMMA) {
            setState(3546);
            match(FMLParser::COMMA);
            setState(3547);
            com_cast( & aConnector );
          }
          setState(3550);
          match(FMLParser::GT);
        }
        setState(3568);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::T__25:
          case FMLParser::T__27:
          case FMLParser::T__29:
          case FMLParser::T__30:
          case FMLParser::ID: {
            setState(3554);
            com_route( machine, & aConnector );
            break;
          }

          case FMLParser::LCURLY: {
            setState(3555);
            match(FMLParser::LCURLY);
            setState(3557); 
            _errHandler->sync(this);
            _la = _input->LA(1);
            do {
              setState(3556);
              com_route( machine, & aConnector );
              setState(3559); 
              _errHandler->sync(this);
              _la = _input->LA(1);
            } while ((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & 3556769792) != 0) || _la == FMLParser::ID);
            setState(3561);
            match(FMLParser::RCURLY);
            break;
          }

          case FMLParser::LBRACKET: {
            setState(3563);
            match(FMLParser::LBRACKET);
            setState(3564);
            com_route_points( machine , & aConnector );
            setState(3565);
            match(FMLParser::RBRACKET);
            setState(3566);
            match(FMLParser::SEMI);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   _ctx->stop = _input->LT(-1);

    	SET_RULE_LOCATION(aConnector);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Com_routeContext ------------------------------------------------------------------

FMLParser::Com_routeContext::Com_routeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Com_routeContext::Com_routeContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine, sep::Connector * aConnector)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
  this->aConnector = aConnector;
}

FMLParser::Modifier_set_direction_strict_textContext* FMLParser::Com_routeContext::modifier_set_direction_strict_text() {
  return getRuleContext<FMLParser::Modifier_set_direction_strict_textContext>(0);
}

std::vector<FMLParser::Com_portContext *> FMLParser::Com_routeContext::com_port() {
  return getRuleContexts<FMLParser::Com_portContext>();
}

FMLParser::Com_portContext* FMLParser::Com_routeContext::com_port(size_t i) {
  return getRuleContext<FMLParser::Com_portContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Com_routeContext::SEMI() {
  return getTokens(FMLParser::SEMI);
}

tree::TerminalNode* FMLParser::Com_routeContext::SEMI(size_t i) {
  return getToken(FMLParser::SEMI, i);
}

tree::TerminalNode* FMLParser::Com_routeContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Com_routeContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

tree::TerminalNode* FMLParser::Com_routeContext::LBRACKET() {
  return getToken(FMLParser::LBRACKET, 0);
}

tree::TerminalNode* FMLParser::Com_routeContext::RBRACKET() {
  return getToken(FMLParser::RBRACKET, 0);
}

tree::TerminalNode* FMLParser::Com_routeContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Com_routeContext::GT() {
  return getToken(FMLParser::GT, 0);
}

tree::TerminalNode* FMLParser::Com_routeContext::STAR() {
  return getToken(FMLParser::STAR, 0);
}

FMLParser::Com_castContext* FMLParser::Com_routeContext::com_cast() {
  return getRuleContext<FMLParser::Com_castContext>(0);
}

FMLParser::Buffer_comContext* FMLParser::Com_routeContext::buffer_com() {
  return getRuleContext<FMLParser::Buffer_comContext>(0);
}

std::vector<tree::TerminalNode *> FMLParser::Com_routeContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Com_routeContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Com_routeContext::getRuleIndex() const {
  return FMLParser::RuleCom_route;
}


FMLParser::Com_routeContext* FMLParser::com_route(sep::Machine * machine,sep::Connector * aConnector) {
  Com_routeContext *_localctx = _tracker.createInstance<Com_routeContext>(_ctx, getState(), machine, aConnector);
  enterRule(_localctx, 322, FMLParser::RuleCom_route);

  	sep::ComRoute & comRoute = aConnector->appendComRoute(
  			sep::Modifier::PROPERTY_INOUT_DIRECTION );

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3617);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__25:
      case FMLParser::T__27:
      case FMLParser::T__29:
      case FMLParser::T__30: {
        enterOuterAlt(_localctx, 1);
        setState(3572);
        modifier_set_direction_strict_text( &( comRoute.getwModifier() ) );
        setState(3582);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::LT_) {
          setState(3573);
          match(FMLParser::LT_);
          setState(3578);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case FMLParser::T__144:
            case FMLParser::T__145:
            case FMLParser::T__146:
            case FMLParser::T__147:
            case FMLParser::T__148:
            case FMLParser::T__149:
            case FMLParser::T__150:
            case FMLParser::T__151:
            case FMLParser::T__152:
            case FMLParser::T__153:
            case FMLParser::T__154: {
              setState(3574);
              antlrcpp::downCast<Com_routeContext *>(_localctx)->bc = buffer_com( machine );

              			comRoute.setProtocol(sep::ComProtocol::PROTOCOL_BUFFER_KIND);
              			comRoute.setBuffer(antlrcpp::downCast<Com_routeContext *>(_localctx)->bc->buf);
              		
              break;
            }

            case FMLParser::T__221:
            case FMLParser::T__222:
            case FMLParser::T__223:
            case FMLParser::T__224: {
              setState(3577);
              com_cast( & comRoute );
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(3580);
          match(FMLParser::GT);
        }
        setState(3612);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::ID: {
            setState(3584);
            com_port( machine , & comRoute );
            setState(3585);
            match(FMLParser::SEMI);
            break;
          }

          case FMLParser::LCURLY: {
            setState(3587);
            match(FMLParser::LCURLY);
            setState(3591); 
            _errHandler->sync(this);
            _la = _input->LA(1);
            do {
              setState(3588);
              com_port( machine , & comRoute );
              setState(3589);
              match(FMLParser::SEMI);
              setState(3593); 
              _errHandler->sync(this);
              _la = _input->LA(1);
            } while (_la == FMLParser::ID);
            setState(3595);
            match(FMLParser::RCURLY);
            break;
          }

          case FMLParser::LBRACKET: {
            setState(3597);
            match(FMLParser::LBRACKET);
            setState(3608);
            _errHandler->sync(this);
            switch (_input->LA(1)) {
              case FMLParser::ID: {
                setState(3598);
                com_port( machine , & comRoute );
                setState(3603);
                _errHandler->sync(this);
                _la = _input->LA(1);
                while (_la == FMLParser::COMMA) {
                  setState(3599);
                  match(FMLParser::COMMA);
                  setState(3600);
                  com_port( machine , & comRoute );
                  setState(3605);
                  _errHandler->sync(this);
                  _la = _input->LA(1);
                }
                break;
              }

              case FMLParser::STAR: {
                setState(3606);
                match(FMLParser::STAR);

                			sep::ComPoint & comPoint = comRoute.appendAllComPoint(machine);

                			SET_RULE_LOCATION(comPoint);
                		
                break;
              }

            default:
              throw NoViableAltException(this);
            }
            setState(3610);
            match(FMLParser::RBRACKET);
            setState(3611);
            match(FMLParser::SEMI);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case FMLParser::ID: {
        enterOuterAlt(_localctx, 2);
        setState(3614);
        com_port( machine , & comRoute );
        setState(3615);
        match(FMLParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   _ctx->stop = _input->LT(-1);

    	SET_RULE_LOCATION(comRoute);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Com_route_pointsContext ------------------------------------------------------------------

FMLParser::Com_route_pointsContext::Com_route_pointsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Com_route_pointsContext::Com_route_pointsContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine, sep::Connector * aConnector)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
  this->aConnector = aConnector;
}

std::vector<FMLParser::Com_portContext *> FMLParser::Com_route_pointsContext::com_port() {
  return getRuleContexts<FMLParser::Com_portContext>();
}

FMLParser::Com_portContext* FMLParser::Com_route_pointsContext::com_port(size_t i) {
  return getRuleContext<FMLParser::Com_portContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Com_route_pointsContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Com_route_pointsContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}

tree::TerminalNode* FMLParser::Com_route_pointsContext::STAR() {
  return getToken(FMLParser::STAR, 0);
}


size_t FMLParser::Com_route_pointsContext::getRuleIndex() const {
  return FMLParser::RuleCom_route_points;
}


FMLParser::Com_route_pointsContext* FMLParser::com_route_points(sep::Machine * machine,sep::Connector * aConnector) {
  Com_route_pointsContext *_localctx = _tracker.createInstance<Com_route_pointsContext>(_ctx, getState(), machine, aConnector);
  enterRule(_localctx, 324, FMLParser::RuleCom_route_points);

  	sep::ComRoute & comRoute = aConnector->appendComRoute(
  			sep::Modifier::PROPERTY_INOUT_DIRECTION );

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3629);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(3619);
        com_port( machine , & comRoute );
        setState(3624);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FMLParser::COMMA) {
          setState(3620);
          match(FMLParser::COMMA);
          setState(3621);
          com_port( machine , & comRoute );
          setState(3626);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case FMLParser::STAR: {
        enterOuterAlt(_localctx, 2);
        setState(3627);
        match(FMLParser::STAR);

        		sep::ComPoint & comPoint = comRoute.appendAllComPoint(machine);

        		SET_RULE_LOCATION(comPoint);
            
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   _ctx->stop = _input->LT(-1);

    	SET_RULE_LOCATION(comRoute);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Com_portContext ------------------------------------------------------------------

FMLParser::Com_portContext::Com_portContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Com_portContext::Com_portContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine, sep::ComRoute * comRoute)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
  this->comRoute = comRoute;
}

FMLParser::QualifiedNameIDContext* FMLParser::Com_portContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}

std::vector<FMLParser::Com_port_idContext *> FMLParser::Com_portContext::com_port_id() {
  return getRuleContexts<FMLParser::Com_port_idContext>();
}

FMLParser::Com_port_idContext* FMLParser::Com_portContext::com_port_id(size_t i) {
  return getRuleContext<FMLParser::Com_port_idContext>(i);
}

tree::TerminalNode* FMLParser::Com_portContext::LBRACKET() {
  return getToken(FMLParser::LBRACKET, 0);
}

tree::TerminalNode* FMLParser::Com_portContext::RBRACKET() {
  return getToken(FMLParser::RBRACKET, 0);
}

tree::TerminalNode* FMLParser::Com_portContext::STAR() {
  return getToken(FMLParser::STAR, 0);
}

std::vector<tree::TerminalNode *> FMLParser::Com_portContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Com_portContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Com_portContext::getRuleIndex() const {
  return FMLParser::RuleCom_port;
}


FMLParser::Com_portContext* FMLParser::com_port(sep::Machine * machine,sep::ComRoute * comRoute) {
  Com_portContext *_localctx = _tracker.createInstance<Com_portContext>(_ctx, getState(), machine, comRoute);
  enterRule(_localctx, 326, FMLParser::RuleCom_port);

  	sep::Machine * comMachine = machine;
  	while( comMachine != nullptr )
  	{
  		if( comMachine->hasPortSignal() || (! comMachine->hasContainer()) )
  		{
  			break;
  		}
  		comMachine = comMachine->getContainerMachine();
  	}

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3654);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 444, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3631);
      antlrcpp::downCast<Com_portContext *>(_localctx)->m = qualifiedNameID();
       comMachine = sep::ParserUtil::getMachine(machine, antlrcpp::downCast<Com_portContext *>(_localctx)->m->s, antlrcpp::downCast<Com_portContext *>(_localctx)->m->nb); 
      setState(3633);
      match(FMLParser::T__23);
      setState(3649);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::ID: {
          setState(3634);
          com_port_id( machine , comRoute , comMachine );
          break;
        }

        case FMLParser::LBRACKET: {
          setState(3635);
          match(FMLParser::LBRACKET);
          setState(3646);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case FMLParser::ID: {
              setState(3636);
              com_port_id( machine , comRoute , comMachine );
              setState(3641);
              _errHandler->sync(this);
              _la = _input->LA(1);
              while (_la == FMLParser::COMMA) {
                setState(3637);
                match(FMLParser::COMMA);
                setState(3638);
                com_port_id( machine , comRoute , comMachine );
                setState(3643);
                _errHandler->sync(this);
                _la = _input->LA(1);
              }
              break;
            }

            case FMLParser::STAR: {
              setState(3644);
              match(FMLParser::STAR);

              			sep::ComPoint & comPoint = comRoute->appendAllComPoint(comMachine);

              			SET_RULE_LOCATION(comPoint);
              		
              break;
            }

          default:
            throw NoViableAltException(this);
          }
          setState(3648);
          match(FMLParser::RBRACKET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3651);
      antlrcpp::downCast<Com_portContext *>(_localctx)->id = qualifiedNameID();

      		const sep::BF & comPort = sep::ParserUtil::getComPortSignal(
      				comMachine, antlrcpp::downCast<Com_portContext *>(_localctx)->id->s, antlrcpp::downCast<Com_portContext *>(_localctx)->id->nb);
      				
      		sep::ComPoint & comPoint = ( comPort.valid() ) 
      				? comRoute->appendComPoint(comPort.to_ptr< sep::Port >())
      				: comRoute->appendComPoint(comMachine, NEW_QNID(antlrcpp::downCast<Com_portContext *>(_localctx)->id->s, antlrcpp::downCast<Com_portContext *>(_localctx)->id->nb));
      			
      		SET_RULE_LOCATION(comPoint);
      	  
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Com_port_idContext ------------------------------------------------------------------

FMLParser::Com_port_idContext::Com_port_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Com_port_idContext::Com_port_idContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * machine, sep::ComRoute * comRoute, sep::Machine * comMachine)
  : ParserRuleContext(parent, invokingState) {
  this->machine = machine;
  this->comRoute = comRoute;
  this->comMachine = comMachine;
}

FMLParser::QualifiedNameIDContext* FMLParser::Com_port_idContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}


size_t FMLParser::Com_port_idContext::getRuleIndex() const {
  return FMLParser::RuleCom_port_id;
}


FMLParser::Com_port_idContext* FMLParser::com_port_id(sep::Machine * machine,sep::ComRoute * comRoute,sep::Machine * comMachine) {
  Com_port_idContext *_localctx = _tracker.createInstance<Com_port_idContext>(_ctx, getState(), machine, comRoute, comMachine);
  enterRule(_localctx, 328, FMLParser::RuleCom_port_id);

  	SAVE_RULE_BEGIN_LOCATION;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3656);
    antlrcpp::downCast<Com_port_idContext *>(_localctx)->id = qualifiedNameID();

    		const sep::BF & comPort = sep::ParserUtil::getComPortSignal(
    				comMachine, antlrcpp::downCast<Com_port_idContext *>(_localctx)->id->s, antlrcpp::downCast<Com_port_idContext *>(_localctx)->id->nb);
    				
    		sep::ComPoint & comPoint = ( comPort.valid() ) 
    			? comRoute->appendComPoint(comMachine, comPort.to_ptr< sep::Port >())
    			: comRoute->appendComPoint(comMachine, NEW_QNID(antlrcpp::downCast<Com_port_idContext *>(_localctx)->id->s, antlrcpp::downCast<Com_port_idContext *>(_localctx)->id->nb));
    			
    		SET_RULE_LOCATION(comPoint);
    	  
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

FMLParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Statement_assignContext* FMLParser::StatementContext::statement_assign() {
  return getRuleContext<FMLParser::Statement_assignContext>(0);
}

FMLParser::Statement_comContext* FMLParser::StatementContext::statement_com() {
  return getRuleContext<FMLParser::Statement_comContext>(0);
}

FMLParser::Statement_constraintContext* FMLParser::StatementContext::statement_constraint() {
  return getRuleContext<FMLParser::Statement_constraintContext>(0);
}

FMLParser::Statement_jumpContext* FMLParser::StatementContext::statement_jump() {
  return getRuleContext<FMLParser::Statement_jumpContext>(0);
}

FMLParser::Statement_activityContext* FMLParser::StatementContext::statement_activity() {
  return getRuleContext<FMLParser::Statement_activityContext>(0);
}

FMLParser::Statement_invoke_routineContext* FMLParser::StatementContext::statement_invoke_routine() {
  return getRuleContext<FMLParser::Statement_invoke_routineContext>(0);
}

FMLParser::Statement_mocContext* FMLParser::StatementContext::statement_moc() {
  return getRuleContext<FMLParser::Statement_mocContext>(0);
}

FMLParser::Statement_invokeContext* FMLParser::StatementContext::statement_invoke() {
  return getRuleContext<FMLParser::Statement_invokeContext>(0);
}

FMLParser::Statement_invoke_methodContext* FMLParser::StatementContext::statement_invoke_method() {
  return getRuleContext<FMLParser::Statement_invoke_methodContext>(0);
}

FMLParser::Statement_activity_newContext* FMLParser::StatementContext::statement_activity_new() {
  return getRuleContext<FMLParser::Statement_activity_newContext>(0);
}

FMLParser::Statement_iteContext* FMLParser::StatementContext::statement_ite() {
  return getRuleContext<FMLParser::Statement_iteContext>(0);
}

FMLParser::Statement_iterationContext* FMLParser::StatementContext::statement_iteration() {
  return getRuleContext<FMLParser::Statement_iterationContext>(0);
}

FMLParser::Block_statementContext* FMLParser::StatementContext::block_statement() {
  return getRuleContext<FMLParser::Block_statementContext>(0);
}

FMLParser::Prefix_statementContext* FMLParser::StatementContext::prefix_statement() {
  return getRuleContext<FMLParser::Prefix_statementContext>(0);
}

FMLParser::Statement_promptContext* FMLParser::StatementContext::statement_prompt() {
  return getRuleContext<FMLParser::Statement_promptContext>(0);
}

FMLParser::Meta_statementContext* FMLParser::StatementContext::meta_statement() {
  return getRuleContext<FMLParser::Meta_statementContext>(0);
}


size_t FMLParser::StatementContext::getRuleIndex() const {
  return FMLParser::RuleStatement;
}


FMLParser::StatementContext* FMLParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 330, FMLParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3707);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 445, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3659);
      antlrcpp::downCast<StatementContext *>(_localctx)->s01 = statement_assign();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s01->ac; 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3662);
      antlrcpp::downCast<StatementContext *>(_localctx)->s03 = statement_com();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s03->ac; 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3665);
      antlrcpp::downCast<StatementContext *>(_localctx)->s04 = statement_constraint();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s04->ac; 
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3668);
      antlrcpp::downCast<StatementContext *>(_localctx)->s05 = statement_jump();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s05->ac; 
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3671);
      antlrcpp::downCast<StatementContext *>(_localctx)->s07 = statement_activity();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s07->ac; 
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3674);
      antlrcpp::downCast<StatementContext *>(_localctx)->s08 = statement_invoke_routine();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s08->ac; 
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3677);
      antlrcpp::downCast<StatementContext *>(_localctx)->s09 = statement_moc();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s09->ac; 
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(3680);
      antlrcpp::downCast<StatementContext *>(_localctx)->s10 = statement_invoke();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s10->ac; 
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(3683);
      antlrcpp::downCast<StatementContext *>(_localctx)->s11 = statement_invoke_method();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s11->ac; 
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(3686);
      antlrcpp::downCast<StatementContext *>(_localctx)->s12 = statement_activity_new();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s12->ac; 
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(3689);
      antlrcpp::downCast<StatementContext *>(_localctx)->s13 = statement_ite();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s13->ac; 
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(3692);
      antlrcpp::downCast<StatementContext *>(_localctx)->s14 = statement_iteration();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s14->ac; 
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(3695);
      antlrcpp::downCast<StatementContext *>(_localctx)->s16 = block_statement();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s16->ac; 
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(3698);
      antlrcpp::downCast<StatementContext *>(_localctx)->s17 = prefix_statement();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s17->ac; 
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(3701);
      antlrcpp::downCast<StatementContext *>(_localctx)->s18 = statement_prompt();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s18->ac; 
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(3704);
      antlrcpp::downCast<StatementContext *>(_localctx)->s19 = meta_statement();
       antlrcpp::downCast<StatementContext *>(_localctx)->ac =  antlrcpp::downCast<StatementContext *>(_localctx)->s19->ac; 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_statementContext ------------------------------------------------------------------

FMLParser::Block_statementContext::Block_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Block_statementContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Block_statementContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

FMLParser::Op_blockContext* FMLParser::Block_statementContext::op_block() {
  return getRuleContext<FMLParser::Op_blockContext>(0);
}

std::vector<FMLParser::StatementContext *> FMLParser::Block_statementContext::statement() {
  return getRuleContexts<FMLParser::StatementContext>();
}

FMLParser::StatementContext* FMLParser::Block_statementContext::statement(size_t i) {
  return getRuleContext<FMLParser::StatementContext>(i);
}


size_t FMLParser::Block_statementContext::getRuleIndex() const {
  return FMLParser::RuleBlock_statement;
}


FMLParser::Block_statementContext* FMLParser::block_statement() {
  Block_statementContext *_localctx = _tracker.createInstance<Block_statementContext>(_ctx, getState());
  enterRule(_localctx, 332, FMLParser::RuleBlock_statement);

  	const sep::Operator * op = OP(SEQUENCE);
  	bool implicitSequenceOp = true;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3709);
    match(FMLParser::LCURLY);
    setState(3713);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 318) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 318)) & 12582911) != 0)) {
      setState(3710);
      antlrcpp::downCast<Block_statementContext *>(_localctx)->o = op_block();
       op = antlrcpp::downCast<Block_statementContext *>(_localctx)->o->op; implicitSequenceOp = false; 
    }
     antlrcpp::downCast<Block_statementContext *>(_localctx)->ac =  NEW_STMT(op); 
    setState(3721);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2483044352) != 0) || ((((_la - 84) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 84)) & 33554441) != 0) || ((((_la - 228) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 228)) & -4468811335467295) != 0) || ((((_la - 292) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 292)) & 1152921504606850055) != 0) || ((((_la - 357) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 357)) & 598134329704513) != 0) || _la == FMLParser::ID) {
      setState(3716);
      antlrcpp::downCast<Block_statementContext *>(_localctx)->s = statement();
       _localctx->ac->append(antlrcpp::downCast<Block_statementContext *>(_localctx)->s->ac); 
      setState(3723);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3724);
    match(FMLParser::RCURLY);
   _ctx->stop = _input->LT(-1);

    	if( implicitSequenceOp && _localctx->ac.valid() && _localctx->ac->hasOneOperand() )
    	{
    		sep::BFCode singleCode = _localctx->ac->first().bfCode();
    		antlrcpp::downCast<Block_statementContext *>(_localctx)->ac =  singleCode;
    	}

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Op_blockContext ------------------------------------------------------------------

FMLParser::Op_blockContext::Op_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Op_sequenceContext* FMLParser::Op_blockContext::op_sequence() {
  return getRuleContext<FMLParser::Op_sequenceContext>(0);
}

FMLParser::Op_schedulingContext* FMLParser::Op_blockContext::op_scheduling() {
  return getRuleContext<FMLParser::Op_schedulingContext>(0);
}

FMLParser::Op_concurrencyContext* FMLParser::Op_blockContext::op_concurrency() {
  return getRuleContext<FMLParser::Op_concurrencyContext>(0);
}

tree::TerminalNode* FMLParser::Op_blockContext::OP_FORK() {
  return getToken(FMLParser::OP_FORK, 0);
}

tree::TerminalNode* FMLParser::Op_blockContext::OP_JOIN() {
  return getToken(FMLParser::OP_JOIN, 0);
}


size_t FMLParser::Op_blockContext::getRuleIndex() const {
  return FMLParser::RuleOp_block;
}


FMLParser::Op_blockContext* FMLParser::op_block() {
  Op_blockContext *_localctx = _tracker.createInstance<Op_blockContext>(_ctx, getState());
  enterRule(_localctx, 334, FMLParser::RuleOp_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3739);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::OP_ATOMIC_SEQUENCE:
      case FMLParser::OP_SEQUENCE:
      case FMLParser::OP_SEQUENCE_SIDE:
      case FMLParser::OP_SEQUENCE_WEAK: {
        enterOuterAlt(_localctx, 1);
        setState(3726);
        antlrcpp::downCast<Op_blockContext *>(_localctx)->o1 = op_sequence();
         antlrcpp::downCast<Op_blockContext *>(_localctx)->op =  antlrcpp::downCast<Op_blockContext *>(_localctx)->o1->op;   
        break;
      }

      case FMLParser::OP_SCHEDULE_GT:
      case FMLParser::OP_SCHEDULE_LT:
      case FMLParser::OP_SCHEDULE_XOR:
      case FMLParser::OP_SCHEDULE_AND_THEN:
      case FMLParser::OP_SCHEDULE_OR_ELSE:
      case FMLParser::OP_NON_DETERMINISM: {
        enterOuterAlt(_localctx, 2);
        setState(3729);
        antlrcpp::downCast<Op_blockContext *>(_localctx)->o2 = op_scheduling();
         antlrcpp::downCast<Op_blockContext *>(_localctx)->op =  antlrcpp::downCast<Op_blockContext *>(_localctx)->o2->op;   
        break;
      }

      case FMLParser::OP_CONCURRENCY_ASYNC:
      case FMLParser::OP_CONCURRENCY_AND:
      case FMLParser::OP_CONCURRENCY_OR:
      case FMLParser::OP_CONCURRENCY_INTERLEAVING:
      case FMLParser::OP_CONCURRENCY_PARTIAL_ORDER:
      case FMLParser::OP_CONCURRENCY_PARALLEL:
      case FMLParser::OP_CONCURRENCY_RDV_ASYNC:
      case FMLParser::OP_CONCURRENCY_RDV_AND:
      case FMLParser::OP_CONCURRENCY_RDV_OR:
      case FMLParser::OP_CONCURRENCY_RDV_INTERLEAVING:
      case FMLParser::OP_CONCURRENCY_RDV_PARALLEL: {
        enterOuterAlt(_localctx, 3);
        setState(3732);
        antlrcpp::downCast<Op_blockContext *>(_localctx)->o3 = op_concurrency();
         antlrcpp::downCast<Op_blockContext *>(_localctx)->op =  antlrcpp::downCast<Op_blockContext *>(_localctx)->o3->op;   
        break;
      }

      case FMLParser::OP_FORK: {
        enterOuterAlt(_localctx, 4);
        setState(3735);
        match(FMLParser::OP_FORK);
         antlrcpp::downCast<Op_blockContext *>(_localctx)->op =  OP(FORK); 
        break;
      }

      case FMLParser::OP_JOIN: {
        enterOuterAlt(_localctx, 5);
        setState(3737);
        match(FMLParser::OP_JOIN);
         antlrcpp::downCast<Op_blockContext *>(_localctx)->op =  OP(JOIN); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Op_sequenceContext ------------------------------------------------------------------

FMLParser::Op_sequenceContext::Op_sequenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Op_sequenceContext::OP_SEQUENCE() {
  return getToken(FMLParser::OP_SEQUENCE, 0);
}

tree::TerminalNode* FMLParser::Op_sequenceContext::OP_SEQUENCE_SIDE() {
  return getToken(FMLParser::OP_SEQUENCE_SIDE, 0);
}

tree::TerminalNode* FMLParser::Op_sequenceContext::OP_SEQUENCE_WEAK() {
  return getToken(FMLParser::OP_SEQUENCE_WEAK, 0);
}

tree::TerminalNode* FMLParser::Op_sequenceContext::OP_ATOMIC_SEQUENCE() {
  return getToken(FMLParser::OP_ATOMIC_SEQUENCE, 0);
}


size_t FMLParser::Op_sequenceContext::getRuleIndex() const {
  return FMLParser::RuleOp_sequence;
}


FMLParser::Op_sequenceContext* FMLParser::op_sequence() {
  Op_sequenceContext *_localctx = _tracker.createInstance<Op_sequenceContext>(_ctx, getState());
  enterRule(_localctx, 336, FMLParser::RuleOp_sequence);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3749);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::OP_SEQUENCE: {
        enterOuterAlt(_localctx, 1);
        setState(3741);
        match(FMLParser::OP_SEQUENCE);
         antlrcpp::downCast<Op_sequenceContext *>(_localctx)->op =  OP(SEQUENCE);        
        break;
      }

      case FMLParser::OP_SEQUENCE_SIDE: {
        enterOuterAlt(_localctx, 2);
        setState(3743);
        match(FMLParser::OP_SEQUENCE_SIDE);
         antlrcpp::downCast<Op_sequenceContext *>(_localctx)->op =  OP(SEQUENCE_SIDE);   
        break;
      }

      case FMLParser::OP_SEQUENCE_WEAK: {
        enterOuterAlt(_localctx, 3);
        setState(3745);
        match(FMLParser::OP_SEQUENCE_WEAK);
         antlrcpp::downCast<Op_sequenceContext *>(_localctx)->op =  OP(SEQUENCE_WEAK);   
        break;
      }

      case FMLParser::OP_ATOMIC_SEQUENCE: {
        enterOuterAlt(_localctx, 4);
        setState(3747);
        match(FMLParser::OP_ATOMIC_SEQUENCE);
         antlrcpp::downCast<Op_sequenceContext *>(_localctx)->op =  OP(ATOMIC_SEQUENCE); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Op_schedulingContext ------------------------------------------------------------------

FMLParser::Op_schedulingContext::Op_schedulingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Op_schedulingContext::OP_SCHEDULE_GT() {
  return getToken(FMLParser::OP_SCHEDULE_GT, 0);
}

tree::TerminalNode* FMLParser::Op_schedulingContext::OP_SCHEDULE_LT() {
  return getToken(FMLParser::OP_SCHEDULE_LT, 0);
}

tree::TerminalNode* FMLParser::Op_schedulingContext::OP_SCHEDULE_XOR() {
  return getToken(FMLParser::OP_SCHEDULE_XOR, 0);
}

tree::TerminalNode* FMLParser::Op_schedulingContext::OP_SCHEDULE_AND_THEN() {
  return getToken(FMLParser::OP_SCHEDULE_AND_THEN, 0);
}

tree::TerminalNode* FMLParser::Op_schedulingContext::OP_SCHEDULE_OR_ELSE() {
  return getToken(FMLParser::OP_SCHEDULE_OR_ELSE, 0);
}

tree::TerminalNode* FMLParser::Op_schedulingContext::OP_NON_DETERMINISM() {
  return getToken(FMLParser::OP_NON_DETERMINISM, 0);
}


size_t FMLParser::Op_schedulingContext::getRuleIndex() const {
  return FMLParser::RuleOp_scheduling;
}


FMLParser::Op_schedulingContext* FMLParser::op_scheduling() {
  Op_schedulingContext *_localctx = _tracker.createInstance<Op_schedulingContext>(_ctx, getState());
  enterRule(_localctx, 338, FMLParser::RuleOp_scheduling);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3763);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::OP_SCHEDULE_GT: {
        enterOuterAlt(_localctx, 1);
        setState(3751);
        match(FMLParser::OP_SCHEDULE_GT);
         antlrcpp::downCast<Op_schedulingContext *>(_localctx)->op =  OP(PRIOR_GT);  
        break;
      }

      case FMLParser::OP_SCHEDULE_LT: {
        enterOuterAlt(_localctx, 2);
        setState(3753);
        match(FMLParser::OP_SCHEDULE_LT);
         antlrcpp::downCast<Op_schedulingContext *>(_localctx)->op =  OP(PRIOR_LT);  
        break;
      }

      case FMLParser::OP_SCHEDULE_XOR: {
        enterOuterAlt(_localctx, 3);
        setState(3755);
        match(FMLParser::OP_SCHEDULE_XOR);
         antlrcpp::downCast<Op_schedulingContext *>(_localctx)->op =  OP(EXCLUSIVE); 
        break;
      }

      case FMLParser::OP_SCHEDULE_AND_THEN: {
        enterOuterAlt(_localctx, 4);
        setState(3757);
        match(FMLParser::OP_SCHEDULE_AND_THEN);
         antlrcpp::downCast<Op_schedulingContext *>(_localctx)->op =  OP(SCHEDULE_AND_THEN); 
        break;
      }

      case FMLParser::OP_SCHEDULE_OR_ELSE: {
        enterOuterAlt(_localctx, 5);
        setState(3759);
        match(FMLParser::OP_SCHEDULE_OR_ELSE);
         antlrcpp::downCast<Op_schedulingContext *>(_localctx)->op =  OP(SCHEDULE_OR_ELSE);  
        break;
      }

      case FMLParser::OP_NON_DETERMINISM: {
        enterOuterAlt(_localctx, 6);
        setState(3761);
        match(FMLParser::OP_NON_DETERMINISM);
         antlrcpp::downCast<Op_schedulingContext *>(_localctx)->op =  OP(NONDETERMINISM);    
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Op_concurrencyContext ------------------------------------------------------------------

FMLParser::Op_concurrencyContext::Op_concurrencyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Op_concurrencyContext::OP_CONCURRENCY_ASYNC() {
  return getToken(FMLParser::OP_CONCURRENCY_ASYNC, 0);
}

tree::TerminalNode* FMLParser::Op_concurrencyContext::OP_CONCURRENCY_AND() {
  return getToken(FMLParser::OP_CONCURRENCY_AND, 0);
}

tree::TerminalNode* FMLParser::Op_concurrencyContext::OP_CONCURRENCY_OR() {
  return getToken(FMLParser::OP_CONCURRENCY_OR, 0);
}

tree::TerminalNode* FMLParser::Op_concurrencyContext::OP_CONCURRENCY_INTERLEAVING() {
  return getToken(FMLParser::OP_CONCURRENCY_INTERLEAVING, 0);
}

tree::TerminalNode* FMLParser::Op_concurrencyContext::OP_CONCURRENCY_PARTIAL_ORDER() {
  return getToken(FMLParser::OP_CONCURRENCY_PARTIAL_ORDER, 0);
}

tree::TerminalNode* FMLParser::Op_concurrencyContext::OP_CONCURRENCY_PARALLEL() {
  return getToken(FMLParser::OP_CONCURRENCY_PARALLEL, 0);
}

tree::TerminalNode* FMLParser::Op_concurrencyContext::OP_CONCURRENCY_RDV_ASYNC() {
  return getToken(FMLParser::OP_CONCURRENCY_RDV_ASYNC, 0);
}

tree::TerminalNode* FMLParser::Op_concurrencyContext::OP_CONCURRENCY_RDV_AND() {
  return getToken(FMLParser::OP_CONCURRENCY_RDV_AND, 0);
}

tree::TerminalNode* FMLParser::Op_concurrencyContext::OP_CONCURRENCY_RDV_OR() {
  return getToken(FMLParser::OP_CONCURRENCY_RDV_OR, 0);
}

tree::TerminalNode* FMLParser::Op_concurrencyContext::OP_CONCURRENCY_RDV_INTERLEAVING() {
  return getToken(FMLParser::OP_CONCURRENCY_RDV_INTERLEAVING, 0);
}

tree::TerminalNode* FMLParser::Op_concurrencyContext::OP_CONCURRENCY_RDV_PARALLEL() {
  return getToken(FMLParser::OP_CONCURRENCY_RDV_PARALLEL, 0);
}


size_t FMLParser::Op_concurrencyContext::getRuleIndex() const {
  return FMLParser::RuleOp_concurrency;
}


FMLParser::Op_concurrencyContext* FMLParser::op_concurrency() {
  Op_concurrencyContext *_localctx = _tracker.createInstance<Op_concurrencyContext>(_ctx, getState());
  enterRule(_localctx, 340, FMLParser::RuleOp_concurrency);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3787);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::OP_CONCURRENCY_ASYNC: {
        enterOuterAlt(_localctx, 1);
        setState(3765);
        match(FMLParser::OP_CONCURRENCY_ASYNC);
         antlrcpp::downCast<Op_concurrencyContext *>(_localctx)->op =  OP(ASYNCHRONOUS);           
        break;
      }

      case FMLParser::OP_CONCURRENCY_AND: {
        enterOuterAlt(_localctx, 2);
        setState(3767);
        match(FMLParser::OP_CONCURRENCY_AND);
         antlrcpp::downCast<Op_concurrencyContext *>(_localctx)->op =  OP(STRONG_SYNCHRONOUS);     
        break;
      }

      case FMLParser::OP_CONCURRENCY_OR: {
        enterOuterAlt(_localctx, 3);
        setState(3769);
        match(FMLParser::OP_CONCURRENCY_OR);
         antlrcpp::downCast<Op_concurrencyContext *>(_localctx)->op =  OP(WEAK_SYNCHRONOUS);       
        break;
      }

      case FMLParser::OP_CONCURRENCY_INTERLEAVING: {
        enterOuterAlt(_localctx, 4);
        setState(3771);
        match(FMLParser::OP_CONCURRENCY_INTERLEAVING);
         antlrcpp::downCast<Op_concurrencyContext *>(_localctx)->op =  OP(INTERLEAVING);           
        break;
      }

      case FMLParser::OP_CONCURRENCY_PARTIAL_ORDER: {
        enterOuterAlt(_localctx, 5);
        setState(3773);
        match(FMLParser::OP_CONCURRENCY_PARTIAL_ORDER);
         antlrcpp::downCast<Op_concurrencyContext *>(_localctx)->op =  OP(PARTIAL_ORDER);          
        break;
      }

      case FMLParser::OP_CONCURRENCY_PARALLEL: {
        enterOuterAlt(_localctx, 6);
        setState(3775);
        match(FMLParser::OP_CONCURRENCY_PARALLEL);
         antlrcpp::downCast<Op_concurrencyContext *>(_localctx)->op =  OP(PARALLEL);               
        break;
      }

      case FMLParser::OP_CONCURRENCY_RDV_ASYNC: {
        enterOuterAlt(_localctx, 7);
        setState(3777);
        match(FMLParser::OP_CONCURRENCY_RDV_ASYNC);
         antlrcpp::downCast<Op_concurrencyContext *>(_localctx)->op =  OP(RDV_ASYNCHRONOUS);       
        break;
      }

      case FMLParser::OP_CONCURRENCY_RDV_AND: {
        enterOuterAlt(_localctx, 8);
        setState(3779);
        match(FMLParser::OP_CONCURRENCY_RDV_AND);
         antlrcpp::downCast<Op_concurrencyContext *>(_localctx)->op =  OP(RDV_STRONG_SYNCHRONOUS); 
        break;
      }

      case FMLParser::OP_CONCURRENCY_RDV_OR: {
        enterOuterAlt(_localctx, 9);
        setState(3781);
        match(FMLParser::OP_CONCURRENCY_RDV_OR);
         antlrcpp::downCast<Op_concurrencyContext *>(_localctx)->op =  OP(RDV_WEAK_SYNCHRONOUS);   
        break;
      }

      case FMLParser::OP_CONCURRENCY_RDV_INTERLEAVING: {
        enterOuterAlt(_localctx, 10);
        setState(3783);
        match(FMLParser::OP_CONCURRENCY_RDV_INTERLEAVING);
         antlrcpp::downCast<Op_concurrencyContext *>(_localctx)->op =  OP(RDV_INTERLEAVING);       
        break;
      }

      case FMLParser::OP_CONCURRENCY_RDV_PARALLEL: {
        enterOuterAlt(_localctx, 11);
        setState(3785);
        match(FMLParser::OP_CONCURRENCY_RDV_PARALLEL);
         antlrcpp::downCast<Op_concurrencyContext *>(_localctx)->op =  OP(RDV_PARALLEL);           
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Op_invokableContext ------------------------------------------------------------------

FMLParser::Op_invokableContext::Op_invokableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Op_invokableContext::PLUS() {
  return getToken(FMLParser::PLUS, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::MINUS() {
  return getToken(FMLParser::MINUS, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::STAR() {
  return getToken(FMLParser::STAR, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::DIV() {
  return getToken(FMLParser::DIV, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::MOD() {
  return getToken(FMLParser::MOD, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::EQUAL() {
  return getToken(FMLParser::EQUAL, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::NEQUAL() {
  return getToken(FMLParser::NEQUAL, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::SEQUAL() {
  return getToken(FMLParser::SEQUAL, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::NSEQUAL() {
  return getToken(FMLParser::NSEQUAL, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::GT() {
  return getToken(FMLParser::GT, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::GTE() {
  return getToken(FMLParser::GTE, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::LTE() {
  return getToken(FMLParser::LTE, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::LNOT() {
  return getToken(FMLParser::LNOT, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::LAND() {
  return getToken(FMLParser::LAND, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::LAND_THEN() {
  return getToken(FMLParser::LAND_THEN, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::LOR() {
  return getToken(FMLParser::LOR, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::LOR_ELSE() {
  return getToken(FMLParser::LOR_ELSE, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::BNOT() {
  return getToken(FMLParser::BNOT, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::BAND() {
  return getToken(FMLParser::BAND, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::BOR() {
  return getToken(FMLParser::BOR, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::BXOR() {
  return getToken(FMLParser::BXOR, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::LSHIFT() {
  return getToken(FMLParser::LSHIFT, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::RSHIFT() {
  return getToken(FMLParser::RSHIFT, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::ASSIGN() {
  return getToken(FMLParser::ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::ASSIGN_AFTER() {
  return getToken(FMLParser::ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::ASSIGN_REF() {
  return getToken(FMLParser::ASSIGN_REF, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::ASSIGN_MACRO() {
  return getToken(FMLParser::ASSIGN_MACRO, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::OP_PUSH() {
  return getToken(FMLParser::OP_PUSH, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::OP_ASSIGN_TOP() {
  return getToken(FMLParser::OP_ASSIGN_TOP, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::OP_TOP() {
  return getToken(FMLParser::OP_TOP, 0);
}

tree::TerminalNode* FMLParser::Op_invokableContext::OP_POP() {
  return getToken(FMLParser::OP_POP, 0);
}


size_t FMLParser::Op_invokableContext::getRuleIndex() const {
  return FMLParser::RuleOp_invokable;
}


FMLParser::Op_invokableContext* FMLParser::op_invokable() {
  Op_invokableContext *_localctx = _tracker.createInstance<Op_invokableContext>(_ctx, getState());
  enterRule(_localctx, 342, FMLParser::RuleOp_invokable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3853);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::PLUS: {
        enterOuterAlt(_localctx, 1);
        setState(3789);
        match(FMLParser::PLUS);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(PLUS);         
        break;
      }

      case FMLParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(3791);
        match(FMLParser::MINUS);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(MINUS);        
        break;
      }

      case FMLParser::STAR: {
        enterOuterAlt(_localctx, 3);
        setState(3793);
        match(FMLParser::STAR);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(MULT);         
        break;
      }

      case FMLParser::DIV: {
        enterOuterAlt(_localctx, 4);
        setState(3795);
        match(FMLParser::DIV);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(DIV);          
        break;
      }

      case FMLParser::MOD: {
        enterOuterAlt(_localctx, 5);
        setState(3797);
        match(FMLParser::MOD);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(MOD);          
        break;
      }

      case FMLParser::EQUAL: {
        enterOuterAlt(_localctx, 6);
        setState(3799);
        match(FMLParser::EQUAL);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(EQ);           
        break;
      }

      case FMLParser::NEQUAL: {
        enterOuterAlt(_localctx, 7);
        setState(3801);
        match(FMLParser::NEQUAL);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(NEQ);          
        break;
      }

      case FMLParser::SEQUAL: {
        enterOuterAlt(_localctx, 8);
        setState(3803);
        match(FMLParser::SEQUAL);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(SEQ);          
        break;
      }

      case FMLParser::NSEQUAL: {
        enterOuterAlt(_localctx, 9);
        setState(3805);
        match(FMLParser::NSEQUAL);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(NSEQ);         
        break;
      }

      case FMLParser::GT: {
        enterOuterAlt(_localctx, 10);
        setState(3807);
        match(FMLParser::GT);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(GT);           
        break;
      }

      case FMLParser::GTE: {
        enterOuterAlt(_localctx, 11);
        setState(3809);
        match(FMLParser::GTE);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(GTE);          
        break;
      }

      case FMLParser::LT_: {
        enterOuterAlt(_localctx, 12);
        setState(3811);
        match(FMLParser::LT_);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(LT);           
        break;
      }

      case FMLParser::LTE: {
        enterOuterAlt(_localctx, 13);
        setState(3813);
        match(FMLParser::LTE);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(LTE);          
        break;
      }

      case FMLParser::LNOT: {
        enterOuterAlt(_localctx, 14);
        setState(3815);
        match(FMLParser::LNOT);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(NOT);          
        break;
      }

      case FMLParser::LAND: {
        enterOuterAlt(_localctx, 15);
        setState(3817);
        match(FMLParser::LAND);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(AND);          
        break;
      }

      case FMLParser::LAND_THEN: {
        enterOuterAlt(_localctx, 16);
        setState(3819);
        match(FMLParser::LAND_THEN);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(AND_THEN);     
        break;
      }

      case FMLParser::LOR: {
        enterOuterAlt(_localctx, 17);
        setState(3821);
        match(FMLParser::LOR);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(OR);           
        break;
      }

      case FMLParser::LOR_ELSE: {
        enterOuterAlt(_localctx, 18);
        setState(3823);
        match(FMLParser::LOR_ELSE);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(OR_ELSE);      
        break;
      }

      case FMLParser::BNOT: {
        enterOuterAlt(_localctx, 19);
        setState(3825);
        match(FMLParser::BNOT);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(BNOT);         
        break;
      }

      case FMLParser::BAND: {
        enterOuterAlt(_localctx, 20);
        setState(3827);
        match(FMLParser::BAND);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(BAND);         
        break;
      }

      case FMLParser::BOR: {
        enterOuterAlt(_localctx, 21);
        setState(3829);
        match(FMLParser::BOR);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(BOR);          
        break;
      }

      case FMLParser::BXOR: {
        enterOuterAlt(_localctx, 22);
        setState(3831);
        match(FMLParser::BXOR);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(BXOR);         
        break;
      }

      case FMLParser::LSHIFT: {
        enterOuterAlt(_localctx, 23);
        setState(3833);
        match(FMLParser::LSHIFT);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(LSHIFT);       
        break;
      }

      case FMLParser::RSHIFT: {
        enterOuterAlt(_localctx, 24);
        setState(3835);
        match(FMLParser::RSHIFT);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(RSHIFT);       
        break;
      }

      case FMLParser::ASSIGN: {
        enterOuterAlt(_localctx, 25);
        setState(3837);
        match(FMLParser::ASSIGN);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(ASSIGN);       
        break;
      }

      case FMLParser::ASSIGN_AFTER: {
        enterOuterAlt(_localctx, 26);
        setState(3839);
        match(FMLParser::ASSIGN_AFTER);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(ASSIGN_AFTER); 
        break;
      }

      case FMLParser::ASSIGN_REF: {
        enterOuterAlt(_localctx, 27);
        setState(3841);
        match(FMLParser::ASSIGN_REF);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(ASSIGN_REF);   
        break;
      }

      case FMLParser::ASSIGN_MACRO: {
        enterOuterAlt(_localctx, 28);
        setState(3843);
        match(FMLParser::ASSIGN_MACRO);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(ASSIGN_MACRO); 
        break;
      }

      case FMLParser::OP_PUSH: {
        enterOuterAlt(_localctx, 29);
        setState(3845);
        match(FMLParser::OP_PUSH);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(PUSH);         
        break;
      }

      case FMLParser::OP_ASSIGN_TOP: {
        enterOuterAlt(_localctx, 30);
        setState(3847);
        match(FMLParser::OP_ASSIGN_TOP);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(ASSIGN_TOP);   
        break;
      }

      case FMLParser::OP_TOP: {
        enterOuterAlt(_localctx, 31);
        setState(3849);
        match(FMLParser::OP_TOP);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(TOP);          
        break;
      }

      case FMLParser::OP_POP: {
        enterOuterAlt(_localctx, 32);
        setState(3851);
        match(FMLParser::OP_POP);
         antlrcpp::downCast<Op_invokableContext *>(_localctx)->op =  OP(POP);          
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prefix_statementContext ------------------------------------------------------------------

FMLParser::Prefix_statementContext::Prefix_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Prefix_statementContext::DOLLAR_LCURLY() {
  return getToken(FMLParser::DOLLAR_LCURLY, 0);
}

tree::TerminalNode* FMLParser::Prefix_statementContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

FMLParser::Avm_operatorContext* FMLParser::Prefix_statementContext::avm_operator() {
  return getRuleContext<FMLParser::Avm_operatorContext>(0);
}

std::vector<FMLParser::Prefix_statementContext *> FMLParser::Prefix_statementContext::prefix_statement() {
  return getRuleContexts<FMLParser::Prefix_statementContext>();
}

FMLParser::Prefix_statementContext* FMLParser::Prefix_statementContext::prefix_statement(size_t i) {
  return getRuleContext<FMLParser::Prefix_statementContext>(i);
}

std::vector<FMLParser::UnaryExpressionContext *> FMLParser::Prefix_statementContext::unaryExpression() {
  return getRuleContexts<FMLParser::UnaryExpressionContext>();
}

FMLParser::UnaryExpressionContext* FMLParser::Prefix_statementContext::unaryExpression(size_t i) {
  return getRuleContext<FMLParser::UnaryExpressionContext>(i);
}


size_t FMLParser::Prefix_statementContext::getRuleIndex() const {
  return FMLParser::RulePrefix_statement;
}


FMLParser::Prefix_statementContext* FMLParser::prefix_statement() {
  Prefix_statementContext *_localctx = _tracker.createInstance<Prefix_statementContext>(_ctx, getState());
  enterRule(_localctx, 344, FMLParser::RulePrefix_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3855);
    match(FMLParser::DOLLAR_LCURLY);
    setState(3856);
    antlrcpp::downCast<Prefix_statementContext *>(_localctx)->a = avm_operator();
     antlrcpp::downCast<Prefix_statementContext *>(_localctx)->ac =  NEW_STMT(antlrcpp::downCast<Prefix_statementContext *>(_localctx)->a->op);  
    setState(3866);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 219) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 432)) & 125) != 0)) {
      setState(3864);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 453, _ctx)) {
      case 1: {
        setState(3858);
        antlrcpp::downCast<Prefix_statementContext *>(_localctx)->ps = prefix_statement();
         _localctx->ac->append(antlrcpp::downCast<Prefix_statementContext *>(_localctx)->ps->ac); 
        break;
      }

      case 2: {
        setState(3861);
        antlrcpp::downCast<Prefix_statementContext *>(_localctx)->e = unaryExpression();
         _localctx->ac->append(antlrcpp::downCast<Prefix_statementContext *>(_localctx)->e->bf);  
        break;
      }

      default:
        break;
      }
      setState(3868);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3869);
    match(FMLParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Prefix_expressionContext ------------------------------------------------------------------

FMLParser::Prefix_expressionContext::Prefix_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Prefix_expressionContext::DOLLAR_LCURLY() {
  return getToken(FMLParser::DOLLAR_LCURLY, 0);
}

tree::TerminalNode* FMLParser::Prefix_expressionContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

FMLParser::Avm_operatorContext* FMLParser::Prefix_expressionContext::avm_operator() {
  return getRuleContext<FMLParser::Avm_operatorContext>(0);
}

std::vector<FMLParser::Prefix_expressionContext *> FMLParser::Prefix_expressionContext::prefix_expression() {
  return getRuleContexts<FMLParser::Prefix_expressionContext>();
}

FMLParser::Prefix_expressionContext* FMLParser::Prefix_expressionContext::prefix_expression(size_t i) {
  return getRuleContext<FMLParser::Prefix_expressionContext>(i);
}

std::vector<FMLParser::UnaryExpressionContext *> FMLParser::Prefix_expressionContext::unaryExpression() {
  return getRuleContexts<FMLParser::UnaryExpressionContext>();
}

FMLParser::UnaryExpressionContext* FMLParser::Prefix_expressionContext::unaryExpression(size_t i) {
  return getRuleContext<FMLParser::UnaryExpressionContext>(i);
}


size_t FMLParser::Prefix_expressionContext::getRuleIndex() const {
  return FMLParser::RulePrefix_expression;
}


FMLParser::Prefix_expressionContext* FMLParser::prefix_expression() {
  Prefix_expressionContext *_localctx = _tracker.createInstance<Prefix_expressionContext>(_ctx, getState());
  enterRule(_localctx, 346, FMLParser::RulePrefix_expression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3871);
    match(FMLParser::DOLLAR_LCURLY);
    setState(3872);
    antlrcpp::downCast<Prefix_expressionContext *>(_localctx)->a = avm_operator();
     antlrcpp::downCast<Prefix_expressionContext *>(_localctx)->ac =  NEW_STMT(antlrcpp::downCast<Prefix_expressionContext *>(_localctx)->a->op);  
    setState(3882);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 219) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 432)) & 125) != 0)) {
      setState(3880);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 455, _ctx)) {
      case 1: {
        setState(3874);
        antlrcpp::downCast<Prefix_expressionContext *>(_localctx)->ps = prefix_expression();
         _localctx->ac->append(antlrcpp::downCast<Prefix_expressionContext *>(_localctx)->ps->ac); 
        break;
      }

      case 2: {
        setState(3877);
        antlrcpp::downCast<Prefix_expressionContext *>(_localctx)->e = unaryExpression();
         _localctx->ac->append(antlrcpp::downCast<Prefix_expressionContext *>(_localctx)->e->bf);  
        break;
      }

      default:
        break;
      }
      setState(3884);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3885);
    match(FMLParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Avm_operatorContext ------------------------------------------------------------------

FMLParser::Avm_operatorContext::Avm_operatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Op_invokableContext* FMLParser::Avm_operatorContext::op_invokable() {
  return getRuleContext<FMLParser::Op_invokableContext>(0);
}

FMLParser::Op_activityContext* FMLParser::Avm_operatorContext::op_activity() {
  return getRuleContext<FMLParser::Op_activityContext>(0);
}

tree::TerminalNode* FMLParser::Avm_operatorContext::ID() {
  return getToken(FMLParser::ID, 0);
}


size_t FMLParser::Avm_operatorContext::getRuleIndex() const {
  return FMLParser::RuleAvm_operator;
}


FMLParser::Avm_operatorContext* FMLParser::avm_operator() {
  Avm_operatorContext *_localctx = _tracker.createInstance<Avm_operatorContext>(_ctx, getState());
  enterRule(_localctx, 348, FMLParser::RuleAvm_operator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3895);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 457, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3887);
      antlrcpp::downCast<Avm_operatorContext *>(_localctx)->oi = op_invokable();
       antlrcpp::downCast<Avm_operatorContext *>(_localctx)->op =  antlrcpp::downCast<Avm_operatorContext *>(_localctx)->oi->op; 
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3890);
      antlrcpp::downCast<Avm_operatorContext *>(_localctx)->oa = op_activity();
       antlrcpp::downCast<Avm_operatorContext *>(_localctx)->op =  antlrcpp::downCast<Avm_operatorContext *>(_localctx)->oa->op; 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3893);

      if (!( (_localctx->op = sep::OperatorManager::getOp(getCurrentToken()->getText())) != nullptr )) throw FailedPredicateException(this, " ($op = sep::OperatorManager::getOp(getCurrentToken()->getText())) != nullptr ");
      setState(3894);
      match(FMLParser::ID);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_invoke_methodContext ------------------------------------------------------------------

FMLParser::Statement_invoke_methodContext::Statement_invoke_methodContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Statement_invoke_methodContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

tree::TerminalNode* FMLParser::Statement_invoke_methodContext::ID() {
  return getToken(FMLParser::ID, 0);
}

FMLParser::Decl_instance_machine_paramsContext* FMLParser::Statement_invoke_methodContext::decl_instance_machine_params() {
  return getRuleContext<FMLParser::Decl_instance_machine_paramsContext>(0);
}

FMLParser::Decl_instance_machine_returnsContext* FMLParser::Statement_invoke_methodContext::decl_instance_machine_returns() {
  return getRuleContext<FMLParser::Decl_instance_machine_returnsContext>(0);
}


size_t FMLParser::Statement_invoke_methodContext::getRuleIndex() const {
  return FMLParser::RuleStatement_invoke_method;
}


FMLParser::Statement_invoke_methodContext* FMLParser::statement_invoke_method() {
  Statement_invoke_methodContext *_localctx = _tracker.createInstance<Statement_invoke_methodContext>(_ctx, getState());
  enterRule(_localctx, 350, FMLParser::RuleStatement_invoke_method);

  	sep::BF modelProcedure;
  	sep::Machine * callProcedure;

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3897);
    match(FMLParser::T__227);
    setState(3898);
    antlrcpp::downCast<Statement_invoke_methodContext *>(_localctx)->id = match(FMLParser::ID);

    		modelProcedure = sep::ParserUtil::getvarProcedure(antlrcpp::downCast<Statement_invoke_methodContext *>(_localctx)->id->getText());

    		callProcedure = sep::Machine::newProcedureInstance(_CPM_,
    				sep::OSS() << "call_" << ++mProcedureCallCount
    						<< sep::NamedElement::NAME_ID_SEPARATOR
    						<< antlrcpp::downCast<Statement_invoke_methodContext *>(_localctx)->id->getText(), modelProcedure);

    		callProcedure->getwSpecifier().setDesignInstanceStatic();

    		antlrcpp::downCast<Statement_invoke_methodContext *>(_localctx)->ac =  NEW_STMT1(OP(INVOKE_METHOD), sep::BF(callProcedure));
    	  
    setState(3901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LPAREN) {
      setState(3900);
      decl_instance_machine_params( callProcedure );
    }
    setState(3904);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__49

    || _la == FMLParser::T__50) {
      setState(3903);
      decl_instance_machine_returns( callProcedure );
    }
    setState(3906);
    match(FMLParser::SEMI);
   _ctx->stop = _input->LT(-1);

    	SET_RULE_LOCATION(callProcedure);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_invokeContext ------------------------------------------------------------------

FMLParser::Statement_invokeContext::Statement_invokeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Statement_invokeContext::LPAREN_INVOKE() {
  return getToken(FMLParser::LPAREN_INVOKE, 0);
}

tree::TerminalNode* FMLParser::Statement_invokeContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

tree::TerminalNode* FMLParser::Statement_invokeContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

std::vector<FMLParser::UnaryExpressionContext *> FMLParser::Statement_invokeContext::unaryExpression() {
  return getRuleContexts<FMLParser::UnaryExpressionContext>();
}

FMLParser::UnaryExpressionContext* FMLParser::Statement_invokeContext::unaryExpression(size_t i) {
  return getRuleContext<FMLParser::UnaryExpressionContext>(i);
}

tree::TerminalNode* FMLParser::Statement_invokeContext::ID() {
  return getToken(FMLParser::ID, 0);
}

FMLParser::Op_invokableContext* FMLParser::Statement_invokeContext::op_invokable() {
  return getRuleContext<FMLParser::Op_invokableContext>(0);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Statement_invokeContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Statement_invokeContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}

FMLParser::Op_activityContext* FMLParser::Statement_invokeContext::op_activity() {
  return getRuleContext<FMLParser::Op_activityContext>(0);
}


size_t FMLParser::Statement_invokeContext::getRuleIndex() const {
  return FMLParser::RuleStatement_invoke;
}


FMLParser::Statement_invokeContext* FMLParser::statement_invoke() {
  Statement_invokeContext *_localctx = _tracker.createInstance<Statement_invokeContext>(_ctx, getState());
  enterRule(_localctx, 352, FMLParser::RuleStatement_invoke);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3908);
    match(FMLParser::LPAREN_INVOKE);
    setState(3909);
    antlrcpp::downCast<Statement_invokeContext *>(_localctx)->ue = unaryExpression();
     antlrcpp::downCast<Statement_invokeContext *>(_localctx)->ac =  NEW_STMT1(OP(INVOKE_METHOD), antlrcpp::downCast<Statement_invokeContext *>(_localctx)->ue->bf); 
    setState(3918);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::ID: {
        setState(3911);
        antlrcpp::downCast<Statement_invokeContext *>(_localctx)->id = match(FMLParser::ID);
         _localctx->ac->append(sep::ParserUtil::getInvokable(antlrcpp::downCast<Statement_invokeContext *>(_localctx)->ue->bf, antlrcpp::downCast<Statement_invokeContext *>(_localctx)->id->getText())); 
        break;
      }

      case FMLParser::T__24: {
        setState(3913);
        match(FMLParser::T__24);
         _localctx->ac->append( INCR_BF(OP(IN)) ); 
        break;
      }

      case FMLParser::ASSIGN:
      case FMLParser::ASSIGN_AFTER:
      case FMLParser::ASSIGN_REF:
      case FMLParser::ASSIGN_MACRO:
      case FMLParser::OP_PUSH:
      case FMLParser::OP_ASSIGN_TOP:
      case FMLParser::OP_TOP:
      case FMLParser::OP_POP:
      case FMLParser::LAND:
      case FMLParser::LAND_THEN:
      case FMLParser::LNOT:
      case FMLParser::LOR:
      case FMLParser::LOR_ELSE:
      case FMLParser::EQUAL:
      case FMLParser::NEQUAL:
      case FMLParser::SEQUAL:
      case FMLParser::NSEQUAL:
      case FMLParser::LTE:
      case FMLParser::LT_:
      case FMLParser::GTE:
      case FMLParser::GT:
      case FMLParser::PLUS:
      case FMLParser::MINUS:
      case FMLParser::STAR:
      case FMLParser::DIV:
      case FMLParser::MOD:
      case FMLParser::RSHIFT:
      case FMLParser::LSHIFT:
      case FMLParser::BAND:
      case FMLParser::BNOT:
      case FMLParser::BOR:
      case FMLParser::BXOR: {
        setState(3915);
        antlrcpp::downCast<Statement_invokeContext *>(_localctx)->op = op_invokable();
         _localctx->ac->append( INCR_BF(antlrcpp::downCast<Statement_invokeContext *>(_localctx)->op->op) ); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3925);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 219) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 432)) & 125) != 0)) {
      setState(3920);
      antlrcpp::downCast<Statement_invokeContext *>(_localctx)->e = expression();
       _localctx->ac->append(antlrcpp::downCast<Statement_invokeContext *>(_localctx)->e->bf); 
      setState(3927);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3936);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__228: {
        setState(3928);
        match(FMLParser::T__228);
        setState(3929);
        antlrcpp::downCast<Statement_invokeContext *>(_localctx)->e = expression();
        break;
      }

      case FMLParser::T__229: {
        setState(3930);
        match(FMLParser::T__229);
        setState(3931);
        antlrcpp::downCast<Statement_invokeContext *>(_localctx)->ue = unaryExpression();
        break;
      }

      case FMLParser::T__230: {
        setState(3932);
        match(FMLParser::T__230);
        setState(3933);
        antlrcpp::downCast<Statement_invokeContext *>(_localctx)->ue = unaryExpression();
        break;
      }

      case FMLParser::T__231: {
        setState(3934);
        match(FMLParser::T__231);
        setState(3935);
        antlrcpp::downCast<Statement_invokeContext *>(_localctx)->o = op_activity();
        break;
      }

      case FMLParser::RPAREN: {
        break;
      }

    default:
      break;
    }
    setState(3938);
    match(FMLParser::RPAREN);
    setState(3939);
    match(FMLParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_invokeContext ------------------------------------------------------------------

FMLParser::Expression_invokeContext::Expression_invokeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Expression_invokeContext::LPAREN_INVOKE() {
  return getToken(FMLParser::LPAREN_INVOKE, 0);
}

tree::TerminalNode* FMLParser::Expression_invokeContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

FMLParser::UnaryExpressionContext* FMLParser::Expression_invokeContext::unaryExpression() {
  return getRuleContext<FMLParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* FMLParser::Expression_invokeContext::ID() {
  return getToken(FMLParser::ID, 0);
}

FMLParser::Op_invokableContext* FMLParser::Expression_invokeContext::op_invokable() {
  return getRuleContext<FMLParser::Op_invokableContext>(0);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Expression_invokeContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Expression_invokeContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}


size_t FMLParser::Expression_invokeContext::getRuleIndex() const {
  return FMLParser::RuleExpression_invoke;
}


FMLParser::Expression_invokeContext* FMLParser::expression_invoke() {
  Expression_invokeContext *_localctx = _tracker.createInstance<Expression_invokeContext>(_ctx, getState());
  enterRule(_localctx, 354, FMLParser::RuleExpression_invoke);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3941);
    match(FMLParser::LPAREN_INVOKE);
    setState(3942);
    antlrcpp::downCast<Expression_invokeContext *>(_localctx)->ue = unaryExpression();
     antlrcpp::downCast<Expression_invokeContext *>(_localctx)->ac =  NEW_STMT1(OP(INVOKE_METHOD), antlrcpp::downCast<Expression_invokeContext *>(_localctx)->ue->bf); 
    setState(3951);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::ID: {
        setState(3944);
        antlrcpp::downCast<Expression_invokeContext *>(_localctx)->id = match(FMLParser::ID);
         _localctx->ac->append(sep::ParserUtil::getInvokable(antlrcpp::downCast<Expression_invokeContext *>(_localctx)->e->bf, antlrcpp::downCast<Expression_invokeContext *>(_localctx)->id->getText())); 
        break;
      }

      case FMLParser::T__24: {
        setState(3946);
        match(FMLParser::T__24);
         _localctx->ac->append( INCR_BF(OP(IN)) ); 
        break;
      }

      case FMLParser::ASSIGN:
      case FMLParser::ASSIGN_AFTER:
      case FMLParser::ASSIGN_REF:
      case FMLParser::ASSIGN_MACRO:
      case FMLParser::OP_PUSH:
      case FMLParser::OP_ASSIGN_TOP:
      case FMLParser::OP_TOP:
      case FMLParser::OP_POP:
      case FMLParser::LAND:
      case FMLParser::LAND_THEN:
      case FMLParser::LNOT:
      case FMLParser::LOR:
      case FMLParser::LOR_ELSE:
      case FMLParser::EQUAL:
      case FMLParser::NEQUAL:
      case FMLParser::SEQUAL:
      case FMLParser::NSEQUAL:
      case FMLParser::LTE:
      case FMLParser::LT_:
      case FMLParser::GTE:
      case FMLParser::GT:
      case FMLParser::PLUS:
      case FMLParser::MINUS:
      case FMLParser::STAR:
      case FMLParser::DIV:
      case FMLParser::MOD:
      case FMLParser::RSHIFT:
      case FMLParser::LSHIFT:
      case FMLParser::BAND:
      case FMLParser::BNOT:
      case FMLParser::BOR:
      case FMLParser::BXOR: {
        setState(3948);
        antlrcpp::downCast<Expression_invokeContext *>(_localctx)->oi = op_invokable();
         _localctx->ac->append( INCR_BF(antlrcpp::downCast<Expression_invokeContext *>(_localctx)->oi->op) ); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(3958);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 219) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 432)) & 125) != 0)) {
      setState(3953);
      antlrcpp::downCast<Expression_invokeContext *>(_localctx)->e = expression();
       _localctx->ac->append(antlrcpp::downCast<Expression_invokeContext *>(_localctx)->e->bf); 
      setState(3960);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3961);
    match(FMLParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_activity_newContext ------------------------------------------------------------------

FMLParser::Statement_activity_newContext::Statement_activity_newContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_instance_dynamic_implContext* FMLParser::Statement_activity_newContext::decl_instance_dynamic_impl() {
  return getRuleContext<FMLParser::Decl_instance_dynamic_implContext>(0);
}

tree::TerminalNode* FMLParser::Statement_activity_newContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

FMLParser::QualifiedNameIDContext* FMLParser::Statement_activity_newContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}

FMLParser::ExpressionContext* FMLParser::Statement_activity_newContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}


size_t FMLParser::Statement_activity_newContext::getRuleIndex() const {
  return FMLParser::RuleStatement_activity_new;
}


FMLParser::Statement_activity_newContext* FMLParser::statement_activity_new() {
  Statement_activity_newContext *_localctx = _tracker.createInstance<Statement_activity_newContext>(_ctx, getState());
  enterRule(_localctx, 356, FMLParser::RuleStatement_activity_new);

  	sep::Machine * ptrInstance = nullptr;
  	sep::BF aModel;
  	
  	sep::Machine * container = _CPM_;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3963);
    match(FMLParser::T__232);
     antlrcpp::downCast<Statement_activity_newContext *>(_localctx)->ac =  NEW_STMT(OP(INVOKE_NEW)); 
    setState(3965);
    antlrcpp::downCast<Statement_activity_newContext *>(_localctx)->id = qualifiedNameID();

    		aModel = sep::ParserUtil::getvarMachine(antlrcpp::downCast<Statement_activity_newContext *>(_localctx)->id->s, antlrcpp::downCast<Statement_activity_newContext *>(_localctx)->id->nb);

    		if( aModel.is< sep::Machine >() )
    		{
    			PUSH_CTX_NEW( aModel.to_ptr< sep::Machine >() );
    		}

    		ptrInstance = sep::Machine::newInstance(container,
    				newInvokeNewInstanceNameID(container, antlrcpp::downCast<Statement_activity_newContext *>(_localctx)->id->s), aModel, 1, 1);

    		ptrInstance->getwSpecifier().override_ifdef(
    				sep::Specifier::DESIGN_INSTANCE_DYNAMIC_SPECIFIER );

    		 _localctx->ac->append( container->saveOwnedElement( ptrInstance ) );
    	  
    setState(3967);
    decl_instance_dynamic_impl( _CPM_ , ptrInstance );
    setState(3970);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__49

    || _la == FMLParser::T__50) {
      setState(3968);
      _la = _input->LA(1);
      if (!(_la == FMLParser::T__49

      || _la == FMLParser::T__50)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3969);
      antlrcpp::downCast<Statement_activity_newContext *>(_localctx)->e = expression();
    }
    setState(3972);
    match(FMLParser::SEMI);
   _ctx->stop = _input->LT(-1);

    	if( aModel.is< sep::Machine >() )
    	{
    		POP_CTX;
    	}

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Decl_instance_dynamic_implContext ------------------------------------------------------------------

FMLParser::Decl_instance_dynamic_implContext::Decl_instance_dynamic_implContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Decl_instance_dynamic_implContext::Decl_instance_dynamic_implContext(ParserRuleContext *parent, size_t invokingState, sep::Machine * container, sep::Machine * ptrInstance)
  : ParserRuleContext(parent, invokingState) {
  this->container = container;
  this->ptrInstance = ptrInstance;
}

tree::TerminalNode* FMLParser::Decl_instance_dynamic_implContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Decl_instance_dynamic_implContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

tree::TerminalNode* FMLParser::Decl_instance_dynamic_implContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Decl_instance_dynamic_implContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

FMLParser::Def_instance_on_new_activityContext* FMLParser::Decl_instance_dynamic_implContext::def_instance_on_new_activity() {
  return getRuleContext<FMLParser::Def_instance_on_new_activityContext>(0);
}

std::vector<FMLParser::Def_instance_activityContext *> FMLParser::Decl_instance_dynamic_implContext::def_instance_activity() {
  return getRuleContexts<FMLParser::Def_instance_activityContext>();
}

FMLParser::Def_instance_activityContext* FMLParser::Decl_instance_dynamic_implContext::def_instance_activity(size_t i) {
  return getRuleContext<FMLParser::Def_instance_activityContext>(i);
}

std::vector<FMLParser::StatementContext *> FMLParser::Decl_instance_dynamic_implContext::statement() {
  return getRuleContexts<FMLParser::StatementContext>();
}

FMLParser::StatementContext* FMLParser::Decl_instance_dynamic_implContext::statement(size_t i) {
  return getRuleContext<FMLParser::StatementContext>(i);
}


size_t FMLParser::Decl_instance_dynamic_implContext::getRuleIndex() const {
  return FMLParser::RuleDecl_instance_dynamic_impl;
}


FMLParser::Decl_instance_dynamic_implContext* FMLParser::decl_instance_dynamic_impl(sep::Machine * container,sep::Machine * ptrInstance) {
  Decl_instance_dynamic_implContext *_localctx = _tracker.createInstance<Decl_instance_dynamic_implContext>(_ctx, getState(), container, ptrInstance);
  enterRule(_localctx, 358, FMLParser::RuleDecl_instance_dynamic_impl);

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3979);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LPAREN) {
      setState(3974);
      match(FMLParser::LPAREN);
      setState(3976);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 219) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 432)) & 125) != 0)) {
        setState(3975);
        def_instance_on_new_activity( ptrInstance );
      }
      setState(3978);
      match(FMLParser::RPAREN);
    }
    setState(3997);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LCURLY) {
      setState(3981);
      match(FMLParser::LCURLY);
      setState(3987);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2483044352) != 0) || ((((_la - 84) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 84)) & 33554441) != 0) || ((((_la - 228) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 228)) & -4468811335467295) != 0) || ((((_la - 292) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 292)) & 1152921504606850055) != 0) || ((((_la - 357) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 357)) & 598134329704513) != 0) || _la == FMLParser::ID) {
        setState(3982);
        antlrcpp::downCast<Decl_instance_dynamic_implContext *>(_localctx)->s = statement();
         ptrInstance->getUniqBehaviorPart()->seqOnCreate(antlrcpp::downCast<Decl_instance_dynamic_implContext *>(_localctx)->s->ac); 
        setState(3989);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3993);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FMLParser::T__61

      || _la == FMLParser::T__62) {
        setState(3990);
        def_instance_activity( ptrInstance );
        setState(3995);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3996);
      match(FMLParser::RCURLY);
    }
   _ctx->stop = _input->LT(-1);

    	SET_RULE_LOCATION(ptrInstance);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_activity_newContext ------------------------------------------------------------------

FMLParser::Expression_activity_newContext::Expression_activity_newContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Activity_machine_param_returnContext* FMLParser::Expression_activity_newContext::activity_machine_param_return() {
  return getRuleContext<FMLParser::Activity_machine_param_returnContext>(0);
}

FMLParser::QualifiedNameIDContext* FMLParser::Expression_activity_newContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}


size_t FMLParser::Expression_activity_newContext::getRuleIndex() const {
  return FMLParser::RuleExpression_activity_new;
}


FMLParser::Expression_activity_newContext* FMLParser::expression_activity_new() {
  Expression_activity_newContext *_localctx = _tracker.createInstance<Expression_activity_newContext>(_ctx, getState());
  enterRule(_localctx, 360, FMLParser::RuleExpression_activity_new);

  	sep::Machine * ptrInstance = nullptr;
  	sep::BF aModel;
  	
  	sep::Machine * container = _CPM_;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3999);
    match(FMLParser::T__232);
     antlrcpp::downCast<Expression_activity_newContext *>(_localctx)->ac =  NEW_STMT(OP(INVOKE_NEW)); 
    setState(4001);
    antlrcpp::downCast<Expression_activity_newContext *>(_localctx)->id = qualifiedNameID();

    		sep::BF aModel = sep::ParserUtil::getvarMachine(antlrcpp::downCast<Expression_activity_newContext *>(_localctx)->id->s, antlrcpp::downCast<Expression_activity_newContext *>(_localctx)->id->nb);

    		if( aModel.is< sep::Machine >() )
    		{
    			PUSH_CTX_NEW( aModel.to_ptr< sep::Machine >() );
    		}

    		ptrInstance = sep::Machine::newInstance(container,
    				newInvokeNewInstanceNameID(container, antlrcpp::downCast<Expression_activity_newContext *>(_localctx)->id->s), aModel, 1, 1);

    		ptrInstance->getwSpecifier().override_ifdef(
    				sep::Specifier::DESIGN_INSTANCE_DYNAMIC_SPECIFIER );

    		 _localctx->ac->append( container->saveOwnedElement( ptrInstance ) );
    	  
    setState(4003);
    activity_machine_param_return( aModel , _localctx->ac );
   _ctx->stop = _input->LT(-1);

    	if( aModel.is< sep::Machine >() )
    	{
    		POP_CTX;
    	}

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_promptContext ------------------------------------------------------------------

FMLParser::Statement_promptContext::Statement_promptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Statement_prompt_obsContext* FMLParser::Statement_promptContext::statement_prompt_obs() {
  return getRuleContext<FMLParser::Statement_prompt_obsContext>(0);
}


size_t FMLParser::Statement_promptContext::getRuleIndex() const {
  return FMLParser::RuleStatement_prompt;
}


FMLParser::Statement_promptContext* FMLParser::statement_prompt() {
  Statement_promptContext *_localctx = _tracker.createInstance<Statement_promptContext>(_ctx, getState());
  enterRule(_localctx, 362, FMLParser::RuleStatement_prompt);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4005);
    antlrcpp::downCast<Statement_promptContext *>(_localctx)->spi = statement_prompt_obs();
     antlrcpp::downCast<Statement_promptContext *>(_localctx)->ac =   antlrcpp::downCast<Statement_promptContext *>(_localctx)->spi->ac; 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_prompt_obsContext ------------------------------------------------------------------

FMLParser::Statement_prompt_obsContext::Statement_prompt_obsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Statement_prompt_obsContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Statement_prompt_obsContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

FMLParser::Statement_prompt_obs_comContext* FMLParser::Statement_prompt_obsContext::statement_prompt_obs_com() {
  return getRuleContext<FMLParser::Statement_prompt_obs_comContext>(0);
}

tree::TerminalNode* FMLParser::Statement_prompt_obsContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Statement_prompt_obsContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

tree::TerminalNode* FMLParser::Statement_prompt_obsContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

FMLParser::QualifiedNameIDContext* FMLParser::Statement_prompt_obsContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}

tree::TerminalNode* FMLParser::Statement_prompt_obsContext::LBRACKET() {
  return getToken(FMLParser::LBRACKET, 0);
}

tree::TerminalNode* FMLParser::Statement_prompt_obsContext::RBRACKET() {
  return getToken(FMLParser::RBRACKET, 0);
}

FMLParser::ExpressionContext* FMLParser::Statement_prompt_obsContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}


size_t FMLParser::Statement_prompt_obsContext::getRuleIndex() const {
  return FMLParser::RuleStatement_prompt_obs;
}


FMLParser::Statement_prompt_obsContext* FMLParser::statement_prompt_obs() {
  Statement_prompt_obsContext *_localctx = _tracker.createInstance<Statement_prompt_obsContext>(_ctx, getState());
  enterRule(_localctx, 364, FMLParser::RuleStatement_prompt_obs);

  	sep::BF varMachine = INCR_BF(_SYSTEM_);
  	sep::BF condition = sep::ExpressionConstant::BOOLEAN_TRUE;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4008);
    _la = _input->LA(1);
    if (!(_la == FMLParser::T__233

    || _la == FMLParser::T__234)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4015);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LPAREN) {
      setState(4009);
      match(FMLParser::LPAREN);
      setState(4010);
      match(FMLParser::T__235);
      setState(4011);
      antlrcpp::downCast<Statement_prompt_obsContext *>(_localctx)->id = qualifiedNameID();
      setState(4012);
      match(FMLParser::RPAREN);
       varMachine = sep::ParserUtil::getvarMachine(antlrcpp::downCast<Statement_prompt_obsContext *>(_localctx)->id->s, antlrcpp::downCast<Statement_prompt_obsContext *>(_localctx)->id->nb); 
    }
    setState(4017);
    match(FMLParser::LCURLY);
    setState(4018);
    antlrcpp::downCast<Statement_prompt_obsContext *>(_localctx)->bs = statement_prompt_obs_com( varMachine );
    setState(4019);
    match(FMLParser::RCURLY);
    setState(4031);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__228 || _la == FMLParser::LBRACKET) {
      setState(4026);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::T__228: {
          setState(4020);
          match(FMLParser::T__228);
          setState(4021);
          antlrcpp::downCast<Statement_prompt_obsContext *>(_localctx)->e = expression();
          break;
        }

        case FMLParser::LBRACKET: {
          setState(4022);
          match(FMLParser::LBRACKET);
          setState(4023);
          antlrcpp::downCast<Statement_prompt_obsContext *>(_localctx)->e = expression();
          setState(4024);
          match(FMLParser::RBRACKET);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
       condition = antlrcpp::downCast<Statement_prompt_obsContext *>(_localctx)->e->bf; 
      setState(4029);
      match(FMLParser::SEMI);
    }
     antlrcpp::downCast<Statement_prompt_obsContext *>(_localctx)->ac =  NEW_STMT3(OP(OBS), varMachine, antlrcpp::downCast<Statement_prompt_obsContext *>(_localctx)->bs->ac, condition); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_prompt_obs_comContext ------------------------------------------------------------------

FMLParser::Statement_prompt_obs_comContext::Statement_prompt_obs_comContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Statement_prompt_obs_comContext::Statement_prompt_obs_comContext(ParserRuleContext *parent, size_t invokingState, sep::BF varMachine)
  : ParserRuleContext(parent, invokingState) {
  this->varMachine = varMachine;
}

FMLParser::Statement_comContext* FMLParser::Statement_prompt_obs_comContext::statement_com() {
  return getRuleContext<FMLParser::Statement_comContext>(0);
}


size_t FMLParser::Statement_prompt_obs_comContext::getRuleIndex() const {
  return FMLParser::RuleStatement_prompt_obs_com;
}


FMLParser::Statement_prompt_obs_comContext* FMLParser::statement_prompt_obs_com(sep::BF varMachine) {
  Statement_prompt_obs_comContext *_localctx = _tracker.createInstance<Statement_prompt_obs_comContext>(_ctx, getState(), varMachine);
  enterRule(_localctx, 366, FMLParser::RuleStatement_prompt_obs_com);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4035);
    antlrcpp::downCast<Statement_prompt_obs_comContext *>(_localctx)->sc = statement_com();
     antlrcpp::downCast<Statement_prompt_obs_comContext *>(_localctx)->ac =  antlrcpp::downCast<Statement_prompt_obs_comContext *>(_localctx)->sc->ac; 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Meta_statementContext ------------------------------------------------------------------

FMLParser::Meta_statementContext::Meta_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Meta_statementContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Meta_statementContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

std::vector<FMLParser::StatementContext *> FMLParser::Meta_statementContext::statement() {
  return getRuleContexts<FMLParser::StatementContext>();
}

FMLParser::StatementContext* FMLParser::Meta_statementContext::statement(size_t i) {
  return getRuleContext<FMLParser::StatementContext>(i);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Meta_statementContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Meta_statementContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}


size_t FMLParser::Meta_statementContext::getRuleIndex() const {
  return FMLParser::RuleMeta_statement;
}


FMLParser::Meta_statementContext* FMLParser::meta_statement() {
  Meta_statementContext *_localctx = _tracker.createInstance<Meta_statementContext>(_ctx, getState());
  enterRule(_localctx, 368, FMLParser::RuleMeta_statement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4046);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__236: {
        setState(4038);
        match(FMLParser::T__236);
         antlrcpp::downCast<Meta_statementContext *>(_localctx)->ac =  NEW_STMT(OP(INFORMAL)); 
        break;
      }

      case FMLParser::T__237: {
        setState(4040);
        match(FMLParser::T__237);
         antlrcpp::downCast<Meta_statementContext *>(_localctx)->ac =  NEW_STMT(OP(TRACE));    
        break;
      }

      case FMLParser::T__238: {
        setState(4042);
        match(FMLParser::T__238);
         antlrcpp::downCast<Meta_statementContext *>(_localctx)->ac =  NEW_STMT(OP(DEBUG));    
        break;
      }

      case FMLParser::T__239: {
        setState(4044);
        match(FMLParser::T__239);
         antlrcpp::downCast<Meta_statementContext *>(_localctx)->ac =  NEW_STMT(OP(COMMENT));  
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(4048);
    match(FMLParser::LCURLY);
    setState(4063);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 477, _ctx)) {
    case 1: {
      setState(4052); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(4049);
        antlrcpp::downCast<Meta_statementContext *>(_localctx)->s = statement();
         _localctx->ac->append(antlrcpp::downCast<Meta_statementContext *>(_localctx)->s->ac); 
        setState(4054); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 2483044352) != 0) || ((((_la - 84) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 84)) & 33554441) != 0) || ((((_la - 228) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 228)) & -4468811335467295) != 0) || ((((_la - 292) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 292)) & 1152921504606850055) != 0) || ((((_la - 357) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 357)) & 598134329704513) != 0) || _la == FMLParser::ID);
      break;
    }

    case 2: {
      setState(4059); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(4056);
        antlrcpp::downCast<Meta_statementContext *>(_localctx)->e = expression();
         _localctx->ac->append(antlrcpp::downCast<Meta_statementContext *>(_localctx)->e->bf); 
        setState(4061); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 219) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 432)) & 125) != 0));
      break;
    }

    default:
      break;
    }
    setState(4065);
    match(FMLParser::RCURLY);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_assignContext ------------------------------------------------------------------

FMLParser::Statement_assignContext::Statement_assignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::LvalueContext *> FMLParser::Statement_assignContext::lvalue() {
  return getRuleContexts<FMLParser::LvalueContext>();
}

FMLParser::LvalueContext* FMLParser::Statement_assignContext::lvalue(size_t i) {
  return getRuleContext<FMLParser::LvalueContext>(i);
}

tree::TerminalNode* FMLParser::Statement_assignContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::ASSIGN_REF() {
  return getToken(FMLParser::ASSIGN_REF, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::ASSIGN_MACRO() {
  return getToken(FMLParser::ASSIGN_MACRO, 0);
}

std::vector<tree::TerminalNode *> FMLParser::Statement_assignContext::OP_PUSH() {
  return getTokens(FMLParser::OP_PUSH);
}

tree::TerminalNode* FMLParser::Statement_assignContext::OP_PUSH(size_t i) {
  return getToken(FMLParser::OP_PUSH, i);
}

tree::TerminalNode* FMLParser::Statement_assignContext::OP_ASSIGN_TOP() {
  return getToken(FMLParser::OP_ASSIGN_TOP, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::OP_TOP() {
  return getToken(FMLParser::OP_TOP, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::OP_POP() {
  return getToken(FMLParser::OP_POP, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::INCR() {
  return getToken(FMLParser::INCR, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::DECR() {
  return getToken(FMLParser::DECR, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::ASSIGN() {
  return getToken(FMLParser::ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::ASSIGN_AFTER() {
  return getToken(FMLParser::ASSIGN_AFTER, 0);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Statement_assignContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Statement_assignContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}

tree::TerminalNode* FMLParser::Statement_assignContext::PLUS_ASSIGN() {
  return getToken(FMLParser::PLUS_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::PLUS_ASSIGN_AFTER() {
  return getToken(FMLParser::PLUS_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::MINUS_ASSIGN() {
  return getToken(FMLParser::MINUS_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::MINUS_ASSIGN_AFTER() {
  return getToken(FMLParser::MINUS_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::STAR_ASSIGN() {
  return getToken(FMLParser::STAR_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::STAR_ASSIGN_AFTER() {
  return getToken(FMLParser::STAR_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::DIV_ASSIGN() {
  return getToken(FMLParser::DIV_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::DIV_ASSIGN_AFTER() {
  return getToken(FMLParser::DIV_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::MOD_ASSIGN() {
  return getToken(FMLParser::MOD_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::MOD_ASSIGN_AFTER() {
  return getToken(FMLParser::MOD_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::LAND_ASSIGN() {
  return getToken(FMLParser::LAND_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::LAND_ASSIGN_AFTER() {
  return getToken(FMLParser::LAND_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::LOR_ASSIGN() {
  return getToken(FMLParser::LOR_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::LOR_ASSIGN_AFTER() {
  return getToken(FMLParser::LOR_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::BAND_ASSIGN() {
  return getToken(FMLParser::BAND_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::BAND_ASSIGN_AFTER() {
  return getToken(FMLParser::BAND_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::BOR_ASSIGN() {
  return getToken(FMLParser::BOR_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::BOR_ASSIGN_AFTER() {
  return getToken(FMLParser::BOR_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::BXOR_ASSIGN() {
  return getToken(FMLParser::BXOR_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::BXOR_ASSIGN_AFTER() {
  return getToken(FMLParser::BXOR_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::LSHIFT_ASSIGN() {
  return getToken(FMLParser::LSHIFT_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::LSHIFT_ASSIGN_AFTER() {
  return getToken(FMLParser::LSHIFT_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::RSHIFT_ASSIGN() {
  return getToken(FMLParser::RSHIFT_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::Statement_assignContext::RSHIFT_ASSIGN_AFTER() {
  return getToken(FMLParser::RSHIFT_ASSIGN_AFTER, 0);
}


size_t FMLParser::Statement_assignContext::getRuleIndex() const {
  return FMLParser::RuleStatement_assign;
}


FMLParser::Statement_assignContext* FMLParser::statement_assign() {
  Statement_assignContext *_localctx = _tracker.createInstance<Statement_assignContext>(_ctx, getState());
  enterRule(_localctx, 370, FMLParser::RuleStatement_assign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4196);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::COLONx2:
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(4067);
        antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv = lvalue();
        setState(4184);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::ASSIGN:
          case FMLParser::ASSIGN_AFTER: {
            setState(4068);
            _la = _input->LA(1);
            if (!(_la == FMLParser::ASSIGN

            || _la == FMLParser::ASSIGN_AFTER)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(4069);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4070);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT2(OP(ASSIGN), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::ASSIGN_REF: {
            setState(4073);
            match(FMLParser::ASSIGN_REF);
            setState(4074);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->rlv = lvalue();
            setState(4075);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT2(OP(ASSIGN_REF), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->rlv->bf); 
            break;
          }

          case FMLParser::ASSIGN_MACRO: {
            setState(4078);
            match(FMLParser::ASSIGN_MACRO);
            setState(4079);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4080);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT2(OP(ASSIGN_MACRO), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::PLUS_ASSIGN:
          case FMLParser::PLUS_ASSIGN_AFTER: {
            setState(4083);
            _la = _input->LA(1);
            if (!(_la == FMLParser::PLUS_ASSIGN

            || _la == FMLParser::PLUS_ASSIGN_AFTER)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(4084);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4085);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(PLUS), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::MINUS_ASSIGN:
          case FMLParser::MINUS_ASSIGN_AFTER: {
            setState(4088);
            _la = _input->LA(1);
            if (!(_la == FMLParser::MINUS_ASSIGN

            || _la == FMLParser::MINUS_ASSIGN_AFTER)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(4089);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4090);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(MINUS), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::STAR_ASSIGN:
          case FMLParser::STAR_ASSIGN_AFTER: {
            setState(4093);
            _la = _input->LA(1);
            if (!(_la == FMLParser::STAR_ASSIGN

            || _la == FMLParser::STAR_ASSIGN_AFTER)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(4094);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4095);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(MULT), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::DIV_ASSIGN:
          case FMLParser::DIV_ASSIGN_AFTER: {
            setState(4098);
            _la = _input->LA(1);
            if (!(_la == FMLParser::DIV_ASSIGN

            || _la == FMLParser::DIV_ASSIGN_AFTER)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(4099);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4100);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(DIV), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::MOD_ASSIGN:
          case FMLParser::MOD_ASSIGN_AFTER: {
            setState(4103);
            _la = _input->LA(1);
            if (!(_la == FMLParser::MOD_ASSIGN

            || _la == FMLParser::MOD_ASSIGN_AFTER)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(4104);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4105);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(MOD), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::LAND_ASSIGN:
          case FMLParser::LAND_ASSIGN_AFTER: {
            setState(4108);
            _la = _input->LA(1);
            if (!(_la == FMLParser::LAND_ASSIGN

            || _la == FMLParser::LAND_ASSIGN_AFTER)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(4109);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4110);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(AND), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::LOR_ASSIGN:
          case FMLParser::LOR_ASSIGN_AFTER: {
            setState(4113);
            _la = _input->LA(1);
            if (!(_la == FMLParser::LOR_ASSIGN

            || _la == FMLParser::LOR_ASSIGN_AFTER)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(4114);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4115);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(OR), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::BAND_ASSIGN:
          case FMLParser::BAND_ASSIGN_AFTER: {
            setState(4118);
            _la = _input->LA(1);
            if (!(_la == FMLParser::BAND_ASSIGN

            || _la == FMLParser::BAND_ASSIGN_AFTER)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(4119);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4120);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(BAND), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::BOR_ASSIGN:
          case FMLParser::BOR_ASSIGN_AFTER: {
            setState(4123);
            _la = _input->LA(1);
            if (!(_la == FMLParser::BOR_ASSIGN

            || _la == FMLParser::BOR_ASSIGN_AFTER)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(4124);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4125);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(BOR), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::BXOR_ASSIGN:
          case FMLParser::BXOR_ASSIGN_AFTER: {
            setState(4128);
            _la = _input->LA(1);
            if (!(_la == FMLParser::BXOR_ASSIGN

            || _la == FMLParser::BXOR_ASSIGN_AFTER)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(4129);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4130);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(BXOR), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::LSHIFT_ASSIGN:
          case FMLParser::LSHIFT_ASSIGN_AFTER: {
            setState(4133);
            _la = _input->LA(1);
            if (!(_la == FMLParser::LSHIFT_ASSIGN

            || _la == FMLParser::LSHIFT_ASSIGN_AFTER)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(4134);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4135);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(LSHIFT), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::RSHIFT_ASSIGN:
          case FMLParser::RSHIFT_ASSIGN_AFTER: {
            setState(4138);
            _la = _input->LA(1);
            if (!(_la == FMLParser::RSHIFT_ASSIGN

            || _la == FMLParser::RSHIFT_ASSIGN_AFTER)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(4139);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4140);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(RSHIFT), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::OP_PUSH: {
            setState(4143);
            match(FMLParser::OP_PUSH);
            setState(4144);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT2(OP(PUSH), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            setState(4152);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == FMLParser::OP_PUSH) {
              setState(4146);
              match(FMLParser::OP_PUSH);
              setState(4147);
              antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
               _localctx->ac->append(antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
              setState(4154);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            setState(4155);
            match(FMLParser::SEMI);
            break;
          }

          case FMLParser::OP_ASSIGN_TOP: {
            setState(4157);
            match(FMLParser::OP_ASSIGN_TOP);
            setState(4158);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->e = expression();
            setState(4159);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT2(OP(ASSIGN_TOP), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::OP_TOP: {
            setState(4162);
            match(FMLParser::OP_TOP);
            setState(4163);
            antlrcpp::downCast<Statement_assignContext *>(_localctx)->v = lvalue();
            setState(4164);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT2(OP(TOP), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_assignContext *>(_localctx)->v->bf); 
            break;
          }

          case FMLParser::OP_POP: {
            setState(4167);
            match(FMLParser::OP_POP);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT1(OP(POP), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf); 
            setState(4174);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == FMLParser::COLONx2

            || _la == FMLParser::ID) {
              setState(4169);
              antlrcpp::downCast<Statement_assignContext *>(_localctx)->v = lvalue();
               _localctx->ac->append(antlrcpp::downCast<Statement_assignContext *>(_localctx)->v->bf); 
              setState(4176);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            setState(4177);
            match(FMLParser::SEMI);
            break;
          }

          case FMLParser::INCR: {
            setState(4178);
            match(FMLParser::INCR);
            setState(4179);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(PLUS), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf,
            		sep::ExpressionConstant::INTEGER_ONE); 
            break;
          }

          case FMLParser::DECR: {
            setState(4181);
            match(FMLParser::DECR);
            setState(4182);
            match(FMLParser::SEMI);
             antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(PLUS), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf,
            		sep::ExpressionConstant::INTEGER_MINUS_ONE); 
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case FMLParser::INCR: {
        enterOuterAlt(_localctx, 2);
        setState(4186);
        match(FMLParser::INCR);
        setState(4187);
        antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv = lvalue();
        setState(4188);
        match(FMLParser::SEMI);
         antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(PLUS), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf,
        		sep::ExpressionConstant::INTEGER_ONE); 
        break;
      }

      case FMLParser::DECR: {
        enterOuterAlt(_localctx, 3);
        setState(4191);
        match(FMLParser::DECR);
        setState(4192);
        antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv = lvalue();
        setState(4193);
        match(FMLParser::SEMI);
         antlrcpp::downCast<Statement_assignContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(PLUS), antlrcpp::downCast<Statement_assignContext *>(_localctx)->lv->bf,
        		sep::ExpressionConstant::INTEGER_MINUS_ONE); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LvalueContext ------------------------------------------------------------------

FMLParser::LvalueContext::LvalueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FMLParser::LvalueContext::ID() {
  return getTokens(FMLParser::ID);
}

tree::TerminalNode* FMLParser::LvalueContext::ID(size_t i) {
  return getToken(FMLParser::ID, i);
}

tree::TerminalNode* FMLParser::LvalueContext::COLONx2() {
  return getToken(FMLParser::COLONx2, 0);
}

std::vector<tree::TerminalNode *> FMLParser::LvalueContext::DOT() {
  return getTokens(FMLParser::DOT);
}

tree::TerminalNode* FMLParser::LvalueContext::DOT(size_t i) {
  return getToken(FMLParser::DOT, i);
}

std::vector<tree::TerminalNode *> FMLParser::LvalueContext::LBRACKET() {
  return getTokens(FMLParser::LBRACKET);
}

tree::TerminalNode* FMLParser::LvalueContext::LBRACKET(size_t i) {
  return getToken(FMLParser::LBRACKET, i);
}

std::vector<tree::TerminalNode *> FMLParser::LvalueContext::RBRACKET() {
  return getTokens(FMLParser::RBRACKET);
}

tree::TerminalNode* FMLParser::LvalueContext::RBRACKET(size_t i) {
  return getToken(FMLParser::RBRACKET, i);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::LvalueContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::LvalueContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}


size_t FMLParser::LvalueContext::getRuleIndex() const {
  return FMLParser::RuleLvalue;
}


FMLParser::LvalueContext* FMLParser::lvalue() {
  LvalueContext *_localctx = _tracker.createInstance<LvalueContext>(_ctx, getState());
  enterRule(_localctx, 372, FMLParser::RuleLvalue);

  	sep::UniFormIdentifier * ufi = new sep::UniFormIdentifier(false);
  	sep::BF bfUfi( ufi ); // for automatic destruction of << UFI >> if need

  	std::size_t countID = 1;
  	bool isnotEXPR = true;

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4200);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::COLONx2) {
      setState(4198);
      match(FMLParser::COLONx2);
       ufi->setAbsolute(); 
    }
    setState(4202);
    antlrcpp::downCast<LvalueContext *>(_localctx)->id = match(FMLParser::ID);

    		if( (antlrcpp::downCast<LvalueContext *>(_localctx)->bf =  sep::ParserUtil::getvar(antlrcpp::downCast<LvalueContext *>(_localctx)->id->getText(), 1)).valid() )
    		{
    			ufi->appendFieldVariable(_localctx->bf);
    		}
    		else if( (antlrcpp::downCast<LvalueContext *>(_localctx)->bf =  sep::ParserUtil::getvarMachine(
    				antlrcpp::downCast<LvalueContext *>(_localctx)->id->getText(), 1)).valid() )
    		{
    			ufi->appendFieldMachine(_localctx->bf);
    		}
    		else
    		{
    			ufi->appendField(antlrcpp::downCast<LvalueContext *>(_localctx)->id->getText());
    		}

    		antlrcpp::downCast<LvalueContext *>(_localctx)->bf =  bfUfi;
    	  
    setState(4214);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::LBRACKET

    || _la == FMLParser::DOT) {
      setState(4212);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case FMLParser::DOT: {
          setState(4204);
          match(FMLParser::DOT);
          setState(4205);
          antlrcpp::downCast<LvalueContext *>(_localctx)->id = match(FMLParser::ID);
           ufi->appendField(antlrcpp::downCast<LvalueContext *>(_localctx)->id->getText());  ++countID; 
          break;
        }

        case FMLParser::LBRACKET: {
          setState(4207);
          match(FMLParser::LBRACKET);
          setState(4208);
          antlrcpp::downCast<LvalueContext *>(_localctx)->e = expression();
          setState(4209);
          match(FMLParser::RBRACKET);
           ufi->appendIndex(antlrcpp::downCast<LvalueContext *>(_localctx)->e->bf); isnotEXPR = false; 
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(4216);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }

    		if( isnotEXPR )
    		{
    			if( countID == 1 )
    			{
    				antlrcpp::downCast<LvalueContext *>(_localctx)->bf =  ufi->first();
    			}
    			else if( (antlrcpp::downCast<LvalueContext *>(_localctx)->bf =  sep::ParserUtil::getvar(
    					ufi->str(), countID)).invalid() )
    			{
    				_localctx->bf = bfUfi;
    				SET_RULE_LOCATION(ufi);
    			}
    		}
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParametersContext ------------------------------------------------------------------

FMLParser::ParametersContext::ParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::ParametersContext::ParametersContext(ParserRuleContext *parent, size_t invokingState, sep::BFCode ac)
  : ParserRuleContext(parent, invokingState) {
  this->ac = ac;
}

tree::TerminalNode* FMLParser::ParametersContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::ParametersContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::ParametersContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::ParametersContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::ParametersContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::ParametersContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::ParametersContext::getRuleIndex() const {
  return FMLParser::RuleParameters;
}


FMLParser::ParametersContext* FMLParser::parameters(sep::BFCode ac) {
  ParametersContext *_localctx = _tracker.createInstance<ParametersContext>(_ctx, getState(), ac);
  enterRule(_localctx, 374, FMLParser::RuleParameters);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4219);
    match(FMLParser::LPAREN);
    setState(4220);
    antlrcpp::downCast<ParametersContext *>(_localctx)->e = expression();
     _localctx->ac->append(antlrcpp::downCast<ParametersContext *>(_localctx)->e->bf); 
    setState(4228);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::COMMA) {
      setState(4222);
      match(FMLParser::COMMA);
      setState(4223);
      antlrcpp::downCast<ParametersContext *>(_localctx)->e = expression();
       _localctx->ac->append(antlrcpp::downCast<ParametersContext *>(_localctx)->e->bf); 
      setState(4230);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4231);
    match(FMLParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_comContext ------------------------------------------------------------------

FMLParser::Statement_comContext::Statement_comContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Statement_com_inputContext* FMLParser::Statement_comContext::statement_com_input() {
  return getRuleContext<FMLParser::Statement_com_inputContext>(0);
}

FMLParser::Statement_com_outputContext* FMLParser::Statement_comContext::statement_com_output() {
  return getRuleContext<FMLParser::Statement_com_outputContext>(0);
}


size_t FMLParser::Statement_comContext::getRuleIndex() const {
  return FMLParser::RuleStatement_com;
}


FMLParser::Statement_comContext* FMLParser::statement_com() {
  Statement_comContext *_localctx = _tracker.createInstance<Statement_comContext>(_ctx, getState());
  enterRule(_localctx, 376, FMLParser::RuleStatement_com);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4239);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__25:
      case FMLParser::T__240:
      case FMLParser::T__241:
      case FMLParser::T__242:
      case FMLParser::T__243:
      case FMLParser::T__244:
      case FMLParser::T__245: {
        enterOuterAlt(_localctx, 1);
        setState(4233);
        antlrcpp::downCast<Statement_comContext *>(_localctx)->si = statement_com_input();
         antlrcpp::downCast<Statement_comContext *>(_localctx)->ac =  antlrcpp::downCast<Statement_comContext *>(_localctx)->si->ac; 
        break;
      }

      case FMLParser::T__27:
      case FMLParser::T__249:
      case FMLParser::T__250:
      case FMLParser::T__251:
      case FMLParser::T__252:
      case FMLParser::T__253: {
        enterOuterAlt(_localctx, 2);
        setState(4236);
        antlrcpp::downCast<Statement_comContext *>(_localctx)->so = statement_com_output();
         antlrcpp::downCast<Statement_comContext *>(_localctx)->ac =  antlrcpp::downCast<Statement_comContext *>(_localctx)->so->ac; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_com_inputContext ------------------------------------------------------------------

FMLParser::Statement_com_inputContext::Statement_com_inputContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Statement_com_inputContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

std::vector<FMLParser::QualifiedNameIDContext *> FMLParser::Statement_com_inputContext::qualifiedNameID() {
  return getRuleContexts<FMLParser::QualifiedNameIDContext>();
}

FMLParser::QualifiedNameIDContext* FMLParser::Statement_com_inputContext::qualifiedNameID(size_t i) {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(i);
}

FMLParser::Parameters_portContext* FMLParser::Statement_com_inputContext::parameters_port() {
  return getRuleContext<FMLParser::Parameters_portContext>(0);
}

FMLParser::ExpressionContext* FMLParser::Statement_com_inputContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}

tree::TerminalNode* FMLParser::Statement_com_inputContext::ASSIGN_REF() {
  return getToken(FMLParser::ASSIGN_REF, 0);
}


size_t FMLParser::Statement_com_inputContext::getRuleIndex() const {
  return FMLParser::RuleStatement_com_input;
}


FMLParser::Statement_com_inputContext* FMLParser::statement_com_input() {
  Statement_com_inputContext *_localctx = _tracker.createInstance<Statement_com_inputContext>(_ctx, getState());
  enterRule(_localctx, 378, FMLParser::RuleStatement_com_input);

  	sep::BF varPortSignal;
  	sep::Port * port = nullptr;
  	const sep::Operator * op = nullptr;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4255);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__25: {
        setState(4241);
        antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->tok = match(FMLParser::T__25);
         op = OP(INPUT);        
        break;
      }

      case FMLParser::T__240: {
        setState(4243);
        antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->tok = match(FMLParser::T__240);
         op = OP(INPUT_SAVE);   
        break;
      }

      case FMLParser::T__241: {
        setState(4245);
        antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->tok = match(FMLParser::T__241);
         op = OP(INPUT_VAR);    
        break;
      }

      case FMLParser::T__242: {
        setState(4247);
        antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->tok = match(FMLParser::T__242);
         op = OP(INPUT_FLOW);   
        break;
      }

      case FMLParser::T__243: {
        setState(4249);
        antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->tok = match(FMLParser::T__243);
         op = OP(INPUT_ENV);    
        break;
      }

      case FMLParser::T__244: {
        setState(4251);
        antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->tok = match(FMLParser::T__244);
         op = OP(INPUT_BUFFER); 
        break;
      }

      case FMLParser::T__245: {
        setState(4253);
        antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->tok = match(FMLParser::T__245);
         op = OP(INPUT_RDV);    
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(4257);
    antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->id = qualifiedNameID();

    		antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->ac =  NEW_STMT1( op,
    			varPortSignal = sep::ParserUtil::getvarPortSignal(antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->id->s, antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->id->nb) );
    		if( varPortSignal.is< sep::Port >() )
    		{ port = varPortSignal.to_ptr< sep::Port >(); }
    		else if( varPortSignal.invalid() )
    		{
    			sep::ParserUtil::avm_syntax_error(
    				"statement_com_input:> ", (antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->tok != nullptr ? antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->tok->getLine() : 0) )
    					<< "Unfound port/signal or variable < " << antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->id->s
    					<< " > in machine < " << str_header( _CPM_ ) << " >"
    					<< sep::ParserUtil::SYNTAX_ERROR_EOL;
    		}
    	  
    setState(4260);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LPAREN) {
      setState(4259);
      parameters_port( port , _localctx->ac );
    }
    setState(4276);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__246) {
      setState(4262);
      match(FMLParser::T__246);
      setState(4268);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 489, _ctx)) {
      case 1: {
        setState(4263);
        match(FMLParser::T__218);
         _localctx->ac->setOperator( OP(INPUT_ENV) ); 
        break;
      }

      case 2: {
        setState(4265);
        antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->me = expression();

        			sep::BFCode inputFrom = NEW_STMT2(OP(INPUT_FROM), _localctx->ac->first(), antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->me->bf);

        			inputFrom->getOperands().insert(
        					inputFrom->end(), ++(_localctx->ac->begin()), _localctx->ac->end() );
        					
        			antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->ac =  inputFrom;
        		
        break;
      }

      default:
        break;
      }
      setState(4274);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FMLParser::ASSIGN_REF) {
        setState(4270);
        match(FMLParser::ASSIGN_REF);
        setState(4271);
        antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->id = qualifiedNameID();
         _localctx->ac->append(sep::ParserUtil::getvarPortSignal(antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->id->s, antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->id->nb)); 
      }
    }
    setState(4282);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__247

    || _la == FMLParser::T__248) {
      setState(4278);
      _la = _input->LA(1);
      if (!(_la == FMLParser::T__247

      || _la == FMLParser::T__248)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4279);
      antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->id = qualifiedNameID();
       sep::ParserUtil::updateSignalRoutingChannel(
      			sep::Modifier::DIRECTION_INPUT_KIND, _localctx->ac, antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->id->s, antlrcpp::downCast<Statement_com_inputContext *>(_localctx)->id->nb); 
    }
    setState(4284);
    match(FMLParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_com_outputContext ------------------------------------------------------------------

FMLParser::Statement_com_outputContext::Statement_com_outputContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Statement_com_outputContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

std::vector<FMLParser::QualifiedNameIDContext *> FMLParser::Statement_com_outputContext::qualifiedNameID() {
  return getRuleContexts<FMLParser::QualifiedNameIDContext>();
}

FMLParser::QualifiedNameIDContext* FMLParser::Statement_com_outputContext::qualifiedNameID(size_t i) {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(i);
}

FMLParser::Parameters_portContext* FMLParser::Statement_com_outputContext::parameters_port() {
  return getRuleContext<FMLParser::Parameters_portContext>(0);
}

FMLParser::ExpressionContext* FMLParser::Statement_com_outputContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}


size_t FMLParser::Statement_com_outputContext::getRuleIndex() const {
  return FMLParser::RuleStatement_com_output;
}


FMLParser::Statement_com_outputContext* FMLParser::statement_com_output() {
  Statement_com_outputContext *_localctx = _tracker.createInstance<Statement_com_outputContext>(_ctx, getState());
  enterRule(_localctx, 380, FMLParser::RuleStatement_com_output);

  	sep::BF varPortSignal;
  	sep::Port * port = nullptr;
  	const sep::Operator * op = nullptr;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4298);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__27: {
        setState(4286);
        antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->tok = match(FMLParser::T__27);
         op = OP(OUTPUT);        
        break;
      }

      case FMLParser::T__249: {
        setState(4288);
        antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->tok = match(FMLParser::T__249);
         op = OP(OUTPUT_VAR);    
        break;
      }

      case FMLParser::T__250: {
        setState(4290);
        antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->tok = match(FMLParser::T__250);
         op = OP(OUTPUT_FLOW);   
        break;
      }

      case FMLParser::T__251: {
        setState(4292);
        antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->tok = match(FMLParser::T__251);
         op = OP(OUTPUT_ENV);    
        break;
      }

      case FMLParser::T__252: {
        setState(4294);
        antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->tok = match(FMLParser::T__252);
         op = OP(OUTPUT_BUFFER); 
        break;
      }

      case FMLParser::T__253: {
        setState(4296);
        antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->tok = match(FMLParser::T__253);
         op = OP(OUTPUT_RDV);    
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(4300);
    antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->id = qualifiedNameID();

    		antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->ac =  NEW_STMT1( op,
    			varPortSignal = sep::ParserUtil::getvarPortSignal(antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->id->s, antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->id->nb) );
    		if( varPortSignal.is< sep::Port >() )
    		{ port = varPortSignal.to_ptr< sep::Port >(); }
    		else if( varPortSignal.invalid() )
    		{
    			sep::ParserUtil::avm_syntax_error(
    				"statement_com_output:>", (antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->tok != nullptr ? antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->tok->getLine() : 0) )
    					<< "Unfound port/signal or variable < " << antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->id->s
    					<< " > in machine < " << str_header( _CPM_ ) << " >"
    					<< sep::ParserUtil::SYNTAX_ERROR_EOL;
    		}
    	  
    setState(4303);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::LPAREN) {
      setState(4302);
      parameters_port( port , _localctx->ac );
    }
    setState(4319);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__49) {
      setState(4305);
      match(FMLParser::T__49);
      setState(4311);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 495, _ctx)) {
      case 1: {
        setState(4306);
        match(FMLParser::T__218);
         _localctx->ac->setOperator( OP(OUTPUT_ENV) ); 
        break;
      }

      case 2: {
        setState(4308);
        antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->me = expression();

        			sep::BFCode outputTo = NEW_STMT2(OP(OUTPUT_TO), _localctx->ac->first(), antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->me->bf);

        			outputTo->getOperands().insert(
        					outputTo->end(), ++(_localctx->ac->begin()), _localctx->ac->end() );
        					
        			antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->ac =  outputTo;
        		  
        break;
      }

      default:
        break;
      }
      setState(4317);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == FMLParser::T__23) {
        setState(4313);
        match(FMLParser::T__23);
        setState(4314);
        antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->id = qualifiedNameID();
         _localctx->ac->append(sep::ParserUtil::getvarPortSignal(antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->id->s, antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->id->nb)); 
      }
    }
    setState(4325);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__248

    || _la == FMLParser::T__254) {
      setState(4321);
      _la = _input->LA(1);
      if (!(_la == FMLParser::T__248

      || _la == FMLParser::T__254)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(4322);
      antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->id = qualifiedNameID();
       sep::ParserUtil::updateSignalRoutingChannel(
      			sep::Modifier::DIRECTION_OUTPUT_KIND, _localctx->ac, antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->id->s, antlrcpp::downCast<Statement_com_outputContext *>(_localctx)->id->nb); 
    }
    setState(4327);
    match(FMLParser::SEMI);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Parameters_portContext ------------------------------------------------------------------

FMLParser::Parameters_portContext::Parameters_portContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Parameters_portContext::Parameters_portContext(ParserRuleContext *parent, size_t invokingState, sep::Port * port, sep::BFCode ac)
  : ParserRuleContext(parent, invokingState) {
  this->port = port;
  this->ac = ac;
}

tree::TerminalNode* FMLParser::Parameters_portContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Parameters_portContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

std::vector<FMLParser::Labelled_argumentContext *> FMLParser::Parameters_portContext::labelled_argument() {
  return getRuleContexts<FMLParser::Labelled_argumentContext>();
}

FMLParser::Labelled_argumentContext* FMLParser::Parameters_portContext::labelled_argument(size_t i) {
  return getRuleContext<FMLParser::Labelled_argumentContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Parameters_portContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Parameters_portContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Parameters_portContext::getRuleIndex() const {
  return FMLParser::RuleParameters_port;
}


FMLParser::Parameters_portContext* FMLParser::parameters_port(sep::Port * port,sep::BFCode ac) {
  Parameters_portContext *_localctx = _tracker.createInstance<Parameters_portContext>(_ctx, getState(), port, ac);
  enterRule(_localctx, 382, FMLParser::RuleParameters_port);

  	sep::BFVector labelledParams(
  			(port != nullptr) ? port->getParametersCount() : 0 );

  	sep::BFList positionalParams;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4329);
    match(FMLParser::LPAREN);
    setState(4330);
    antlrcpp::downCast<Parameters_portContext *>(_localctx)->lp = labelled_argument();

    			sep::ParserUtil::appendPortParameter(port, antlrcpp::downCast<Parameters_portContext *>(_localctx)->lp->label,
    					labelledParams, positionalParams, antlrcpp::downCast<Parameters_portContext *>(_localctx)->lp->arg);
    		
    setState(4338);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::COMMA) {
      setState(4332);
      match(FMLParser::COMMA);
      setState(4333);
      antlrcpp::downCast<Parameters_portContext *>(_localctx)->lp = labelled_argument();

      			sep::ParserUtil::appendPortParameter(port, antlrcpp::downCast<Parameters_portContext *>(_localctx)->lp->label,
      					labelledParams, positionalParams, antlrcpp::downCast<Parameters_portContext *>(_localctx)->lp->arg);
      		
      setState(4340);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4341);
    match(FMLParser::RPAREN);
   _ctx->stop = _input->LT(-1);

    	sep::ParserUtil::computePortParameter(
    			port, _localctx->ac, labelledParams, positionalParams);

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_comContext ------------------------------------------------------------------

FMLParser::Expression_comContext::Expression_comContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::QualifiedNameIDContext* FMLParser::Expression_comContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}


size_t FMLParser::Expression_comContext::getRuleIndex() const {
  return FMLParser::RuleExpression_com;
}


FMLParser::Expression_comContext* FMLParser::expression_com() {
  Expression_comContext *_localctx = _tracker.createInstance<Expression_comContext>(_ctx, getState());
  enterRule(_localctx, 384, FMLParser::RuleExpression_com);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4351);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__255: {
        enterOuterAlt(_localctx, 1);
        setState(4343);
        match(FMLParser::T__255);
        setState(4344);
        antlrcpp::downCast<Expression_comContext *>(_localctx)->id = qualifiedNameID();
         antlrcpp::downCast<Expression_comContext *>(_localctx)->ac =  NEW_STMT1(OP(PRESENT),
        		sep::ParserUtil::getvarPortSignal(antlrcpp::downCast<Expression_comContext *>(_localctx)->id->s, antlrcpp::downCast<Expression_comContext *>(_localctx)->id->nb)); 
        break;
      }

      case FMLParser::T__256: {
        enterOuterAlt(_localctx, 2);
        setState(4347);
        match(FMLParser::T__256);
        setState(4348);
        antlrcpp::downCast<Expression_comContext *>(_localctx)->id = qualifiedNameID();
         antlrcpp::downCast<Expression_comContext *>(_localctx)->ac =  NEW_STMT1(OP(ABSENT),
        		sep::ParserUtil::getvarPortSignal(antlrcpp::downCast<Expression_comContext *>(_localctx)->id->s, antlrcpp::downCast<Expression_comContext *>(_localctx)->id->nb)); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_constraintContext ------------------------------------------------------------------

FMLParser::Statement_constraintContext::Statement_constraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Statement_guardContext* FMLParser::Statement_constraintContext::statement_guard() {
  return getRuleContext<FMLParser::Statement_guardContext>(0);
}

FMLParser::Statement_timed_guardContext* FMLParser::Statement_constraintContext::statement_timed_guard() {
  return getRuleContext<FMLParser::Statement_timed_guardContext>(0);
}

FMLParser::Statement_checksatContext* FMLParser::Statement_constraintContext::statement_checksat() {
  return getRuleContext<FMLParser::Statement_checksatContext>(0);
}


size_t FMLParser::Statement_constraintContext::getRuleIndex() const {
  return FMLParser::RuleStatement_constraint;
}


FMLParser::Statement_constraintContext* FMLParser::statement_constraint() {
  Statement_constraintContext *_localctx = _tracker.createInstance<Statement_constraintContext>(_ctx, getState());
  enterRule(_localctx, 386, FMLParser::RuleStatement_constraint);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4362);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__257:
      case FMLParser::T__258: {
        enterOuterAlt(_localctx, 1);
        setState(4353);
        antlrcpp::downCast<Statement_constraintContext *>(_localctx)->sg = statement_guard();
         antlrcpp::downCast<Statement_constraintContext *>(_localctx)->ac =  antlrcpp::downCast<Statement_constraintContext *>(_localctx)->sg->ac; 
        break;
      }

      case FMLParser::T__259: {
        enterOuterAlt(_localctx, 2);
        setState(4356);
        antlrcpp::downCast<Statement_constraintContext *>(_localctx)->st = statement_timed_guard();
         antlrcpp::downCast<Statement_constraintContext *>(_localctx)->ac =  antlrcpp::downCast<Statement_constraintContext *>(_localctx)->st->ac; 
        break;
      }

      case FMLParser::T__260: {
        enterOuterAlt(_localctx, 3);
        setState(4359);
        antlrcpp::downCast<Statement_constraintContext *>(_localctx)->sc = statement_checksat();
         antlrcpp::downCast<Statement_constraintContext *>(_localctx)->ac =  antlrcpp::downCast<Statement_constraintContext *>(_localctx)->sc->ac; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_guardContext ------------------------------------------------------------------

FMLParser::Statement_guardContext::Statement_guardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Statement_guardContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

FMLParser::ExpressionContext* FMLParser::Statement_guardContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}


size_t FMLParser::Statement_guardContext::getRuleIndex() const {
  return FMLParser::RuleStatement_guard;
}


FMLParser::Statement_guardContext* FMLParser::statement_guard() {
  Statement_guardContext *_localctx = _tracker.createInstance<Statement_guardContext>(_ctx, getState());
  enterRule(_localctx, 388, FMLParser::RuleStatement_guard);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4374);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__257: {
        enterOuterAlt(_localctx, 1);
        setState(4364);
        match(FMLParser::T__257);
        setState(4365);
        antlrcpp::downCast<Statement_guardContext *>(_localctx)->e = expression();
        setState(4366);
        match(FMLParser::SEMI);
         antlrcpp::downCast<Statement_guardContext *>(_localctx)->ac =  NEW_STMT1(OP(GUARD), antlrcpp::downCast<Statement_guardContext *>(_localctx)->e->bf); 
        break;
      }

      case FMLParser::T__258: {
        enterOuterAlt(_localctx, 2);
        setState(4369);
        match(FMLParser::T__258);
        setState(4370);
        antlrcpp::downCast<Statement_guardContext *>(_localctx)->e = expression();
        setState(4371);
        match(FMLParser::SEMI);
         antlrcpp::downCast<Statement_guardContext *>(_localctx)->ac =  NEW_STMT1(OP(EVENT), antlrcpp::downCast<Statement_guardContext *>(_localctx)->e->bf); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_timed_guardContext ------------------------------------------------------------------

FMLParser::Statement_timed_guardContext::Statement_timed_guardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Statement_timed_guardContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

FMLParser::ExpressionContext* FMLParser::Statement_timed_guardContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}


size_t FMLParser::Statement_timed_guardContext::getRuleIndex() const {
  return FMLParser::RuleStatement_timed_guard;
}


FMLParser::Statement_timed_guardContext* FMLParser::statement_timed_guard() {
  Statement_timed_guardContext *_localctx = _tracker.createInstance<Statement_timed_guardContext>(_ctx, getState());
  enterRule(_localctx, 390, FMLParser::RuleStatement_timed_guard);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4376);
    match(FMLParser::T__259);
    setState(4377);
    antlrcpp::downCast<Statement_timed_guardContext *>(_localctx)->e = expression();
    setState(4378);
    match(FMLParser::SEMI);
     antlrcpp::downCast<Statement_timed_guardContext *>(_localctx)->ac =  NEW_STMT1(OP(TIMED_GUARD), antlrcpp::downCast<Statement_timed_guardContext *>(_localctx)->e->bf); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_checksatContext ------------------------------------------------------------------

FMLParser::Statement_checksatContext::Statement_checksatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Statement_checksatContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

FMLParser::ExpressionContext* FMLParser::Statement_checksatContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}

tree::TerminalNode* FMLParser::Statement_checksatContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Statement_checksatContext::GT() {
  return getToken(FMLParser::GT, 0);
}

tree::TerminalNode* FMLParser::Statement_checksatContext::StringLiteral() {
  return getToken(FMLParser::StringLiteral, 0);
}

tree::TerminalNode* FMLParser::Statement_checksatContext::ID() {
  return getToken(FMLParser::ID, 0);
}


size_t FMLParser::Statement_checksatContext::getRuleIndex() const {
  return FMLParser::RuleStatement_checksat;
}


FMLParser::Statement_checksatContext* FMLParser::statement_checksat() {
  Statement_checksatContext *_localctx = _tracker.createInstance<Statement_checksatContext>(_ctx, getState());
  enterRule(_localctx, 392, FMLParser::RuleStatement_checksat);

  	std::string solverID;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4381);
    match(FMLParser::T__260);
    setState(4395);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LT_: {
        setState(4382);
        match(FMLParser::LT_);
        setState(4385);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::StringLiteral: {
            setState(4383);
            antlrcpp::downCast<Statement_checksatContext *>(_localctx)->id = match(FMLParser::StringLiteral);
            break;
          }

          case FMLParser::ID: {
            setState(4384);
            antlrcpp::downCast<Statement_checksatContext *>(_localctx)->id = match(FMLParser::ID);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4387);
        match(FMLParser::GT);
         solverID = antlrcpp::downCast<Statement_checksatContext *>(_localctx)->id->getText(); 
        break;
      }

      case FMLParser::T__261: {
        setState(4389);
        match(FMLParser::T__261);
        setState(4392);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::StringLiteral: {
            setState(4390);
            antlrcpp::downCast<Statement_checksatContext *>(_localctx)->id = match(FMLParser::StringLiteral);
            break;
          }

          case FMLParser::ID: {
            setState(4391);
            antlrcpp::downCast<Statement_checksatContext *>(_localctx)->id = match(FMLParser::ID);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
         solverID = antlrcpp::downCast<Statement_checksatContext *>(_localctx)->id->getText(); 
        break;
      }

      case FMLParser::T__218:
      case FMLParser::T__232:
      case FMLParser::T__255:
      case FMLParser::T__256:
      case FMLParser::T__260:
      case FMLParser::T__262:
      case FMLParser::T__263:
      case FMLParser::T__264:
      case FMLParser::T__272:
      case FMLParser::T__294:
      case FMLParser::T__295:
      case FMLParser::T__296:
      case FMLParser::T__297:
      case FMLParser::T__298:
      case FMLParser::T__299:
      case FMLParser::T__300:
      case FMLParser::T__303:
      case FMLParser::T__304:
      case FMLParser::T__305:
      case FMLParser::T__306:
      case FMLParser::T__307:
      case FMLParser::T__308:
      case FMLParser::T__309:
      case FMLParser::T__310:
      case FMLParser::T__311:
      case FMLParser::T__312:
      case FMLParser::T__313:
      case FMLParser::T__314:
      case FMLParser::T__315:
      case FMLParser::T__316:
      case FMLParser::OP_TOP:
      case FMLParser::OP_POP:
      case FMLParser::LPAREN:
      case FMLParser::LCURLY:
      case FMLParser::LBRACKET:
      case FMLParser::LPAREN_INVOKE:
      case FMLParser::DOLLAR_LCURLY:
      case FMLParser::PERCENT_LCURLY:
      case FMLParser::LBRACKET_BAR:
      case FMLParser::COLONx2:
      case FMLParser::LNOT:
      case FMLParser::PLUS:
      case FMLParser::INCR:
      case FMLParser::MINUS:
      case FMLParser::DECR:
      case FMLParser::BNOT:
      case FMLParser::ID:
      case FMLParser::StringLiteral:
      case FMLParser::CharLiteral:
      case FMLParser::FloatLiteral:
      case FMLParser::RationalLiteral:
      case FMLParser::IntegerLiteral: {
        break;
      }

    default:
      break;
    }
    setState(4397);
    antlrcpp::downCast<Statement_checksatContext *>(_localctx)->e = expression();
    setState(4398);
    match(FMLParser::SEMI);

    		if( solverID.empty() )
    		{
    			antlrcpp::downCast<Statement_checksatContext *>(_localctx)->ac =  NEW_STMT1( OP(CHECK_SAT), antlrcpp::downCast<Statement_checksatContext *>(_localctx)->e->bf );
    		}
    		else
    		{
    			antlrcpp::downCast<Statement_checksatContext *>(_localctx)->ac =  NEW_STMT2( OP(CHECK_SAT), NEW_STRING(solverID), antlrcpp::downCast<Statement_checksatContext *>(_localctx)->e->bf );
    		}
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_checksatContext ------------------------------------------------------------------

FMLParser::Expression_checksatContext::Expression_checksatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::ExpressionContext* FMLParser::Expression_checksatContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}

tree::TerminalNode* FMLParser::Expression_checksatContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Expression_checksatContext::GT() {
  return getToken(FMLParser::GT, 0);
}

tree::TerminalNode* FMLParser::Expression_checksatContext::StringLiteral() {
  return getToken(FMLParser::StringLiteral, 0);
}

tree::TerminalNode* FMLParser::Expression_checksatContext::ID() {
  return getToken(FMLParser::ID, 0);
}


size_t FMLParser::Expression_checksatContext::getRuleIndex() const {
  return FMLParser::RuleExpression_checksat;
}


FMLParser::Expression_checksatContext* FMLParser::expression_checksat() {
  Expression_checksatContext *_localctx = _tracker.createInstance<Expression_checksatContext>(_ctx, getState());
  enterRule(_localctx, 394, FMLParser::RuleExpression_checksat);

  	std::string solverID;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4401);
    match(FMLParser::T__260);
    setState(4415);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LT_: {
        setState(4402);
        match(FMLParser::LT_);
        setState(4405);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::StringLiteral: {
            setState(4403);
            antlrcpp::downCast<Expression_checksatContext *>(_localctx)->id = match(FMLParser::StringLiteral);
            break;
          }

          case FMLParser::ID: {
            setState(4404);
            antlrcpp::downCast<Expression_checksatContext *>(_localctx)->id = match(FMLParser::ID);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4407);
        match(FMLParser::GT);
         solverID = antlrcpp::downCast<Expression_checksatContext *>(_localctx)->id->getText(); 
        break;
      }

      case FMLParser::T__261: {
        setState(4409);
        match(FMLParser::T__261);
        setState(4412);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::StringLiteral: {
            setState(4410);
            antlrcpp::downCast<Expression_checksatContext *>(_localctx)->id = match(FMLParser::StringLiteral);
            break;
          }

          case FMLParser::ID: {
            setState(4411);
            antlrcpp::downCast<Expression_checksatContext *>(_localctx)->id = match(FMLParser::ID);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
         solverID = antlrcpp::downCast<Expression_checksatContext *>(_localctx)->id->getText(); 
        break;
      }

      case FMLParser::T__218:
      case FMLParser::T__232:
      case FMLParser::T__255:
      case FMLParser::T__256:
      case FMLParser::T__260:
      case FMLParser::T__262:
      case FMLParser::T__263:
      case FMLParser::T__264:
      case FMLParser::T__272:
      case FMLParser::T__294:
      case FMLParser::T__295:
      case FMLParser::T__296:
      case FMLParser::T__297:
      case FMLParser::T__298:
      case FMLParser::T__299:
      case FMLParser::T__300:
      case FMLParser::T__303:
      case FMLParser::T__304:
      case FMLParser::T__305:
      case FMLParser::T__306:
      case FMLParser::T__307:
      case FMLParser::T__308:
      case FMLParser::T__309:
      case FMLParser::T__310:
      case FMLParser::T__311:
      case FMLParser::T__312:
      case FMLParser::T__313:
      case FMLParser::T__314:
      case FMLParser::T__315:
      case FMLParser::T__316:
      case FMLParser::OP_TOP:
      case FMLParser::OP_POP:
      case FMLParser::LPAREN:
      case FMLParser::LCURLY:
      case FMLParser::LBRACKET:
      case FMLParser::LPAREN_INVOKE:
      case FMLParser::DOLLAR_LCURLY:
      case FMLParser::PERCENT_LCURLY:
      case FMLParser::LBRACKET_BAR:
      case FMLParser::COLONx2:
      case FMLParser::LNOT:
      case FMLParser::PLUS:
      case FMLParser::INCR:
      case FMLParser::MINUS:
      case FMLParser::DECR:
      case FMLParser::BNOT:
      case FMLParser::ID:
      case FMLParser::StringLiteral:
      case FMLParser::CharLiteral:
      case FMLParser::FloatLiteral:
      case FMLParser::RationalLiteral:
      case FMLParser::IntegerLiteral: {
        break;
      }

    default:
      break;
    }
    setState(4417);
    antlrcpp::downCast<Expression_checksatContext *>(_localctx)->e = expression();

    		if( solverID.empty() )
    		{
    			antlrcpp::downCast<Expression_checksatContext *>(_localctx)->ac =  NEW_STMT1( OP(CHECK_SAT), antlrcpp::downCast<Expression_checksatContext *>(_localctx)->e->bf);
    		}
    		else
    		{
    			antlrcpp::downCast<Expression_checksatContext *>(_localctx)->ac =  NEW_STMT2( OP(CHECK_SAT), NEW_STRING(solverID), antlrcpp::downCast<Expression_checksatContext *>(_localctx)->e->bf );
    		}
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_quantifierContext ------------------------------------------------------------------

FMLParser::Expression_quantifierContext::Expression_quantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Expression_quantifierContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Expression_quantifierContext::GT() {
  return getToken(FMLParser::GT, 0);
}

FMLParser::ExpressionContext* FMLParser::Expression_quantifierContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> FMLParser::Expression_quantifierContext::COLON() {
  return getTokens(FMLParser::COLON);
}

tree::TerminalNode* FMLParser::Expression_quantifierContext::COLON(size_t i) {
  return getToken(FMLParser::COLON, i);
}

std::vector<tree::TerminalNode *> FMLParser::Expression_quantifierContext::ID() {
  return getTokens(FMLParser::ID);
}

tree::TerminalNode* FMLParser::Expression_quantifierContext::ID(size_t i) {
  return getToken(FMLParser::ID, i);
}

std::vector<FMLParser::Type_varContext *> FMLParser::Expression_quantifierContext::type_var() {
  return getRuleContexts<FMLParser::Type_varContext>();
}

FMLParser::Type_varContext* FMLParser::Expression_quantifierContext::type_var(size_t i) {
  return getRuleContext<FMLParser::Type_varContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Expression_quantifierContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Expression_quantifierContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Expression_quantifierContext::getRuleIndex() const {
  return FMLParser::RuleExpression_quantifier;
}


FMLParser::Expression_quantifierContext* FMLParser::expression_quantifier() {
  Expression_quantifierContext *_localctx = _tracker.createInstance<Expression_quantifierContext>(_ctx, getState());
  enterRule(_localctx, 396, FMLParser::RuleExpression_quantifier);

  	sep::BFCode code;
  	
  	sep::PropertyPart boundVariables(_CPM_, "bound#vars");
  	
  	PUSH_CTX_LOCAL( & boundVariables );

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4424);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__262: {
        setState(4420);
        match(FMLParser::T__262);
         code = NEW_CODE( OP(FORALL) ); 
        break;
      }

      case FMLParser::T__263: {
        setState(4422);
        match(FMLParser::T__263);
         code = NEW_CODE( OP(EXISTS) ); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(4426);
    match(FMLParser::LT_);

    setState(4427);
    antlrcpp::downCast<Expression_quantifierContext *>(_localctx)->id = match(FMLParser::ID);
    setState(4428);
    match(FMLParser::COLON);
    setState(4429);
    antlrcpp::downCast<Expression_quantifierContext *>(_localctx)->tv = type_var();
     code->append( boundVariables.saveOwnedVariable(
    	  			new sep::Variable( _CPM_,
    	  					sep::Modifier::PROPERTY_QUANTIFIER_PARAMETER_MODIFIER,
    	  					antlrcpp::downCast<Expression_quantifierContext *>(_localctx)->tv->type, antlrcpp::downCast<Expression_quantifierContext *>(_localctx)->id->getText() ) )); 
    	  
    setState(4440);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::COMMA) {
      setState(4432);
      match(FMLParser::COMMA);
      setState(4433);
      antlrcpp::downCast<Expression_quantifierContext *>(_localctx)->id = match(FMLParser::ID);
      setState(4434);
      match(FMLParser::COLON);
      setState(4435);
      antlrcpp::downCast<Expression_quantifierContext *>(_localctx)->tv = type_var();
       code->append( boundVariables.saveOwnedVariable(
      	  			new sep::Variable( _CPM_,
      			  			sep::Modifier::PROPERTY_QUANTIFIER_PARAMETER_MODIFIER,
      			  			antlrcpp::downCast<Expression_quantifierContext *>(_localctx)->tv->type, antlrcpp::downCast<Expression_quantifierContext *>(_localctx)->id->getText() ) )); 
      	  
      setState(4442);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4443);
    match(FMLParser::GT);
    setState(4444);
    antlrcpp::downCast<Expression_quantifierContext *>(_localctx)->e = expression();

    		code->append( antlrcpp::downCast<Expression_quantifierContext *>(_localctx)->e->bf );
    		antlrcpp::downCast<Expression_quantifierContext *>(_localctx)->ac =  code;
    	
   _ctx->stop = _input->LT(-1);

    	POP_CTX;

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_iteContext ------------------------------------------------------------------

FMLParser::Statement_iteContext::Statement_iteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Statement_iteContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Statement_iteContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}

std::vector<FMLParser::Block_statementContext *> FMLParser::Statement_iteContext::block_statement() {
  return getRuleContexts<FMLParser::Block_statementContext>();
}

FMLParser::Block_statementContext* FMLParser::Statement_iteContext::block_statement(size_t i) {
  return getRuleContext<FMLParser::Block_statementContext>(i);
}


size_t FMLParser::Statement_iteContext::getRuleIndex() const {
  return FMLParser::RuleStatement_ite;
}


FMLParser::Statement_iteContext* FMLParser::statement_ite() {
  Statement_iteContext *_localctx = _tracker.createInstance<Statement_iteContext>(_ctx, getState());
  enterRule(_localctx, 398, FMLParser::RuleStatement_ite);

  	sep::BFCode elseifCode;
  	sep::BFCode code;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4447);
    match(FMLParser::T__264);
    setState(4448);
    antlrcpp::downCast<Statement_iteContext *>(_localctx)->e = expression();
    setState(4449);
    antlrcpp::downCast<Statement_iteContext *>(_localctx)->bs = block_statement();
     code = antlrcpp::downCast<Statement_iteContext *>(_localctx)->ac =  NEW_STMT2(OP(IF), antlrcpp::downCast<Statement_iteContext *>(_localctx)->e->bf, antlrcpp::downCast<Statement_iteContext *>(_localctx)->bs->ac); 
    setState(4462);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 512, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4454);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::T__265: {
            setState(4451);
            match(FMLParser::T__265);
            break;
          }

          case FMLParser::T__109: {
            setState(4452);
            match(FMLParser::T__109);
            setState(4453);
            match(FMLParser::T__264);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4456);
        antlrcpp::downCast<Statement_iteContext *>(_localctx)->e = expression();
        setState(4457);
        antlrcpp::downCast<Statement_iteContext *>(_localctx)->bs = block_statement();

        			code->setOperator(OP(IFE));
        			code->append(elseifCode = NEW_STMT2(OP(IF), antlrcpp::downCast<Statement_iteContext *>(_localctx)->e->bf, antlrcpp::downCast<Statement_iteContext *>(_localctx)->bs->ac));
        			code = elseifCode;
        		 
      }
      setState(4464);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 512, _ctx);
    }
    setState(4469);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__109) {
      setState(4465);
      match(FMLParser::T__109);
      setState(4466);
      antlrcpp::downCast<Statement_iteContext *>(_localctx)->bs = block_statement();

      			if( antlrcpp::downCast<Statement_iteContext *>(_localctx)->bs->ac->hasOperand() )
      			{
      				code->setOperator(OP(IFE)); code->append(antlrcpp::downCast<Statement_iteContext *>(_localctx)->bs->ac);
      			}
      		
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_iteContext ------------------------------------------------------------------

FMLParser::Expression_iteContext::Expression_iteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> FMLParser::Expression_iteContext::LCURLY() {
  return getTokens(FMLParser::LCURLY);
}

tree::TerminalNode* FMLParser::Expression_iteContext::LCURLY(size_t i) {
  return getToken(FMLParser::LCURLY, i);
}

std::vector<tree::TerminalNode *> FMLParser::Expression_iteContext::RCURLY() {
  return getTokens(FMLParser::RCURLY);
}

tree::TerminalNode* FMLParser::Expression_iteContext::RCURLY(size_t i) {
  return getToken(FMLParser::RCURLY, i);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Expression_iteContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Expression_iteContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}


size_t FMLParser::Expression_iteContext::getRuleIndex() const {
  return FMLParser::RuleExpression_ite;
}


FMLParser::Expression_iteContext* FMLParser::expression_ite() {
  Expression_iteContext *_localctx = _tracker.createInstance<Expression_iteContext>(_ctx, getState());
  enterRule(_localctx, 400, FMLParser::RuleExpression_ite);

  	sep::BFCode elseifExpr;
  	sep::BFCode expr;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4471);
    match(FMLParser::T__264);
    setState(4472);
    antlrcpp::downCast<Expression_iteContext *>(_localctx)->c = expression();
    setState(4473);
    match(FMLParser::LCURLY);
    setState(4474);
    antlrcpp::downCast<Expression_iteContext *>(_localctx)->e = expression();
    setState(4475);
    match(FMLParser::RCURLY);
     expr = antlrcpp::downCast<Expression_iteContext *>(_localctx)->ac =  NEW_STMT2(OP(IF), antlrcpp::downCast<Expression_iteContext *>(_localctx)->c->bf, antlrcpp::downCast<Expression_iteContext *>(_localctx)->e->bf); 
    setState(4490);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 515, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4480);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::T__265: {
            setState(4477);
            match(FMLParser::T__265);
            break;
          }

          case FMLParser::T__109: {
            setState(4478);
            match(FMLParser::T__109);
            setState(4479);
            match(FMLParser::T__264);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4482);
        antlrcpp::downCast<Expression_iteContext *>(_localctx)->c = expression();
        setState(4483);
        match(FMLParser::LCURLY);
        setState(4484);
        antlrcpp::downCast<Expression_iteContext *>(_localctx)->e = expression();
        setState(4485);
        match(FMLParser::RCURLY);

        			expr->setOperator(OP(IFE));
        			expr->append(elseifExpr = NEW_STMT2(OP(IF), antlrcpp::downCast<Expression_iteContext *>(_localctx)->c->bf, antlrcpp::downCast<Expression_iteContext *>(_localctx)->e->bf));
        			expr = elseifExpr;
        		 
      }
      setState(4492);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 515, _ctx);
    }
    setState(4499);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__109) {
      setState(4493);
      match(FMLParser::T__109);
      setState(4494);
      match(FMLParser::LCURLY);
      setState(4495);
      antlrcpp::downCast<Expression_iteContext *>(_localctx)->e = expression();
      setState(4496);
      match(FMLParser::RCURLY);
       expr->setOperator(OP(IFE)); expr->append(antlrcpp::downCast<Expression_iteContext *>(_localctx)->e->bf); 
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_iterationContext ------------------------------------------------------------------

FMLParser::Statement_iterationContext::Statement_iterationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Block_statementContext* FMLParser::Statement_iterationContext::block_statement() {
  return getRuleContext<FMLParser::Block_statementContext>(0);
}

std::vector<tree::TerminalNode *> FMLParser::Statement_iterationContext::SEMI() {
  return getTokens(FMLParser::SEMI);
}

tree::TerminalNode* FMLParser::Statement_iterationContext::SEMI(size_t i) {
  return getToken(FMLParser::SEMI, i);
}

tree::TerminalNode* FMLParser::Statement_iterationContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Statement_iterationContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

tree::TerminalNode* FMLParser::Statement_iterationContext::COLON() {
  return getToken(FMLParser::COLON, 0);
}

std::vector<FMLParser::For_assign_headerContext *> FMLParser::Statement_iterationContext::for_assign_header() {
  return getRuleContexts<FMLParser::For_assign_headerContext>();
}

FMLParser::For_assign_headerContext* FMLParser::Statement_iterationContext::for_assign_header(size_t i) {
  return getRuleContext<FMLParser::For_assign_headerContext>(i);
}

FMLParser::ExpressionContext* FMLParser::Statement_iterationContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}

FMLParser::LvalueContext* FMLParser::Statement_iterationContext::lvalue() {
  return getRuleContext<FMLParser::LvalueContext>(0);
}


size_t FMLParser::Statement_iterationContext::getRuleIndex() const {
  return FMLParser::RuleStatement_iteration;
}


FMLParser::Statement_iterationContext* FMLParser::statement_iteration() {
  Statement_iterationContext *_localctx = _tracker.createInstance<Statement_iterationContext>(_ctx, getState());
  enterRule(_localctx, 402, FMLParser::RuleStatement_iteration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4547);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__266: {
        enterOuterAlt(_localctx, 1);
        setState(4501);
        match(FMLParser::T__266);
        setState(4530);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 517, _ctx)) {
        case 1: {
          setState(4502);
          antlrcpp::downCast<Statement_iterationContext *>(_localctx)->isa = for_assign_header();
          setState(4503);
          match(FMLParser::SEMI);
          setState(4504);
          antlrcpp::downCast<Statement_iterationContext *>(_localctx)->e = expression();
          setState(4505);
          match(FMLParser::SEMI);
          setState(4506);
          antlrcpp::downCast<Statement_iterationContext *>(_localctx)->sai = for_assign_header();
           antlrcpp::downCast<Statement_iterationContext *>(_localctx)->ac =  NEW_STMT3(OP(FOR), antlrcpp::downCast<Statement_iterationContext *>(_localctx)->isa->ac, antlrcpp::downCast<Statement_iterationContext *>(_localctx)->e->bf, antlrcpp::downCast<Statement_iterationContext *>(_localctx)->sai->ac); 
          break;
        }

        case 2: {
          setState(4509);
          match(FMLParser::LPAREN);
          setState(4510);
          antlrcpp::downCast<Statement_iterationContext *>(_localctx)->isa = for_assign_header();
          setState(4511);
          match(FMLParser::SEMI);
          setState(4512);
          antlrcpp::downCast<Statement_iterationContext *>(_localctx)->e = expression();
          setState(4513);
          match(FMLParser::SEMI);
          setState(4514);
          antlrcpp::downCast<Statement_iterationContext *>(_localctx)->sai = for_assign_header();
          setState(4515);
          match(FMLParser::RPAREN);
           antlrcpp::downCast<Statement_iterationContext *>(_localctx)->ac =  NEW_STMT3(OP(FOR), antlrcpp::downCast<Statement_iterationContext *>(_localctx)->isa->ac, antlrcpp::downCast<Statement_iterationContext *>(_localctx)->e->bf, antlrcpp::downCast<Statement_iterationContext *>(_localctx)->sai->ac); 
          break;
        }

        case 3: {
          setState(4518);
          antlrcpp::downCast<Statement_iterationContext *>(_localctx)->lv = lvalue();
          setState(4519);
          match(FMLParser::COLON);
          setState(4520);
          antlrcpp::downCast<Statement_iterationContext *>(_localctx)->e = expression();
           antlrcpp::downCast<Statement_iterationContext *>(_localctx)->ac =  NEW_STMT2(OP(FOREACH), antlrcpp::downCast<Statement_iterationContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_iterationContext *>(_localctx)->e->bf); 
          break;
        }

        case 4: {
          setState(4523);
          match(FMLParser::LPAREN);
          setState(4524);
          antlrcpp::downCast<Statement_iterationContext *>(_localctx)->lv = lvalue();
          setState(4525);
          match(FMLParser::COLON);
          setState(4526);
          antlrcpp::downCast<Statement_iterationContext *>(_localctx)->e = expression();
          setState(4527);
          match(FMLParser::RPAREN);
           antlrcpp::downCast<Statement_iterationContext *>(_localctx)->ac =  NEW_STMT2(OP(FOREACH), antlrcpp::downCast<Statement_iterationContext *>(_localctx)->lv->bf, antlrcpp::downCast<Statement_iterationContext *>(_localctx)->e->bf); 
          break;
        }

        default:
          break;
        }
        setState(4532);
        antlrcpp::downCast<Statement_iterationContext *>(_localctx)->sa = block_statement();
         _localctx->ac->append(antlrcpp::downCast<Statement_iterationContext *>(_localctx)->sa->ac); 
        break;
      }

      case FMLParser::T__267: {
        enterOuterAlt(_localctx, 2);
        setState(4535);
        match(FMLParser::T__267);
        setState(4536);
        antlrcpp::downCast<Statement_iterationContext *>(_localctx)->e = expression();
        setState(4537);
        antlrcpp::downCast<Statement_iterationContext *>(_localctx)->bs = block_statement();
         antlrcpp::downCast<Statement_iterationContext *>(_localctx)->ac =  NEW_STMT2(OP(WHILE_DO), antlrcpp::downCast<Statement_iterationContext *>(_localctx)->e->bf, antlrcpp::downCast<Statement_iterationContext *>(_localctx)->bs->ac); 
        break;
      }

      case FMLParser::T__268: {
        enterOuterAlt(_localctx, 3);
        setState(4540);
        match(FMLParser::T__268);
        setState(4541);
        antlrcpp::downCast<Statement_iterationContext *>(_localctx)->bs = block_statement();
        setState(4542);
        match(FMLParser::T__267);
        setState(4543);
        antlrcpp::downCast<Statement_iterationContext *>(_localctx)->e = expression();
        setState(4544);
        match(FMLParser::SEMI);
         antlrcpp::downCast<Statement_iterationContext *>(_localctx)->ac =  NEW_STMT2(OP(DO_WHILE), antlrcpp::downCast<Statement_iterationContext *>(_localctx)->bs->ac, antlrcpp::downCast<Statement_iterationContext *>(_localctx)->e->bf); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- For_assign_headerContext ------------------------------------------------------------------

FMLParser::For_assign_headerContext::For_assign_headerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::LvalueContext* FMLParser::For_assign_headerContext::lvalue() {
  return getRuleContext<FMLParser::LvalueContext>(0);
}

tree::TerminalNode* FMLParser::For_assign_headerContext::ASSIGN() {
  return getToken(FMLParser::ASSIGN, 0);
}

tree::TerminalNode* FMLParser::For_assign_headerContext::INCR() {
  return getToken(FMLParser::INCR, 0);
}

tree::TerminalNode* FMLParser::For_assign_headerContext::DECR() {
  return getToken(FMLParser::DECR, 0);
}

FMLParser::ExpressionContext* FMLParser::For_assign_headerContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}


size_t FMLParser::For_assign_headerContext::getRuleIndex() const {
  return FMLParser::RuleFor_assign_header;
}


FMLParser::For_assign_headerContext* FMLParser::for_assign_header() {
  For_assign_headerContext *_localctx = _tracker.createInstance<For_assign_headerContext>(_ctx, getState());
  enterRule(_localctx, 404, FMLParser::RuleFor_assign_header);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4568);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::COLONx2:
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(4549);
        antlrcpp::downCast<For_assign_headerContext *>(_localctx)->lv = lvalue();
        setState(4558);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::ASSIGN: {
            setState(4550);
            match(FMLParser::ASSIGN);
            setState(4551);
            antlrcpp::downCast<For_assign_headerContext *>(_localctx)->e = expression();
             antlrcpp::downCast<For_assign_headerContext *>(_localctx)->ac =  NEW_STMT2(OP(ASSIGN), antlrcpp::downCast<For_assign_headerContext *>(_localctx)->lv->bf, antlrcpp::downCast<For_assign_headerContext *>(_localctx)->e->bf); 
            break;
          }

          case FMLParser::INCR: {
            setState(4554);
            match(FMLParser::INCR);
             antlrcpp::downCast<For_assign_headerContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(PLUS), antlrcpp::downCast<For_assign_headerContext *>(_localctx)->lv->bf,
            		sep::ExpressionConstant::INTEGER_ONE); 
            break;
          }

          case FMLParser::DECR: {
            setState(4556);
            match(FMLParser::DECR);
             antlrcpp::downCast<For_assign_headerContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(PLUS), antlrcpp::downCast<For_assign_headerContext *>(_localctx)->lv->bf,
            		sep::ExpressionConstant::INTEGER_MINUS_ONE); 
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case FMLParser::INCR: {
        enterOuterAlt(_localctx, 2);
        setState(4560);
        match(FMLParser::INCR);
        setState(4561);
        antlrcpp::downCast<For_assign_headerContext *>(_localctx)->lv = lvalue();
         antlrcpp::downCast<For_assign_headerContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(PLUS), antlrcpp::downCast<For_assign_headerContext *>(_localctx)->lv->bf,
        		 sep::ExpressionConstant::INTEGER_ONE); 
        break;
      }

      case FMLParser::DECR: {
        enterOuterAlt(_localctx, 3);
        setState(4564);
        match(FMLParser::DECR);
        setState(4565);
        antlrcpp::downCast<For_assign_headerContext *>(_localctx)->lv = lvalue();
         antlrcpp::downCast<For_assign_headerContext *>(_localctx)->ac =  NEW_STMT_ASSIGN_OP(OP(PLUS), antlrcpp::downCast<For_assign_headerContext *>(_localctx)->lv->bf,
        		sep::ExpressionConstant::INTEGER_MINUS_ONE); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_jumpContext ------------------------------------------------------------------

FMLParser::Statement_jumpContext::Statement_jumpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Statement_jumpContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Statement_jumpContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Statement_jumpContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Statement_jumpContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Statement_jumpContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Statement_jumpContext::getRuleIndex() const {
  return FMLParser::RuleStatement_jump;
}


FMLParser::Statement_jumpContext* FMLParser::statement_jump() {
  Statement_jumpContext *_localctx = _tracker.createInstance<Statement_jumpContext>(_ctx, getState());
  enterRule(_localctx, 406, FMLParser::RuleStatement_jump);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4610);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__269: {
        enterOuterAlt(_localctx, 1);
        setState(4570);
        match(FMLParser::T__269);
         antlrcpp::downCast<Statement_jumpContext *>(_localctx)->ac =  NEW_STMT(OP(BREAK)); 
        setState(4575);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 219) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 432)) & 125) != 0)) {
          setState(4572);
          antlrcpp::downCast<Statement_jumpContext *>(_localctx)->e = expression();
           _localctx->ac->append( antlrcpp::downCast<Statement_jumpContext *>(_localctx)->e->bf ); 
        }
        setState(4577);
        match(FMLParser::SEMI);
        break;
      }

      case FMLParser::T__270: {
        enterOuterAlt(_localctx, 2);
        setState(4578);
        match(FMLParser::T__270);
         antlrcpp::downCast<Statement_jumpContext *>(_localctx)->ac =  NEW_STMT(OP(CONTINUE)); 
        setState(4583);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 219) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 432)) & 125) != 0)) {
          setState(4580);
          antlrcpp::downCast<Statement_jumpContext *>(_localctx)->e = expression();
           _localctx->ac->append( antlrcpp::downCast<Statement_jumpContext *>(_localctx)->e->bf ); 
        }
        setState(4585);
        match(FMLParser::SEMI);
        break;
      }

      case FMLParser::T__30: {
        enterOuterAlt(_localctx, 3);
        setState(4586);
        match(FMLParser::T__30);
         antlrcpp::downCast<Statement_jumpContext *>(_localctx)->ac =  NEW_STMT(OP(RETURN)); 
        setState(4599);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 219) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 432)) & 125) != 0)) {
          setState(4588);
          antlrcpp::downCast<Statement_jumpContext *>(_localctx)->e = expression();
           _localctx->ac->append( antlrcpp::downCast<Statement_jumpContext *>(_localctx)->e->bf ); 
          setState(4596);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == FMLParser::COMMA) {
            setState(4590);
            match(FMLParser::COMMA);
            setState(4591);
            antlrcpp::downCast<Statement_jumpContext *>(_localctx)->e = expression();
             _localctx->ac->append( antlrcpp::downCast<Statement_jumpContext *>(_localctx)->e->bf ); 
            setState(4598);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(4601);
        match(FMLParser::SEMI);
        break;
      }

      case FMLParser::T__271: {
        enterOuterAlt(_localctx, 4);
        setState(4602);
        match(FMLParser::T__271);
         antlrcpp::downCast<Statement_jumpContext *>(_localctx)->ac =  NEW_STMT(OP(EXIT)); 
        setState(4607);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 219) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 432)) & 125) != 0)) {
          setState(4604);
          antlrcpp::downCast<Statement_jumpContext *>(_localctx)->e = expression();
           _localctx->ac->append( antlrcpp::downCast<Statement_jumpContext *>(_localctx)->e->bf ); 
        }
        setState(4609);
        match(FMLParser::SEMI);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_lambdaContext ------------------------------------------------------------------

FMLParser::Expression_lambdaContext::Expression_lambdaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::ExpressionContext* FMLParser::Expression_lambdaContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> FMLParser::Expression_lambdaContext::ID() {
  return getTokens(FMLParser::ID);
}

tree::TerminalNode* FMLParser::Expression_lambdaContext::ID(size_t i) {
  return getToken(FMLParser::ID, i);
}


size_t FMLParser::Expression_lambdaContext::getRuleIndex() const {
  return FMLParser::RuleExpression_lambda;
}


FMLParser::Expression_lambdaContext* FMLParser::expression_lambda() {
  Expression_lambdaContext *_localctx = _tracker.createInstance<Expression_lambdaContext>(_ctx, getState());
  enterRule(_localctx, 408, FMLParser::RuleExpression_lambda);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4612);
    match(FMLParser::T__272);
     antlrcpp::downCast<Expression_lambdaContext *>(_localctx)->ac =  NEW_CODE( OP(LAMBDA) ); 
    setState(4618);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == FMLParser::ID) {
      setState(4614);
      antlrcpp::downCast<Expression_lambdaContext *>(_localctx)->id = match(FMLParser::ID);
       _localctx->ac->append( NEW_ID(antlrcpp::downCast<Expression_lambdaContext *>(_localctx)->id->getText()) ); 
      setState(4620);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(4621);
    match(FMLParser::T__23);
    setState(4622);
    antlrcpp::downCast<Expression_lambdaContext *>(_localctx)->e = expression();
     _localctx->ac->append( antlrcpp::downCast<Expression_lambdaContext *>(_localctx)->e->bf ); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expression_statusContext ------------------------------------------------------------------

FMLParser::Expression_statusContext::Expression_statusContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Op_activityContext* FMLParser::Expression_statusContext::op_activity() {
  return getRuleContext<FMLParser::Op_activityContext>(0);
}

FMLParser::QualifiedNameIDContext* FMLParser::Expression_statusContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}

FMLParser::LvalueContext* FMLParser::Expression_statusContext::lvalue() {
  return getRuleContext<FMLParser::LvalueContext>(0);
}


size_t FMLParser::Expression_statusContext::getRuleIndex() const {
  return FMLParser::RuleExpression_status;
}


FMLParser::Expression_statusContext* FMLParser::expression_status() {
  Expression_statusContext *_localctx = _tracker.createInstance<Expression_statusContext>(_ctx, getState());
  enterRule(_localctx, 410, FMLParser::RuleExpression_status);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4653);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__273: {
        enterOuterAlt(_localctx, 1);
        setState(4625);
        match(FMLParser::T__273);
        setState(4626);
        antlrcpp::downCast<Expression_statusContext *>(_localctx)->o = op_activity();
        setState(4627);
        antlrcpp::downCast<Expression_statusContext *>(_localctx)->id = qualifiedNameID();
         antlrcpp::downCast<Expression_statusContext *>(_localctx)->ac =  NEW_STMT2(OP(STATUS_WAS), INCR_BF(antlrcpp::downCast<Expression_statusContext *>(_localctx)->o->op),
        			sep::ParserUtil::getvarMachine(antlrcpp::downCast<Expression_statusContext *>(_localctx)->id->s, antlrcpp::downCast<Expression_statusContext *>(_localctx)->id->nb)); 
        break;
      }

      case FMLParser::T__274: {
        enterOuterAlt(_localctx, 2);
        setState(4630);
        match(FMLParser::T__274);
        setState(4631);
        antlrcpp::downCast<Expression_statusContext *>(_localctx)->o = op_activity();
        setState(4632);
        antlrcpp::downCast<Expression_statusContext *>(_localctx)->id = qualifiedNameID();
         antlrcpp::downCast<Expression_statusContext *>(_localctx)->ac =  NEW_STMT2(OP(STATUS_IS), INCR_BF(antlrcpp::downCast<Expression_statusContext *>(_localctx)->o->op),
        			sep::ParserUtil::getvarMachine(antlrcpp::downCast<Expression_statusContext *>(_localctx)->id->s, antlrcpp::downCast<Expression_statusContext *>(_localctx)->id->nb)); 
        break;
      }

      case FMLParser::T__275: {
        enterOuterAlt(_localctx, 3);
        setState(4635);
        match(FMLParser::T__275);
        setState(4636);
        antlrcpp::downCast<Expression_statusContext *>(_localctx)->o = op_activity();
        setState(4637);
        antlrcpp::downCast<Expression_statusContext *>(_localctx)->id = qualifiedNameID();
         antlrcpp::downCast<Expression_statusContext *>(_localctx)->ac =  NEW_STMT2(OP(STATUS_BEING), INCR_BF(antlrcpp::downCast<Expression_statusContext *>(_localctx)->o->op),
        			sep::ParserUtil::getvarMachine(antlrcpp::downCast<Expression_statusContext *>(_localctx)->id->s, antlrcpp::downCast<Expression_statusContext *>(_localctx)->id->nb)); 
        break;
      }

      case FMLParser::T__276: {
        enterOuterAlt(_localctx, 4);
        setState(4640);
        match(FMLParser::T__276);
        setState(4641);
        antlrcpp::downCast<Expression_statusContext *>(_localctx)->o = op_activity();
        setState(4642);
        antlrcpp::downCast<Expression_statusContext *>(_localctx)->id = qualifiedNameID();
         antlrcpp::downCast<Expression_statusContext *>(_localctx)->ac =  NEW_STMT2(OP(STATUS_WILL), INCR_BF(antlrcpp::downCast<Expression_statusContext *>(_localctx)->o->op),
        			sep::ParserUtil::getvarMachine(antlrcpp::downCast<Expression_statusContext *>(_localctx)->id->s, antlrcpp::downCast<Expression_statusContext *>(_localctx)->id->nb)); 
        break;
      }

      case FMLParser::T__277: {
        enterOuterAlt(_localctx, 5);
        setState(4645);
        match(FMLParser::T__277);
        setState(4646);
        antlrcpp::downCast<Expression_statusContext *>(_localctx)->lv = lvalue();
         antlrcpp::downCast<Expression_statusContext *>(_localctx)->ac =  NEW_STMT1(OP(CHANGED), antlrcpp::downCast<Expression_statusContext *>(_localctx)->lv->bf); 
        break;
      }

      case FMLParser::T__278: {
        enterOuterAlt(_localctx, 6);
        setState(4649);
        match(FMLParser::T__278);
        setState(4650);
        antlrcpp::downCast<Expression_statusContext *>(_localctx)->lv = lvalue();
         antlrcpp::downCast<Expression_statusContext *>(_localctx)->ac =  NEW_STMT1(OP(CHANGED_TO), antlrcpp::downCast<Expression_statusContext *>(_localctx)->lv->bf); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Op_activityContext ------------------------------------------------------------------

FMLParser::Op_activityContext::Op_activityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t FMLParser::Op_activityContext::getRuleIndex() const {
  return FMLParser::RuleOp_activity;
}


FMLParser::Op_activityContext* FMLParser::op_activity() {
  Op_activityContext *_localctx = _tracker.createInstance<Op_activityContext>(_ctx, getState());
  enterRule(_localctx, 412, FMLParser::RuleOp_activity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4691);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__279: {
        enterOuterAlt(_localctx, 1);
        setState(4655);
        match(FMLParser::T__279);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(INIT);            
        break;
      }

      case FMLParser::T__13: {
        enterOuterAlt(_localctx, 2);
        setState(4657);
        match(FMLParser::T__13);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(FINAL);           
        break;
      }

      case FMLParser::T__280: {
        enterOuterAlt(_localctx, 3);
        setState(4659);
        match(FMLParser::T__280);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(DESTROY);         
        break;
      }

      case FMLParser::T__83: {
        enterOuterAlt(_localctx, 4);
        setState(4661);
        match(FMLParser::T__83);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(START);           
        break;
      }

      case FMLParser::T__281: {
        enterOuterAlt(_localctx, 5);
        setState(4663);
        match(FMLParser::T__281);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(RESTART);         
        break;
      }

      case FMLParser::T__282: {
        enterOuterAlt(_localctx, 6);
        setState(4665);
        match(FMLParser::T__282);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(STOP);            
        break;
      }

      case FMLParser::T__283: {
        enterOuterAlt(_localctx, 7);
        setState(4667);
        match(FMLParser::T__283);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(IENABLE_INVOKE);  
        break;
      }

      case FMLParser::T__284: {
        enterOuterAlt(_localctx, 8);
        setState(4669);
        match(FMLParser::T__284);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(ENABLE_INVOKE);   
        break;
      }

      case FMLParser::T__285: {
        enterOuterAlt(_localctx, 9);
        setState(4671);
        match(FMLParser::T__285);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(IDISABLE_INVOKE); 
        break;
      }

      case FMLParser::T__286: {
        enterOuterAlt(_localctx, 10);
        setState(4673);
        match(FMLParser::T__286);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(DISABLE_INVOKE);  
        break;
      }

      case FMLParser::T__287: {
        enterOuterAlt(_localctx, 11);
        setState(4675);
        match(FMLParser::T__287);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(IABORT_INVOKE);   
        break;
      }

      case FMLParser::T__108: {
        enterOuterAlt(_localctx, 12);
        setState(4677);
        match(FMLParser::T__108);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(ABORT_INVOKE);    
        break;
      }

      case FMLParser::T__288: {
        enterOuterAlt(_localctx, 13);
        setState(4679);
        match(FMLParser::T__288);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(RUN);             
        break;
      }

      case FMLParser::T__289: {
        enterOuterAlt(_localctx, 14);
        setState(4681);
        match(FMLParser::T__289);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(RTC);             
        break;
      }

      case FMLParser::T__290: {
        enterOuterAlt(_localctx, 15);
        setState(4683);
        match(FMLParser::T__290);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(SCHEDULE_INVOKE); 
        break;
      }

      case FMLParser::T__291: {
        enterOuterAlt(_localctx, 16);
        setState(4685);
        match(FMLParser::T__291);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(SUSPEND);         
        break;
      }

      case FMLParser::T__292: {
        enterOuterAlt(_localctx, 17);
        setState(4687);
        match(FMLParser::T__292);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(RESUME);          
        break;
      }

      case FMLParser::T__293: {
        enterOuterAlt(_localctx, 18);
        setState(4689);
        match(FMLParser::T__293);
         antlrcpp::downCast<Op_activityContext *>(_localctx)->op =  OP(WAIT);            
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_activityContext ------------------------------------------------------------------

FMLParser::Statement_activityContext::Statement_activityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Statement_activityContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

FMLParser::Op_activityContext* FMLParser::Statement_activityContext::op_activity() {
  return getRuleContext<FMLParser::Op_activityContext>(0);
}

FMLParser::Activity_machine_param_returnContext* FMLParser::Statement_activityContext::activity_machine_param_return() {
  return getRuleContext<FMLParser::Activity_machine_param_returnContext>(0);
}

FMLParser::QualifiedNameIDContext* FMLParser::Statement_activityContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}

tree::TerminalNode* FMLParser::Statement_activityContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Statement_activityContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

tree::TerminalNode* FMLParser::Statement_activityContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::Statement_activityContext::GT() {
  return getToken(FMLParser::GT, 0);
}

FMLParser::ExpressionContext* FMLParser::Statement_activityContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}

FMLParser::Statement_init_flowContext* FMLParser::Statement_activityContext::statement_init_flow() {
  return getRuleContext<FMLParser::Statement_init_flowContext>(0);
}


size_t FMLParser::Statement_activityContext::getRuleIndex() const {
  return FMLParser::RuleStatement_activity;
}


FMLParser::Statement_activityContext* FMLParser::statement_activity() {
  Statement_activityContext *_localctx = _tracker.createInstance<Statement_activityContext>(_ctx, getState());
  enterRule(_localctx, 414, FMLParser::RuleStatement_activity);

  	sep::BF flowTarget;
  	sep::BF machine;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4744);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::T__13:
      case FMLParser::T__83:
      case FMLParser::T__108:
      case FMLParser::T__279:
      case FMLParser::T__280:
      case FMLParser::T__281:
      case FMLParser::T__282:
      case FMLParser::T__283:
      case FMLParser::T__284:
      case FMLParser::T__285:
      case FMLParser::T__286:
      case FMLParser::T__287:
      case FMLParser::T__288:
      case FMLParser::T__289:
      case FMLParser::T__290:
      case FMLParser::T__291:
      case FMLParser::T__292:
      case FMLParser::T__293: {
        enterOuterAlt(_localctx, 1);
        setState(4693);
        antlrcpp::downCast<Statement_activityContext *>(_localctx)->o = op_activity();
         antlrcpp::downCast<Statement_activityContext *>(_localctx)->ac =  NEW_STMT(antlrcpp::downCast<Statement_activityContext *>(_localctx)->o->op); 
        setState(4723);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::ID: {
            setState(4695);
            antlrcpp::downCast<Statement_activityContext *>(_localctx)->id = qualifiedNameID();
             _localctx->ac->append(machine =
            			sep::ParserUtil::getvarMachine(antlrcpp::downCast<Statement_activityContext *>(_localctx)->id->s, antlrcpp::downCast<Statement_activityContext *>(_localctx)->id->nb)); 
            break;
          }

          case FMLParser::T__294:
          case FMLParser::T__295: {
            setState(4698);
            _la = _input->LA(1);
            if (!(_la == FMLParser::T__294

            || _la == FMLParser::T__295)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
             machine = sep::ExecutableLib::MACHINE_SELF; 
            setState(4712);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 531, _ctx)) {
            case 1: {
              setState(4708);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case FMLParser::LPAREN: {
                  setState(4700);
                  match(FMLParser::LPAREN);
                  setState(4701);
                  antlrcpp::downCast<Statement_activityContext *>(_localctx)->id = qualifiedNameID();
                  setState(4702);
                  match(FMLParser::RPAREN);
                  break;
                }

                case FMLParser::LT_: {
                  setState(4704);
                  match(FMLParser::LT_);
                  setState(4705);
                  antlrcpp::downCast<Statement_activityContext *>(_localctx)->id = qualifiedNameID();
                  setState(4706);
                  match(FMLParser::GT);
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
               machine = NEW_CODE1(OP(SELF),
              				sep::ParserUtil::getSelfExecutableMachine(antlrcpp::downCast<Statement_activityContext *>(_localctx)->id->s)); 
              break;
            }

            default:
              break;
            }
             _localctx->ac->append(machine); 
            break;
          }

          case FMLParser::T__296:
          case FMLParser::T__297: {
            setState(4715);
            _la = _input->LA(1);
            if (!(_la == FMLParser::T__296

            || _la == FMLParser::T__297)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
             _localctx->ac->append(machine = sep::ExecutableLib::MACHINE_THIS); 
            break;
          }

          case FMLParser::T__298: {
            setState(4717);
            match(FMLParser::T__298);
             _localctx->ac->append(machine = sep::ExecutableLib::MACHINE_PARENT); 
            break;
          }

          case FMLParser::T__299: {
            setState(4719);
            match(FMLParser::T__299);
             _localctx->ac->append(machine = sep::ExecutableLib::MACHINE_PARENT); 
            break;
          }

          case FMLParser::T__300: {
            setState(4721);
            match(FMLParser::T__300);
             _localctx->ac->append(machine = sep::ExecutableLib::MACHINE_SYSTEM); 
            break;
          }

          case FMLParser::LPAREN:
          case FMLParser::SEMI: {
            break;
          }

        default:
          break;
        }
        setState(4726);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == FMLParser::LPAREN) {
          setState(4725);
          activity_machine_param_return( machine , _localctx->ac );
        }
        setState(4728);
        match(FMLParser::SEMI);
        break;
      }

      case FMLParser::T__301: {
        enterOuterAlt(_localctx, 2);
        setState(4730);
        match(FMLParser::T__301);
        setState(4731);
        antlrcpp::downCast<Statement_activityContext *>(_localctx)->e = expression();
         antlrcpp::downCast<Statement_activityContext *>(_localctx)->ac =  NEW_STMT1(OP(GOTO),  antlrcpp::downCast<Statement_activityContext *>(_localctx)->e->bf); flowTarget = antlrcpp::downCast<Statement_activityContext *>(_localctx)->e->bf; 
        setState(4737);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::T__91: {
            setState(4733);
            antlrcpp::downCast<Statement_activityContext *>(_localctx)->fs = statement_init_flow(flowTarget);
             _localctx->ac->append(antlrcpp::downCast<Statement_activityContext *>(_localctx)->fs->ac); 
            break;
          }

          case FMLParser::SEMI: {
            setState(4736);
            match(FMLParser::SEMI);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        break;
      }

      case FMLParser::T__86: {
        enterOuterAlt(_localctx, 3);
        setState(4739);
        match(FMLParser::T__86);
        setState(4740);
        antlrcpp::downCast<Statement_activityContext *>(_localctx)->e = expression();
        setState(4741);
        match(FMLParser::SEMI);
         antlrcpp::downCast<Statement_activityContext *>(_localctx)->ac =  NEW_STMT1(OP(JOIN), antlrcpp::downCast<Statement_activityContext *>(_localctx)->e->bf); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_init_flowContext ------------------------------------------------------------------

FMLParser::Statement_init_flowContext::Statement_init_flowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Statement_init_flowContext::Statement_init_flowContext(ParserRuleContext *parent, size_t invokingState, sep::BF flowTarget)
  : ParserRuleContext(parent, invokingState) {
  this->flowTarget = flowTarget;
}

FMLParser::Block_statementContext* FMLParser::Statement_init_flowContext::block_statement() {
  return getRuleContext<FMLParser::Block_statementContext>(0);
}


size_t FMLParser::Statement_init_flowContext::getRuleIndex() const {
  return FMLParser::RuleStatement_init_flow;
}


FMLParser::Statement_init_flowContext* FMLParser::statement_init_flow(sep::BF flowTarget) {
  Statement_init_flowContext *_localctx = _tracker.createInstance<Statement_init_flowContext>(_ctx, getState(), flowTarget);
  enterRule(_localctx, 416, FMLParser::RuleStatement_init_flow);

  	if( flowTarget.is< sep::Machine >() )
  	{
  		PUSH_CTX_CPM( flowTarget.to_ptr< sep::Machine >() );
  	}


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4746);
    match(FMLParser::T__91);
    setState(4747);
    antlrcpp::downCast<Statement_init_flowContext *>(_localctx)->bs = block_statement();
     antlrcpp::downCast<Statement_init_flowContext *>(_localctx)->ac =  antlrcpp::downCast<Statement_init_flowContext *>(_localctx)->bs->ac; 
   _ctx->stop = _input->LT(-1);

    	if( flowTarget.is< sep::Machine >() )
    	{
    		POP_CTX;
    	}

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_invoke_routineContext ------------------------------------------------------------------

FMLParser::Statement_invoke_routineContext::Statement_invoke_routineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Invoke_routine_paramsContext* FMLParser::Statement_invoke_routineContext::invoke_routine_params() {
  return getRuleContext<FMLParser::Invoke_routine_paramsContext>(0);
}

tree::TerminalNode* FMLParser::Statement_invoke_routineContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}

tree::TerminalNode* FMLParser::Statement_invoke_routineContext::ID() {
  return getToken(FMLParser::ID, 0);
}

FMLParser::Invoke_routine_returnsContext* FMLParser::Statement_invoke_routineContext::invoke_routine_returns() {
  return getRuleContext<FMLParser::Invoke_routine_returnsContext>(0);
}


size_t FMLParser::Statement_invoke_routineContext::getRuleIndex() const {
  return FMLParser::RuleStatement_invoke_routine;
}


FMLParser::Statement_invoke_routineContext* FMLParser::statement_invoke_routine() {
  Statement_invoke_routineContext *_localctx = _tracker.createInstance<Statement_invoke_routineContext>(_ctx, getState());
  enterRule(_localctx, 418, FMLParser::RuleStatement_invoke_routine);

  	sep::Routine * invokeRoutine = nullptr;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4750);
    antlrcpp::downCast<Statement_invoke_routineContext *>(_localctx)->id = match(FMLParser::ID);

    		invokeRoutine = sep::Routine::newInvoke( _CPRMS_, antlrcpp::downCast<Statement_invoke_routineContext *>(_localctx)->id->getText());

    		invokeRoutine->setModel(
    				sep::ParserUtil::getvarRoutine(antlrcpp::downCast<Statement_invoke_routineContext *>(_localctx)->id->getText()) );
    	  
    setState(4752);
    invoke_routine_params( invokeRoutine );
    setState(4754);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__49

    || _la == FMLParser::T__50) {
      setState(4753);
      invoke_routine_returns( invokeRoutine );
    }
    setState(4756);
    match(FMLParser::SEMI);
     antlrcpp::downCast<Statement_invoke_routineContext *>(_localctx)->ac =  sep::Routine::invokeRoutineStatement(invokeRoutine); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Invoke_routine_paramsContext ------------------------------------------------------------------

FMLParser::Invoke_routine_paramsContext::Invoke_routine_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Invoke_routine_paramsContext::Invoke_routine_paramsContext(ParserRuleContext *parent, size_t invokingState, sep::Routine * invokeRoutine)
  : ParserRuleContext(parent, invokingState) {
  this->invokeRoutine = invokeRoutine;
}

tree::TerminalNode* FMLParser::Invoke_routine_paramsContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Invoke_routine_paramsContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

std::vector<FMLParser::Labelled_argumentContext *> FMLParser::Invoke_routine_paramsContext::labelled_argument() {
  return getRuleContexts<FMLParser::Labelled_argumentContext>();
}

FMLParser::Labelled_argumentContext* FMLParser::Invoke_routine_paramsContext::labelled_argument(size_t i) {
  return getRuleContext<FMLParser::Labelled_argumentContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Invoke_routine_paramsContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Invoke_routine_paramsContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Invoke_routine_paramsContext::getRuleIndex() const {
  return FMLParser::RuleInvoke_routine_params;
}


FMLParser::Invoke_routine_paramsContext* FMLParser::invoke_routine_params(sep::Routine * invokeRoutine) {
  Invoke_routine_paramsContext *_localctx = _tracker.createInstance<Invoke_routine_paramsContext>(_ctx, getState(), invokeRoutine);
  enterRule(_localctx, 420, FMLParser::RuleInvoke_routine_params);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4759);
    match(FMLParser::LPAREN);
    setState(4771);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__71 || _la == FMLParser::T__140 || ((((_la - 219) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 432)) & 125) != 0)) {
      setState(4760);
      antlrcpp::downCast<Invoke_routine_paramsContext *>(_localctx)->lp = labelled_argument();

      			invokeRoutine->getPropertyPart().appendVariableParameter(antlrcpp::downCast<Invoke_routine_paramsContext *>(_localctx)->lp->label, antlrcpp::downCast<Invoke_routine_paramsContext *>(_localctx)->lp->arg);
      		
      setState(4768);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FMLParser::COMMA) {
        setState(4762);
        match(FMLParser::COMMA);
        setState(4763);
        antlrcpp::downCast<Invoke_routine_paramsContext *>(_localctx)->lp = labelled_argument();

        			invokeRoutine->getPropertyPart().appendVariableParameter(antlrcpp::downCast<Invoke_routine_paramsContext *>(_localctx)->lp->label, antlrcpp::downCast<Invoke_routine_paramsContext *>(_localctx)->lp->arg);
        		
        setState(4770);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(4773);
    match(FMLParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Invoke_routine_returnsContext ------------------------------------------------------------------

FMLParser::Invoke_routine_returnsContext::Invoke_routine_returnsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Invoke_routine_returnsContext::Invoke_routine_returnsContext(ParserRuleContext *parent, size_t invokingState, sep::Routine * invokeRoutine)
  : ParserRuleContext(parent, invokingState) {
  this->invokeRoutine = invokeRoutine;
}

tree::TerminalNode* FMLParser::Invoke_routine_returnsContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Invoke_routine_returnsContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

std::vector<FMLParser::Labelled_argumentContext *> FMLParser::Invoke_routine_returnsContext::labelled_argument() {
  return getRuleContexts<FMLParser::Labelled_argumentContext>();
}

FMLParser::Labelled_argumentContext* FMLParser::Invoke_routine_returnsContext::labelled_argument(size_t i) {
  return getRuleContext<FMLParser::Labelled_argumentContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Invoke_routine_returnsContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Invoke_routine_returnsContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Invoke_routine_returnsContext::getRuleIndex() const {
  return FMLParser::RuleInvoke_routine_returns;
}


FMLParser::Invoke_routine_returnsContext* FMLParser::invoke_routine_returns(sep::Routine * invokeRoutine) {
  Invoke_routine_returnsContext *_localctx = _tracker.createInstance<Invoke_routine_returnsContext>(_ctx, getState(), invokeRoutine);
  enterRule(_localctx, 422, FMLParser::RuleInvoke_routine_returns);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4775);
    _la = _input->LA(1);
    if (!(_la == FMLParser::T__49

    || _la == FMLParser::T__50)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4793);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 540, _ctx)) {
    case 1: {
      setState(4776);
      match(FMLParser::LPAREN);
      setState(4777);
      antlrcpp::downCast<Invoke_routine_returnsContext *>(_localctx)->lp = labelled_argument();

      			invokeRoutine->getPropertyPart().appendVariableReturn(antlrcpp::downCast<Invoke_routine_returnsContext *>(_localctx)->lp->label, antlrcpp::downCast<Invoke_routine_returnsContext *>(_localctx)->lp->arg);
      		
      setState(4785);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FMLParser::COMMA) {
        setState(4779);
        match(FMLParser::COMMA);
        setState(4780);
        antlrcpp::downCast<Invoke_routine_returnsContext *>(_localctx)->lp = labelled_argument();

        			invokeRoutine->getPropertyPart().appendVariableReturn(antlrcpp::downCast<Invoke_routine_returnsContext *>(_localctx)->lp->label, antlrcpp::downCast<Invoke_routine_returnsContext *>(_localctx)->lp->arg);
        	      
        setState(4787);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(4788);
      match(FMLParser::RPAREN);
      break;
    }

    case 2: {
      setState(4790);
      antlrcpp::downCast<Invoke_routine_returnsContext *>(_localctx)->lp = labelled_argument();

      			invokeRoutine->getPropertyPart().appendVariableReturn(antlrcpp::downCast<Invoke_routine_returnsContext *>(_localctx)->lp->label, antlrcpp::downCast<Invoke_routine_returnsContext *>(_localctx)->lp->arg);
      		
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Statement_mocContext ------------------------------------------------------------------

FMLParser::Statement_mocContext::Statement_mocContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Statement_mocContext::StringLiteral() {
  return getToken(FMLParser::StringLiteral, 0);
}

tree::TerminalNode* FMLParser::Statement_mocContext::SEMI() {
  return getToken(FMLParser::SEMI, 0);
}


size_t FMLParser::Statement_mocContext::getRuleIndex() const {
  return FMLParser::RuleStatement_moc;
}


FMLParser::Statement_mocContext* FMLParser::statement_moc() {
  Statement_mocContext *_localctx = _tracker.createInstance<Statement_mocContext>(_ctx, getState());
  enterRule(_localctx, 424, FMLParser::RuleStatement_moc);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4795);
    match(FMLParser::T__302);
    setState(4796);
    antlrcpp::downCast<Statement_mocContext *>(_localctx)->stringliteralToken = match(FMLParser::StringLiteral);
    setState(4797);
    match(FMLParser::SEMI);

    		antlrcpp::downCast<Statement_mocContext *>(_localctx)->ac =  NEW_STMT1(OP(STEP_MARK),
    			NEW_STRING(antlrcpp::downCast<Statement_mocContext *>(_localctx)->stringliteralToken->getText()));
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

FMLParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::ConditionalExpressionContext* FMLParser::ExpressionContext::conditionalExpression() {
  return getRuleContext<FMLParser::ConditionalExpressionContext>(0);
}

tree::TerminalNode* FMLParser::ExpressionContext::ASSIGN() {
  return getToken(FMLParser::ASSIGN, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::ASSIGN_MACRO() {
  return getToken(FMLParser::ASSIGN_MACRO, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::ASSIGN_AFTER() {
  return getToken(FMLParser::ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::PLUS_ASSIGN() {
  return getToken(FMLParser::PLUS_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::PLUS_ASSIGN_AFTER() {
  return getToken(FMLParser::PLUS_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::MINUS_ASSIGN() {
  return getToken(FMLParser::MINUS_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::MINUS_ASSIGN_AFTER() {
  return getToken(FMLParser::MINUS_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::STAR_ASSIGN() {
  return getToken(FMLParser::STAR_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::STAR_ASSIGN_AFTER() {
  return getToken(FMLParser::STAR_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::DIV_ASSIGN() {
  return getToken(FMLParser::DIV_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::DIV_ASSIGN_AFTER() {
  return getToken(FMLParser::DIV_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::MOD_ASSIGN() {
  return getToken(FMLParser::MOD_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::MOD_ASSIGN_AFTER() {
  return getToken(FMLParser::MOD_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::LAND_ASSIGN() {
  return getToken(FMLParser::LAND_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::LAND_ASSIGN_AFTER() {
  return getToken(FMLParser::LAND_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::LOR_ASSIGN() {
  return getToken(FMLParser::LOR_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::LOR_ASSIGN_AFTER() {
  return getToken(FMLParser::LOR_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::BAND_ASSIGN() {
  return getToken(FMLParser::BAND_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::BAND_ASSIGN_AFTER() {
  return getToken(FMLParser::BAND_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::BOR_ASSIGN() {
  return getToken(FMLParser::BOR_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::BOR_ASSIGN_AFTER() {
  return getToken(FMLParser::BOR_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::BXOR_ASSIGN() {
  return getToken(FMLParser::BXOR_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::BXOR_ASSIGN_AFTER() {
  return getToken(FMLParser::BXOR_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::LSHIFT_ASSIGN() {
  return getToken(FMLParser::LSHIFT_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::LSHIFT_ASSIGN_AFTER() {
  return getToken(FMLParser::LSHIFT_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::RSHIFT_ASSIGN() {
  return getToken(FMLParser::RSHIFT_ASSIGN, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::RSHIFT_ASSIGN_AFTER() {
  return getToken(FMLParser::RSHIFT_ASSIGN_AFTER, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::OP_PUSH() {
  return getToken(FMLParser::OP_PUSH, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::OP_ASSIGN_TOP() {
  return getToken(FMLParser::OP_ASSIGN_TOP, 0);
}

tree::TerminalNode* FMLParser::ExpressionContext::OP_POP() {
  return getToken(FMLParser::OP_POP, 0);
}

FMLParser::ExpressionContext* FMLParser::ExpressionContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}


size_t FMLParser::ExpressionContext::getRuleIndex() const {
  return FMLParser::RuleExpression;
}


FMLParser::ExpressionContext* FMLParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 426, FMLParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4800);
    antlrcpp::downCast<ExpressionContext *>(_localctx)->ce = conditionalExpression();
     antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<ExpressionContext *>(_localctx)->ce->bf; 
    setState(4922);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 541, _ctx)) {
    case 1: {
      setState(4802);
      match(FMLParser::ASSIGN);
      setState(4803);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_CODE2(OP(ASSIGN), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 2: {
      setState(4806);
      match(FMLParser::ASSIGN_MACRO);
      setState(4807);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_CODE2(OP(ASSIGN_MACRO), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 3: {
      setState(4810);
      match(FMLParser::ASSIGN_AFTER);
      setState(4811);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_CODE2(OP(ASSIGN_AFTER), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 4: {
      setState(4814);
      match(FMLParser::PLUS_ASSIGN);
      setState(4815);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP(OP(PLUS), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 5: {
      setState(4818);
      match(FMLParser::PLUS_ASSIGN_AFTER);
      setState(4819);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP_AFTER(OP(PLUS), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 6: {
      setState(4822);
      match(FMLParser::MINUS_ASSIGN);
      setState(4823);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP(OP(MINUS), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 7: {
      setState(4826);
      match(FMLParser::MINUS_ASSIGN_AFTER);
      setState(4827);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP_AFTER(OP(MINUS), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 8: {
      setState(4830);
      match(FMLParser::STAR_ASSIGN);
      setState(4831);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP(OP(MULT), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 9: {
      setState(4834);
      match(FMLParser::STAR_ASSIGN_AFTER);
      setState(4835);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP_AFTER(OP(MULT), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 10: {
      setState(4838);
      match(FMLParser::DIV_ASSIGN);
      setState(4839);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP(OP(DIV), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 11: {
      setState(4842);
      match(FMLParser::DIV_ASSIGN_AFTER);
      setState(4843);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP_AFTER(OP(DIV), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 12: {
      setState(4846);
      match(FMLParser::MOD_ASSIGN);
      setState(4847);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP(OP(MOD), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 13: {
      setState(4850);
      match(FMLParser::MOD_ASSIGN_AFTER);
      setState(4851);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP_AFTER(OP(MOD), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 14: {
      setState(4854);
      match(FMLParser::LAND_ASSIGN);
      setState(4855);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP(OP(AND), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 15: {
      setState(4858);
      match(FMLParser::LAND_ASSIGN_AFTER);
      setState(4859);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP_AFTER(OP(AND), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 16: {
      setState(4862);
      match(FMLParser::LOR_ASSIGN);
      setState(4863);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP(OP(OR), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 17: {
      setState(4866);
      match(FMLParser::LOR_ASSIGN_AFTER);
      setState(4867);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP_AFTER(OP(OR), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 18: {
      setState(4870);
      match(FMLParser::BAND_ASSIGN);
      setState(4871);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP(OP(BAND), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 19: {
      setState(4874);
      match(FMLParser::BAND_ASSIGN_AFTER);
      setState(4875);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP_AFTER(OP(BAND), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 20: {
      setState(4878);
      match(FMLParser::BOR_ASSIGN);
      setState(4879);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP(OP(BOR), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 21: {
      setState(4882);
      match(FMLParser::BOR_ASSIGN_AFTER);
      setState(4883);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP_AFTER(OP(BOR), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 22: {
      setState(4886);
      match(FMLParser::BXOR_ASSIGN);
      setState(4887);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP(OP(BXOR), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 23: {
      setState(4890);
      match(FMLParser::BXOR_ASSIGN_AFTER);
      setState(4891);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP_AFTER(OP(BXOR), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 24: {
      setState(4894);
      match(FMLParser::LSHIFT_ASSIGN);
      setState(4895);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP(OP(LSHIFT), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 25: {
      setState(4898);
      match(FMLParser::LSHIFT_ASSIGN_AFTER);
      setState(4899);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP_AFTER(OP(LSHIFT), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 26: {
      setState(4902);
      match(FMLParser::RSHIFT_ASSIGN);
      setState(4903);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP(OP(RSHIFT), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 27: {
      setState(4906);
      match(FMLParser::RSHIFT_ASSIGN_AFTER);
      setState(4907);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP_AFTER(OP(RSHIFT), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 28: {
      setState(4910);
      match(FMLParser::OP_PUSH);
      setState(4911);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_CODE2(OP(PUSH), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 29: {
      setState(4914);
      match(FMLParser::OP_ASSIGN_TOP);
      setState(4915);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_CODE2(OP(ASSIGN_TOP), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    case 30: {
      setState(4918);
      match(FMLParser::OP_POP);
      setState(4919);
      antlrcpp::downCast<ExpressionContext *>(_localctx)->e = expression();
       antlrcpp::downCast<ExpressionContext *>(_localctx)->bf =  NEW_CODE2(OP(POP), _localctx->bf, antlrcpp::downCast<ExpressionContext *>(_localctx)->e->bf); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalExpressionContext ------------------------------------------------------------------

FMLParser::ConditionalExpressionContext::ConditionalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::ScheduleExpressionContext* FMLParser::ConditionalExpressionContext::scheduleExpression() {
  return getRuleContext<FMLParser::ScheduleExpressionContext>(0);
}

tree::TerminalNode* FMLParser::ConditionalExpressionContext::QUESTION() {
  return getToken(FMLParser::QUESTION, 0);
}

tree::TerminalNode* FMLParser::ConditionalExpressionContext::COLON() {
  return getToken(FMLParser::COLON, 0);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::ConditionalExpressionContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::ConditionalExpressionContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}


size_t FMLParser::ConditionalExpressionContext::getRuleIndex() const {
  return FMLParser::RuleConditionalExpression;
}


FMLParser::ConditionalExpressionContext* FMLParser::conditionalExpression() {
  ConditionalExpressionContext *_localctx = _tracker.createInstance<ConditionalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 428, FMLParser::RuleConditionalExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4924);
    antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->e = scheduleExpression();
     antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->e->bf; 
    setState(4932);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 542, _ctx)) {
    case 1: {
      setState(4926);
      match(FMLParser::QUESTION);
      setState(4927);
      antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->th = expression();
      setState(4928);
      match(FMLParser::COLON);
      setState(4929);
      antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->el = expression();
       antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->bf =  NEW_CODE3(OP(IFE), _localctx->bf, antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->th->bf, antlrcpp::downCast<ConditionalExpressionContext *>(_localctx)->el->bf); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScheduleExpressionContext ------------------------------------------------------------------

FMLParser::ScheduleExpressionContext::ScheduleExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::ConditionalOrExpressionContext *> FMLParser::ScheduleExpressionContext::conditionalOrExpression() {
  return getRuleContexts<FMLParser::ConditionalOrExpressionContext>();
}

FMLParser::ConditionalOrExpressionContext* FMLParser::ScheduleExpressionContext::conditionalOrExpression(size_t i) {
  return getRuleContext<FMLParser::ConditionalOrExpressionContext>(i);
}

std::vector<FMLParser::Op_sequenceContext *> FMLParser::ScheduleExpressionContext::op_sequence() {
  return getRuleContexts<FMLParser::Op_sequenceContext>();
}

FMLParser::Op_sequenceContext* FMLParser::ScheduleExpressionContext::op_sequence(size_t i) {
  return getRuleContext<FMLParser::Op_sequenceContext>(i);
}

std::vector<FMLParser::Op_schedulingContext *> FMLParser::ScheduleExpressionContext::op_scheduling() {
  return getRuleContexts<FMLParser::Op_schedulingContext>();
}

FMLParser::Op_schedulingContext* FMLParser::ScheduleExpressionContext::op_scheduling(size_t i) {
  return getRuleContext<FMLParser::Op_schedulingContext>(i);
}

std::vector<FMLParser::Op_concurrencyContext *> FMLParser::ScheduleExpressionContext::op_concurrency() {
  return getRuleContexts<FMLParser::Op_concurrencyContext>();
}

FMLParser::Op_concurrencyContext* FMLParser::ScheduleExpressionContext::op_concurrency(size_t i) {
  return getRuleContext<FMLParser::Op_concurrencyContext>(i);
}


size_t FMLParser::ScheduleExpressionContext::getRuleIndex() const {
  return FMLParser::RuleScheduleExpression;
}


FMLParser::ScheduleExpressionContext* FMLParser::scheduleExpression() {
  ScheduleExpressionContext *_localctx = _tracker.createInstance<ScheduleExpressionContext>(_ctx, getState());
  enterRule(_localctx, 430, FMLParser::RuleScheduleExpression);

  	const sep::Operator * op;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4934);
    antlrcpp::downCast<ScheduleExpressionContext *>(_localctx)->e = conditionalOrExpression();
     antlrcpp::downCast<ScheduleExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<ScheduleExpressionContext *>(_localctx)->e->bf; 
    setState(4952);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 544, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4945);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::OP_ATOMIC_SEQUENCE:
          case FMLParser::OP_SEQUENCE:
          case FMLParser::OP_SEQUENCE_SIDE:
          case FMLParser::OP_SEQUENCE_WEAK: {
            setState(4936);
            antlrcpp::downCast<ScheduleExpressionContext *>(_localctx)->os = op_sequence();
             op = antlrcpp::downCast<ScheduleExpressionContext *>(_localctx)->os->op; 
            break;
          }

          case FMLParser::OP_SCHEDULE_GT:
          case FMLParser::OP_SCHEDULE_LT:
          case FMLParser::OP_SCHEDULE_XOR:
          case FMLParser::OP_SCHEDULE_AND_THEN:
          case FMLParser::OP_SCHEDULE_OR_ELSE:
          case FMLParser::OP_NON_DETERMINISM: {
            setState(4939);
            antlrcpp::downCast<ScheduleExpressionContext *>(_localctx)->oh = op_scheduling();
             op = antlrcpp::downCast<ScheduleExpressionContext *>(_localctx)->oh->op; 
            break;
          }

          case FMLParser::OP_CONCURRENCY_ASYNC:
          case FMLParser::OP_CONCURRENCY_AND:
          case FMLParser::OP_CONCURRENCY_OR:
          case FMLParser::OP_CONCURRENCY_INTERLEAVING:
          case FMLParser::OP_CONCURRENCY_PARTIAL_ORDER:
          case FMLParser::OP_CONCURRENCY_PARALLEL:
          case FMLParser::OP_CONCURRENCY_RDV_ASYNC:
          case FMLParser::OP_CONCURRENCY_RDV_AND:
          case FMLParser::OP_CONCURRENCY_RDV_OR:
          case FMLParser::OP_CONCURRENCY_RDV_INTERLEAVING:
          case FMLParser::OP_CONCURRENCY_RDV_PARALLEL: {
            setState(4942);
            antlrcpp::downCast<ScheduleExpressionContext *>(_localctx)->oc = op_concurrency();
             op = antlrcpp::downCast<ScheduleExpressionContext *>(_localctx)->oc->op; 
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(4947);
        antlrcpp::downCast<ScheduleExpressionContext *>(_localctx)->e = conditionalOrExpression();
         antlrcpp::downCast<ScheduleExpressionContext *>(_localctx)->bf =  NEW_CODE_FLAT(op, _localctx->bf, antlrcpp::downCast<ScheduleExpressionContext *>(_localctx)->e->bf);  
      }
      setState(4954);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 544, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalOrExpressionContext ------------------------------------------------------------------

FMLParser::ConditionalOrExpressionContext::ConditionalOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::ConditionalImpliesExpressionContext *> FMLParser::ConditionalOrExpressionContext::conditionalImpliesExpression() {
  return getRuleContexts<FMLParser::ConditionalImpliesExpressionContext>();
}

FMLParser::ConditionalImpliesExpressionContext* FMLParser::ConditionalOrExpressionContext::conditionalImpliesExpression(size_t i) {
  return getRuleContext<FMLParser::ConditionalImpliesExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::ConditionalOrExpressionContext::LOR() {
  return getTokens(FMLParser::LOR);
}

tree::TerminalNode* FMLParser::ConditionalOrExpressionContext::LOR(size_t i) {
  return getToken(FMLParser::LOR, i);
}


size_t FMLParser::ConditionalOrExpressionContext::getRuleIndex() const {
  return FMLParser::RuleConditionalOrExpression;
}


FMLParser::ConditionalOrExpressionContext* FMLParser::conditionalOrExpression() {
  ConditionalOrExpressionContext *_localctx = _tracker.createInstance<ConditionalOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 432, FMLParser::RuleConditionalOrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4955);
    antlrcpp::downCast<ConditionalOrExpressionContext *>(_localctx)->e = conditionalImpliesExpression();
     antlrcpp::downCast<ConditionalOrExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<ConditionalOrExpressionContext *>(_localctx)->e->bf; 
    setState(4963);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 545, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4957);
        match(FMLParser::LOR);
        setState(4958);
        antlrcpp::downCast<ConditionalOrExpressionContext *>(_localctx)->e = conditionalImpliesExpression();
         antlrcpp::downCast<ConditionalOrExpressionContext *>(_localctx)->bf =  NEW_CODE_FLAT(OP(OR), _localctx->bf, antlrcpp::downCast<ConditionalOrExpressionContext *>(_localctx)->e->bf);  
      }
      setState(4965);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 545, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalImpliesExpressionContext ------------------------------------------------------------------

FMLParser::ConditionalImpliesExpressionContext::ConditionalImpliesExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::ConditionalAndExpressionContext *> FMLParser::ConditionalImpliesExpressionContext::conditionalAndExpression() {
  return getRuleContexts<FMLParser::ConditionalAndExpressionContext>();
}

FMLParser::ConditionalAndExpressionContext* FMLParser::ConditionalImpliesExpressionContext::conditionalAndExpression(size_t i) {
  return getRuleContext<FMLParser::ConditionalAndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::ConditionalImpliesExpressionContext::LIMPLIES() {
  return getTokens(FMLParser::LIMPLIES);
}

tree::TerminalNode* FMLParser::ConditionalImpliesExpressionContext::LIMPLIES(size_t i) {
  return getToken(FMLParser::LIMPLIES, i);
}


size_t FMLParser::ConditionalImpliesExpressionContext::getRuleIndex() const {
  return FMLParser::RuleConditionalImpliesExpression;
}


FMLParser::ConditionalImpliesExpressionContext* FMLParser::conditionalImpliesExpression() {
  ConditionalImpliesExpressionContext *_localctx = _tracker.createInstance<ConditionalImpliesExpressionContext>(_ctx, getState());
  enterRule(_localctx, 434, FMLParser::RuleConditionalImpliesExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4966);
    antlrcpp::downCast<ConditionalImpliesExpressionContext *>(_localctx)->e = conditionalAndExpression();
     antlrcpp::downCast<ConditionalImpliesExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<ConditionalImpliesExpressionContext *>(_localctx)->e->bf; 
    setState(4974);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 546, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4968);
        match(FMLParser::LIMPLIES);
        setState(4969);
        antlrcpp::downCast<ConditionalImpliesExpressionContext *>(_localctx)->e = conditionalAndExpression();
         antlrcpp::downCast<ConditionalImpliesExpressionContext *>(_localctx)->bf =  NEW_CODE_FLAT(OP(IMPLIES), _localctx->bf, antlrcpp::downCast<ConditionalImpliesExpressionContext *>(_localctx)->e->bf);  
      }
      setState(4976);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 546, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalAndExpressionContext ------------------------------------------------------------------

FMLParser::ConditionalAndExpressionContext::ConditionalAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::BitwiseOrExpressionContext *> FMLParser::ConditionalAndExpressionContext::bitwiseOrExpression() {
  return getRuleContexts<FMLParser::BitwiseOrExpressionContext>();
}

FMLParser::BitwiseOrExpressionContext* FMLParser::ConditionalAndExpressionContext::bitwiseOrExpression(size_t i) {
  return getRuleContext<FMLParser::BitwiseOrExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::ConditionalAndExpressionContext::LAND() {
  return getTokens(FMLParser::LAND);
}

tree::TerminalNode* FMLParser::ConditionalAndExpressionContext::LAND(size_t i) {
  return getToken(FMLParser::LAND, i);
}


size_t FMLParser::ConditionalAndExpressionContext::getRuleIndex() const {
  return FMLParser::RuleConditionalAndExpression;
}


FMLParser::ConditionalAndExpressionContext* FMLParser::conditionalAndExpression() {
  ConditionalAndExpressionContext *_localctx = _tracker.createInstance<ConditionalAndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 436, FMLParser::RuleConditionalAndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4977);
    antlrcpp::downCast<ConditionalAndExpressionContext *>(_localctx)->e = bitwiseOrExpression();
     antlrcpp::downCast<ConditionalAndExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<ConditionalAndExpressionContext *>(_localctx)->e->bf; 
    setState(4985);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 547, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4979);
        match(FMLParser::LAND);
        setState(4980);
        antlrcpp::downCast<ConditionalAndExpressionContext *>(_localctx)->e = bitwiseOrExpression();
         antlrcpp::downCast<ConditionalAndExpressionContext *>(_localctx)->bf =  NEW_CODE_FLAT(OP(AND), _localctx->bf, antlrcpp::downCast<ConditionalAndExpressionContext *>(_localctx)->e->bf);  
      }
      setState(4987);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 547, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseOrExpressionContext ------------------------------------------------------------------

FMLParser::BitwiseOrExpressionContext::BitwiseOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::BitwiseXorExpressionContext *> FMLParser::BitwiseOrExpressionContext::bitwiseXorExpression() {
  return getRuleContexts<FMLParser::BitwiseXorExpressionContext>();
}

FMLParser::BitwiseXorExpressionContext* FMLParser::BitwiseOrExpressionContext::bitwiseXorExpression(size_t i) {
  return getRuleContext<FMLParser::BitwiseXorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::BitwiseOrExpressionContext::BOR() {
  return getTokens(FMLParser::BOR);
}

tree::TerminalNode* FMLParser::BitwiseOrExpressionContext::BOR(size_t i) {
  return getToken(FMLParser::BOR, i);
}


size_t FMLParser::BitwiseOrExpressionContext::getRuleIndex() const {
  return FMLParser::RuleBitwiseOrExpression;
}


FMLParser::BitwiseOrExpressionContext* FMLParser::bitwiseOrExpression() {
  BitwiseOrExpressionContext *_localctx = _tracker.createInstance<BitwiseOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 438, FMLParser::RuleBitwiseOrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4988);
    antlrcpp::downCast<BitwiseOrExpressionContext *>(_localctx)->e = bitwiseXorExpression();
     antlrcpp::downCast<BitwiseOrExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<BitwiseOrExpressionContext *>(_localctx)->e->bf; 
    setState(4996);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 548, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(4990);
        match(FMLParser::BOR);
        setState(4991);
        antlrcpp::downCast<BitwiseOrExpressionContext *>(_localctx)->e = bitwiseXorExpression();
         antlrcpp::downCast<BitwiseOrExpressionContext *>(_localctx)->bf =  NEW_CODE_FLAT(OP(BOR), _localctx->bf, antlrcpp::downCast<BitwiseOrExpressionContext *>(_localctx)->e->bf);  
      }
      setState(4998);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 548, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseXorExpressionContext ------------------------------------------------------------------

FMLParser::BitwiseXorExpressionContext::BitwiseXorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::BitwiseAndExpressionContext *> FMLParser::BitwiseXorExpressionContext::bitwiseAndExpression() {
  return getRuleContexts<FMLParser::BitwiseAndExpressionContext>();
}

FMLParser::BitwiseAndExpressionContext* FMLParser::BitwiseXorExpressionContext::bitwiseAndExpression(size_t i) {
  return getRuleContext<FMLParser::BitwiseAndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::BitwiseXorExpressionContext::BXOR() {
  return getTokens(FMLParser::BXOR);
}

tree::TerminalNode* FMLParser::BitwiseXorExpressionContext::BXOR(size_t i) {
  return getToken(FMLParser::BXOR, i);
}


size_t FMLParser::BitwiseXorExpressionContext::getRuleIndex() const {
  return FMLParser::RuleBitwiseXorExpression;
}


FMLParser::BitwiseXorExpressionContext* FMLParser::bitwiseXorExpression() {
  BitwiseXorExpressionContext *_localctx = _tracker.createInstance<BitwiseXorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 440, FMLParser::RuleBitwiseXorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4999);
    antlrcpp::downCast<BitwiseXorExpressionContext *>(_localctx)->e = bitwiseAndExpression();
     antlrcpp::downCast<BitwiseXorExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<BitwiseXorExpressionContext *>(_localctx)->e->bf; 
    setState(5007);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 549, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5001);
        match(FMLParser::BXOR);
        setState(5002);
        antlrcpp::downCast<BitwiseXorExpressionContext *>(_localctx)->e = bitwiseAndExpression();
         antlrcpp::downCast<BitwiseXorExpressionContext *>(_localctx)->bf =  NEW_CODE_FLAT(OP(BXOR), _localctx->bf, antlrcpp::downCast<BitwiseXorExpressionContext *>(_localctx)->e->bf);  
      }
      setState(5009);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 549, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BitwiseAndExpressionContext ------------------------------------------------------------------

FMLParser::BitwiseAndExpressionContext::BitwiseAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::EqualityExpressionContext *> FMLParser::BitwiseAndExpressionContext::equalityExpression() {
  return getRuleContexts<FMLParser::EqualityExpressionContext>();
}

FMLParser::EqualityExpressionContext* FMLParser::BitwiseAndExpressionContext::equalityExpression(size_t i) {
  return getRuleContext<FMLParser::EqualityExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::BitwiseAndExpressionContext::BAND() {
  return getTokens(FMLParser::BAND);
}

tree::TerminalNode* FMLParser::BitwiseAndExpressionContext::BAND(size_t i) {
  return getToken(FMLParser::BAND, i);
}


size_t FMLParser::BitwiseAndExpressionContext::getRuleIndex() const {
  return FMLParser::RuleBitwiseAndExpression;
}


FMLParser::BitwiseAndExpressionContext* FMLParser::bitwiseAndExpression() {
  BitwiseAndExpressionContext *_localctx = _tracker.createInstance<BitwiseAndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 442, FMLParser::RuleBitwiseAndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5010);
    antlrcpp::downCast<BitwiseAndExpressionContext *>(_localctx)->e = equalityExpression();
     antlrcpp::downCast<BitwiseAndExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<BitwiseAndExpressionContext *>(_localctx)->e->bf; 
    setState(5018);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 550, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5012);
        match(FMLParser::BAND);
        setState(5013);
        antlrcpp::downCast<BitwiseAndExpressionContext *>(_localctx)->e = equalityExpression();
         antlrcpp::downCast<BitwiseAndExpressionContext *>(_localctx)->bf =  NEW_CODE_FLAT(OP(BAND), _localctx->bf, antlrcpp::downCast<BitwiseAndExpressionContext *>(_localctx)->e->bf);  
      }
      setState(5020);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 550, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

FMLParser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::RelationalExpressionContext *> FMLParser::EqualityExpressionContext::relationalExpression() {
  return getRuleContexts<FMLParser::RelationalExpressionContext>();
}

FMLParser::RelationalExpressionContext* FMLParser::EqualityExpressionContext::relationalExpression(size_t i) {
  return getRuleContext<FMLParser::RelationalExpressionContext>(i);
}

std::vector<FMLParser::EqualOpContext *> FMLParser::EqualityExpressionContext::equalOp() {
  return getRuleContexts<FMLParser::EqualOpContext>();
}

FMLParser::EqualOpContext* FMLParser::EqualityExpressionContext::equalOp(size_t i) {
  return getRuleContext<FMLParser::EqualOpContext>(i);
}


size_t FMLParser::EqualityExpressionContext::getRuleIndex() const {
  return FMLParser::RuleEqualityExpression;
}


FMLParser::EqualityExpressionContext* FMLParser::equalityExpression() {
  EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, getState());
  enterRule(_localctx, 444, FMLParser::RuleEqualityExpression);

  	sep::BFCode eqExpr;
  	sep::BF rhs;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5021);
    antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->e = relationalExpression();
     antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->e->bf; 
    setState(5037);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 552, _ctx)) {
    case 1: {
      setState(5023);
      antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->eq = equalOp();
      setState(5024);
      antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->e = relationalExpression();
       eqExpr = NEW_CODE2(antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->eq->op, _localctx->bf, antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->e->bf); 
      setState(5032);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 551, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(5026);
          antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->eq = equalOp();
          setState(5027);
          antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->e = relationalExpression();

          			/*if( eqExpr.getOperator() == antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->eq->op )
          			{
          				eqExpr.append( antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->e->bf );
          			}
          			else*/ if( eqExpr.getOperator() == OP(AND) )
          			{
          				eqExpr.append( NEW_CODE2(antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->eq->op, rhs, antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->e->bf) );
          			}
          			else
          			{
          				eqExpr = NEW_CODE2(OP(AND), eqExpr, NEW_CODE2(antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->eq->op, rhs, antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->e->bf));
          			}

          			rhs = antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->e->bf;
          		 
        }
        setState(5034);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 551, _ctx);
      }
       antlrcpp::downCast<EqualityExpressionContext *>(_localctx)->bf =  eqExpr; 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualOpContext ------------------------------------------------------------------

FMLParser::EqualOpContext::EqualOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::EqualOpContext::EQUAL() {
  return getToken(FMLParser::EQUAL, 0);
}

tree::TerminalNode* FMLParser::EqualOpContext::NEQUAL() {
  return getToken(FMLParser::NEQUAL, 0);
}

tree::TerminalNode* FMLParser::EqualOpContext::SEQUAL() {
  return getToken(FMLParser::SEQUAL, 0);
}

tree::TerminalNode* FMLParser::EqualOpContext::NSEQUAL() {
  return getToken(FMLParser::NSEQUAL, 0);
}


size_t FMLParser::EqualOpContext::getRuleIndex() const {
  return FMLParser::RuleEqualOp;
}


FMLParser::EqualOpContext* FMLParser::equalOp() {
  EqualOpContext *_localctx = _tracker.createInstance<EqualOpContext>(_ctx, getState());
  enterRule(_localctx, 446, FMLParser::RuleEqualOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5047);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::EQUAL: {
        enterOuterAlt(_localctx, 1);
        setState(5039);
        match(FMLParser::EQUAL);
         antlrcpp::downCast<EqualOpContext *>(_localctx)->op =  OP(EQ);   
        break;
      }

      case FMLParser::NEQUAL: {
        enterOuterAlt(_localctx, 2);
        setState(5041);
        match(FMLParser::NEQUAL);
         antlrcpp::downCast<EqualOpContext *>(_localctx)->op =  OP(NEQ);  
        break;
      }

      case FMLParser::SEQUAL: {
        enterOuterAlt(_localctx, 3);
        setState(5043);
        match(FMLParser::SEQUAL);
         antlrcpp::downCast<EqualOpContext *>(_localctx)->op =  OP(SEQ);  
        break;
      }

      case FMLParser::NSEQUAL: {
        enterOuterAlt(_localctx, 4);
        setState(5045);
        match(FMLParser::NSEQUAL);
         antlrcpp::downCast<EqualOpContext *>(_localctx)->op =  OP(NSEQ); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

FMLParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::ShiftExpressionContext *> FMLParser::RelationalExpressionContext::shiftExpression() {
  return getRuleContexts<FMLParser::ShiftExpressionContext>();
}

FMLParser::ShiftExpressionContext* FMLParser::RelationalExpressionContext::shiftExpression(size_t i) {
  return getRuleContext<FMLParser::ShiftExpressionContext>(i);
}

std::vector<FMLParser::RelationalOpContext *> FMLParser::RelationalExpressionContext::relationalOp() {
  return getRuleContexts<FMLParser::RelationalOpContext>();
}

FMLParser::RelationalOpContext* FMLParser::RelationalExpressionContext::relationalOp(size_t i) {
  return getRuleContext<FMLParser::RelationalOpContext>(i);
}


size_t FMLParser::RelationalExpressionContext::getRuleIndex() const {
  return FMLParser::RuleRelationalExpression;
}


FMLParser::RelationalExpressionContext* FMLParser::relationalExpression() {
  RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 448, FMLParser::RuleRelationalExpression);

  	sep::BFCode relExpr;
  	sep::BF rhs;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5049);
    antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->e = shiftExpression();
     antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->e->bf; 
    setState(5065);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 555, _ctx)) {
    case 1: {
      setState(5051);
      antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->r = relationalOp();
      setState(5052);
      antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->e = shiftExpression();
       relExpr = NEW_CODE2(antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->r->op, _localctx->bf, rhs = antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->e->bf); 
      setState(5060);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 554, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(5054);
          antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->r = relationalOp();
          setState(5055);
          antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->e = shiftExpression();

          			/*if( relExpr.getOperator() == antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->r->op )
          			{
          				relExpr.append( antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->e->bf );
          			}
          			else*/ if( relExpr.getOperator() == OP(AND) )
          			{
          				relExpr.append( NEW_CODE2(antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->r->op, rhs, antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->e->bf) );
          			}
          			else
          			{
          				relExpr = NEW_CODE2(OP(AND), relExpr, NEW_CODE2(antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->r->op, rhs, antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->e->bf));
          			}

          			rhs = antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->e->bf;
          		 
        }
        setState(5062);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 554, _ctx);
      }
       antlrcpp::downCast<RelationalExpressionContext *>(_localctx)->bf =  relExpr; 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalOpContext ------------------------------------------------------------------

FMLParser::RelationalOpContext::RelationalOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::RelationalOpContext::LTE() {
  return getToken(FMLParser::LTE, 0);
}

tree::TerminalNode* FMLParser::RelationalOpContext::GTE() {
  return getToken(FMLParser::GTE, 0);
}

tree::TerminalNode* FMLParser::RelationalOpContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::RelationalOpContext::GT() {
  return getToken(FMLParser::GT, 0);
}


size_t FMLParser::RelationalOpContext::getRuleIndex() const {
  return FMLParser::RuleRelationalOp;
}


FMLParser::RelationalOpContext* FMLParser::relationalOp() {
  RelationalOpContext *_localctx = _tracker.createInstance<RelationalOpContext>(_ctx, getState());
  enterRule(_localctx, 450, FMLParser::RuleRelationalOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5077);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LTE: {
        enterOuterAlt(_localctx, 1);
        setState(5067);
        match(FMLParser::LTE);
         antlrcpp::downCast<RelationalOpContext *>(_localctx)->op =  OP(LTE); 
        break;
      }

      case FMLParser::GTE: {
        enterOuterAlt(_localctx, 2);
        setState(5069);
        match(FMLParser::GTE);
         antlrcpp::downCast<RelationalOpContext *>(_localctx)->op =  OP(GTE); 
        break;
      }

      case FMLParser::LT_: {
        enterOuterAlt(_localctx, 3);
        setState(5071);
        match(FMLParser::LT_);
         antlrcpp::downCast<RelationalOpContext *>(_localctx)->op =  OP(LT); 
        break;
      }

      case FMLParser::GT: {
        enterOuterAlt(_localctx, 4);
        setState(5073);
        match(FMLParser::GT);
         antlrcpp::downCast<RelationalOpContext *>(_localctx)->op =  OP(GT); 
        break;
      }

      case FMLParser::T__24: {
        enterOuterAlt(_localctx, 5);
        setState(5075);
        match(FMLParser::T__24);
         antlrcpp::downCast<RelationalOpContext *>(_localctx)->op =  OP(IN); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftExpressionContext ------------------------------------------------------------------

FMLParser::ShiftExpressionContext::ShiftExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::AdditiveExpressionContext *> FMLParser::ShiftExpressionContext::additiveExpression() {
  return getRuleContexts<FMLParser::AdditiveExpressionContext>();
}

FMLParser::AdditiveExpressionContext* FMLParser::ShiftExpressionContext::additiveExpression(size_t i) {
  return getRuleContext<FMLParser::AdditiveExpressionContext>(i);
}

std::vector<FMLParser::ShiftOpContext *> FMLParser::ShiftExpressionContext::shiftOp() {
  return getRuleContexts<FMLParser::ShiftOpContext>();
}

FMLParser::ShiftOpContext* FMLParser::ShiftExpressionContext::shiftOp(size_t i) {
  return getRuleContext<FMLParser::ShiftOpContext>(i);
}


size_t FMLParser::ShiftExpressionContext::getRuleIndex() const {
  return FMLParser::RuleShiftExpression;
}


FMLParser::ShiftExpressionContext* FMLParser::shiftExpression() {
  ShiftExpressionContext *_localctx = _tracker.createInstance<ShiftExpressionContext>(_ctx, getState());
  enterRule(_localctx, 452, FMLParser::RuleShiftExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5079);
    antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->e = additiveExpression();
     antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->e->bf; 
    setState(5087);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 557, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5081);
        antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->s = shiftOp();
        setState(5082);
        antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->e = additiveExpression();
         antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->bf =  NEW_CODE2(antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->s->op, _localctx->bf, antlrcpp::downCast<ShiftExpressionContext *>(_localctx)->e->bf);  
      }
      setState(5089);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 557, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftOpContext ------------------------------------------------------------------

FMLParser::ShiftOpContext::ShiftOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::ShiftOpContext::LSHIFT() {
  return getToken(FMLParser::LSHIFT, 0);
}

tree::TerminalNode* FMLParser::ShiftOpContext::RSHIFT() {
  return getToken(FMLParser::RSHIFT, 0);
}


size_t FMLParser::ShiftOpContext::getRuleIndex() const {
  return FMLParser::RuleShiftOp;
}


FMLParser::ShiftOpContext* FMLParser::shiftOp() {
  ShiftOpContext *_localctx = _tracker.createInstance<ShiftOpContext>(_ctx, getState());
  enterRule(_localctx, 454, FMLParser::RuleShiftOp);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5094);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LSHIFT: {
        enterOuterAlt(_localctx, 1);
        setState(5090);
        match(FMLParser::LSHIFT);
         antlrcpp::downCast<ShiftOpContext *>(_localctx)->op =  OP(LSHIFT); 
        break;
      }

      case FMLParser::RSHIFT: {
        enterOuterAlt(_localctx, 2);
        setState(5092);
        match(FMLParser::RSHIFT);
         antlrcpp::downCast<ShiftOpContext *>(_localctx)->op =  OP(RSHIFT); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

FMLParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::MultiplicativeExpressionContext *> FMLParser::AdditiveExpressionContext::multiplicativeExpression() {
  return getRuleContexts<FMLParser::MultiplicativeExpressionContext>();
}

FMLParser::MultiplicativeExpressionContext* FMLParser::AdditiveExpressionContext::multiplicativeExpression(size_t i) {
  return getRuleContext<FMLParser::MultiplicativeExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::AdditiveExpressionContext::PLUS() {
  return getTokens(FMLParser::PLUS);
}

tree::TerminalNode* FMLParser::AdditiveExpressionContext::PLUS(size_t i) {
  return getToken(FMLParser::PLUS, i);
}

std::vector<tree::TerminalNode *> FMLParser::AdditiveExpressionContext::MINUS() {
  return getTokens(FMLParser::MINUS);
}

tree::TerminalNode* FMLParser::AdditiveExpressionContext::MINUS(size_t i) {
  return getToken(FMLParser::MINUS, i);
}


size_t FMLParser::AdditiveExpressionContext::getRuleIndex() const {
  return FMLParser::RuleAdditiveExpression;
}


FMLParser::AdditiveExpressionContext* FMLParser::additiveExpression() {
  AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, getState());
  enterRule(_localctx, 456, FMLParser::RuleAdditiveExpression);

  	const sep::Operator * op = nullptr;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5096);
    antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->e = multiplicativeExpression();
     antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->e->bf; 
    setState(5109);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 560, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5102);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::PLUS: {
            setState(5098);
            match(FMLParser::PLUS);
             op = OP(PLUS);  
            break;
          }

          case FMLParser::MINUS: {
            setState(5100);
            match(FMLParser::MINUS);
             op = OP(MINUS); 
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(5104);
        antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->e = multiplicativeExpression();

        			if( op == OP(MINUS) )
        			{
        				antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->bf =  NEW_CODE_FLAT(OP(PLUS), _localctx->bf, new_uminus_expr(antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->e->bf));
        			}
        			else
        			{
        				antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->bf =  NEW_CODE_FLAT(op, _localctx->bf, antlrcpp::downCast<AdditiveExpressionContext *>(_localctx)->e->bf);
        			}
        		 
      }
      setState(5111);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 560, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

FMLParser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<FMLParser::UnaryExpressionContext *> FMLParser::MultiplicativeExpressionContext::unaryExpression() {
  return getRuleContexts<FMLParser::UnaryExpressionContext>();
}

FMLParser::UnaryExpressionContext* FMLParser::MultiplicativeExpressionContext::unaryExpression(size_t i) {
  return getRuleContext<FMLParser::UnaryExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::MultiplicativeExpressionContext::STAR() {
  return getTokens(FMLParser::STAR);
}

tree::TerminalNode* FMLParser::MultiplicativeExpressionContext::STAR(size_t i) {
  return getToken(FMLParser::STAR, i);
}

std::vector<tree::TerminalNode *> FMLParser::MultiplicativeExpressionContext::DIV() {
  return getTokens(FMLParser::DIV);
}

tree::TerminalNode* FMLParser::MultiplicativeExpressionContext::DIV(size_t i) {
  return getToken(FMLParser::DIV, i);
}

std::vector<tree::TerminalNode *> FMLParser::MultiplicativeExpressionContext::MOD() {
  return getTokens(FMLParser::MOD);
}

tree::TerminalNode* FMLParser::MultiplicativeExpressionContext::MOD(size_t i) {
  return getToken(FMLParser::MOD, i);
}


size_t FMLParser::MultiplicativeExpressionContext::getRuleIndex() const {
  return FMLParser::RuleMultiplicativeExpression;
}


FMLParser::MultiplicativeExpressionContext* FMLParser::multiplicativeExpression() {
  MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 458, FMLParser::RuleMultiplicativeExpression);

  	const sep::Operator * op = nullptr;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5112);
    antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->e = unaryExpression();
     antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->e->bf; 
    setState(5127);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 562, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(5120);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::STAR: {
            setState(5114);
            match(FMLParser::STAR);
             op = OP(MULT); 
            break;
          }

          case FMLParser::DIV: {
            setState(5116);
            match(FMLParser::DIV);
             op = OP(DIV); 
            break;
          }

          case FMLParser::MOD: {
            setState(5118);
            match(FMLParser::MOD);
             op = OP(MOD); 
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(5122);
        antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->e = unaryExpression();
         antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->bf =  NEW_CODE_FLAT(op, _localctx->bf, antlrcpp::downCast<MultiplicativeExpressionContext *>(_localctx)->e->bf);  
      }
      setState(5129);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 562, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

FMLParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::UnaryExpressionContext::PLUS() {
  return getToken(FMLParser::PLUS, 0);
}

FMLParser::UnaryExpressionContext* FMLParser::UnaryExpressionContext::unaryExpression() {
  return getRuleContext<FMLParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* FMLParser::UnaryExpressionContext::MINUS() {
  return getToken(FMLParser::MINUS, 0);
}

tree::TerminalNode* FMLParser::UnaryExpressionContext::INCR() {
  return getToken(FMLParser::INCR, 0);
}

tree::TerminalNode* FMLParser::UnaryExpressionContext::DECR() {
  return getToken(FMLParser::DECR, 0);
}

tree::TerminalNode* FMLParser::UnaryExpressionContext::LNOT() {
  return getToken(FMLParser::LNOT, 0);
}

tree::TerminalNode* FMLParser::UnaryExpressionContext::BNOT() {
  return getToken(FMLParser::BNOT, 0);
}

tree::TerminalNode* FMLParser::UnaryExpressionContext::OP_POP() {
  return getToken(FMLParser::OP_POP, 0);
}

tree::TerminalNode* FMLParser::UnaryExpressionContext::OP_TOP() {
  return getToken(FMLParser::OP_TOP, 0);
}

FMLParser::Prefix_expressionContext* FMLParser::UnaryExpressionContext::prefix_expression() {
  return getRuleContext<FMLParser::Prefix_expressionContext>(0);
}

FMLParser::Expression_invokeContext* FMLParser::UnaryExpressionContext::expression_invoke() {
  return getRuleContext<FMLParser::Expression_invokeContext>(0);
}

FMLParser::Expression_activity_newContext* FMLParser::UnaryExpressionContext::expression_activity_new() {
  return getRuleContext<FMLParser::Expression_activity_newContext>(0);
}

FMLParser::Expression_comContext* FMLParser::UnaryExpressionContext::expression_com() {
  return getRuleContext<FMLParser::Expression_comContext>(0);
}

FMLParser::Expression_checksatContext* FMLParser::UnaryExpressionContext::expression_checksat() {
  return getRuleContext<FMLParser::Expression_checksatContext>(0);
}

FMLParser::Expression_quantifierContext* FMLParser::UnaryExpressionContext::expression_quantifier() {
  return getRuleContext<FMLParser::Expression_quantifierContext>(0);
}

FMLParser::Expression_iteContext* FMLParser::UnaryExpressionContext::expression_ite() {
  return getRuleContext<FMLParser::Expression_iteContext>(0);
}

FMLParser::Expression_lambdaContext* FMLParser::UnaryExpressionContext::expression_lambda() {
  return getRuleContext<FMLParser::Expression_lambdaContext>(0);
}

FMLParser::CtorExpressionContext* FMLParser::UnaryExpressionContext::ctorExpression() {
  return getRuleContext<FMLParser::CtorExpressionContext>(0);
}

FMLParser::PrimaryContext* FMLParser::UnaryExpressionContext::primary() {
  return getRuleContext<FMLParser::PrimaryContext>(0);
}

FMLParser::LiteralContext* FMLParser::UnaryExpressionContext::literal() {
  return getRuleContext<FMLParser::LiteralContext>(0);
}

FMLParser::Quote_expressionContext* FMLParser::UnaryExpressionContext::quote_expression() {
  return getRuleContext<FMLParser::Quote_expressionContext>(0);
}

FMLParser::Meta_eval_expressionContext* FMLParser::UnaryExpressionContext::meta_eval_expression() {
  return getRuleContext<FMLParser::Meta_eval_expressionContext>(0);
}

tree::TerminalNode* FMLParser::UnaryExpressionContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::UnaryExpressionContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

FMLParser::ExpressionContext* FMLParser::UnaryExpressionContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}

FMLParser::Collection_of_expressionContext* FMLParser::UnaryExpressionContext::collection_of_expression() {
  return getRuleContext<FMLParser::Collection_of_expressionContext>(0);
}


size_t FMLParser::UnaryExpressionContext::getRuleIndex() const {
  return FMLParser::RuleUnaryExpression;
}


FMLParser::UnaryExpressionContext* FMLParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 460, FMLParser::RuleUnaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5214);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::PLUS: {
        enterOuterAlt(_localctx, 1);
        setState(5130);
        match(FMLParser::PLUS);
        setState(5131);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e = unaryExpression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e->bf; 
        break;
      }

      case FMLParser::MINUS: {
        enterOuterAlt(_localctx, 2);
        setState(5134);
        match(FMLParser::MINUS);
        setState(5135);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e = unaryExpression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  new_uminus_expr(antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e->bf); 
        break;
      }

      case FMLParser::INCR: {
        enterOuterAlt(_localctx, 3);
        setState(5138);
        match(FMLParser::INCR);
        setState(5139);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e = unaryExpression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP(OP(PLUS),
        		antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e->bf, sep::ExpressionConstant::INTEGER_ONE); 
        break;
      }

      case FMLParser::DECR: {
        enterOuterAlt(_localctx, 4);
        setState(5142);
        match(FMLParser::DECR);
        setState(5143);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e = unaryExpression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP(OP(PLUS), antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e->bf,
        		sep::ExpressionConstant::INTEGER_MINUS_ONE); 
        break;
      }

      case FMLParser::LNOT: {
        enterOuterAlt(_localctx, 5);
        setState(5146);
        match(FMLParser::LNOT);
        setState(5147);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e = unaryExpression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  new_not_expr(antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e->bf); 
        break;
      }

      case FMLParser::BNOT: {
        enterOuterAlt(_localctx, 6);
        setState(5150);
        match(FMLParser::BNOT);
        setState(5151);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e = unaryExpression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  NEW_CODE1(OP(BNOT), antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e->bf); 
        break;
      }

      case FMLParser::OP_POP: {
        enterOuterAlt(_localctx, 7);
        setState(5154);
        match(FMLParser::OP_POP);
        setState(5155);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e = unaryExpression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  NEW_CODE1(OP(POP), antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e->bf); 
        break;
      }

      case FMLParser::OP_TOP: {
        enterOuterAlt(_localctx, 8);
        setState(5158);
        match(FMLParser::OP_TOP);
        setState(5159);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e = unaryExpression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  NEW_CODE1(OP(TOP), antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->e->bf); 
        break;
      }

      case FMLParser::DOLLAR_LCURLY: {
        enterOuterAlt(_localctx, 9);
        setState(5162);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->pe = prefix_expression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->pe->ac; 
        break;
      }

      case FMLParser::LPAREN_INVOKE: {
        enterOuterAlt(_localctx, 10);
        setState(5165);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->ei = expression_invoke();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->ei->ac; 
        break;
      }

      case FMLParser::T__232: {
        enterOuterAlt(_localctx, 11);
        setState(5168);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->ea = expression_activity_new();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->ea->ac; 
        break;
      }

      case FMLParser::T__255:
      case FMLParser::T__256: {
        enterOuterAlt(_localctx, 12);
        setState(5171);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->ec = expression_com();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->ec->ac; 
        break;
      }

      case FMLParser::T__260: {
        enterOuterAlt(_localctx, 13);
        setState(5174);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->ek = expression_checksat();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->ek->ac; 
        break;
      }

      case FMLParser::T__262:
      case FMLParser::T__263: {
        enterOuterAlt(_localctx, 14);
        setState(5177);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->eq = expression_quantifier();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->eq->ac; 
        break;
      }

      case FMLParser::T__264: {
        enterOuterAlt(_localctx, 15);
        setState(5180);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->et = expression_ite();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->et->ac; 
        break;
      }

      case FMLParser::T__272: {
        enterOuterAlt(_localctx, 16);
        setState(5183);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->el = expression_lambda();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->el->ac; 
        break;
      }

      case FMLParser::T__303: {
        enterOuterAlt(_localctx, 17);
        setState(5186);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->ce = ctorExpression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->ce->ctor; 
        break;
      }

      case FMLParser::COLONx2:
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 18);
        setState(5189);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->p = primary();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->p->bf; 
        setState(5195);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 563, _ctx)) {
        case 1: {
          setState(5191);
          match(FMLParser::INCR);
           antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP_AFTER(OP(PLUS), antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->p->bf,
          			sep::ExpressionConstant::INTEGER_ONE); 
          break;
        }

        case 2: {
          setState(5193);
          match(FMLParser::DECR);
           antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  NEW_STMT_ASSIGN_OP_AFTER(OP(PLUS), antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->p->bf,
          			sep::ExpressionConstant::INTEGER_MINUS_ONE); 
          break;
        }

        default:
          break;
        }
        break;
      }

      case FMLParser::T__218:
      case FMLParser::T__294:
      case FMLParser::T__295:
      case FMLParser::T__296:
      case FMLParser::T__297:
      case FMLParser::T__298:
      case FMLParser::T__299:
      case FMLParser::T__300:
      case FMLParser::T__304:
      case FMLParser::T__305:
      case FMLParser::T__306:
      case FMLParser::T__307:
      case FMLParser::T__308:
      case FMLParser::T__309:
      case FMLParser::T__310:
      case FMLParser::T__311:
      case FMLParser::T__312:
      case FMLParser::T__313:
      case FMLParser::T__314:
      case FMLParser::T__315:
      case FMLParser::T__316:
      case FMLParser::StringLiteral:
      case FMLParser::CharLiteral:
      case FMLParser::FloatLiteral:
      case FMLParser::RationalLiteral:
      case FMLParser::IntegerLiteral: {
        enterOuterAlt(_localctx, 19);
        setState(5197);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->l = literal();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->l->bf; 
        break;
      }

      case FMLParser::PERCENT_LCURLY: {
        enterOuterAlt(_localctx, 20);
        setState(5200);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->qe = quote_expression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->qe->ac; 
        break;
      }

      case FMLParser::LBRACKET_BAR: {
        enterOuterAlt(_localctx, 21);
        setState(5203);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->me = meta_eval_expression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->me->ac; 
        break;
      }

      case FMLParser::LPAREN: {
        enterOuterAlt(_localctx, 22);
        setState(5206);
        match(FMLParser::LPAREN);
        setState(5207);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->le = expression();
        setState(5208);
        match(FMLParser::RPAREN);
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->le->bf; 
        break;
      }

      case FMLParser::LCURLY:
      case FMLParser::LBRACKET: {
        enterOuterAlt(_localctx, 23);
        setState(5211);
        antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->co = collection_of_expression();
         antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->bf =  antlrcpp::downCast<UnaryExpressionContext *>(_localctx)->co->bf; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CtorExpressionContext ------------------------------------------------------------------

FMLParser::CtorExpressionContext::CtorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::CtorExpressionContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::CtorExpressionContext::GT() {
  return getToken(FMLParser::GT, 0);
}

tree::TerminalNode* FMLParser::CtorExpressionContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::CtorExpressionContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

FMLParser::Type_varContext* FMLParser::CtorExpressionContext::type_var() {
  return getRuleContext<FMLParser::Type_varContext>(0);
}

FMLParser::ExpressionContext* FMLParser::CtorExpressionContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}


size_t FMLParser::CtorExpressionContext::getRuleIndex() const {
  return FMLParser::RuleCtorExpression;
}


FMLParser::CtorExpressionContext* FMLParser::ctorExpression() {
  CtorExpressionContext *_localctx = _tracker.createInstance<CtorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 462, FMLParser::RuleCtorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5216);
    match(FMLParser::T__303);
    setState(5217);
    match(FMLParser::LT_);
    setState(5218);
    antlrcpp::downCast<CtorExpressionContext *>(_localctx)->tv = type_var();
    setState(5219);
    match(FMLParser::GT);
    setState(5220);
    match(FMLParser::LPAREN);
    setState(5221);
    antlrcpp::downCast<CtorExpressionContext *>(_localctx)->e = expression();
    setState(5222);
    match(FMLParser::RPAREN);
     antlrcpp::downCast<CtorExpressionContext *>(_localctx)->ctor =  NEW_CODE2(OP(CTOR), antlrcpp::downCast<CtorExpressionContext *>(_localctx)->tv->type, antlrcpp::downCast<CtorExpressionContext *>(_localctx)->e->bf); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Quote_expressionContext ------------------------------------------------------------------

FMLParser::Quote_expressionContext::Quote_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Quote_expressionContext::PERCENT_LCURLY() {
  return getToken(FMLParser::PERCENT_LCURLY, 0);
}

tree::TerminalNode* FMLParser::Quote_expressionContext::RCURLY_PERCENT() {
  return getToken(FMLParser::RCURLY_PERCENT, 0);
}

FMLParser::ExpressionContext* FMLParser::Quote_expressionContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}


size_t FMLParser::Quote_expressionContext::getRuleIndex() const {
  return FMLParser::RuleQuote_expression;
}


FMLParser::Quote_expressionContext* FMLParser::quote_expression() {
  Quote_expressionContext *_localctx = _tracker.createInstance<Quote_expressionContext>(_ctx, getState());
  enterRule(_localctx, 464, FMLParser::RuleQuote_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5225);
    match(FMLParser::PERCENT_LCURLY);
    setState(5226);
    antlrcpp::downCast<Quote_expressionContext *>(_localctx)->e = expression();
    setState(5227);
    match(FMLParser::RCURLY_PERCENT);
     antlrcpp::downCast<Quote_expressionContext *>(_localctx)->ac =  NEW_STMT1(OP(QUOTE), antlrcpp::downCast<Quote_expressionContext *>(_localctx)->e->bf); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Meta_eval_expressionContext ------------------------------------------------------------------

FMLParser::Meta_eval_expressionContext::Meta_eval_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Meta_eval_expressionContext::LBRACKET_BAR() {
  return getToken(FMLParser::LBRACKET_BAR, 0);
}

tree::TerminalNode* FMLParser::Meta_eval_expressionContext::BAR_RBRACKET() {
  return getToken(FMLParser::BAR_RBRACKET, 0);
}

FMLParser::ExpressionContext* FMLParser::Meta_eval_expressionContext::expression() {
  return getRuleContext<FMLParser::ExpressionContext>(0);
}


size_t FMLParser::Meta_eval_expressionContext::getRuleIndex() const {
  return FMLParser::RuleMeta_eval_expression;
}


FMLParser::Meta_eval_expressionContext* FMLParser::meta_eval_expression() {
  Meta_eval_expressionContext *_localctx = _tracker.createInstance<Meta_eval_expressionContext>(_ctx, getState());
  enterRule(_localctx, 466, FMLParser::RuleMeta_eval_expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5230);
    match(FMLParser::LBRACKET_BAR);
    setState(5231);
    antlrcpp::downCast<Meta_eval_expressionContext *>(_localctx)->e = expression();
    setState(5232);
    match(FMLParser::BAR_RBRACKET);
     antlrcpp::downCast<Meta_eval_expressionContext *>(_localctx)->ac =  NEW_STMT1(OP(META_EVAL), antlrcpp::downCast<Meta_eval_expressionContext *>(_localctx)->e->bf); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryContext ------------------------------------------------------------------

FMLParser::PrimaryContext::PrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::PrimaryContext::ID() {
  return getToken(FMLParser::ID, 0);
}

FMLParser::Primary_invokeContext* FMLParser::PrimaryContext::primary_invoke() {
  return getRuleContext<FMLParser::Primary_invokeContext>(0);
}

FMLParser::Primary_ufidContext* FMLParser::PrimaryContext::primary_ufid() {
  return getRuleContext<FMLParser::Primary_ufidContext>(0);
}

FMLParser::Primary_ufiContext* FMLParser::PrimaryContext::primary_ufi() {
  return getRuleContext<FMLParser::Primary_ufiContext>(0);
}


size_t FMLParser::PrimaryContext::getRuleIndex() const {
  return FMLParser::RulePrimary;
}


FMLParser::PrimaryContext* FMLParser::primary() {
  PrimaryContext *_localctx = _tracker.createInstance<PrimaryContext>(_ctx, getState());
  enterRule(_localctx, 468, FMLParser::RulePrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5254);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(5235);
        antlrcpp::downCast<PrimaryContext *>(_localctx)->id = match(FMLParser::ID);
        setState(5248);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 565, _ctx)) {
        case 1: {
          setState(5236);
          antlrcpp::downCast<PrimaryContext *>(_localctx)->pi = primary_invoke( antlrcpp::downCast<PrimaryContext *>(_localctx)->id->getText() );
           antlrcpp::downCast<PrimaryContext *>(_localctx)->bf =  antlrcpp::downCast<PrimaryContext *>(_localctx)->pi->bf; 
          break;
        }

        case 2: {
          setState(5239);
          antlrcpp::downCast<PrimaryContext *>(_localctx)->pu = primary_ufid( antlrcpp::downCast<PrimaryContext *>(_localctx)->id->getText() );
           antlrcpp::downCast<PrimaryContext *>(_localctx)->bf =  antlrcpp::downCast<PrimaryContext *>(_localctx)->pu->bf; 
          break;
        }

        case 3: {
          setState(5242);
          antlrcpp::downCast<PrimaryContext *>(_localctx)->p = primary_ufi( antlrcpp::downCast<PrimaryContext *>(_localctx)->id->getText() );
           antlrcpp::downCast<PrimaryContext *>(_localctx)->bf =  antlrcpp::downCast<PrimaryContext *>(_localctx)->p->bf; 
          break;
        }

        case 4: {
          setState(5245);
          antlrcpp::downCast<PrimaryContext *>(_localctx)->p = primary_ufi( antlrcpp::downCast<PrimaryContext *>(_localctx)->id->getText() );
           antlrcpp::downCast<PrimaryContext *>(_localctx)->bf =  antlrcpp::downCast<PrimaryContext *>(_localctx)->p->bf; 
          break;
        }

        default:
          break;
        }

        		if( _localctx->bf.invalid() )
        		{
        			if( (antlrcpp::downCast<PrimaryContext *>(_localctx)->bf =  sep::ParserUtil::getObjectByNameID(
        					antlrcpp::downCast<PrimaryContext *>(_localctx)->id->getText())).invalid() )
        			{
        				_localctx->bf = NEW_ID( antlrcpp::downCast<PrimaryContext *>(_localctx)->id->getText());
        			}
        		}
        	  
        break;
      }

      case FMLParser::COLONx2: {
        enterOuterAlt(_localctx, 2);
        setState(5251);
        antlrcpp::downCast<PrimaryContext *>(_localctx)->p = primary_ufi( "" );
         antlrcpp::downCast<PrimaryContext *>(_localctx)->bf =  antlrcpp::downCast<PrimaryContext *>(_localctx)->p->bf; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_ufidContext ------------------------------------------------------------------

FMLParser::Primary_ufidContext::Primary_ufidContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Primary_ufidContext::Primary_ufidContext(ParserRuleContext *parent, size_t invokingState, std::string mainId)
  : ParserRuleContext(parent, invokingState) {
  this->mainId = mainId;
}

std::vector<tree::TerminalNode *> FMLParser::Primary_ufidContext::DOT() {
  return getTokens(FMLParser::DOT);
}

tree::TerminalNode* FMLParser::Primary_ufidContext::DOT(size_t i) {
  return getToken(FMLParser::DOT, i);
}

std::vector<tree::TerminalNode *> FMLParser::Primary_ufidContext::LBRACKET() {
  return getTokens(FMLParser::LBRACKET);
}

tree::TerminalNode* FMLParser::Primary_ufidContext::LBRACKET(size_t i) {
  return getToken(FMLParser::LBRACKET, i);
}

std::vector<tree::TerminalNode *> FMLParser::Primary_ufidContext::RBRACKET() {
  return getTokens(FMLParser::RBRACKET);
}

tree::TerminalNode* FMLParser::Primary_ufidContext::RBRACKET(size_t i) {
  return getToken(FMLParser::RBRACKET, i);
}

std::vector<tree::TerminalNode *> FMLParser::Primary_ufidContext::ID() {
  return getTokens(FMLParser::ID);
}

tree::TerminalNode* FMLParser::Primary_ufidContext::ID(size_t i) {
  return getToken(FMLParser::ID, i);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Primary_ufidContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Primary_ufidContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}


size_t FMLParser::Primary_ufidContext::getRuleIndex() const {
  return FMLParser::RulePrimary_ufid;
}


FMLParser::Primary_ufidContext* FMLParser::primary_ufid(std::string mainId) {
  Primary_ufidContext *_localctx = _tracker.createInstance<Primary_ufidContext>(_ctx, getState(), mainId);
  enterRule(_localctx, 470, FMLParser::RulePrimary_ufid);

  	sep::UniFormIdentifier * ufi = new sep::UniFormIdentifier(false);
  	sep::BF bfUfi( ufi );// for automatic destruction of << UFI >> if need

  	if( (antlrcpp::downCast<Primary_ufidContext *>(_localctx)->bf =  sep::ParserUtil::getObjectByNameID(mainId)).valid() )
  	{
  		ufi->appendField( _localctx->bf );
  	}
  	else
  	{
  		ufi->appendField( mainId );
  	}

  	antlrcpp::downCast<Primary_ufidContext *>(_localctx)->bf =  bfUfi;

  	std::size_t countID = 1;
  	bool isnotEXPR  = true;

  	SAVE_RULE_BEGIN_LOCATION;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5264); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(5264);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case FMLParser::DOT: {
                  setState(5256);
                  match(FMLParser::DOT);
                  setState(5257);
                  antlrcpp::downCast<Primary_ufidContext *>(_localctx)->id = match(FMLParser::ID);
                   ufi->appendField( antlrcpp::downCast<Primary_ufidContext *>(_localctx)->id->getText() );  ++countID; 
                  break;
                }

                case FMLParser::LBRACKET: {
                  setState(5259);
                  match(FMLParser::LBRACKET);
                  setState(5260);
                  antlrcpp::downCast<Primary_ufidContext *>(_localctx)->e = expression();
                  setState(5261);
                  match(FMLParser::RBRACKET);
                   ufi->appendIndex( antlrcpp::downCast<Primary_ufidContext *>(_localctx)->e->bf );  isnotEXPR = false; 
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(5266); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 568, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);

    		if( isnotEXPR )
    		{
    			if( (antlrcpp::downCast<Primary_ufidContext *>(_localctx)->bf =  sep::ParserUtil::getvar(ufi->str(), countID)).invalid() )
    			{
    				_localctx->bf = bfUfi;
    				SET_RULE_LOCATION( ufi );
    			}
    		}
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_ufiContext ------------------------------------------------------------------

FMLParser::Primary_ufiContext::Primary_ufiContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Primary_ufiContext::Primary_ufiContext(ParserRuleContext *parent, size_t invokingState, std::string locatorId)
  : ParserRuleContext(parent, invokingState) {
  this->locatorId = locatorId;
}

tree::TerminalNode* FMLParser::Primary_ufiContext::COLONx2() {
  return getToken(FMLParser::COLONx2, 0);
}

std::vector<tree::TerminalNode *> FMLParser::Primary_ufiContext::ID() {
  return getTokens(FMLParser::ID);
}

tree::TerminalNode* FMLParser::Primary_ufiContext::ID(size_t i) {
  return getToken(FMLParser::ID, i);
}

std::vector<tree::TerminalNode *> FMLParser::Primary_ufiContext::DOT() {
  return getTokens(FMLParser::DOT);
}

tree::TerminalNode* FMLParser::Primary_ufiContext::DOT(size_t i) {
  return getToken(FMLParser::DOT, i);
}

std::vector<tree::TerminalNode *> FMLParser::Primary_ufiContext::LBRACKET() {
  return getTokens(FMLParser::LBRACKET);
}

tree::TerminalNode* FMLParser::Primary_ufiContext::LBRACKET(size_t i) {
  return getToken(FMLParser::LBRACKET, i);
}

std::vector<tree::TerminalNode *> FMLParser::Primary_ufiContext::RBRACKET() {
  return getTokens(FMLParser::RBRACKET);
}

tree::TerminalNode* FMLParser::Primary_ufiContext::RBRACKET(size_t i) {
  return getToken(FMLParser::RBRACKET, i);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Primary_ufiContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Primary_ufiContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}


size_t FMLParser::Primary_ufiContext::getRuleIndex() const {
  return FMLParser::RulePrimary_ufi;
}


FMLParser::Primary_ufiContext* FMLParser::primary_ufi(std::string locatorId) {
  Primary_ufiContext *_localctx = _tracker.createInstance<Primary_ufiContext>(_ctx, getState(), locatorId);
  enterRule(_localctx, 472, FMLParser::RulePrimary_ufi);

  	sep::UniFormIdentifier * ufi =
  			new sep::UniFormIdentifier(not locatorId.empty());
  	sep::BF bfUfi( ufi );// for automatic destruction of << UFI >> if need

  	if( not locatorId.empty() )
  	{
  		ufi->setLocator( locatorId );
  	}

  	antlrcpp::downCast<Primary_ufiContext *>(_localctx)->bf =  bfUfi;

  	std::size_t countID = 1;
  	bool isnotEXPR  = true;

  	SAVE_RULE_BEGIN_LOCATION;


#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(5270);
    match(FMLParser::COLONx2);
    setState(5271);
    antlrcpp::downCast<Primary_ufiContext *>(_localctx)->id = match(FMLParser::ID);

    		if( (antlrcpp::downCast<Primary_ufiContext *>(_localctx)->bf =  sep::ParserUtil::getObjectByNameID(antlrcpp::downCast<Primary_ufiContext *>(_localctx)->id->getText())).valid() )
    		{
    			ufi->appendField( _localctx->bf );
    		}
    		else
    		{
    			ufi->appendField( antlrcpp::downCast<Primary_ufiContext *>(_localctx)->id->getText() );
    		}
    	  
    setState(5281); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(5281);
              _errHandler->sync(this);
              switch (_input->LA(1)) {
                case FMLParser::DOT: {
                  setState(5273);
                  match(FMLParser::DOT);
                  setState(5274);
                  antlrcpp::downCast<Primary_ufiContext *>(_localctx)->id = match(FMLParser::ID);
                   ufi->appendField( antlrcpp::downCast<Primary_ufiContext *>(_localctx)->id->getText() );  ++countID; 
                  break;
                }

                case FMLParser::LBRACKET: {
                  setState(5276);
                  match(FMLParser::LBRACKET);
                  setState(5277);
                  antlrcpp::downCast<Primary_ufiContext *>(_localctx)->e = expression();
                  setState(5278);
                  match(FMLParser::RBRACKET);
                   ufi->appendIndex( antlrcpp::downCast<Primary_ufiContext *>(_localctx)->e->bf );  isnotEXPR = false; 
                  break;
                }

              default:
                throw NoViableAltException(this);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(5283); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 570, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);

    		if( isnotEXPR )
    		{
    			if( (antlrcpp::downCast<Primary_ufiContext *>(_localctx)->bf =  sep::ParserUtil::getvar(ufi->str(), countID)).invalid() )
    			{
    				_localctx->bf = bfUfi;
    				SET_RULE_LOCATION( ufi );
    			}
    		}
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Primary_invokeContext ------------------------------------------------------------------

FMLParser::Primary_invokeContext::Primary_invokeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

FMLParser::Primary_invokeContext::Primary_invokeContext(ParserRuleContext *parent, size_t invokingState, std::string mainId)
  : ParserRuleContext(parent, invokingState) {
  this->mainId = mainId;
}

tree::TerminalNode* FMLParser::Primary_invokeContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::Primary_invokeContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

std::vector<FMLParser::Labelled_argumentContext *> FMLParser::Primary_invokeContext::labelled_argument() {
  return getRuleContexts<FMLParser::Labelled_argumentContext>();
}

FMLParser::Labelled_argumentContext* FMLParser::Primary_invokeContext::labelled_argument(size_t i) {
  return getRuleContext<FMLParser::Labelled_argumentContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Primary_invokeContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Primary_invokeContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}


size_t FMLParser::Primary_invokeContext::getRuleIndex() const {
  return FMLParser::RulePrimary_invoke;
}


FMLParser::Primary_invokeContext* FMLParser::primary_invoke(std::string mainId) {
  Primary_invokeContext *_localctx = _tracker.createInstance<Primary_invokeContext>(_ctx, getState(), mainId);
  enterRule(_localctx, 474, FMLParser::RulePrimary_invoke);

  	sep::Routine * invokeRoutine = sep::Routine::newInvoke( _CPRMS_, mainId);

  	invokeRoutine->setModel( sep::ParserUtil::getvarRoutine(mainId) );

  	SAVE_RULE_BEGIN_LOCATION;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(5287);
    match(FMLParser::LPAREN);
    setState(5299);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == FMLParser::T__71 || _la == FMLParser::T__140 || ((((_la - 219) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 219)) & 18142354175180801) != 0) || ((((_la - 295) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 295)) & 5395312353598242431) != 0) || ((((_la - 363) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 363)) & 4611696532509491221) != 0) || ((((_la - 432) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 432)) & 125) != 0)) {
      setState(5288);
      antlrcpp::downCast<Primary_invokeContext *>(_localctx)->lp = labelled_argument();

      			invokeRoutine->getPropertyPart().appendVariableParameter(antlrcpp::downCast<Primary_invokeContext *>(_localctx)->lp->label, antlrcpp::downCast<Primary_invokeContext *>(_localctx)->lp->arg);
      		
      setState(5296);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == FMLParser::COMMA) {
        setState(5290);
        match(FMLParser::COMMA);
        setState(5291);
        antlrcpp::downCast<Primary_invokeContext *>(_localctx)->lp = labelled_argument();

        			invokeRoutine->getPropertyPart().appendVariableParameter(antlrcpp::downCast<Primary_invokeContext *>(_localctx)->lp->label, antlrcpp::downCast<Primary_invokeContext *>(_localctx)->lp->arg);
        		
        setState(5298);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(5301);
    match(FMLParser::RPAREN);
     antlrcpp::downCast<Primary_invokeContext *>(_localctx)->bf =  sep::Routine::invokeRoutineExpression(invokeRoutine); 
   _ctx->stop = _input->LT(-1);

    	SET_RULE_LOCATION( invokeRoutine );

  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

FMLParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::LiteralContext::IntegerLiteral() {
  return getToken(FMLParser::IntegerLiteral, 0);
}

tree::TerminalNode* FMLParser::LiteralContext::RationalLiteral() {
  return getToken(FMLParser::RationalLiteral, 0);
}

tree::TerminalNode* FMLParser::LiteralContext::FloatLiteral() {
  return getToken(FMLParser::FloatLiteral, 0);
}

tree::TerminalNode* FMLParser::LiteralContext::CharLiteral() {
  return getToken(FMLParser::CharLiteral, 0);
}

tree::TerminalNode* FMLParser::LiteralContext::StringLiteral() {
  return getToken(FMLParser::StringLiteral, 0);
}

tree::TerminalNode* FMLParser::LiteralContext::LPAREN() {
  return getToken(FMLParser::LPAREN, 0);
}

tree::TerminalNode* FMLParser::LiteralContext::RPAREN() {
  return getToken(FMLParser::RPAREN, 0);
}

tree::TerminalNode* FMLParser::LiteralContext::LT_() {
  return getToken(FMLParser::LT_, 0);
}

tree::TerminalNode* FMLParser::LiteralContext::GT() {
  return getToken(FMLParser::GT, 0);
}

FMLParser::QualifiedNameIDContext* FMLParser::LiteralContext::qualifiedNameID() {
  return getRuleContext<FMLParser::QualifiedNameIDContext>(0);
}


size_t FMLParser::LiteralContext::getRuleIndex() const {
  return FMLParser::RuleLiteral;
}


FMLParser::LiteralContext* FMLParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 476, FMLParser::RuleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5379);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::IntegerLiteral: {
        enterOuterAlt(_localctx, 1);
        setState(5304);
        antlrcpp::downCast<LiteralContext *>(_localctx)->integerliteralToken = match(FMLParser::IntegerLiteral);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  NEW_INTEGER(antlrcpp::downCast<LiteralContext *>(_localctx)->integerliteralToken->getText());   
        break;
      }

      case FMLParser::RationalLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(5306);
        antlrcpp::downCast<LiteralContext *>(_localctx)->rationalliteralToken = match(FMLParser::RationalLiteral);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  NEW_RATIONAL(antlrcpp::downCast<LiteralContext *>(_localctx)->rationalliteralToken->getText()); 
        break;
      }

      case FMLParser::FloatLiteral: {
        enterOuterAlt(_localctx, 3);
        setState(5308);
        antlrcpp::downCast<LiteralContext *>(_localctx)->floatliteralToken = match(FMLParser::FloatLiteral);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  NEW_FLOAT(antlrcpp::downCast<LiteralContext *>(_localctx)->floatliteralToken->getText());       
        break;
      }

      case FMLParser::CharLiteral: {
        enterOuterAlt(_localctx, 4);
        setState(5310);
        antlrcpp::downCast<LiteralContext *>(_localctx)->charliteralToken = match(FMLParser::CharLiteral);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  NEW_CHAR(antlrcpp::downCast<LiteralContext *>(_localctx)->charliteralToken->getText().at(0));     
        break;
      }

      case FMLParser::StringLiteral: {
        enterOuterAlt(_localctx, 5);
        setState(5312);
        antlrcpp::downCast<LiteralContext *>(_localctx)->stringliteralToken = match(FMLParser::StringLiteral);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  NEW_STRING(antlrcpp::downCast<LiteralContext *>(_localctx)->stringliteralToken->getText()); 
        break;
      }

      case FMLParser::T__304: {
        enterOuterAlt(_localctx, 6);
        setState(5314);
        match(FMLParser::T__304);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  NEW_BOOLEAN(true);  
        break;
      }

      case FMLParser::T__305: {
        enterOuterAlt(_localctx, 7);
        setState(5316);
        match(FMLParser::T__305);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  NEW_BOOLEAN(false); 
        break;
      }

      case FMLParser::T__306: {
        enterOuterAlt(_localctx, 8);
        setState(5318);
        match(FMLParser::T__306);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ParserUtil::getVarTime();      
        break;
      }

      case FMLParser::T__307: {
        enterOuterAlt(_localctx, 9);
        setState(5320);
        match(FMLParser::T__307);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ParserUtil::getVarDeltaTime(); 
        break;
      }

      case FMLParser::T__308: {
        enterOuterAlt(_localctx, 10);
        setState(5322);
        match(FMLParser::T__308);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ParserUtil::getVarDeltaTime(); 
        break;
      }

      case FMLParser::T__294:
      case FMLParser::T__295: {
        enterOuterAlt(_localctx, 11);
        setState(5324);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__294

        || _la == FMLParser::T__295)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::MACHINE_SELF; 
        setState(5338);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 574, _ctx)) {
        case 1: {
          setState(5334);
          _errHandler->sync(this);
          switch (_input->LA(1)) {
            case FMLParser::LPAREN: {
              setState(5326);
              match(FMLParser::LPAREN);
              setState(5327);
              antlrcpp::downCast<LiteralContext *>(_localctx)->id = qualifiedNameID();
              setState(5328);
              match(FMLParser::RPAREN);
              break;
            }

            case FMLParser::LT_: {
              setState(5330);
              match(FMLParser::LT_);
              setState(5331);
              antlrcpp::downCast<LiteralContext *>(_localctx)->id = qualifiedNameID();
              setState(5332);
              match(FMLParser::GT);
              break;
            }

          default:
            throw NoViableAltException(this);
          }
           antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  NEW_CODE1(OP(SELF),
          			sep::ParserUtil::getSelfExecutableMachine(antlrcpp::downCast<LiteralContext *>(_localctx)->id->s));   
          break;
        }

        default:
          break;
        }
        break;
      }

      case FMLParser::T__296:
      case FMLParser::T__297: {
        enterOuterAlt(_localctx, 12);
        setState(5340);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__296

        || _la == FMLParser::T__297)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::MACHINE_THIS;        
        break;
      }

      case FMLParser::T__218:
      case FMLParser::T__309: {
        enterOuterAlt(_localctx, 13);
        setState(5342);
        _la = _input->LA(1);
        if (!(_la == FMLParser::T__218 || _la == FMLParser::T__309)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::MACHINE_ENVIRONMENT; 
        break;
      }

      case FMLParser::T__298: {
        enterOuterAlt(_localctx, 14);
        setState(5344);
        match(FMLParser::T__298);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::MACHINE_PARENT;    
        break;
      }

      case FMLParser::T__299: {
        enterOuterAlt(_localctx, 15);
        setState(5346);
        match(FMLParser::T__299);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::MACHINE_PARENT;    
        break;
      }

      case FMLParser::T__300: {
        enterOuterAlt(_localctx, 16);
        setState(5348);
        match(FMLParser::T__300);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::MACHINE_SYSTEM;    
        break;
      }

      case FMLParser::T__310: {
        enterOuterAlt(_localctx, 17);
        setState(5350);
        match(FMLParser::T__310);
        setState(5351);
        match(FMLParser::LT_);
        setState(5364);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case FMLParser::T__58: {
            setState(5352);
            match(FMLParser::T__58);
             antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::MACHINE_NULL;      
            break;
          }

          case FMLParser::T__155: {
            setState(5354);
            match(FMLParser::T__155);
             antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::CHANNEL_NIL;       
            break;
          }

          case FMLParser::T__141: {
            setState(5356);
            match(FMLParser::T__141);
             antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::PORT_NIL;          
            break;
          }

          case FMLParser::T__142: {
            setState(5358);
            match(FMLParser::T__142);
             antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::PORT_NIL;          
            break;
          }

          case FMLParser::T__143: {
            setState(5360);
            match(FMLParser::T__143);
             antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::PORT_NIL;          
            break;
          }

          case FMLParser::T__144: {
            setState(5362);
            match(FMLParser::T__144);
             antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::BUFFER_NIL;        
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(5366);
        match(FMLParser::GT);
        break;
      }

      case FMLParser::T__311: {
        enterOuterAlt(_localctx, 18);
        setState(5367);
        match(FMLParser::T__311);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::ANY_VALUE;         
        break;
      }

      case FMLParser::T__312: {
        enterOuterAlt(_localctx, 19);
        setState(5369);
        match(FMLParser::T__312);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::DEFAULT_VALUE;     
        break;
      }

      case FMLParser::T__313: {
        enterOuterAlt(_localctx, 20);
        setState(5371);
        match(FMLParser::T__313);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::OPTIONAL_VALUE;    
        break;
      }

      case FMLParser::T__314: {
        enterOuterAlt(_localctx, 21);
        setState(5373);
        match(FMLParser::T__314);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::OMIT_VALUE;        
        break;
      }

      case FMLParser::T__315: {
        enterOuterAlt(_localctx, 22);
        setState(5375);
        match(FMLParser::T__315);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::NONE_VALUE;        
        break;
      }

      case FMLParser::T__316: {
        enterOuterAlt(_localctx, 23);
        setState(5377);
        match(FMLParser::T__316);
         antlrcpp::downCast<LiteralContext *>(_localctx)->bf =  sep::ExecutableLib::ANY_OR_NONE_VALUE; 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Collection_of_expressionContext ------------------------------------------------------------------

FMLParser::Collection_of_expressionContext::Collection_of_expressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* FMLParser::Collection_of_expressionContext::LCURLY() {
  return getToken(FMLParser::LCURLY, 0);
}

tree::TerminalNode* FMLParser::Collection_of_expressionContext::RCURLY() {
  return getToken(FMLParser::RCURLY, 0);
}

std::vector<FMLParser::ExpressionContext *> FMLParser::Collection_of_expressionContext::expression() {
  return getRuleContexts<FMLParser::ExpressionContext>();
}

FMLParser::ExpressionContext* FMLParser::Collection_of_expressionContext::expression(size_t i) {
  return getRuleContext<FMLParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> FMLParser::Collection_of_expressionContext::COMMA() {
  return getTokens(FMLParser::COMMA);
}

tree::TerminalNode* FMLParser::Collection_of_expressionContext::COMMA(size_t i) {
  return getToken(FMLParser::COMMA, i);
}

tree::TerminalNode* FMLParser::Collection_of_expressionContext::LBRACKET() {
  return getToken(FMLParser::LBRACKET, 0);
}

tree::TerminalNode* FMLParser::Collection_of_expressionContext::RBRACKET() {
  return getToken(FMLParser::RBRACKET, 0);
}


size_t FMLParser::Collection_of_expressionContext::getRuleIndex() const {
  return FMLParser::RuleCollection_of_expression;
}


FMLParser::Collection_of_expressionContext* FMLParser::collection_of_expression() {
  Collection_of_expressionContext *_localctx = _tracker.createInstance<Collection_of_expressionContext>(_ctx, getState());
  enterRule(_localctx, 478, FMLParser::RuleCollection_of_expression);

  	sep::BFVector values;

  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(5411);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case FMLParser::LCURLY: {
        enterOuterAlt(_localctx, 1);
        setState(5381);
        match(FMLParser::LCURLY);
        setState(5382);
        antlrcpp::downCast<Collection_of_expressionContext *>(_localctx)->e = expression();
         values.append(antlrcpp::downCast<Collection_of_expressionContext *>(_localctx)->e->bf); 
        setState(5390);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FMLParser::COMMA) {
          setState(5384);
          match(FMLParser::COMMA);
          setState(5385);
          antlrcpp::downCast<Collection_of_expressionContext *>(_localctx)->e = expression();
           values.append(antlrcpp::downCast<Collection_of_expressionContext *>(_localctx)->e->bf); 
          setState(5392);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(5393);
        match(FMLParser::RCURLY);
          antlrcpp::downCast<Collection_of_expressionContext *>(_localctx)->bf =  sep::BuiltinArray::create(values); 
        break;
      }

      case FMLParser::LBRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(5396);
        match(FMLParser::LBRACKET);
        setState(5397);
        antlrcpp::downCast<Collection_of_expressionContext *>(_localctx)->e = expression();
         values.append(antlrcpp::downCast<Collection_of_expressionContext *>(_localctx)->e->bf); 
        setState(5405);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == FMLParser::COMMA) {
          setState(5399);
          match(FMLParser::COMMA);
          setState(5400);
          antlrcpp::downCast<Collection_of_expressionContext *>(_localctx)->e = expression();
           values.append(antlrcpp::downCast<Collection_of_expressionContext *>(_localctx)->e->bf); 
          setState(5407);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(5408);
        match(FMLParser::RBRACKET);
         antlrcpp::downCast<Collection_of_expressionContext *>(_localctx)->bf =  sep::BuiltinArray::create(values); 
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool FMLParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 174: return avm_operatorSempred(antlrcpp::downCast<Avm_operatorContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool FMLParser::avm_operatorSempred(Avm_operatorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return  (_localctx->op = sep::OperatorManager::getOp(getCurrentToken()->getText())) != nullptr ;

  default:
    break;
  }
  return true;
}

void FMLParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  fmlParserInitialize();
#else
  ::antlr4::internal::call_once(fmlParserOnceFlag, fmlParserInitialize);
#endif
}
