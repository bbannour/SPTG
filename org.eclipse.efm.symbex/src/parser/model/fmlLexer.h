/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/lapitre_is148245/git/org.eclipse.efm-symbex/org.eclipse.efm.symbex/src/parser/model/fml.g
 *     -                            On : 2017-05-30 09:21:53
 *     -                 for the lexer : fmlLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
fmlLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pfmlLexer, which is returned from a call to fmlLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pfmlLexer are  as follows:
 *
 *  - 
 void
      pfmlLexer->T__144(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__145(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__146(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__147(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__148(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__149(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__150(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__151(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__152(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__153(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__154(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__155(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__156(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__157(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__158(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__159(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__160(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__161(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__162(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__163(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__164(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__165(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__166(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__167(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__168(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__169(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__170(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__171(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__172(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__173(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__174(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__175(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__176(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__177(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__178(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__179(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__180(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__181(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__182(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__183(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__184(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__185(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__186(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__187(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__188(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__189(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__190(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__191(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__192(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__193(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__194(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__195(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__196(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__197(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__198(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__199(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__200(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__201(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__202(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__203(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__204(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__205(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__206(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__207(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__208(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__209(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__210(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__211(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__212(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__213(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__214(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__215(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__216(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__217(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__218(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__219(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__220(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__221(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__222(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__223(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__224(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__225(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__226(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__227(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__228(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__229(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__230(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__231(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__232(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__233(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__234(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__235(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__236(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__237(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__238(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__239(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__240(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__241(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__242(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__243(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__244(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__245(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__246(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__247(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__248(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__249(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__250(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__251(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__252(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__253(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__254(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__255(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__256(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__257(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__258(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__259(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__260(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__261(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__262(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__263(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__264(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__265(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__266(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__267(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__268(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__269(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__270(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__271(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__272(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__273(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__274(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__275(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__276(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__277(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__278(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__279(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__280(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__281(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__282(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__283(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__284(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__285(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__286(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__287(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__288(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__289(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__290(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__291(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__292(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__293(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__294(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__295(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__296(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__297(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__298(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__299(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__300(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__301(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__302(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__303(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__304(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__305(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__306(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__307(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__308(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__309(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__310(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__311(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__312(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__313(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__314(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__315(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__316(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__317(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__318(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__319(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__320(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__321(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__322(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__323(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__324(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__325(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__326(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__327(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__328(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__329(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__330(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__331(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__332(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__333(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__334(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__335(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__336(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__337(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__338(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__339(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__340(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__341(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__342(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__343(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__344(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__345(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__346(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__347(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__348(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__349(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__350(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__351(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__352(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__353(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__354(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__355(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__356(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__357(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__358(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__359(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__360(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__361(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__362(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__363(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__364(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__365(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__366(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__367(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__368(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__369(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__370(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__371(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__372(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__373(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__374(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__375(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__376(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__377(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__378(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__379(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__380(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__381(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__382(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__383(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__384(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__385(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__386(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__387(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__388(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__389(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__390(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__391(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__392(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__393(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__394(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__395(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__396(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__397(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__398(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__399(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__400(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__401(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__402(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__403(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__404(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__405(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__406(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__407(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__408(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__409(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__410(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__411(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__412(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__413(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__414(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__415(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__416(pfmlLexer)
 *  - 
 void
      pfmlLexer->T__417(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_ATOMIC_SEQUENCE(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_SEQUENCE(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_SEQUENCE_SIDE(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_SEQUENCE_WEAK(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_SCHEDULE_GT(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_SCHEDULE_LT(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_SCHEDULE_XOR(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_SCHEDULE_AND_THEN(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_SCHEDULE_OR_ELSE(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_NON_DETERMINISM(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_CONCURRENCY_ASYNC(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_CONCURRENCY_AND(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_CONCURRENCY_OR(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_CONCURRENCY_INTERLEAVING(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_CONCURRENCY_PARALLEL(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_FORK(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_JOIN(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_CONCURRENCY_RDV_ASYNC(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_CONCURRENCY_RDV_AND(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_CONCURRENCY_RDV_OR(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_CONCURRENCY_RDV_INTERLEAVING(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_CONCURRENCY_RDV_PARALLEL(pfmlLexer)
 *  - 
 void
      pfmlLexer->ASSIGN(pfmlLexer)
 *  - 
 void
      pfmlLexer->ASSIGN_AFTER(pfmlLexer)
 *  - 
 void
      pfmlLexer->ASSIGN_REF(pfmlLexer)
 *  - 
 void
      pfmlLexer->ASSIGN_MACRO(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_PUSH(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_ASSIGN_TOP(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_TOP(pfmlLexer)
 *  - 
 void
      pfmlLexer->OP_POP(pfmlLexer)
 *  - 
 void
      pfmlLexer->LPAREN(pfmlLexer)
 *  - 
 void
      pfmlLexer->RPAREN(pfmlLexer)
 *  - 
 void
      pfmlLexer->LCURLY(pfmlLexer)
 *  - 
 void
      pfmlLexer->RCURLY(pfmlLexer)
 *  - 
 void
      pfmlLexer->LBRACKET(pfmlLexer)
 *  - 
 void
      pfmlLexer->RBRACKET(pfmlLexer)
 *  - 
 void
      pfmlLexer->LBRACKET_EXCEPT(pfmlLexer)
 *  - 
 void
      pfmlLexer->LPAREN_INVOKE(pfmlLexer)
 *  - 
 void
      pfmlLexer->LCURLY_INVOKE(pfmlLexer)
 *  - 
 void
      pfmlLexer->PERCENT_LPAREN_INVOKE(pfmlLexer)
 *  - 
 void
      pfmlLexer->PERCENT_LPAREN(pfmlLexer)
 *  - 
 void
      pfmlLexer->RPAREN_PERCENT(pfmlLexer)
 *  - 
 void
      pfmlLexer->STATEMENT_PROMPT(pfmlLexer)
 *  - 
 void
      pfmlLexer->DOLLAR_LCURLY(pfmlLexer)
 *  - 
 void
      pfmlLexer->RCURLY_DOLLAR(pfmlLexer)
 *  - 
 void
      pfmlLexer->PERCENT_LCURLY(pfmlLexer)
 *  - 
 void
      pfmlLexer->RCURLY_PERCENT(pfmlLexer)
 *  - 
 void
      pfmlLexer->LBRACKET_BAR(pfmlLexer)
 *  - 
 void
      pfmlLexer->BAR_RBRACKET(pfmlLexer)
 *  - 
 void
      pfmlLexer->LBRACKET_LCURLY(pfmlLexer)
 *  - 
 void
      pfmlLexer->RCURLY_RBRACKET(pfmlLexer)
 *  - 
 void
      pfmlLexer->COLON(pfmlLexer)
 *  - 
 void
      pfmlLexer->COMMA(pfmlLexer)
 *  - 
 void
      pfmlLexer->QUESTION(pfmlLexer)
 *  - 
 void
      pfmlLexer->SEMI(pfmlLexer)
 *  - 
 void
      pfmlLexer->DIESE(pfmlLexer)
 *  - 
 void
      pfmlLexer->DOLLAR(pfmlLexer)
 *  - 
 void
      pfmlLexer->DOT(pfmlLexer)
 *  - 
 void
      pfmlLexer->DOTDOT(pfmlLexer)
 *  - 
 void
      pfmlLexer->COLONx2(pfmlLexer)
 *  - 
 void
      pfmlLexer->LAND(pfmlLexer)
 *  - 
 void
      pfmlLexer->LAND_THEN(pfmlLexer)
 *  - 
 void
      pfmlLexer->LAND_ASSIGN(pfmlLexer)
 *  - 
 void
      pfmlLexer->LAND_ASSIGN_AFTER(pfmlLexer)
 *  - 
 void
      pfmlLexer->LNOT(pfmlLexer)
 *  - 
 void
      pfmlLexer->LOR(pfmlLexer)
 *  - 
 void
      pfmlLexer->LOR_ELSE(pfmlLexer)
 *  - 
 void
      pfmlLexer->LOR_ASSIGN(pfmlLexer)
 *  - 
 void
      pfmlLexer->LOR_ASSIGN_AFTER(pfmlLexer)
 *  - 
 void
      pfmlLexer->LXOR(pfmlLexer)
 *  - 
 void
      pfmlLexer->EQUAL(pfmlLexer)
 *  - 
 void
      pfmlLexer->NEQUAL(pfmlLexer)
 *  - 
 void
      pfmlLexer->SEQUAL(pfmlLexer)
 *  - 
 void
      pfmlLexer->NSEQUAL(pfmlLexer)
 *  - 
 void
      pfmlLexer->LTE(pfmlLexer)
 *  - 
 void
      pfmlLexer->LT_(pfmlLexer)
 *  - 
 void
      pfmlLexer->GTE(pfmlLexer)
 *  - 
 void
      pfmlLexer->GT(pfmlLexer)
 *  - 
 void
      pfmlLexer->PLUS(pfmlLexer)
 *  - 
 void
      pfmlLexer->PLUS_ASSIGN(pfmlLexer)
 *  - 
 void
      pfmlLexer->PLUS_ASSIGN_AFTER(pfmlLexer)
 *  - 
 void
      pfmlLexer->INCR(pfmlLexer)
 *  - 
 void
      pfmlLexer->MINUS(pfmlLexer)
 *  - 
 void
      pfmlLexer->MINUS_ASSIGN(pfmlLexer)
 *  - 
 void
      pfmlLexer->MINUS_ASSIGN_AFTER(pfmlLexer)
 *  - 
 void
      pfmlLexer->DECR(pfmlLexer)
 *  - 
 void
      pfmlLexer->STAR(pfmlLexer)
 *  - 
 void
      pfmlLexer->STAR_ASSIGN(pfmlLexer)
 *  - 
 void
      pfmlLexer->STAR_ASSIGN_AFTER(pfmlLexer)
 *  - 
 void
      pfmlLexer->DIV(pfmlLexer)
 *  - 
 void
      pfmlLexer->DIV_ASSIGN(pfmlLexer)
 *  - 
 void
      pfmlLexer->DIV_ASSIGN_AFTER(pfmlLexer)
 *  - 
 void
      pfmlLexer->MOD(pfmlLexer)
 *  - 
 void
      pfmlLexer->MOD_ASSIGN(pfmlLexer)
 *  - 
 void
      pfmlLexer->MOD_ASSIGN_AFTER(pfmlLexer)
 *  - 
 void
      pfmlLexer->RSHIFT(pfmlLexer)
 *  - 
 void
      pfmlLexer->RSHIFT_ASSIGN(pfmlLexer)
 *  - 
 void
      pfmlLexer->RSHIFT_ASSIGN_AFTER(pfmlLexer)
 *  - 
 void
      pfmlLexer->LSHIFT(pfmlLexer)
 *  - 
 void
      pfmlLexer->LSHIFT_ASSIGN(pfmlLexer)
 *  - 
 void
      pfmlLexer->LSHIFT_ASSIGN_AFTER(pfmlLexer)
 *  - 
 void
      pfmlLexer->BAND(pfmlLexer)
 *  - 
 void
      pfmlLexer->BAND_ASSIGN(pfmlLexer)
 *  - 
 void
      pfmlLexer->BAND_ASSIGN_AFTER(pfmlLexer)
 *  - 
 void
      pfmlLexer->BNOT(pfmlLexer)
 *  - 
 void
      pfmlLexer->BOR(pfmlLexer)
 *  - 
 void
      pfmlLexer->BOR_ASSIGN(pfmlLexer)
 *  - 
 void
      pfmlLexer->BOR_ASSIGN_AFTER(pfmlLexer)
 *  - 
 void
      pfmlLexer->BXOR(pfmlLexer)
 *  - 
 void
      pfmlLexer->BXOR_ASSIGN(pfmlLexer)
 *  - 
 void
      pfmlLexer->BXOR_ASSIGN_AFTER(pfmlLexer)
 *  - 
 void
      pfmlLexer->ID(pfmlLexer)
 *  - 
 void
      pfmlLexer->AT_ID(pfmlLexer)
 *  - 
 void
      pfmlLexer->StringLiteral(pfmlLexer)
 *  - 
 void
      pfmlLexer->CharLiteral(pfmlLexer)
 *  - 
 void
      pfmlLexer->NumberLiteral(pfmlLexer)
 *  - 
 void
      pfmlLexer->FloatLiteral(pfmlLexer)
 *  - 
 void
      pfmlLexer->RationalLiteral(pfmlLexer)
 *  - 
 void
      pfmlLexer->IntegerLiteral(pfmlLexer)
 *  - 
 void
      pfmlLexer->FloatTypeSuffix(pfmlLexer)
 *  - 
 void
      pfmlLexer->ImaginarySuffix(pfmlLexer)
 *  - 
 void
      pfmlLexer->IntSuffix(pfmlLexer)
 *  - 
 void
      pfmlLexer->Integer(pfmlLexer)
 *  - 
 void
      pfmlLexer->Decimal(pfmlLexer)
 *  - 
 void
      pfmlLexer->Binary(pfmlLexer)
 *  - 
 void
      pfmlLexer->Octal(pfmlLexer)
 *  - 
 void
      pfmlLexer->Hexadecimal(pfmlLexer)
 *  - 
 void
      pfmlLexer->DecimalDigit(pfmlLexer)
 *  - 
 void
      pfmlLexer->OctalDigit(pfmlLexer)
 *  - 
 void
      pfmlLexer->HexDigit(pfmlLexer)
 *  - 
 void
      pfmlLexer->DecimalExponent(pfmlLexer)
 *  - 
 void
      pfmlLexer->DecimalDigits(pfmlLexer)
 *  - 
 void
      pfmlLexer->Float(pfmlLexer)
 *  - 
 void
      pfmlLexer->EXPONENT(pfmlLexer)
 *  - 
 void
      pfmlLexer->HEX_DIGIT(pfmlLexer)
 *  - 
 void
      pfmlLexer->ESC_SEQ(pfmlLexer)
 *  - 
 void
      pfmlLexer->OCTAL_ESC(pfmlLexer)
 *  - 
 void
      pfmlLexer->UNICODE_ESC(pfmlLexer)
 *  - 
 void
      pfmlLexer->COMMENT(pfmlLexer)
 *  - 
 void
      pfmlLexer->WS(pfmlLexer)
 *  - 
 void
      pfmlLexer->Tokens(pfmlLexer)
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_fmlLexer_H
#define _fmlLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct fmlLexer_Ctx_struct fmlLexer, * pfmlLexer;






#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */


/** Context tracking structure for 
fmlLexer

 */
struct fmlLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mT__144)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__145)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__146)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__147)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__148)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__149)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__150)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__151)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__152)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__153)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__154)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__155)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__156)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__157)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__158)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__159)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__160)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__161)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__162)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__163)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__164)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__165)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__166)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__167)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__168)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__169)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__170)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__171)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__172)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__173)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__174)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__175)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__176)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__177)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__178)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__179)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__180)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__181)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__182)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__183)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__184)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__185)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__186)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__187)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__188)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__189)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__190)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__191)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__192)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__193)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__194)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__195)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__196)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__197)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__198)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__199)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__200)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__201)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__202)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__203)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__204)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__205)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__206)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__207)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__208)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__209)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__210)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__211)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__212)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__213)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__214)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__215)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__216)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__217)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__218)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__219)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__220)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__221)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__222)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__223)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__224)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__225)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__226)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__227)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__228)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__229)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__230)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__231)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__232)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__233)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__234)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__235)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__236)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__237)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__238)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__239)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__240)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__241)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__242)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__243)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__244)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__245)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__246)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__247)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__248)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__249)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__250)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__251)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__252)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__253)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__254)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__255)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__256)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__257)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__258)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__259)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__260)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__261)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__262)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__263)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__264)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__265)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__266)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__267)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__268)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__269)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__270)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__271)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__272)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__273)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__274)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__275)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__276)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__277)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__278)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__279)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__280)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__281)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__282)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__283)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__284)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__285)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__286)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__287)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__288)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__289)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__290)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__291)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__292)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__293)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__294)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__295)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__296)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__297)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__298)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__299)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__300)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__301)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__302)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__303)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__304)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__305)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__306)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__307)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__308)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__309)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__310)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__311)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__312)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__313)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__314)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__315)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__316)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__317)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__318)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__319)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__320)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__321)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__322)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__323)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__324)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__325)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__326)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__327)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__328)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__329)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__330)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__331)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__332)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__333)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__334)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__335)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__336)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__337)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__338)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__339)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__340)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__341)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__342)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__343)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__344)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__345)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__346)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__347)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__348)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__349)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__350)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__351)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__352)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__353)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__354)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__355)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__356)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__357)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__358)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__359)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__360)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__361)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__362)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__363)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__364)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__365)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__366)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__367)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__368)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__369)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__370)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__371)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__372)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__373)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__374)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__375)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__376)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__377)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__378)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__379)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__380)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__381)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__382)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__383)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__384)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__385)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__386)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__387)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__388)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__389)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__390)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__391)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__392)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__393)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__394)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__395)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__396)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__397)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__398)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__399)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__400)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__401)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__402)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__403)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__404)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__405)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__406)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__407)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__408)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__409)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__410)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__411)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__412)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__413)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__414)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__415)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__416)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mT__417)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_ATOMIC_SEQUENCE)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_SEQUENCE)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_SEQUENCE_SIDE)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_SEQUENCE_WEAK)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_SCHEDULE_GT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_SCHEDULE_LT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_SCHEDULE_XOR)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_SCHEDULE_AND_THEN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_SCHEDULE_OR_ELSE)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_NON_DETERMINISM)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_CONCURRENCY_ASYNC)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_CONCURRENCY_AND)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_CONCURRENCY_OR)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_CONCURRENCY_INTERLEAVING)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_CONCURRENCY_PARALLEL)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_FORK)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_JOIN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_CONCURRENCY_RDV_ASYNC)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_CONCURRENCY_RDV_AND)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_CONCURRENCY_RDV_OR)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_CONCURRENCY_RDV_INTERLEAVING)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_CONCURRENCY_RDV_PARALLEL)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mASSIGN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mASSIGN_AFTER)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mASSIGN_REF)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mASSIGN_MACRO)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_PUSH)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_ASSIGN_TOP)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_TOP)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOP_POP)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLPAREN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mRPAREN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLCURLY)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mRCURLY)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLBRACKET)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mRBRACKET)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLBRACKET_EXCEPT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLPAREN_INVOKE)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLCURLY_INVOKE)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mPERCENT_LPAREN_INVOKE)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mPERCENT_LPAREN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mRPAREN_PERCENT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mSTATEMENT_PROMPT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mDOLLAR_LCURLY)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mRCURLY_DOLLAR)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mPERCENT_LCURLY)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mRCURLY_PERCENT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLBRACKET_BAR)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mBAR_RBRACKET)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLBRACKET_LCURLY)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mRCURLY_RBRACKET)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mCOLON)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mQUESTION)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mSEMI)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mDIESE)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mDOLLAR)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mDOT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mDOTDOT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mCOLONx2)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLAND)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLAND_THEN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLAND_ASSIGN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLAND_ASSIGN_AFTER)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLNOT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLOR)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLOR_ELSE)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLOR_ASSIGN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLOR_ASSIGN_AFTER)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLXOR)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mEQUAL)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mNEQUAL)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mSEQUAL)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mNSEQUAL)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLTE)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLT_)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mGTE)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mGT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mPLUS_ASSIGN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mPLUS_ASSIGN_AFTER)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mINCR)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mMINUS_ASSIGN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mMINUS_ASSIGN_AFTER)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mDECR)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mSTAR)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mSTAR_ASSIGN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mSTAR_ASSIGN_AFTER)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mDIV)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mDIV_ASSIGN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mDIV_ASSIGN_AFTER)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mMOD)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mMOD_ASSIGN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mMOD_ASSIGN_AFTER)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mRSHIFT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mRSHIFT_ASSIGN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mRSHIFT_ASSIGN_AFTER)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLSHIFT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLSHIFT_ASSIGN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mLSHIFT_ASSIGN_AFTER)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mBAND)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mBAND_ASSIGN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mBAND_ASSIGN_AFTER)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mBNOT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mBOR)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mBOR_ASSIGN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mBOR_ASSIGN_AFTER)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mBXOR)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mBXOR_ASSIGN)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mBXOR_ASSIGN_AFTER)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mID)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mAT_ID)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mStringLiteral)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mCharLiteral)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mNumberLiteral)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mFloatLiteral)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mRationalLiteral)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mIntegerLiteral)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mFloatTypeSuffix)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mImaginarySuffix)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mIntSuffix)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mInteger)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mDecimal)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mBinary)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOctal)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mHexadecimal)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mDecimalDigit)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOctalDigit)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mHexDigit)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mDecimalExponent)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mDecimalDigits)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mFloat)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mEXPONENT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mHEX_DIGIT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mESC_SEQ)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mOCTAL_ESC)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mUNICODE_ESC)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mWS)	(struct fmlLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct fmlLexer_Ctx_struct * ctx);


    const char * (*getGrammarFileName)();
    void            (*reset)  (struct fmlLexer_Ctx_struct * ctx);
    void	    (*free)   (struct fmlLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pfmlLexer fmlLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pfmlLexer fmlLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__144      144
#define T__145      145
#define T__146      146
#define T__147      147
#define T__148      148
#define T__149      149
#define T__150      150
#define T__151      151
#define T__152      152
#define T__153      153
#define T__154      154
#define T__155      155
#define T__156      156
#define T__157      157
#define T__158      158
#define T__159      159
#define T__160      160
#define T__161      161
#define T__162      162
#define T__163      163
#define T__164      164
#define T__165      165
#define T__166      166
#define T__167      167
#define T__168      168
#define T__169      169
#define T__170      170
#define T__171      171
#define T__172      172
#define T__173      173
#define T__174      174
#define T__175      175
#define T__176      176
#define T__177      177
#define T__178      178
#define T__179      179
#define T__180      180
#define T__181      181
#define T__182      182
#define T__183      183
#define T__184      184
#define T__185      185
#define T__186      186
#define T__187      187
#define T__188      188
#define T__189      189
#define T__190      190
#define T__191      191
#define T__192      192
#define T__193      193
#define T__194      194
#define T__195      195
#define T__196      196
#define T__197      197
#define T__198      198
#define T__199      199
#define T__200      200
#define T__201      201
#define T__202      202
#define T__203      203
#define T__204      204
#define T__205      205
#define T__206      206
#define T__207      207
#define T__208      208
#define T__209      209
#define T__210      210
#define T__211      211
#define T__212      212
#define T__213      213
#define T__214      214
#define T__215      215
#define T__216      216
#define T__217      217
#define T__218      218
#define T__219      219
#define T__220      220
#define T__221      221
#define T__222      222
#define T__223      223
#define T__224      224
#define T__225      225
#define T__226      226
#define T__227      227
#define T__228      228
#define T__229      229
#define T__230      230
#define T__231      231
#define T__232      232
#define T__233      233
#define T__234      234
#define T__235      235
#define T__236      236
#define T__237      237
#define T__238      238
#define T__239      239
#define T__240      240
#define T__241      241
#define T__242      242
#define T__243      243
#define T__244      244
#define T__245      245
#define T__246      246
#define T__247      247
#define T__248      248
#define T__249      249
#define T__250      250
#define T__251      251
#define T__252      252
#define T__253      253
#define T__254      254
#define T__255      255
#define T__256      256
#define T__257      257
#define T__258      258
#define T__259      259
#define T__260      260
#define T__261      261
#define T__262      262
#define T__263      263
#define T__264      264
#define T__265      265
#define T__266      266
#define T__267      267
#define T__268      268
#define T__269      269
#define T__270      270
#define T__271      271
#define T__272      272
#define T__273      273
#define T__274      274
#define T__275      275
#define T__276      276
#define T__277      277
#define T__278      278
#define T__279      279
#define T__280      280
#define T__281      281
#define T__282      282
#define T__283      283
#define T__284      284
#define T__285      285
#define T__286      286
#define T__287      287
#define T__288      288
#define T__289      289
#define T__290      290
#define T__291      291
#define T__292      292
#define T__293      293
#define T__294      294
#define T__295      295
#define T__296      296
#define T__297      297
#define T__298      298
#define T__299      299
#define T__300      300
#define T__301      301
#define T__302      302
#define T__303      303
#define T__304      304
#define T__305      305
#define T__306      306
#define T__307      307
#define T__308      308
#define T__309      309
#define T__310      310
#define T__311      311
#define T__312      312
#define T__313      313
#define T__314      314
#define T__315      315
#define T__316      316
#define T__317      317
#define T__318      318
#define T__319      319
#define T__320      320
#define T__321      321
#define T__322      322
#define T__323      323
#define T__324      324
#define T__325      325
#define T__326      326
#define T__327      327
#define T__328      328
#define T__329      329
#define T__330      330
#define T__331      331
#define T__332      332
#define T__333      333
#define T__334      334
#define T__335      335
#define T__336      336
#define T__337      337
#define T__338      338
#define T__339      339
#define T__340      340
#define T__341      341
#define T__342      342
#define T__343      343
#define T__344      344
#define T__345      345
#define T__346      346
#define T__347      347
#define T__348      348
#define T__349      349
#define T__350      350
#define T__351      351
#define T__352      352
#define T__353      353
#define T__354      354
#define T__355      355
#define T__356      356
#define T__357      357
#define T__358      358
#define T__359      359
#define T__360      360
#define T__361      361
#define T__362      362
#define T__363      363
#define T__364      364
#define T__365      365
#define T__366      366
#define T__367      367
#define T__368      368
#define T__369      369
#define T__370      370
#define T__371      371
#define T__372      372
#define T__373      373
#define T__374      374
#define T__375      375
#define T__376      376
#define T__377      377
#define T__378      378
#define T__379      379
#define T__380      380
#define T__381      381
#define T__382      382
#define T__383      383
#define T__384      384
#define T__385      385
#define T__386      386
#define T__387      387
#define T__388      388
#define T__389      389
#define T__390      390
#define T__391      391
#define T__392      392
#define T__393      393
#define T__394      394
#define T__395      395
#define T__396      396
#define T__397      397
#define T__398      398
#define T__399      399
#define T__400      400
#define T__401      401
#define T__402      402
#define T__403      403
#define T__404      404
#define T__405      405
#define T__406      406
#define T__407      407
#define T__408      408
#define T__409      409
#define T__410      410
#define T__411      411
#define T__412      412
#define T__413      413
#define T__414      414
#define T__415      415
#define T__416      416
#define T__417      417
#define ASSIGN      4
#define ASSIGN_AFTER      5
#define ASSIGN_MACRO      6
#define ASSIGN_REF      7
#define AT_ID      8
#define BAND      9
#define BAND_ASSIGN      10
#define BAND_ASSIGN_AFTER      11
#define BAR_RBRACKET      12
#define BNOT      13
#define BOR      14
#define BOR_ASSIGN      15
#define BOR_ASSIGN_AFTER      16
#define BXOR      17
#define BXOR_ASSIGN      18
#define BXOR_ASSIGN_AFTER      19
#define Binary      20
#define COLON      21
#define COLONx2      22
#define COMMA      23
#define COMMENT      24
#define CharLiteral      25
#define DECR      26
#define DIESE      27
#define DIV      28
#define DIV_ASSIGN      29
#define DIV_ASSIGN_AFTER      30
#define DOLLAR      31
#define DOLLAR_LCURLY      32
#define DOT      33
#define DOTDOT      34
#define Decimal      35
#define DecimalDigit      36
#define DecimalDigits      37
#define DecimalExponent      38
#define EQUAL      39
#define ESC_SEQ      40
#define EXPONENT      41
#define Float      42
#define FloatLiteral      43
#define FloatTypeSuffix      44
#define GT      45
#define GTE      46
#define HEX_DIGIT      47
#define HexDigit      48
#define Hexadecimal      49
#define ID      50
#define INCR      51
#define ImaginarySuffix      52
#define IntSuffix      53
#define Integer      54
#define IntegerLiteral      55
#define LAND      56
#define LAND_ASSIGN      57
#define LAND_ASSIGN_AFTER      58
#define LAND_THEN      59
#define LBRACKET      60
#define LBRACKET_BAR      61
#define LBRACKET_EXCEPT      62
#define LBRACKET_LCURLY      63
#define LCURLY      64
#define LCURLY_INVOKE      65
#define LNOT      66
#define LOR      67
#define LOR_ASSIGN      68
#define LOR_ASSIGN_AFTER      69
#define LOR_ELSE      70
#define LPAREN      71
#define LPAREN_INVOKE      72
#define LSHIFT      73
#define LSHIFT_ASSIGN      74
#define LSHIFT_ASSIGN_AFTER      75
#define LTE      76
#define LT_      77
#define LXOR      78
#define MINUS      79
#define MINUS_ASSIGN      80
#define MINUS_ASSIGN_AFTER      81
#define MOD      82
#define MOD_ASSIGN      83
#define MOD_ASSIGN_AFTER      84
#define NEQUAL      85
#define NSEQUAL      86
#define NumberLiteral      87
#define OCTAL_ESC      88
#define OP_ASSIGN_TOP      89
#define OP_ATOMIC_SEQUENCE      90
#define OP_CONCURRENCY_AND      91
#define OP_CONCURRENCY_ASYNC      92
#define OP_CONCURRENCY_INTERLEAVING      93
#define OP_CONCURRENCY_OR      94
#define OP_CONCURRENCY_PARALLEL      95
#define OP_CONCURRENCY_RDV_AND      96
#define OP_CONCURRENCY_RDV_ASYNC      97
#define OP_CONCURRENCY_RDV_INTERLEAVING      98
#define OP_CONCURRENCY_RDV_OR      99
#define OP_CONCURRENCY_RDV_PARALLEL      100
#define OP_FORK      101
#define OP_JOIN      102
#define OP_NON_DETERMINISM      103
#define OP_POP      104
#define OP_PUSH      105
#define OP_SCHEDULE_AND_THEN      106
#define OP_SCHEDULE_GT      107
#define OP_SCHEDULE_LT      108
#define OP_SCHEDULE_OR_ELSE      109
#define OP_SCHEDULE_XOR      110
#define OP_SEQUENCE      111
#define OP_SEQUENCE_SIDE      112
#define OP_SEQUENCE_WEAK      113
#define OP_TOP      114
#define Octal      115
#define OctalDigit      116
#define PERCENT_LCURLY      117
#define PERCENT_LPAREN      118
#define PERCENT_LPAREN_INVOKE      119
#define PLUS      120
#define PLUS_ASSIGN      121
#define PLUS_ASSIGN_AFTER      122
#define QUESTION      123
#define RBRACKET      124
#define RCURLY      125
#define RCURLY_DOLLAR      126
#define RCURLY_PERCENT      127
#define RCURLY_RBRACKET      128
#define RPAREN      129
#define RPAREN_PERCENT      130
#define RSHIFT      131
#define RSHIFT_ASSIGN      132
#define RSHIFT_ASSIGN_AFTER      133
#define RationalLiteral      134
#define SEMI      135
#define SEQUAL      136
#define STAR      137
#define STAR_ASSIGN      138
#define STAR_ASSIGN_AFTER      139
#define STATEMENT_PROMPT      140
#define StringLiteral      141
#define UNICODE_ESC      142
#define WS      143
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for fmlLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
