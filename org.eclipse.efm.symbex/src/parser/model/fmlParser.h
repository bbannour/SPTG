/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /home/lapitre_is148245/git/org.eclipse.efm-symbex/org.eclipse.efm.symbex/src/parser/model/fml.g
 *     -                            On : 2017-05-30 09:21:52
 *     -                for the parser : fmlParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
fmlParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pfmlParser, which is returned from a call to fmlParserNew().
 *
 * The methods in pfmlParser are  as follows:
 *
 *  - 
 sep::System *
      pfmlParser->formalML(pfmlParser)
 *  - 
 void
      pfmlParser->prologue_fml(pfmlParser)
 *  - 
 void
      pfmlParser->prologue_attribute(pfmlParser)
 *  - 
 void
      pfmlParser->prologue_options(pfmlParser)
 *  - 
 sep::Modifier
      pfmlParser->modifier_declaration(pfmlParser)
 *  - 
 sep::Modifier
      pfmlParser->modifier_direction(pfmlParser)
 *  - 
 sep::Modifier
      pfmlParser->modifier_direction_text(pfmlParser)
 *  - 
 void
      pfmlParser->modifier_set_direction_strict_text(pfmlParser)
 *  - 
 sep::Modifier
      pfmlParser->modifier_direction_symbol(pfmlParser)
 *  - 
 sep::Modifier
      pfmlParser->modifier_param(pfmlParser)
 *  - 
 fmlParser_procedure_modifier_specifier_return
      pfmlParser->procedure_modifier_specifier(pfmlParser)
 *  - 
 fmlParser_executable_modifier_specifier_return
      pfmlParser->executable_modifier_specifier(pfmlParser)
 *  - 
 fmlParser_instance_modifier_specifier_return
      pfmlParser->instance_modifier_specifier(pfmlParser)
 *  - 
 fmlParser_modifier_transition_return
      pfmlParser->modifier_transition(pfmlParser)
 *  - 
 sep::Package *
      pfmlParser->def_package(pfmlParser)
 *  - 
 sep::System *
      pfmlParser->def_system(pfmlParser)
 *  - 
 fmlParser_qualifiedNameID_return
      pfmlParser->qualifiedNameID(pfmlParser)
 *  - 
 sep::avm_size_t
      pfmlParser->integer_constant(pfmlParser)
 *  - 
 sep::avm_float_t
      pfmlParser->float_constant(pfmlParser)
 *  - 
 void
      pfmlParser->section_header(pfmlParser)
 *  - 
 void
      pfmlParser->section_import(pfmlParser)
 *  - 
 void
      pfmlParser->include_package(pfmlParser)
 *  - 
 void
      pfmlParser->section_procedure(pfmlParser)
 *  - 
 sep::Machine *
      pfmlParser->def_procedure(pfmlParser)
 *  - 
 void
      pfmlParser->def_machine_parameters(pfmlParser)
 *  - 
 void
      pfmlParser->def_machine_variable_parameter_atom(pfmlParser)
 *  - 
 void
      pfmlParser->def_machine_returns(pfmlParser)
 *  - 
 void
      pfmlParser->def_machine_variable_return_atom(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_procedure(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_procedure_section(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_procedure_simplif(pfmlParser)
 *  - 
 void
      pfmlParser->section_composite_structure(pfmlParser)
 *  - 
 void
      pfmlParser->section_composite_generic(pfmlParser)
 *  - 
 void
      pfmlParser->section_machine_model(pfmlParser)
 *  - 
 void
      pfmlParser->section_machine_prototype(pfmlParser)
 *  - 
 void
      pfmlParser->section_machine_instance(pfmlParser)
 *  - 
 sep::Machine *
      pfmlParser->executable_machine(pfmlParser)
 *  - 
 sep::Machine *
      pfmlParser->executable_model_definiton(pfmlParser)
 *  - 
 sep::Machine *
      pfmlParser->executable_instance_definiton(pfmlParser)
 *  - 
 sep::Machine *
      pfmlParser->decl_instance(pfmlParser)
 *  - 
 void
      pfmlParser->def_instance_on_new_activity(pfmlParser)
 *  - 
 void
      pfmlParser->def_instance_on_new_activity_parameter(pfmlParser)
 *  - 
 sep::Operator *
      pfmlParser->op_assign_param(pfmlParser)
 *  - 
 void
      pfmlParser->def_instance_activity(pfmlParser)
 *  - 
 void
      pfmlParser->section_behavior(pfmlParser)
 *  - 
 void
      pfmlParser->def_instance_count(pfmlParser)
 *  - 
 void
      pfmlParser->def_instance_count_atom(pfmlParser)
 *  - 
 sep::Machine *
      pfmlParser->def_machine(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_machine_using_section_header_predicat(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_machine_using_section_import_predicat(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_machine_using_section_parameter_predicat(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_machine_using_section_property_predicat(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_machine_using_section_predicat(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_machine(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_machine_section(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_machine_simplif(pfmlParser)
 *  - 
 sep::Machine *
      pfmlParser->any_def_statemachine(pfmlParser)
 *  - 
 sep::Machine *
      pfmlParser->def_statemachine(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_statemachine(pfmlParser)
 *  - 
 void
      pfmlParser->section_region(pfmlParser)
 *  - 
 void
      pfmlParser->section_statemachine(pfmlParser)
 *  - 
 sep::Machine *
      pfmlParser->def_state(pfmlParser)
 *  - 
 std::string
      pfmlParser->state_kw_id(pfmlParser)
 *  - 
 std::string
      pfmlParser->state_id(pfmlParser)
 *  - 
 sep::Machine *
      pfmlParser->def_state_singleton(pfmlParser)
 *  - 
 void
      pfmlParser->executable_specifier(pfmlParser)
 *  - 
 void
      pfmlParser->executable_specifier_atom(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->instance_machine_model(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_state(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_state_section(pfmlParser)
 *  - 
 void
      pfmlParser->def_body_state_simplif(pfmlParser)
 *  - 
 void
      pfmlParser->section_transition(pfmlParser)
 *  - 
 void
      pfmlParser->def_transition(pfmlParser)
 *  - 
 sep::Transition::MOC_KIND
      pfmlParser->kind_transition(pfmlParser)
 *  - 
 sep::Transition::moc_kind_t
      pfmlParser->moc_transition_attribute(pfmlParser)
 *  - 
 void
      pfmlParser->moc_transition(pfmlParser)
 *  - 
 void
      pfmlParser->moc_transition_atom(pfmlParser)
 *  - 
 void
      pfmlParser->moe_transition(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->transition_statement(pfmlParser)
 *  - 
 void
      pfmlParser->transition_trigger(pfmlParser)
 *  - 
 void
      pfmlParser->transition_guard(pfmlParser)
 *  - 
 void
      pfmlParser->transition_timed_guard(pfmlParser)
 *  - 
 void
      pfmlParser->transition_effect(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->target_state_id(pfmlParser)
 *  - 
 std::string
      pfmlParser->target_state_kw_id(pfmlParser)
 *  - 
 void
      pfmlParser->def_state_activity(pfmlParser)
 *  - 
 void
      pfmlParser->section_header_import_parameter_property(pfmlParser)
 *  - 
 void
      pfmlParser->section_parameter(pfmlParser)
 *  - 
 void
      pfmlParser->section_property(pfmlParser)
 *  - 
 void
      pfmlParser->section_property_free_declaration(pfmlParser)
 *  - 
 void
      pfmlParser->property_declaration(pfmlParser)
 *  - 
 void
      pfmlParser->decl_property_element(pfmlParser)
 *  - 
 fmlParser_labelled_argument_return
      pfmlParser->labelled_argument(pfmlParser)
 *  - 
 void
      pfmlParser->decl_instance_machine_params(pfmlParser)
 *  - 
 void
      pfmlParser->decl_instance_machine_returns(pfmlParser)
 *  - 
 void
      pfmlParser->activity_machine_param_return(pfmlParser)
 *  - 
 void
      pfmlParser->decl_port(pfmlParser)
 *  - 
 void
      pfmlParser->decl_port_impl(pfmlParser)
 *  - 
 void
      pfmlParser->decl_signal(pfmlParser)
 *  - 
 void
      pfmlParser->decl_signal_impl(pfmlParser)
 *  - 
 void
      pfmlParser->type_param_com(pfmlParser)
 *  - 
 void
      pfmlParser->param_com_atom(pfmlParser)
 *  - 
 void
      pfmlParser->decl_buffer(pfmlParser)
 *  - 
 void
      pfmlParser->decl_buffer_impl(pfmlParser)
 *  - 
 fmlParser_def_buffer_return
      pfmlParser->def_buffer(pfmlParser)
 *  - 
 sep::avm_type_specifier_kind_t
      pfmlParser->policy_buffer(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->ref_buffer(pfmlParser)
 *  - 
 void
      pfmlParser->initial_buffer_contents(pfmlParser)
 *  - 
 void
      pfmlParser->decl_channel(pfmlParser)
 *  - 
 void
      pfmlParser->decl_channel_port(pfmlParser)
 *  - 
 void
      pfmlParser->decl_channel_var(pfmlParser)
 *  - 
 void
      pfmlParser->decl_variable(pfmlParser)
 *  - 
 void
      pfmlParser->decl_variable_time_clock_impl(pfmlParser)
 *  - 
 void
      pfmlParser->decl_variable_impl(pfmlParser)
 *  - 
 void
      pfmlParser->decl_variable_atom_impl(pfmlParser)
 *  - 
 void
      pfmlParser->decl_typed_variable_atom_impl(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->initial_value(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->type_var(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->def_type_array(pfmlParser)
 *  - 
 int
      pfmlParser->def_type_array_size(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->def_type_container(pfmlParser)
 *  - 
 sep::avm_type_specifier_kind_t
      pfmlParser->specifier_buffer(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->def_type_interval(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->base_type_var(pfmlParser)
 *  - 
 sep::TypeSpecifier
      pfmlParser->primitive_type(pfmlParser)
 *  - 
 int
      pfmlParser->bit_field_size(pfmlParser)
 *  - 
 fmlParser_string_field_size_return
      pfmlParser->string_field_size(pfmlParser)
 *  - 
 fmlParser_range_constant_return
      pfmlParser->range_constant(pfmlParser)
 *  - 
 void
      pfmlParser->on_write_var_routine_def(pfmlParser)
 *  - 
 void
      pfmlParser->var_routine_def(pfmlParser)
 *  - 
 void
      pfmlParser->routine_single_param(pfmlParser)
 *  - 
 void
      pfmlParser->def_enum(pfmlParser)
 *  - 
 void
      pfmlParser->def_enum_impl(pfmlParser)
 *  - 
 void
      pfmlParser->def_struct(pfmlParser)
 *  - 
 void
      pfmlParser->def_class_structure_impl(pfmlParser)
 *  - 
 void
      pfmlParser->def_choice(pfmlParser)
 *  - 
 void
      pfmlParser->def_choice_impl(pfmlParser)
 *  - 
 void
      pfmlParser->def_union(pfmlParser)
 *  - 
 void
      pfmlParser->def_union_impl(pfmlParser)
 *  - 
 void
      pfmlParser->def_method(pfmlParser)
 *  - 
 void
      pfmlParser->decl_parameters(pfmlParser)
 *  - 
 void
      pfmlParser->def_type(pfmlParser)
 *  - 
 void
      pfmlParser->def_type_impl(pfmlParser)
 *  - 
 void
      pfmlParser->def_type_atom_impl(pfmlParser)
 *  - 
 void
      pfmlParser->def_typedef_constraint(pfmlParser)
 *  - 
 sep::TypeSpecifier
      pfmlParser->time_type(pfmlParser)
 *  - 
 sep::TypeSpecifier
      pfmlParser->time_clock_type(pfmlParser)
 *  - 
 sep::TypeSpecifier
      pfmlParser->time_type_domain(pfmlParser)
 *  - 
 void
      pfmlParser->section_model_of_computation(pfmlParser)
 *  - 
 void
      pfmlParser->section_routine(pfmlParser)
 *  - 
 void
      pfmlParser->def_routine_model(pfmlParser)
 *  - 
 void
      pfmlParser->def_routine_model_impl(pfmlParser)
 *  - 
 void
      pfmlParser->def_routine_parameters(pfmlParser)
 *  - 
 void
      pfmlParser->def_routine_param_atom(pfmlParser)
 *  - 
 void
      pfmlParser->def_routine_returns(pfmlParser)
 *  - 
 void
      pfmlParser->def_routine_returns_atom(pfmlParser)
 *  - 
 void
      pfmlParser->section_model_of_execution(pfmlParser)
 *  - 
 void
      pfmlParser->def_moe_primitive(pfmlParser)
 *  - 
 void
      pfmlParser->def_routine_seq(pfmlParser)
 *  - 
 void
      pfmlParser->section_model_of_interaction(pfmlParser)
 *  - 
 void
      pfmlParser->com_protocol(pfmlParser)
 *  - 
 void
      pfmlParser->com_cast(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->buffer_com(pfmlParser)
 *  - 
 void
      pfmlParser->com_connect(pfmlParser)
 *  - 
 void
      pfmlParser->com_route(pfmlParser)
 *  - 
 void
      pfmlParser->com_port(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->com_port_id(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->block_statement(pfmlParser)
 *  - 
 sep::Operator *
      pfmlParser->op_block(pfmlParser)
 *  - 
 sep::Operator *
      pfmlParser->op_sequence(pfmlParser)
 *  - 
 sep::Operator *
      pfmlParser->op_scheduling(pfmlParser)
 *  - 
 sep::Operator *
      pfmlParser->op_concurrency(pfmlParser)
 *  - 
 sep::Operator *
      pfmlParser->op_invokable(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->prefix_statement(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->prefix_expression(pfmlParser)
 *  - 
 sep::Operator *
      pfmlParser->avm_operator(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_invoke_method(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_invoke(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->expression_invoke(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_activity_new(pfmlParser)
 *  - 
 void
      pfmlParser->decl_instance_dynamic_impl(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->expression_activity_new(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_prompt(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_prompt_impl(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_prompt_obs(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_prompt_obs_com(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->meta_statement(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_assign(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->lvalue(pfmlParser)
 *  - 
 void
      pfmlParser->parameters(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_com(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_com_input(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_com_output(pfmlParser)
 *  - 
 void
      pfmlParser->parameters_port(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->expression_com(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_constraint(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_guard(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_timed_guard(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_checksat(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->expression_guard(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_ite(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->expression_ite(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_iteration(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->for_assign_header(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_jump(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->expression_lambda(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->expression_status(pfmlParser)
 *  - 
 sep::Operator *
      pfmlParser->op_activity(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_activity(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_init_flow(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_invoke_routine(pfmlParser)
 *  - 
 void
      pfmlParser->invoke_routine_params(pfmlParser)
 *  - 
 void
      pfmlParser->invoke_routine_returns(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->statement_moc(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->expression(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->conditionalExpression(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->scheduleExpression(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->conditionalOrExpression(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->conditionalAndExpression(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->bitwiseOrExpression(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->bitwiseXorExpression(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->bitwiseAndExpression(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->equalityExpression(pfmlParser)
 *  - 
 sep::Operator *
      pfmlParser->equalOp(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->relationalExpression(pfmlParser)
 *  - 
 sep::Operator *
      pfmlParser->relationalOp(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->shiftExpression(pfmlParser)
 *  - 
 sep::Operator *
      pfmlParser->shiftOp(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->additiveExpression(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->multiplicativeExpression(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->unaryExpression(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->ctorExpression(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->quote_expression(pfmlParser)
 *  - 
 sep::BFCode
      pfmlParser->meta_eval_expression(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->primary(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->primary_ufid(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->primary_ufi(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->primary_invoke(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->literal(pfmlParser)
 *  - 
 sep::BF
      pfmlParser->collection_of_expression(pfmlParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_fmlParser_H
#define _fmlParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct fmlParser_Ctx_struct fmlParser, * pfmlParser;




#include <parser/model/ParserUtil.h>

#include <common/BF.h>

#include <collection/BFContainer.h>

#include <fml/common/BehavioralElement.h>
#include <fml/common/ModifierElement.h>
#include <fml/common/SpecifierElement.h>

#include <fml/executable/ExecutableLib.h>

#include <fml/expression/AvmCode.h>
#include <fml/expression/BuiltinArray.h>
#include <fml/expression/ExpressionConstant.h>
#include <fml/expression/ExpressionConstructor.h>
#include <fml/expression/StatementConstructor.h>

#include <fml/lib/IComPoint.h>

#include <fml/operator/Operator.h>
#include <fml/operator/OperatorManager.h>

#include <fml/template/TemplateFactory.h>

#include <fml/type/TypeSpecifier.h>

#include <fml/type/TypeManager.h>

#include <fml/infrastructure/Buffer.h>
#include <fml/infrastructure/Channel.h>
#include <fml/infrastructure/ComPoint.h>
#include <fml/infrastructure/ComProtocol.h>
#include <fml/infrastructure/ComRoute.h>
#include <fml/infrastructure/Connector.h>

// extern "C" and C++ template incompatibility !!!
//#include <fml/infrastructure/PropertyPart.h>

#include <fml/infrastructure/DataType.h>
#include <fml/infrastructure/Machine.h>
#include <fml/infrastructure/Package.h>
#include <fml/infrastructure/Port.h>
#include <fml/infrastructure/Routine.h>
#include <fml/infrastructure/System.h>
#include <fml/infrastructure/Transition.h>
#include <fml/infrastructure/Variable.h>

#include <fml/infrastructure/BehavioralPart.h>
#include <fml/infrastructure/CompositePart.h>
#include <fml/infrastructure/InstanceSpecifierPart.h>
#include <fml/infrastructure/InteractionPart.h>
#include <fml/infrastructure/ModelOfComputationPart.h>

// extern "C" and C++ template incompatibility !!!
//#include <fml/infrastructure/PropertyPart.h>

#include <fml/workflow/Query.h>
#include <fml/workflow/UniFormIdentifier.h>
#include <fml/workflow/WObject.h>


//void fmlDisplayRecognitionError(
//		pANTLR3_BASE_RECOGNIZER recognizer, pANTLR3_UINT8 * tokenNames);



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct fmlParser_procedure_modifier_specifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    sep::Modifier mdfr;
    sep::Specifier spcfr;
}
    fmlParser_procedure_modifier_specifier_return;



typedef struct fmlParser_executable_modifier_specifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    sep::Modifier mdfr;
    sep::Specifier spcfr;
}
    fmlParser_executable_modifier_specifier_return;



typedef struct fmlParser_instance_modifier_specifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    sep::Modifier mdfr;
    sep::Specifier spcfr;
}
    fmlParser_instance_modifier_specifier_return;



typedef struct fmlParser_modifier_transition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    sep::Modifier mdfr;
    sep::Specifier spcfr;
}
    fmlParser_modifier_transition_return;



typedef struct fmlParser_qualifiedNameID_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    std::string s;
    sep::avm_size_t nb;
}
    fmlParser_qualifiedNameID_return;



typedef struct fmlParser_labelled_argument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    std::string label;
    sep::BF arg;
}
    fmlParser_labelled_argument_return;



typedef struct fmlParser_def_buffer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    sep::avm_type_specifier_kind_t kind;
    int size;
}
    fmlParser_def_buffer_return;



typedef struct fmlParser_string_field_size_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    int min;
    int max;
}
    fmlParser_string_field_size_return;



typedef struct fmlParser_range_constant_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    int min;
    int max;
}
    fmlParser_range_constant_return;





/** Context tracking structure for 
fmlParser

 */
struct fmlParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     sep::System *
     (*formalML)	(struct fmlParser_Ctx_struct * ctx, sep::WObjectManager & aWObjectManager);

     void
     (*prologue_fml)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*prologue_attribute)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*prologue_options)	(struct fmlParser_Ctx_struct * ctx);

     sep::Modifier
     (*modifier_declaration)	(struct fmlParser_Ctx_struct * ctx);

     sep::Modifier
     (*modifier_direction)	(struct fmlParser_Ctx_struct * ctx);

     sep::Modifier
     (*modifier_direction_text)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*modifier_set_direction_strict_text)	(struct fmlParser_Ctx_struct * ctx, sep::Modifier & mdfr);

     sep::Modifier
     (*modifier_direction_symbol)	(struct fmlParser_Ctx_struct * ctx);

     sep::Modifier
     (*modifier_param)	(struct fmlParser_Ctx_struct * ctx);

     fmlParser_procedure_modifier_specifier_return
     (*procedure_modifier_specifier)	(struct fmlParser_Ctx_struct * ctx);

     fmlParser_executable_modifier_specifier_return
     (*executable_modifier_specifier)	(struct fmlParser_Ctx_struct * ctx);

     fmlParser_instance_modifier_specifier_return
     (*instance_modifier_specifier)	(struct fmlParser_Ctx_struct * ctx);

     fmlParser_modifier_transition_return
     (*modifier_transition)	(struct fmlParser_Ctx_struct * ctx);

     sep::Package *
     (*def_package)	(struct fmlParser_Ctx_struct * ctx);

     sep::System *
     (*def_system)	(struct fmlParser_Ctx_struct * ctx);

     fmlParser_qualifiedNameID_return
     (*qualifiedNameID)	(struct fmlParser_Ctx_struct * ctx);

     sep::avm_size_t
     (*integer_constant)	(struct fmlParser_Ctx_struct * ctx);

     sep::avm_float_t
     (*float_constant)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*section_header)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*section_import)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*include_package)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*section_procedure)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     sep::Machine *
     (*def_procedure)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*def_machine_parameters)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine);

     void
     (*def_machine_variable_parameter_atom)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & paramDecl, sep::Modifier mdfr, sep::avm_offset_t offset);

     void
     (*def_machine_returns)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine, sep::Modifier mdfr);

     void
     (*def_machine_variable_return_atom)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & paramDecl, sep::Modifier mdfr, sep::avm_offset_t offset);

     void
     (*def_body_procedure)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * procedure);

     void
     (*def_body_procedure_section)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * procedure);

     void
     (*def_body_procedure_simplif)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * procedure);

     void
     (*section_composite_structure)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*section_composite_generic)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*section_machine_model)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*section_machine_prototype)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*section_machine_instance)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     sep::Machine *
     (*executable_machine)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     sep::Machine *
     (*executable_model_definiton)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr);

     sep::Machine *
     (*executable_instance_definiton)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     sep::Machine *
     (*decl_instance)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr);

     void
     (*def_instance_on_new_activity)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * instance);

     void
     (*def_instance_on_new_activity_parameter)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * instance, sep::avm_size_t position);

     sep::Operator *
     (*op_assign_param)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*def_instance_activity)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * instance);

     void
     (*section_behavior)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*def_instance_count)	(struct fmlParser_Ctx_struct * ctx, sep::avm_size_t & initial, sep::avm_size_t & maximal);

     void
     (*def_instance_count_atom)	(struct fmlParser_Ctx_struct * ctx, sep::avm_size_t & initial, sep::avm_size_t & maximal);

     sep::Machine *
     (*def_machine)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr);

     void
     (*def_body_machine_using_section_header_predicat)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*def_body_machine_using_section_import_predicat)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*def_body_machine_using_section_parameter_predicat)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*def_body_machine_using_section_property_predicat)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*def_body_machine_using_section_predicat)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*def_body_machine)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine);

     void
     (*def_body_machine_section)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine);

     void
     (*def_body_machine_simplif)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine);

     sep::Machine *
     (*any_def_statemachine)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr);

     sep::Machine *
     (*def_statemachine)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr);

     void
     (*def_body_statemachine)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine);

     void
     (*section_region)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*section_statemachine)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     sep::Machine *
     (*def_state)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr);

     std::string
     (*state_kw_id)	(struct fmlParser_Ctx_struct * ctx);

     std::string
     (*state_id)	(struct fmlParser_Ctx_struct * ctx);

     sep::Machine *
     (*def_state_singleton)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr);

     void
     (*executable_specifier)	(struct fmlParser_Ctx_struct * ctx, sep::Specifier & spcfr);

     void
     (*executable_specifier_atom)	(struct fmlParser_Ctx_struct * ctx, sep::Specifier & spcfr);

     sep::BF
     (*instance_machine_model)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*def_body_state)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * state);

     void
     (*def_body_state_section)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine);

     void
     (*def_body_state_simplif)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * state);

     void
     (*section_transition)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * state);

     void
     (*def_transition)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * state, sep::Modifier mdfr, sep::Specifier spcfr);

     sep::Transition::MOC_KIND
     (*kind_transition)	(struct fmlParser_Ctx_struct * ctx);

     sep::Transition::moc_kind_t
     (*moc_transition_attribute)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*moc_transition)	(struct fmlParser_Ctx_struct * ctx, sep::Transition * trans);

     void
     (*moc_transition_atom)	(struct fmlParser_Ctx_struct * ctx, sep::Transition * trans);

     void
     (*moe_transition)	(struct fmlParser_Ctx_struct * ctx, sep::Transition * trans);

     sep::BFCode
     (*transition_statement)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*transition_trigger)	(struct fmlParser_Ctx_struct * ctx, sep::BFCode & ac);

     void
     (*transition_guard)	(struct fmlParser_Ctx_struct * ctx, sep::BFCode & ac);

     void
     (*transition_timed_guard)	(struct fmlParser_Ctx_struct * ctx, sep::BFCode & ac);

     void
     (*transition_effect)	(struct fmlParser_Ctx_struct * ctx, sep::BFCode & ac);

     sep::BF
     (*target_state_id)	(struct fmlParser_Ctx_struct * ctx);

     std::string
     (*target_state_kw_id)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*def_state_activity)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * state);

     void
     (*section_header_import_parameter_property)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*section_parameter)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*section_property)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*section_property_free_declaration)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*property_declaration)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*decl_property_element)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     fmlParser_labelled_argument_return
     (*labelled_argument)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*decl_instance_machine_params)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine);

     void
     (*decl_instance_machine_returns)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine);

     void
     (*activity_machine_param_return)	(struct fmlParser_Ctx_struct * ctx, const sep::BF & argMachine, sep::BFCode & ac);

     void
     (*decl_port)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*decl_port_impl)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr, sep::IComPoint::ENUM_IO_NATURE nature);

     void
     (*decl_signal)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*decl_signal_impl)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr, sep::IComPoint::ENUM_IO_NATURE nature);

     void
     (*type_param_com)	(struct fmlParser_Ctx_struct * ctx, sep::Port * port);

     void
     (*param_com_atom)	(struct fmlParser_Ctx_struct * ctx, sep::Port * port, sep::avm_offset_t offset);

     void
     (*decl_buffer)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*decl_buffer_impl)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     fmlParser_def_buffer_return
     (*def_buffer)	(struct fmlParser_Ctx_struct * ctx);

     sep::avm_type_specifier_kind_t
     (*policy_buffer)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*ref_buffer)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine);

     void
     (*initial_buffer_contents)	(struct fmlParser_Ctx_struct * ctx, const sep::Buffer * buffer);

     void
     (*decl_channel)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*decl_channel_port)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*decl_channel_var)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*decl_variable)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*decl_variable_time_clock_impl)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*decl_variable_impl)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*decl_variable_atom_impl)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*decl_typed_variable_atom_impl)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr, const sep::BF & type);

     sep::BF
     (*initial_value)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*type_var)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*def_type_array)	(struct fmlParser_Ctx_struct * ctx, sep::BF baseT, const std::string & tid);

     int
     (*def_type_array_size)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*def_type_container)	(struct fmlParser_Ctx_struct * ctx, const std::string & tid);

     sep::avm_type_specifier_kind_t
     (*specifier_buffer)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*def_type_interval)	(struct fmlParser_Ctx_struct * ctx, const std::string & tid);

     sep::BF
     (*base_type_var)	(struct fmlParser_Ctx_struct * ctx);

     sep::TypeSpecifier
     (*primitive_type)	(struct fmlParser_Ctx_struct * ctx);

     int
     (*bit_field_size)	(struct fmlParser_Ctx_struct * ctx);

     fmlParser_string_field_size_return
     (*string_field_size)	(struct fmlParser_Ctx_struct * ctx);

     fmlParser_range_constant_return
     (*range_constant)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*on_write_var_routine_def)	(struct fmlParser_Ctx_struct * ctx, sep::Variable * var);

     void
     (*var_routine_def)	(struct fmlParser_Ctx_struct * ctx, sep::Variable * var);

     void
     (*routine_single_param)	(struct fmlParser_Ctx_struct * ctx, sep::Routine & routine, const sep::BF & dftType);

     void
     (*def_enum)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*def_enum_impl)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr, const std::string & tid);

     void
     (*def_struct)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*def_class_structure_impl)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr, const std::string & tid);

     void
     (*def_choice)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*def_choice_impl)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr, const std::string & tid);

     void
     (*def_union)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*def_union_impl)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr, const std::string & tid);

     void
     (*def_method)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty);

     void
     (*decl_parameters)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*def_type)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*def_type_impl)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*def_type_atom_impl)	(struct fmlParser_Ctx_struct * ctx, sep::PropertyPart & declProperty, sep::Modifier mdfr);

     void
     (*def_typedef_constraint)	(struct fmlParser_Ctx_struct * ctx, sep::DataType * aliasT);

     sep::TypeSpecifier
     (*time_type)	(struct fmlParser_Ctx_struct * ctx);

     sep::TypeSpecifier
     (*time_clock_type)	(struct fmlParser_Ctx_struct * ctx);

     sep::TypeSpecifier
     (*time_type_domain)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*section_model_of_computation)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*section_routine)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*def_routine_model)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr);

     void
     (*def_routine_model_impl)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container, sep::Modifier mdfr, sep::Specifier spcfr);

     void
     (*def_routine_parameters)	(struct fmlParser_Ctx_struct * ctx, sep::Routine & routine);

     void
     (*def_routine_param_atom)	(struct fmlParser_Ctx_struct * ctx, sep::Routine & routine, sep::avm_size_t offset);

     void
     (*def_routine_returns)	(struct fmlParser_Ctx_struct * ctx, sep::Routine & routine);

     void
     (*def_routine_returns_atom)	(struct fmlParser_Ctx_struct * ctx, sep::Routine & routine, sep::avm_size_t offset);

     void
     (*section_model_of_execution)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*def_moe_primitive)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container);

     void
     (*def_routine_seq)	(struct fmlParser_Ctx_struct * ctx, sep::Routine & routine);

     void
     (*section_model_of_interaction)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine);

     void
     (*com_protocol)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine, sep::ComProtocol * cp);

     void
     (*com_cast)	(struct fmlParser_Ctx_struct * ctx, sep::ComProtocol * cp);

     sep::BF
     (*buffer_com)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine);

     void
     (*com_connect)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine, sep::InteractionPart * anInteraction);

     void
     (*com_route)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine, sep::Connector * aConnector);

     void
     (*com_port)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine, sep::ComRoute * comRoute);

     sep::BF
     (*com_port_id)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * machine, sep::Machine * comMachine);

     sep::BFCode
     (*statement)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*block_statement)	(struct fmlParser_Ctx_struct * ctx);

     sep::Operator *
     (*op_block)	(struct fmlParser_Ctx_struct * ctx);

     sep::Operator *
     (*op_sequence)	(struct fmlParser_Ctx_struct * ctx);

     sep::Operator *
     (*op_scheduling)	(struct fmlParser_Ctx_struct * ctx);

     sep::Operator *
     (*op_concurrency)	(struct fmlParser_Ctx_struct * ctx);

     sep::Operator *
     (*op_invokable)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*prefix_statement)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*prefix_expression)	(struct fmlParser_Ctx_struct * ctx);

     sep::Operator *
     (*avm_operator)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_invoke_method)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_invoke)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*expression_invoke)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_activity_new)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*decl_instance_dynamic_impl)	(struct fmlParser_Ctx_struct * ctx, sep::Machine * container, sep::Machine * ptrInstance);

     sep::BFCode
     (*expression_activity_new)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_prompt)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_prompt_impl)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_prompt_obs)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_prompt_obs_com)	(struct fmlParser_Ctx_struct * ctx, const sep::BF & varMachine);

     sep::BFCode
     (*meta_statement)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_assign)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*lvalue)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*parameters)	(struct fmlParser_Ctx_struct * ctx, const sep::BFCode & ac);

     sep::BFCode
     (*statement_com)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_com_input)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_com_output)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*parameters_port)	(struct fmlParser_Ctx_struct * ctx, sep::Port * port, const sep::BFCode & ac);

     sep::BFCode
     (*expression_com)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_constraint)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_guard)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_timed_guard)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_checksat)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*expression_guard)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_ite)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*expression_ite)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_iteration)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*for_assign_header)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_jump)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*expression_lambda)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*expression_status)	(struct fmlParser_Ctx_struct * ctx);

     sep::Operator *
     (*op_activity)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_activity)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*statement_init_flow)	(struct fmlParser_Ctx_struct * ctx, const sep::BF & flowTarget);

     sep::BFCode
     (*statement_invoke_routine)	(struct fmlParser_Ctx_struct * ctx);

     void
     (*invoke_routine_params)	(struct fmlParser_Ctx_struct * ctx, sep::Routine * invokeRoutine);

     void
     (*invoke_routine_returns)	(struct fmlParser_Ctx_struct * ctx, sep::Routine * invokeRoutine);

     sep::BFCode
     (*statement_moc)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*expression)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*conditionalExpression)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*scheduleExpression)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*conditionalOrExpression)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*conditionalAndExpression)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*bitwiseOrExpression)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*bitwiseXorExpression)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*bitwiseAndExpression)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*equalityExpression)	(struct fmlParser_Ctx_struct * ctx);

     sep::Operator *
     (*equalOp)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*relationalExpression)	(struct fmlParser_Ctx_struct * ctx);

     sep::Operator *
     (*relationalOp)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*shiftExpression)	(struct fmlParser_Ctx_struct * ctx);

     sep::Operator *
     (*shiftOp)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*additiveExpression)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*multiplicativeExpression)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*unaryExpression)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*ctorExpression)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*quote_expression)	(struct fmlParser_Ctx_struct * ctx);

     sep::BFCode
     (*meta_eval_expression)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*primary)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*primary_ufid)	(struct fmlParser_Ctx_struct * ctx, const std::string & mainId);

     sep::BF
     (*primary_ufi)	(struct fmlParser_Ctx_struct * ctx, const std::string & locatorId);

     sep::BF
     (*primary_invoke)	(struct fmlParser_Ctx_struct * ctx, const std::string & mainId);

     sep::BF
     (*literal)	(struct fmlParser_Ctx_struct * ctx);

     sep::BF
     (*collection_of_expression)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred21_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred56_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred57_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred58_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred59_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred60_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred61_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred62_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred95_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred115_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred126_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred127_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred138_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred153_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred170_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred296_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred304_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred324_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred326_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred329_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred340_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred341_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred343_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred344_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred366_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred370_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred373_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred375_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred407_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred412_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred417_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred419_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred426_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred431_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred438_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred446_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred493_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred514_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred517_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred520_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred531_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred535_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred537_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred539_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred555_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred559_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred574_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred609_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred636_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred643_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred705_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred709_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred714_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred778_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred779_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred780_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred781_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred802_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred804_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred861_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred872_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred891_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred894_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred896_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred897_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred898_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred946_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred947_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred948_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred949_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred950_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred951_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred952_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred953_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred954_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred955_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred956_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred957_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred958_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred959_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred960_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred961_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred962_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred963_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred964_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred965_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred966_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred967_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred968_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred969_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred970_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred971_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred972_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred973_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred974_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred975_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred976_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred977_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred980_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred981_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred982_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred983_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred984_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred985_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred986_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred987_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred991_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred992_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred997_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1000_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1003_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1020_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1021_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1027_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1029_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1030_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1033_fml)	(struct fmlParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1035_fml)	(struct fmlParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct fmlParser_Ctx_struct * ctx);
    void	    (*free)   (struct fmlParser_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pfmlParser fmlParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pfmlParser fmlParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__144      144
#define T__145      145
#define T__146      146
#define T__147      147
#define T__148      148
#define T__149      149
#define T__150      150
#define T__151      151
#define T__152      152
#define T__153      153
#define T__154      154
#define T__155      155
#define T__156      156
#define T__157      157
#define T__158      158
#define T__159      159
#define T__160      160
#define T__161      161
#define T__162      162
#define T__163      163
#define T__164      164
#define T__165      165
#define T__166      166
#define T__167      167
#define T__168      168
#define T__169      169
#define T__170      170
#define T__171      171
#define T__172      172
#define T__173      173
#define T__174      174
#define T__175      175
#define T__176      176
#define T__177      177
#define T__178      178
#define T__179      179
#define T__180      180
#define T__181      181
#define T__182      182
#define T__183      183
#define T__184      184
#define T__185      185
#define T__186      186
#define T__187      187
#define T__188      188
#define T__189      189
#define T__190      190
#define T__191      191
#define T__192      192
#define T__193      193
#define T__194      194
#define T__195      195
#define T__196      196
#define T__197      197
#define T__198      198
#define T__199      199
#define T__200      200
#define T__201      201
#define T__202      202
#define T__203      203
#define T__204      204
#define T__205      205
#define T__206      206
#define T__207      207
#define T__208      208
#define T__209      209
#define T__210      210
#define T__211      211
#define T__212      212
#define T__213      213
#define T__214      214
#define T__215      215
#define T__216      216
#define T__217      217
#define T__218      218
#define T__219      219
#define T__220      220
#define T__221      221
#define T__222      222
#define T__223      223
#define T__224      224
#define T__225      225
#define T__226      226
#define T__227      227
#define T__228      228
#define T__229      229
#define T__230      230
#define T__231      231
#define T__232      232
#define T__233      233
#define T__234      234
#define T__235      235
#define T__236      236
#define T__237      237
#define T__238      238
#define T__239      239
#define T__240      240
#define T__241      241
#define T__242      242
#define T__243      243
#define T__244      244
#define T__245      245
#define T__246      246
#define T__247      247
#define T__248      248
#define T__249      249
#define T__250      250
#define T__251      251
#define T__252      252
#define T__253      253
#define T__254      254
#define T__255      255
#define T__256      256
#define T__257      257
#define T__258      258
#define T__259      259
#define T__260      260
#define T__261      261
#define T__262      262
#define T__263      263
#define T__264      264
#define T__265      265
#define T__266      266
#define T__267      267
#define T__268      268
#define T__269      269
#define T__270      270
#define T__271      271
#define T__272      272
#define T__273      273
#define T__274      274
#define T__275      275
#define T__276      276
#define T__277      277
#define T__278      278
#define T__279      279
#define T__280      280
#define T__281      281
#define T__282      282
#define T__283      283
#define T__284      284
#define T__285      285
#define T__286      286
#define T__287      287
#define T__288      288
#define T__289      289
#define T__290      290
#define T__291      291
#define T__292      292
#define T__293      293
#define T__294      294
#define T__295      295
#define T__296      296
#define T__297      297
#define T__298      298
#define T__299      299
#define T__300      300
#define T__301      301
#define T__302      302
#define T__303      303
#define T__304      304
#define T__305      305
#define T__306      306
#define T__307      307
#define T__308      308
#define T__309      309
#define T__310      310
#define T__311      311
#define T__312      312
#define T__313      313
#define T__314      314
#define T__315      315
#define T__316      316
#define T__317      317
#define T__318      318
#define T__319      319
#define T__320      320
#define T__321      321
#define T__322      322
#define T__323      323
#define T__324      324
#define T__325      325
#define T__326      326
#define T__327      327
#define T__328      328
#define T__329      329
#define T__330      330
#define T__331      331
#define T__332      332
#define T__333      333
#define T__334      334
#define T__335      335
#define T__336      336
#define T__337      337
#define T__338      338
#define T__339      339
#define T__340      340
#define T__341      341
#define T__342      342
#define T__343      343
#define T__344      344
#define T__345      345
#define T__346      346
#define T__347      347
#define T__348      348
#define T__349      349
#define T__350      350
#define T__351      351
#define T__352      352
#define T__353      353
#define T__354      354
#define T__355      355
#define T__356      356
#define T__357      357
#define T__358      358
#define T__359      359
#define T__360      360
#define T__361      361
#define T__362      362
#define T__363      363
#define T__364      364
#define T__365      365
#define T__366      366
#define T__367      367
#define T__368      368
#define T__369      369
#define T__370      370
#define T__371      371
#define T__372      372
#define T__373      373
#define T__374      374
#define T__375      375
#define T__376      376
#define T__377      377
#define T__378      378
#define T__379      379
#define T__380      380
#define T__381      381
#define T__382      382
#define T__383      383
#define T__384      384
#define T__385      385
#define T__386      386
#define T__387      387
#define T__388      388
#define T__389      389
#define T__390      390
#define T__391      391
#define T__392      392
#define T__393      393
#define T__394      394
#define T__395      395
#define T__396      396
#define T__397      397
#define T__398      398
#define T__399      399
#define T__400      400
#define T__401      401
#define T__402      402
#define T__403      403
#define T__404      404
#define T__405      405
#define T__406      406
#define T__407      407
#define T__408      408
#define T__409      409
#define T__410      410
#define T__411      411
#define T__412      412
#define T__413      413
#define T__414      414
#define T__415      415
#define T__416      416
#define T__417      417
#define ASSIGN      4
#define ASSIGN_AFTER      5
#define ASSIGN_MACRO      6
#define ASSIGN_REF      7
#define AT_ID      8
#define BAND      9
#define BAND_ASSIGN      10
#define BAND_ASSIGN_AFTER      11
#define BAR_RBRACKET      12
#define BNOT      13
#define BOR      14
#define BOR_ASSIGN      15
#define BOR_ASSIGN_AFTER      16
#define BXOR      17
#define BXOR_ASSIGN      18
#define BXOR_ASSIGN_AFTER      19
#define Binary      20
#define COLON      21
#define COLONx2      22
#define COMMA      23
#define COMMENT      24
#define CharLiteral      25
#define DECR      26
#define DIESE      27
#define DIV      28
#define DIV_ASSIGN      29
#define DIV_ASSIGN_AFTER      30
#define DOLLAR      31
#define DOLLAR_LCURLY      32
#define DOT      33
#define DOTDOT      34
#define Decimal      35
#define DecimalDigit      36
#define DecimalDigits      37
#define DecimalExponent      38
#define EQUAL      39
#define ESC_SEQ      40
#define EXPONENT      41
#define Float      42
#define FloatLiteral      43
#define FloatTypeSuffix      44
#define GT      45
#define GTE      46
#define HEX_DIGIT      47
#define HexDigit      48
#define Hexadecimal      49
#define ID      50
#define INCR      51
#define ImaginarySuffix      52
#define IntSuffix      53
#define Integer      54
#define IntegerLiteral      55
#define LAND      56
#define LAND_ASSIGN      57
#define LAND_ASSIGN_AFTER      58
#define LAND_THEN      59
#define LBRACKET      60
#define LBRACKET_BAR      61
#define LBRACKET_EXCEPT      62
#define LBRACKET_LCURLY      63
#define LCURLY      64
#define LCURLY_INVOKE      65
#define LNOT      66
#define LOR      67
#define LOR_ASSIGN      68
#define LOR_ASSIGN_AFTER      69
#define LOR_ELSE      70
#define LPAREN      71
#define LPAREN_INVOKE      72
#define LSHIFT      73
#define LSHIFT_ASSIGN      74
#define LSHIFT_ASSIGN_AFTER      75
#define LTE      76
#define LT_      77
#define LXOR      78
#define MINUS      79
#define MINUS_ASSIGN      80
#define MINUS_ASSIGN_AFTER      81
#define MOD      82
#define MOD_ASSIGN      83
#define MOD_ASSIGN_AFTER      84
#define NEQUAL      85
#define NSEQUAL      86
#define NumberLiteral      87
#define OCTAL_ESC      88
#define OP_ASSIGN_TOP      89
#define OP_ATOMIC_SEQUENCE      90
#define OP_CONCURRENCY_AND      91
#define OP_CONCURRENCY_ASYNC      92
#define OP_CONCURRENCY_INTERLEAVING      93
#define OP_CONCURRENCY_OR      94
#define OP_CONCURRENCY_PARALLEL      95
#define OP_CONCURRENCY_RDV_AND      96
#define OP_CONCURRENCY_RDV_ASYNC      97
#define OP_CONCURRENCY_RDV_INTERLEAVING      98
#define OP_CONCURRENCY_RDV_OR      99
#define OP_CONCURRENCY_RDV_PARALLEL      100
#define OP_FORK      101
#define OP_JOIN      102
#define OP_NON_DETERMINISM      103
#define OP_POP      104
#define OP_PUSH      105
#define OP_SCHEDULE_AND_THEN      106
#define OP_SCHEDULE_GT      107
#define OP_SCHEDULE_LT      108
#define OP_SCHEDULE_OR_ELSE      109
#define OP_SCHEDULE_XOR      110
#define OP_SEQUENCE      111
#define OP_SEQUENCE_SIDE      112
#define OP_SEQUENCE_WEAK      113
#define OP_TOP      114
#define Octal      115
#define OctalDigit      116
#define PERCENT_LCURLY      117
#define PERCENT_LPAREN      118
#define PERCENT_LPAREN_INVOKE      119
#define PLUS      120
#define PLUS_ASSIGN      121
#define PLUS_ASSIGN_AFTER      122
#define QUESTION      123
#define RBRACKET      124
#define RCURLY      125
#define RCURLY_DOLLAR      126
#define RCURLY_PERCENT      127
#define RCURLY_RBRACKET      128
#define RPAREN      129
#define RPAREN_PERCENT      130
#define RSHIFT      131
#define RSHIFT_ASSIGN      132
#define RSHIFT_ASSIGN_AFTER      133
#define RationalLiteral      134
#define SEMI      135
#define SEQUAL      136
#define STAR      137
#define STAR_ASSIGN      138
#define STAR_ASSIGN_AFTER      139
#define STATEMENT_PROMPT      140
#define StringLiteral      141
#define UNICODE_ESC      142
#define WS      143
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for fmlParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
