{
	"manifest": {
		"version": 0.1,
		"description": "Generated testcases definition in JSON Format using SMT formulas, types, ...",
		"service": "Testcase Specification (ready for the Z3 SMT solver)",
		"generatedDate": "Wed Sep 24 12:14:19 2025"
	},

	"SUT": {
		"output_ports": [
			{
				"name": "Out"
			}
		],
		"input_ports": [
			{
				"name": "In"
			}
		],
		"uncontrollable_input_ports": [
		]
	},

	"TESTCASE": {
		"variables": [
			{
				"name": "TM",
				"type": "Real"
			},
			{
				"name": "cl",
				"type": "Real"
			},
			{
				"name": "z_2",
				"type": "Real"
			},
			{
				"name": "z_1",
				"type": "Real"
			}
		],

		"states": [
			{
				"name": "ec_2",
				"sut_state": "ec_2",
				"time_var": "z_1",
				"transitions": [
					{
						"name": "tr_R1_In",

						"timed_guard": "(declare-const z_1 Real)(assert (<= 0 z_1))(declare-const cl Real)(assert (<= 0 cl))(declare-const TM Real)(assert (< 0 TM))(assert  (and (= z_1 cl) (< cl TM) ))",

						"guard": "(declare-const z_2 Real)(assert (<= 0 z_2))(assert  (exists ( (z_2 Real) ) (and (<= 0 z_2)  (<= z_2 5) ) ))",

						"action": {
							"nature": "STIMULATION",
							"port": "In"
						},
						"next": "ec_3"
					},
					{
						"name": "tr_R10b_Out",

						"timed_guard": "(declare-const z_1 Real)(assert (<= 0 z_1))(declare-const cl Real)(assert (<= 0 cl))(declare-const TM Real)(assert (< 0 TM))(assert  (and (= z_1 cl) (< cl TM) ))",

						"guard": "(assert  true)",

						"action": {
							"nature": "OBSERVATION",
							"port": "Out"
						},
						"verdict": "FAIL_OUTPUT"
					},
					{
						"name": "tr_R9_quiescence",

						"timed_guard": "(declare-const z_1 Real)(assert (<= 0 z_1))(declare-const cl Real)(assert (<= 0 cl))(declare-const TM Real)(assert (< 0 TM))(assert  (and (= z_1 cl) (>= cl TM) ))",

						"guard": "(assert  true)",

						"action": {
							"nature": "QUIESCENCE",
							"port": "Quiescence"
						},
						"verdict": "INCONCLUSIVE_DURATION"
					},
					{
						"name": "tr_R11_unspecifiedQuiescence",

						"timed_guard": "(declare-const z_1 Real)(assert (<= 0 z_1))(declare-const cl Real)(assert (<= 0 cl))(declare-const TM Real)(assert (< 0 TM))(assert  (and (= z_1 cl) (>= cl TM) ))",

						"guard": "(assert  false)",

						"action": {
							"nature": "QUIESCENCE",
							"port": "Quiescence"
						},
						"verdict": "FAIL_DURATION"
					}
				]
			},
			{
				"name": "ec_3",
				"sut_state": "ec_3",
				"time_var": "z_2",
				"transitions": [
					{
						"name": "tr_R4_PASS_Out",

						"timed_guard": "(declare-const z_2 Real)(assert (<= 0 z_2))(declare-const cl Real)(assert (<= 0 cl))(declare-const TM Real)(assert (< 0 TM))(assert  (and (= z_2 cl) (< cl TM) ))",

						"guard": "(declare-const z_2 Real)(assert (<= 0 z_2))(assert  (<= z_2 5))",

						"action": {
							"nature": "OBSERVATION",
							"port": "Out"
						},
						"verdict": "PASS"
					},
					{
						"name": "tr_R10b_Out",

						"timed_guard": "(declare-const z_2 Real)(assert (<= 0 z_2))(declare-const cl Real)(assert (<= 0 cl))(declare-const TM Real)(assert (< 0 TM))(assert  (and (= z_2 cl) (< cl TM) ))",

						"guard": "(assert  true)",

						"action": {
							"nature": "OBSERVATION",
							"port": "Out"
						},
						"verdict": "FAIL_OUTPUT"
					},
					{
						"name": "tr_R9_quiescence",

						"timed_guard": "(declare-const z_2 Real)(assert (<= 0 z_2))(declare-const cl Real)(assert (<= 0 cl))(declare-const TM Real)(assert (< 0 TM))(assert  (and (= z_2 cl) (>= cl TM) ))",

						"guard": "(declare-const z_2 Real)(assert (<= 0 z_2))(assert  (or (exists ( (z Real) ) (and (<= 0 z)  (and (< z_2 z) (<= z 5) ) ) ) (forall ( (z_2 Real) ) (=> (<= 0 z_2)  (> z_2 5) ) ) ))",

						"action": {
							"nature": "QUIESCENCE",
							"port": "Quiescence"
						},
						"verdict": "INCONCLUSIVE_DURATION"
					},
					{
						"name": "tr_R11_unspecifiedQuiescence",

						"timed_guard": "(declare-const z_2 Real)(assert (<= 0 z_2))(declare-const cl Real)(assert (<= 0 cl))(declare-const TM Real)(assert (< 0 TM))(assert  (and (= z_2 cl) (>= cl TM) ))",

						"guard": "(declare-const z_2 Real)(assert (<= 0 z_2))(assert  (and (not (exists ( (z Real) ) (and (<= 0 z)  (and (< z_2 z) (<= z 5) ) ) ) ) (not (forall ( (z_2 Real) ) (=> (<= 0 z_2)  (> z_2 5) ) ) ) ))",

						"action": {
							"nature": "QUIESCENCE",
							"port": "Quiescence"
						},
						"verdict": "FAIL_DURATION"
					}
				]
			}
		]

	}
}